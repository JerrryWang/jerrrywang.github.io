<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>loguru日志模块的使用</title>
      <link href="/2022/07/13/Python/%E6%A8%A1%E5%9D%97/loguru%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86/"/>
      <url>/2022/07/13/Python/%E6%A8%A1%E5%9D%97/loguru%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><blockquote><p><strong>pip install loguru</strong></p></blockquote><h1 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> loguru</span><br><span class="line"></span><br><span class="line">loguru.logger.info(<span class="string">&#x27;info&#x27;</span>)</span><br><span class="line">loguru.logger.debug(<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">loguru.logger.error(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">loguru.logger.warning(<span class="string">&#x27;warning&#x27;</span>)</span><br></pre></td></tr></table></figure><p>默认的输出格式是包含【时间、级别、模块名、行号以及日志信息】，不需要手动创建 logger ，直接使用即可，另外其输出还是彩色的，看起来会更加友好。</p><h1 id="保留日志文件"><a href="#保留日志文件" class="headerlink" title="保留日志文件"></a>保留日志文件</h1><p>一般情况，我们都需要将日志输出保存到文件中，loguru直接通过 add（） 方法，就可以配置一个日志文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> loguru</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保留日志文件</span></span><br><span class="line">loguru.logger.add(<span class="string">&quot;interface_log_&#123;time&#125;.log&quot;</span>,</span><br><span class="line">                  rotation=<span class="string">&quot;500MB&quot;</span>,</span><br><span class="line">                  encoding=<span class="string">&quot;utf-8&quot;</span>,</span><br><span class="line">                  enqueue=<span class="literal">True</span>,</span><br><span class="line">                  compression=<span class="string">&quot;zip&quot;</span>,</span><br><span class="line">                  retention=<span class="string">&quot;10 days&quot;</span>)</span><br><span class="line">loguru.logger.info(<span class="string">&#x27;info&#x27;</span>)</span><br><span class="line">loguru.logger.debug(<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">loguru.logger.error(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">loguru.logger.warning(<span class="string">&#x27;warning&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li><p>第一个参数是保存日志信息的文件路径，像我写的后缀多了个 {time} ，就是获取当前时间节点，这样就会自动创建新的日志;这个time应该是库里自带的变量，如果你想自己定义时间也可以的哦，具体可以看看下面封装类的实现形式！</p></li><li><p>当你需要输出中文日志的时候，请加上 encoding=“utf-8” ，避免出现乱码</p></li><li><p>enqueue=True 代表异步写入，官方的大概意思是：在多进程同时往日志文件写日志的时候使用队列达到异步功效</p></li><li><p>旋转</p><p>可以理解成日志的创建时机，可以有多种写法</p><ul><li>rotation=“500 MB” ：当日志文件达到500MB时就会重新生成一个文件</li><li>rotation=“12：00” ：每天12点就会创建新的文件、</li><li>rotation=“1 week” ：每隔一周创建一个log</li></ul></li><li><p>retention 配置日志的最长保留时间，官方例子： “1 week， 3 days”、“2 month”</p></li><li><p>compression 配置文件的压缩格式，可以配置常见的格式 zip、tar、gz、tar.gz 等</p></li></ul><h1 id="loguru字符串输出"><a href="#loguru字符串输出" class="headerlink" title="loguru字符串输出"></a>loguru字符串输出</h1><p>loguru还提供了字符串格式化输出日志的功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">loguru.logger.info(<span class="string">&#x27;If you are using Python &#123;&#125;, prefer &#123;feature&#125; of course!&#x27;</span>, <span class="number">3.6</span>, feature=<span class="string">&#x27;f-strings&#x27;</span>)</span><br><span class="line">n1 = <span class="string">&quot;cool&quot;</span></span><br><span class="line">n2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">loguru.logger.info(<span class="string">f&#x27;If you are using Python <span class="subst">&#123;n1&#125;</span>, prefer <span class="subst">&#123;n2&#125;</span> of course!&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="loguru封装类"><a href="#loguru封装类" class="headerlink" title="loguru封装类"></a>loguru封装类</h1><ul><li>日志输出路径：你的项目路径下的log文件夹下</li><li>注意：这个是工具类，需要放在项目路径下的util文件夹之类的，不能直接放项目路径下</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time    : 2021/8/25 23:10</span></span><br><span class="line"><span class="comment"># @Project : pythontest</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">操作日志记录</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"></span><br><span class="line">project_path = Path.cwd().parent</span><br><span class="line">log_path = Path(project_path, <span class="string">&quot;log&quot;</span>)</span><br><span class="line">t = time.strftime(<span class="string">&quot;%Y_%m_%d&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Loggings</span>:</span><br><span class="line">    __instance = <span class="literal">None</span></span><br><span class="line">    logger.add(<span class="string">f&quot;<span class="subst">&#123;log_path&#125;</span>/interface_log_<span class="subst">&#123;t&#125;</span>.log&quot;</span>, rotation=<span class="string">&quot;500MB&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>, enqueue=<span class="literal">True</span>,</span><br><span class="line">               retention=<span class="string">&quot;10 days&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> cls.__instance:</span><br><span class="line">            cls.__instance = <span class="built_in">super</span>(Loggings, cls).__new__(cls, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cls.__instance</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">info</span>(<span class="params">self, msg</span>):</span><br><span class="line">        <span class="keyword">return</span> logger.info(msg)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">self, msg</span>):</span><br><span class="line">        <span class="keyword">return</span> logger.debug(msg)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">warning</span>(<span class="params">self, msg</span>):</span><br><span class="line">        <span class="keyword">return</span> logger.warning(msg)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">error</span>(<span class="params">self, msg</span>):</span><br><span class="line">        <span class="keyword">return</span> logger.error(msg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">loggings = Loggings()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    loggings.info(<span class="string">&quot;中文test&quot;</span>)</span><br><span class="line">    loggings.debug(<span class="string">&quot;中文test&quot;</span>)</span><br><span class="line">    loggings.warning(<span class="string">&quot;中文test&quot;</span>)</span><br><span class="line">    loggings.error(<span class="string">&quot;中文test&quot;</span>)</span><br><span class="line"></span><br><span class="line">    logger.info(<span class="string">&#x27;If you are using Python &#123;&#125;, prefer &#123;feature&#125; of course!&#x27;</span>, <span class="number">3.6</span>, feature=<span class="string">&#x27;f-strings&#x27;</span>)</span><br><span class="line">    n1 = <span class="string">&quot;cool&quot;</span></span><br><span class="line">    n2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">    logger.info(<span class="string">f&#x27;If you are using Python <span class="subst">&#123;n1&#125;</span>, prefer <span class="subst">&#123;n2&#125;</span> of course!&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 模块 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tarfile压缩模块的使用</title>
      <link href="/2022/07/13/Python/%E6%A8%A1%E5%9D%97/tarfile%E6%A8%A1%E5%9D%97/"/>
      <url>/2022/07/13/Python/%E6%A8%A1%E5%9D%97/tarfile%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文链接：<a href="https://www.liujiangblog.com/course/python/63">刘江的博客教程</a></p></blockquote><hr><p>既然有压缩模块zipfile，那有一个归档模块tarfile也是很自然的。tarfile模块用于解包和打包文件，包括被<code>gzip</code>，<code>bz2</code>或<code>lzma</code>压缩后的打包文件。如果是<code>.zip</code>类型的文件，建议使用zipfile模块，更高级的功能请使用shutil模块。</p><h2 id="定义的类和异常"><a href="#定义的类和异常" class="headerlink" title="定义的类和异常"></a>定义的类和异常</h2><p><strong>tarfile.open(name=None, mode=’r’, fileobj=None, bufsize=10240, `\</strong>kwargs`)**</p><p>返回一个TarFile类型的对象。本质上就是打开一个文件对象。Python随处可见这种文件对象类型的设计，你很容易就明白，不是吗？</p><p><code>name</code>是文件名或路径。</p><p><code>bufsize</code>用于指定数据块的大小，默认为20*512字节。</p><p><code>mode</code>是打开模式，一个类似<code>filemode[:compression]</code>格式的字符串，可以有下表所示的组合，默认为“r”。</p><div class="table-container"><table><thead><tr><th>模式</th><th>说明</th></tr></thead><tbody><tr><td>‘r’or’r:*’</td><td>自动解压并打开文件（推荐模式）</td></tr><tr><td>‘r:’</td><td>只打开文件不解压</td></tr><tr><td>‘r:gz’</td><td>采用gzip格式解压并打开文件</td></tr><tr><td>‘r:bz2’</td><td>采用bz2格式解压并打开文件</td></tr><tr><td>‘r:xz’</td><td>采用lzma格式解压并打开文件</td></tr><tr><td>‘x’or’x:’</td><td>仅创建打包文件，不压缩</td></tr><tr><td>‘x:gz’</td><td>采用gzip方式压缩并打包文件</td></tr><tr><td>‘x:bz2’</td><td>采用bzip2方式压缩并打包文件</td></tr><tr><td>‘x:xz’</td><td>采用lzma方式压缩并打包文件</td></tr><tr><td>‘a’or’a:’</td><td>打开文件，并以不压缩的方式追加内容。如果文件不存在，则新建</td></tr><tr><td>‘w’or’w:’</td><td>以不压缩的方式写入</td></tr><tr><td>‘w:gz’</td><td>以gzip的方式压缩并写入</td></tr><tr><td>‘w:bz2’</td><td>以bzip2的方式压缩并写入</td></tr><tr><td>‘w:xz’</td><td>以lzma的方式压缩并写入</td></tr><tr><td><code>注意</code></td><td>不支持’a:gz’, ‘a:bz2’和’a:xz’的模式</td></tr></tbody></table></div><p>如果当前模式不能正常打开文件用于读取，将抛出<code>ReadError</code>异常，这种情况下，请使用“r”模式。如果指定的压缩方式不支持，将抛出<code>CompressionError</code>异常。</p><p>在<code>w:gz</code>,<code>r:gz</code>,<code>w:bz2</code>,<code>r:bz2</code>,<code>x:gz</code>,<code>x:bz2</code>模式下，<code>tarfile.open()</code>方法额外接受一个压缩等级参数<code>compresslevel</code>，默认值为9。</p><p><strong>class tarfile.TarFile</strong></p><p>用于读写<code>tarfile</code>文件的类。不要直接使用这个类，请使用<code>tarfile.open()</code>方法。</p><p><strong>tarfile.is_tarfile(name)</strong></p><p>判断一个文件是否打包文件类型。</p><p><strong>exception tarfile.TarError</strong></p><p>tarfile模块所有异常类的基类</p><p><strong>exception tarfile.ReadError</strong></p><p>读异常</p><p><strong>exception tarfile.CompressionError</strong></p><p>压缩异常</p><p><strong>exception tarfile.StreamError</strong></p><p>流异常</p><p><strong>exception tarfile.ExtractError</strong></p><p>解压异常</p><p><strong>exception tarfile.HeaderError</strong></p><p>头部异常</p><p><strong>tarfile.ENCODING</strong></p><p>tarfile的编码方式。在windows系统中，字符编码为utf-8。在其它系统中为<code>sys.getfilesystemencoding()</code>方法的返回值。</p><h2 id="TarFile对象"><a href="#TarFile对象" class="headerlink" title="TarFile对象"></a>TarFile对象</h2><p>该对象提供了访问打包文件的接口。打包文件本质上是数据块的序列。包中的每个文件成员都是由头部块和数据块组成的。在包中，文件有可能重复。<strong>包里的每个文件都是一个TarInfo对象。所以遍历一个TarFile对象，就是遍历一个TarInfo对象的集合</strong>，这一点要搞清楚。</p><p>TarFile对象同样可以使用with语句进行上下文管理。</p><p><strong>class tarfile.TarFile(name=None, mode=’r’, fileobj=None, format=DEFAULT_FORMAT, tarinfo=TarInfo, dereference=False, ignore_zeros=False, encoding=ENCODING, errors=’surrogateescape’, pax_headers=None, debug=0, errorlevel=0)</strong></p><p>TarFile类</p><p><strong>TarFile.getmember(name)</strong></p><p>获取某个成员的信息</p><p><strong>TarFile.getmembers()</strong></p><p>获取包内所有成员的信息</p><p><strong>TarFile.getnames()</strong></p><p>获取包内所有成员的名字</p><p><strong>TarFile.list(verbose=True, *, members=None)</strong></p><p>列表显示包内成员信息</p><p><strong>TarFile.next()</strong></p><p>显示下一个文件的信息</p><p><strong>TarFile.extractall(path=”.”, members=None, *, numeric_owner=False)</strong></p><p>解包所有文件到当前目录，或path指定的目录。警告：解包文件之前一定要确保安全，防止覆盖本地或上级目录等恶意行为。</p><p><strong>TarFile.extract(member, path=””, set_attrs=True, *, numeric_owner=False)</strong></p><p>解包指定文件</p><p><strong>TarFile.extractfile(member)</strong></p><p>同上</p><p><strong>TarFile.add(name, arcname=None, recursive=True, exclude=None, *, filter=None)</strong></p><p>将指定文件加入包内。<code>arcname</code>参数用于变换路径和文件名。默认情况下，文件夹会被递归的加入包内，除非<code>recursive</code>参数设为<code>False</code>。<code>filter</code>参数指向一个方法，该方法用来过滤哪些文件不会被打入包内，不被打包的就返回个None，会的就返回<code>tarinfo</code>本身，该方法为3.2版本新增，同时废弃原有的exclude方法。</p><p><strong>TarFile.addfile(tarinfo, fileobj=None)</strong></p><p>将一个tarinfo对象关联的文件加入包内。</p><p><strong>TarFile.close()</strong></p><p>关闭TarFile文件。在“w”模式下，会在文件末尾添加量个zero块。</p><p>使用范例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.getcwd()</span><br><span class="line"><span class="string">&#x27;C:\\Python36&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.chdir(<span class="string">&quot;d:\\test&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.getcwd()</span><br><span class="line"><span class="string">&#x27;d:\\test&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.listdir()</span><br><span class="line">[<span class="string">&#x27;1.txt&#x27;</span>, <span class="string">&#x27;2.txt&#x27;</span>, <span class="string">&#x27;test.py&#x27;</span>, <span class="string">&#x27;test.txt&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> tarfile</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tar = tarfile.<span class="built_in">open</span>(<span class="string">&quot;test.tar.gz&quot;</span>, <span class="string">&quot;w:gz&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tar.add(<span class="string">&quot;1.txt&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tar.add(<span class="string">&quot;2.txt&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tar.add(<span class="string">&quot;test.txt&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tar.add(<span class="string">&quot;test.py&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tar.close()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.listdir()</span><br><span class="line">[<span class="string">&#x27;1.txt&#x27;</span>, <span class="string">&#x27;2.txt&#x27;</span>, <span class="string">&#x27;test.py&#x27;</span>, <span class="string">&#x27;test.tar.gz&#x27;</span>, <span class="string">&#x27;test.txt&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tar = tarfile.<span class="built_in">open</span>(<span class="string">&quot;test.tar.gz&quot;</span>,)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tar.getmembers()</span><br><span class="line">[&lt;TarInfo <span class="string">&#x27;1.txt&#x27;</span> at <span class="number">0x2a7ae58</span>&gt;, &lt;TarInfo <span class="string">&#x27;2.txt&#x27;</span> at <span class="number">0x2df6368</span>&gt;, &lt;TarInfo <span class="string">&#x27;test.txt&#x27;</span> at <span class="number">0x2df6430</span>&gt;, &lt;TarInfo <span class="string">&#x27;test.py&#x27;</span> at <span class="number">0x2df64f8</span>&gt;]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tar.getnames()</span><br><span class="line">[<span class="string">&#x27;1.txt&#x27;</span>, <span class="string">&#x27;2.txt&#x27;</span>, <span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;test.py&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tar.<span class="built_in">list</span>()</span><br><span class="line">?rw-rw-rw- <span class="number">0</span>/<span class="number">0</span>          <span class="number">9</span> <span class="number">2017</span>-05-<span class="number">17</span> <span class="number">22</span>:05:<span class="number">31</span> <span class="number">1.</span>txt </span><br><span class="line">?rw-rw-rw- <span class="number">0</span>/<span class="number">0</span>          <span class="number">9</span> <span class="number">2017</span>-05-<span class="number">17</span> <span class="number">22</span>:05:<span class="number">31</span> <span class="number">2.</span>txt </span><br><span class="line">?rw-rw-rw- <span class="number">0</span>/<span class="number">0</span>         <span class="number">25</span> <span class="number">2017</span>-05-<span class="number">16</span> <span class="number">11</span>:<span class="number">54</span>:<span class="number">45</span> test.txt </span><br><span class="line">?rw-rw-rw- <span class="number">0</span>/<span class="number">0</span>         <span class="number">96</span> <span class="number">2017</span>-05-<span class="number">18</span> 08:<span class="number">50</span>:<span class="number">59</span> test.py </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tar.getmember(<span class="string">&quot;1.txt&quot;</span>)</span><br><span class="line">&lt;TarInfo <span class="string">&#x27;1.txt&#x27;</span> at <span class="number">0x2a7ae58</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="TarInfo对象"><a href="#TarInfo对象" class="headerlink" title="TarInfo对象"></a>TarInfo对象</h2><p>一个TarInfo对象代表TarFile里的一个成员。除了保存所有文件必需的属性（例如文件类型、大小、时间、权限、拥有者等等），它还提供了很多有用的方法，用来判断它的类型。但是它不包含文件的具体数据内容。</p><p>TarFile对象的<code>getmember()</code>,<code>getmembers()</code>和<code>gettarinfo()</code>会返回TarInfo对象。</p><div class="table-container"><table><thead><tr><th>名称</th><th>解释</th></tr></thead><tbody><tr><td>class tarfile.TarInfo(name=””)</td><td>TarInfo类</td></tr><tr><td>TarInfo.name</td><td>名字</td></tr><tr><td>TarInfo.size</td><td>大小</td></tr><tr><td>TarInfo.mtime</td><td>最近的修改时间</td></tr><tr><td>TarInfo.mode</td><td>权限</td></tr><tr><td>TarInfo.type</td><td>文件类型</td></tr><tr><td>TarInfo.linkname</td><td>连接目标的名字</td></tr><tr><td>TarInfo.uid</td><td>用户id</td></tr><tr><td>TarInfo.gid</td><td>组id</td></tr><tr><td>TarInfo.uname</td><td>用户名</td></tr><tr><td>TarInfo.gname</td><td>组名</td></tr><tr><td>TarInfo.isfile()</td><td>判断是否文件</td></tr><tr><td>TarInfo.isdir()</td><td>判断是否目录</td></tr><tr><td>TarInfo.issym()</td><td>判断是否符号链接</td></tr><tr><td>TarInfo.islnk()</td><td>判断是否硬链接</td></tr><tr><td>TarInfo.ischr()</td><td>判断是否字符设备</td></tr><tr><td>TarInfo.isblk()</td><td>判断是否块设备</td></tr><tr><td>TarInfo.isfifo()</td><td>判断是否FIFO设备</td></tr><tr><td>TarInfo.isdev()</td><td>判断是否是设备文件</td></tr></tbody></table></div><h2 id="命令行界面"><a href="#命令行界面" class="headerlink" title="命令行界面"></a>命令行界面</h2><p>tarfile模块还提供一种命令行界面下的交互模式。该功能属于Python3.4版本新增。</p><p>如果你想创建一个包，在-c参数后指定包名称，然后列出打包的文件，如下所示（-m参数是指定使用的模块）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python -m tarfile -c monty.tar  spam.txt eggs.txt</span><br></pre></td></tr></table></figure><p>也可以指定一个文件夹：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python -m tarfile -c monty.tar life-of-brian_1979/</span><br></pre></td></tr></table></figure><p>如果想要解包到当前目录，请使用-e参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python -m tarfile -e monty.tar</span><br></pre></td></tr></table></figure><p>当然，也可以解包到指定目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">python -m tarfile -e monty.tar  other-dir/</span></span><br></pre></td></tr></table></figure><p>想查看包内文件列表，使用-l参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python -m tarfile -l monty.tar</span><br></pre></td></tr></table></figure><h2 id="一些例子"><a href="#一些例子" class="headerlink" title="一些例子"></a>一些例子</h2><p>1.解包到当前目录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tarfile</span><br><span class="line">tar = tarfile.<span class="built_in">open</span>(<span class="string">&quot;sample.tar.gz&quot;</span>)</span><br><span class="line">tar.extractall()</span><br><span class="line">tar.close()</span><br></pre></td></tr></table></figure><p>2.指定包内某一类型文件被解包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> tarfile</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">py_files</span>(<span class="params">members</span>):</span><br><span class="line">    <span class="keyword">for</span> tarinfo <span class="keyword">in</span> members:</span><br><span class="line">        <span class="keyword">if</span> os.path.splitext(tarinfo.name)[<span class="number">1</span>] == <span class="string">&quot;.py&quot;</span>:</span><br><span class="line">            <span class="keyword">yield</span> tarinfo</span><br><span class="line"></span><br><span class="line">tar = tarfile.<span class="built_in">open</span>(<span class="string">&quot;sample.tar.gz&quot;</span>)</span><br><span class="line">tar.extractall(members=py_files(tar))</span><br><span class="line">tar.close()</span><br></pre></td></tr></table></figure><p>3.根据文件名列表，创建不压缩的包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tarfile</span><br><span class="line">tar = tarfile.<span class="built_in">open</span>(<span class="string">&quot;sample.tar&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> [<span class="string">&quot;foo&quot;</span>, <span class="string">&quot;bar&quot;</span>, <span class="string">&quot;quux&quot;</span>]:</span><br><span class="line">    tar.add(name)</span><br><span class="line">tar.close()</span><br></pre></td></tr></table></figure><p>使用with语句的写法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tarfile</span><br><span class="line"><span class="keyword">with</span> tarfile.<span class="built_in">open</span>(<span class="string">&quot;sample.tar&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> tar:</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> [<span class="string">&quot;foo&quot;</span>, <span class="string">&quot;bar&quot;</span>, <span class="string">&quot;quux&quot;</span>]:</span><br><span class="line">        tar.add(name)</span><br></pre></td></tr></table></figure><p>4.解包使用gzip压缩的包文件，并显示部分信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tarfile</span><br><span class="line">tar = tarfile.<span class="built_in">open</span>(<span class="string">&quot;sample.tar.gz&quot;</span>, <span class="string">&quot;r:gz&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> tarinfo <span class="keyword">in</span> tar:</span><br><span class="line">    <span class="built_in">print</span>(tarinfo.name, <span class="string">&quot;is&quot;</span>, tarinfo.size, <span class="string">&quot;bytes in size and is&quot;</span>, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> tarinfo.isreg():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;a regular file.&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> tarinfo.isdir():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;a directory.&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;something else.&quot;</span>)</span><br><span class="line">tar.close()</span><br></pre></td></tr></table></figure><p>5.往包内添加文件，并使用filter参数修改文件信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tarfile</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reset</span>(<span class="params">tarinfo</span>):</span><br><span class="line">    tarinfo.uid = tarinfo.gid = <span class="number">0</span></span><br><span class="line">    tarinfo.uname = tarinfo.gname = <span class="string">&quot;root&quot;</span></span><br><span class="line">    <span class="keyword">return</span> tarinfo</span><br><span class="line">tar = tarfile.<span class="built_in">open</span>(<span class="string">&quot;sample.tar.gz&quot;</span>, <span class="string">&quot;w:gz&quot;</span>)</span><br><span class="line">tar.add(<span class="string">&quot;foo&quot;</span>, <span class="built_in">filter</span>=reset)</span><br><span class="line">tar.close()</span><br></pre></td></tr></table></figure><p>6.压缩并打包文件夹下的所有文件及目录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os  </span><br><span class="line"><span class="keyword">import</span> tarfile  </span><br><span class="line"></span><br><span class="line">tar = tarfile.<span class="built_in">open</span>(<span class="string">&#x27;test.tar&#x27;</span>,<span class="string">&#x27;w:gz&#x27;</span>)  </span><br><span class="line"><span class="keyword">for</span> root ,<span class="built_in">dir</span>,files <span class="keyword">in</span> os.walk(os.getcwd()):  </span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> files:  </span><br><span class="line">        fullpath = os.path.join(root,file)  </span><br><span class="line">        tar.add(fullpath) </span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>tarfile模块看似复杂，其实也很简单，只需要掌握下面几个重点方法就可以了：</p><div class="table-container"><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>t = tarfile.open()</td><td>打开或新建一个归档文件，返回一个TarFile类型的对象t</td></tr><tr><td>t.getmembers()</td><td>获取包内所有成员的信息</td></tr><tr><td>t.add()</td><td>将指定文件加入包内</td></tr><tr><td>t.extract()</td><td>解包指定文件</td></tr><tr><td>t.extractall()</td><td>解包所有文件</td></tr><tr><td>t.close()</td><td>关闭TarFile文件</td></tr></tbody></table></div><p>感觉和zipfile模块的使用是不是很像？需要注意的是两者在打开文件、获取文件信息和添加文件的命令名称不一样。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 模块 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 压缩 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python给图片批量添加水印filestools模块</title>
      <link href="/2022/07/12/Python/%E6%A8%A1%E5%9D%97/python%E7%BB%99%E5%9B%BE%E7%89%87%E6%89%B9%E9%87%8F%E6%B7%BB%E5%8A%A0%E6%B0%B4%E5%8D%B0filestools%E6%A8%A1%E5%9D%97/"/>
      <url>/2022/07/12/Python/%E6%A8%A1%E5%9D%97/python%E7%BB%99%E5%9B%BE%E7%89%87%E6%89%B9%E9%87%8F%E6%B7%BB%E5%8A%A0%E6%B0%B4%E5%8D%B0filestools%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<p>又很多添加水印的方法，如opencv模块、PIL模块但是感觉都较为复杂，filestools模块其本质上也是对ImageDraw.Draw.text()方法做了进一步的封装，让我们用起来更加的简便。</p><h1 id="filestools模块"><a href="#filestools模块" class="headerlink" title="filestools模块"></a>filestools模块</h1><blockquote><p>/usr/local/bin/pip3 install filestools -i <a href="https://pypi.douban.com/simple/">https://pypi.douban.com/simple/</a>   # 安装</p></blockquote><p>我们使用add_mark()方法可以生成数量较多的水印，该方法有8个参数，比较重要的有</p><ul><li>mark：水印的内容</li><li>水印样式包括color、size、opacity、space、angle：颜色、大小、不透明度、空间、角度</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> watermarker.marker <span class="keyword">import</span> add_mark  <span class="comment"># 添加水印模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update_img</span>(<span class="params"><span class="built_in">dir</span>,water_name</span>):</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">dir</span> <span class="keyword">and</span> water_name:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;文件夹地址或水印名称不能为空&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">for</span> img_name <span class="keyword">in</span> os.listdir(<span class="built_in">dir</span>):</span><br><span class="line">add_mark(file=os.path.join(<span class="built_in">dir</span>,img_name), out=os.getcwd(), mark=water_name, opacity=<span class="number">0.3</span>, angle=<span class="number">30</span>, space=<span class="number">70</span>, size=<span class="number">30</span>)</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError <span class="keyword">and</span> NotADirectoryError:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;文件夹地址不正确&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">if</span> __name__ <span class="keyword">in</span> <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">update_img(<span class="built_in">dir</span>=<span class="string">&quot;图片地址&quot;</span>,water_name=<span class="string">&quot;水印名字&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">函数名称：add_mark，用于实现添加水印。</span><br><span class="line">file：原始照片；</span><br><span class="line">mark：使用哪些字符作为水印；</span><br><span class="line">out：添加水印后保存的位置；</span><br><span class="line">color：水印字体的颜色，默认颜色#8B8B1B；</span><br><span class="line">size：水印字体的大小，默认50；</span><br><span class="line">opacity：水印字体的透明度，默认0.15；</span><br><span class="line">space：水印字体之间的间隔, 默认75个空格；</span><br><span class="line">angle：水印字体的旋转角度，默认30度；</span><br></pre></td></tr></table></figure><h1 id="全局搜索并附加水印"><a href="#全局搜索并附加水印" class="headerlink" title="全局搜索并附加水印"></a>全局搜索并附加水印</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os,shutil,glob</span><br><span class="line"><span class="keyword">from</span> watermarker.marker <span class="keyword">import</span> add_mark  <span class="comment"># 添加水印模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update_img</span>(<span class="params"><span class="built_in">dir</span>,water_name</span>):</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">dir</span> <span class="keyword">and</span> water_name:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;文件夹地址或水印名称不能为空&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">for</span> img_name_dir <span class="keyword">in</span> <span class="built_in">dir</span>:  <span class="comment"># 此时dir是个一个可编历对象</span></span><br><span class="line">add_mark(file=img_name_dir, out=os.getcwd(), mark=water_name, opacity=<span class="number">0.3</span>, angle=<span class="number">30</span>, space=<span class="number">70</span>, size=<span class="number">30</span>)</span><br><span class="line">img_name=<span class="built_in">str</span>(img_name_dir).split(<span class="string">&quot;/&quot;</span>)[-<span class="number">1</span>]</span><br><span class="line">shutil.move(img_name,img_name_dir)</span><br><span class="line"><span class="built_in">print</span>(img_name_dir,img_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ <span class="keyword">in</span> <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> [<span class="string">&#x27;webp&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;jpeg&#x27;</span>]:<span class="comment"># 对关键字</span></span><br><span class="line">    <span class="comment">#获取一个可编历对象，使用它可以逐个获取匹配的文件路径名。glob.iglob与glob.glob()的区别是：glob.glob同时获取所有的匹配路径，而glob.iglob一次只获取一个匹配路径。</span></span><br><span class="line">image_list=glob.iglob(<span class="string">f&quot;/Users/jerry/source/**/*.<span class="subst">&#123;key&#125;</span>&quot;</span>,recursive=<span class="literal">True</span>) </span><br><span class="line">update_img(<span class="built_in">dir</span>=image_list,water_name=<span class="string">&quot;jerryWang&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 模块 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图片 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python查找文件fnmatch、glob模块</title>
      <link href="/2022/06/18/Python/%E6%A8%A1%E5%9D%97/python%E6%9F%A5%E6%89%BE%E6%96%87%E4%BB%B6filestools%E3%80%81glob%E6%A8%A1%E5%9D%97/"/>
      <url>/2022/06/18/Python/%E6%A8%A1%E5%9D%97/python%E6%9F%A5%E6%89%BE%E6%96%87%E4%BB%B6filestools%E3%80%81glob%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h2 id="不墨迹时间，直入正题看glob模块，fnmatch参考"><a href="#不墨迹时间，直入正题看glob模块，fnmatch参考" class="headerlink" title="不墨迹时间，直入正题看glob模块，fnmatch参考"></a>不墨迹时间，直入正题看glob模块，fnmatch参考</h2><p>python中可以使用 glob 模块实现快速查找文件 </p><p>glob像是一个更强大版本的listdir()函数，支持使用模式匹配来搜索文件，其支持的通配符有：<em>,匹配任意0个或多个字符；*</em>，当recursive参数为True时会匹配0个或多个子文件夹（且只能用于匹配子文件夹）；?，匹配任意一个字符；[]，匹配指定范围内的字符，如[0-9]匹配任意数字。</p><p>若需要全局搜索，则需启用recursive递归参数为True。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 超着qqq目录下所有深层目录下的后缀为png的文件，单层目录recursive=False</span></span><br><span class="line"><span class="built_in">print</span>(glob.glob(<span class="string">&quot;/Users/jerry/Downloads/qqq/**/*.png&quot;</span>,recursive=<span class="literal">True</span>))</span><br></pre></td></tr></table></figure><h2 id="fnmatch"><a href="#fnmatch" class="headerlink" title="fnmatch"></a>fnmatch</h2><p>这篇文章主要分享的是python使用技巧查找文件，下面我们就来介绍针对python查找文件的相关内容，需要的小伙伴可以参考一下</p><p>标准库的<code>fnmatch</code>库专门用来进行文件名匹配，支持使用通配符进行字符串匹配。</p><ul><li>1、fnmatch：判断文件名是否符合特定的模式；</li><li>2、fnmatchcase：判断文件名是否符合特定的模式，不区分大小写；</li><li>3、filter：返回输入列表中，符合特定模式的文件名列表；</li><li>4、translate：将通配符模式转换成正则表达式。  </li></ul><p><code>fnmatchcase</code>函数与<code>fnmatch</code>函数几乎一样，只是在匹配文件名时会忽略文件名中字母的大小写。  </p><p><code>filter</code>函数与<code>fnmatch</code>函数比较类似，区别在于fnmatch每次对一个文件名进行匹配判断，filter函数每次对一组文件名进行匹配判断。filter 函数接受文件名列表为第一个参数，文件名模式为第二个参数，然后以列表的形式返回输入列表中所有符合模式的文件名。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os,fnmatch</span><br><span class="line"> </span><br><span class="line">names = os.listdir(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">    <span class="keyword">if</span> fnmatch.fnmatch(name,<span class="string">&#x27;*.xlsx&#x27;</span>):</span><br><span class="line">        <span class="built_in">print</span>(name)</span><br><span class="line">    <span class="keyword">if</span> fnmatch.fnmatch(name,<span class="string">&#x27;[a-z]*&#x27;</span>):</span><br><span class="line">        <span class="built_in">print</span>(name)</span><br><span class="line"><span class="built_in">print</span>(fnmatch.<span class="built_in">filter</span>(names,<span class="string">&quot;[a-z]*.xlsx&quot;</span>))</span><br></pre></td></tr></table></figure><p>目前，我们要获取特定类型的文件列表，都是先通过os.listdir获取文件列表，然后通过使用fnmatch进行文件名模式匹配进行过滤。而在Python中还有更加简单的方式，即使用标准库的glob库。glob的作用相当于<code>os.listdir</code>加上<code>fnmatch</code>。使用glob以后，不需要调用os.listdir获取文件列表，直接通过模式匹配即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(glob.glob(<span class="string">&#x27;*.xlsx&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(glob.glob(<span class="string">&#x27;[a-z]*&#x27;</span>))</span><br></pre></td></tr></table></figure><p>前面的例子都是查找某一个目录下的文件并通过模式匹配去选择自己需要的文件类型。在实际工作过程中，更有可能遇到的是查找某个目录及其子目录下的所有文件。例如查找某个目录及其子目录下的图片。可以使用os模块的walk函数。walk函数遍历某个目录及其子目录，对于每一个目录，walk返回一个三元组（dirpath, dirnames,filenames）。其中<code>dirpath</code>保存的是当前目录，<code>dirnames</code>是当前目录下的子目录列表，<code>filenames</code>是当前目录下的文件列表。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 其实了解glob模块，直接`** `递归匹配所有文件、目录、子目录</span></span><br><span class="line"><span class="comment"># glob.glob(&quot;/User/**/*.png&quot;,recursive=True)  # recursive默认是Falese不递归，查找user下所有文件夹下的png文件</span></span><br><span class="line"><span class="keyword">import</span> os,fnmatch</span><br><span class="line"> </span><br><span class="line">images = [<span class="string">&#x27;*.jpg&#x27;</span>,<span class="string">&#x27;*.jpeg&#x27;</span>,<span class="string">&#x27;*.png&#x27;</span>,<span class="string">&#x27;*.tif&#x27;</span>,<span class="string">&#x27;*.tiff&#x27;</span>]</span><br><span class="line">matches = []</span><br><span class="line"><span class="keyword">for</span> dirpath,dirnames,filenames <span class="keyword">in</span> os.walk(os.path.expanduser(<span class="string">r&quot;D:/test&quot;</span>)):</span><br><span class="line">    <span class="keyword">for</span> image <span class="keyword">in</span> images:</span><br><span class="line">        <span class="keyword">for</span> filename <span class="keyword">in</span> fnmatch.<span class="built_in">filter</span>(filenames,image):</span><br><span class="line">            matches.append(os.path.join(dirpath,filename))</span><br><span class="line"><span class="built_in">print</span>(matches)</span><br></pre></td></tr></table></figure><p>在遍历目录及其子目录时，如果想要忽略掉某一个子目录，可以直接修改三元组中的<code>dirnames</code>，即从dirnames列表中移除需要忽略掉的目录。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="string">&#x27;extest&#x27;</span> <span class="keyword">in</span> dirnames:  </span><br><span class="line">    dirnames.remove(<span class="string">&#x27;extest&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="glob"><a href="#glob" class="headerlink" title="glob"></a>glob</h2><p><code>glob</code>模块也是Python标准库中一个重要的模块，主要用来查找符合特定规则的目录和文件，并将搜索的到的结果返回到一个列表中。使用这个模块最主要的原因就是，该模块支持几个特殊的正则通配符，用起来贼方便，这个将会在下方为大家进行详细讲解。</p><p><img src="/2021102711220371.png" alt="img"></p><h3 id="支持4个常用的通配符"><a href="#支持4个常用的通配符" class="headerlink" title="支持4个常用的通配符"></a>支持4个常用的通配符</h3><p>使用glob模块能够快速查找我们想要的目录和文件，就是由于它支持<code>*</code>、<code>**</code>、<code>?</code> 、<code>[ ]</code>这三个通配符，那么它们到底是 什么意思呢？</p><p><code>*</code>：匹配0个或多个字符；</p><p><code>**</code>：匹配所有文件、目录、子目录和子目录里的文件（3.5版本新增）；</p><p><code>?</code>：代匹配一个字符；</p><p><code>[]</code>：匹配指定范围内的字符，如[0-9]匹配数字，[a-z]匹配小写字母；</p><p>注意：这3个通配符的用法，将在讲函数的时候，一起带大家操作一遍； glob库中主要的3个函数</p><p>其实glob库很简单，只有3个主要函数供我们使用，它们分别是<code>glob()</code>、<code>iglob()</code>、<code>escape()</code>函数，因此学习起来特别容易。</p><p><code>glob.glob()</code>：返回符合匹配条件的所有文件的路径；</p><p><code>glob.iglob()</code>：返回一个迭代器对象，需要循环遍历获取每个元素，得到的也是符合匹配条件的所有文件的路径；</p><p><code>glob.escape()</code>：escape可以忽略所有的特殊字符，就是星号、问号、中括号，用处不大；</p><p><code>recursive=False</code>：代表递归调用，与特殊通配符<code>“**”</code>一同使用，默认为False，False表示不递归调用，True表示递归调用；</p><h3 id="1）glob-函数"><a href="#1）glob-函数" class="headerlink" title="1）glob()函数"></a>1）glob()函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">path1 = <span class="string">r&quot;C:\Users\黄伟\Desktop\publish\os模块\test_shutil_a\[0-9].png&quot;</span></span><br><span class="line">glob.glob(path1)</span><br><span class="line"> </span><br><span class="line">path2 = <span class="string">r&quot;C:\Users\黄伟\Desktop\publish\os模块\test_shutil_a\[0-9a-z].*&quot;</span></span><br><span class="line">glob.glob(path2)</span><br><span class="line"><span class="built_in">print</span>(glob.glob(<span class="string">&quot;/Users/**/*.png&quot;</span>,recursive=<span class="literal">True</span>)) <span class="comment"># recursive默认是Falese不递归，查找user下所有文件夹下的png文件</span></span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="2021102711220372.png" alt="image"></p><h3 id="2）iglob-函数"><a href="#2）iglob-函数" class="headerlink" title="2）iglob()函数"></a>2）iglob()函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">path1 = <span class="string">r&quot;C:\Users\黄伟\Desktop\publish\os模块\test_shutil_a\[0-9].png&quot;</span></span><br><span class="line">a = glob.iglob(path1)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="2021102711220373.png" alt="img"></p><h3 id="3）escape-函数"><a href="#3）escape-函数" class="headerlink" title="3）escape()函数"></a>3）escape()函数</h3><p>通过下方两行代码的对比，可以看出escape()函数只是让<code>*</code>只表示它本来的意思，而不再具有通配符的作用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">glob.glob(<span class="string">&#x27;t*&#x27;</span>)</span><br><span class="line">glob.escape(<span class="string">&#x27;t*&#x27;</span>)</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="2021102711220374.png" alt="image"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过上面的叙述可以知道，glob库其实并没有很多东西，就记住3个通配符、3个函数即可。对于我们来说，glob库就是方便我们查找文件而诞生的，因此我们好好掌握glob()这一个函数，其实就够了，其它的知道、会用就行。</p><p>我们还需要注意一点，<code>os库</code>、<code>shutil库</code>、<code>glob库</code>是互补的，我们要善于发挥各自的优势，充分利用它们的优势，帮助我们快速的操作文件和文件夹。</p><blockquote><p>原文链接：<a href="https://www.jb51.net/article/238114.htm">脚本之家</a> ，自己稍微修改</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 模块 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Anaconda安装及使用教程</title>
      <link href="/2022/03/30/%E6%95%99%E7%A8%8B/Anaconda%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2022/03/30/%E6%95%99%E7%A8%8B/Anaconda%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>去官网下载对应的系统版本<a href="https://www.anaconda.com/products/distribution">Anaconda| Anaconda Distribution</a></p><h1 id="管理conda"><a href="#管理conda" class="headerlink" title="管理conda"></a>管理conda</h1><p><strong>1. 验证conda已被安装</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda --version</span><br></pre></td></tr></table></figure><p>终端上将会以 <strong><em>conda 版本号\</em></strong> 的形式显示当前安装conda的版本号。如： <strong><em>conda 3.11.0\</em></strong></p><ul><li>注意：如果出现错误信息，则需核实是否出现以下情况：</li></ul><p>① 使用的用户是否是安装Anaconda时的账户。</p><p>② 是否在安装Anaconda之后重启了终端。</p><p><strong>2. 更新conda至最新版本</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda update conda</span><br></pre></td></tr></table></figure><p>执行命令后，conda将会对版本进行比较并列出可以升级的版本。同时，也会告知用户其他相关包也会升级到相应版本。</p><p>当较新的版本可以用于升级时，终端会显示 <strong><em>Proceed ([y]/n)?\</em></strong> ，此时输入 <strong><em>y\</em></strong> 即可进行升级。</p><p><strong>3. 查看conda帮助信息</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda --help</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda -h</span><br></pre></td></tr></table></figure><p><strong>4. 卸载conda</strong></p><p><strong>① Linux 或 macOS</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf ~/anaconda2</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf ~/anaconda3</span><br></pre></td></tr></table></figure><p>即删除Anaconda的安装目录。根据安装的Anaconda版本选择相应的卸载命令。</p><p><strong>② Windows</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">控制面板 → 添加或删除程序 → 选择“Python X.X (Anaconda)” → 点击“删除程序”</span><br></pre></td></tr></table></figure><h1 id="使用conda"><a href="#使用conda" class="headerlink" title="使用conda"></a>使用conda</h1><h2 id="1-查看conda系统配置信息"><a href="#1-查看conda系统配置信息" class="headerlink" title="1. 查看conda系统配置信息"></a><strong>1. 查看conda系统配置信息</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda info</span><br></pre></td></tr></table></figure><h2 id="2-创建虚拟环境"><a href="#2-创建虚拟环境" class="headerlink" title="2. 创建虚拟环境"></a><strong>2. 创建虚拟环境</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create --name &lt;env_name&gt; &lt;package_names&gt;   #--name 或  -n</span><br></pre></td></tr></table></figure><ul><li>注意：</li></ul><p>▫ <strong><env_name></strong> 即创建的环境名。建议以英文命名，且不加空格，名称两边不加尖括号“&lt;&gt;”。</p><p>▫ <strong><package_names></strong> 即安装在环境中的包名。名称两边不加尖括号“&lt;&gt;”。</p><p>① 如果要安装指定的版本号，则只需要在包名后面以 <strong>=</strong> 和版本号的形式执行。如： <strong>conda create —name python2 python=2.7</strong> ，即创建一个名为“python2”的环境，环境中安装版本为2.7的python。</p><p>② 如果要在新创建的环境中创建多个包，则直接在 <strong><package_names></strong> 后以<strong>空格</strong>隔开，添加多个包名即可。如： <strong>conda create -n python3 python=3.5 numpy pandas</strong> ，即创建一个名为“python3”的环境，环境中安装版本为3.5的python，同时也安装了numpy和pandas。</p><p>▫ <strong>—name</strong> 同样可以替换为 <strong>-n</strong> 。</p><ul><li>提示：默认情况下，新创建的环境将会被保存在 <strong>/Users/<user_name>/anaconda3/env</strong> 目录下，其中， <strong><user_name></strong> 为当前用户的用户名。</li></ul><h2 id="3-显示-切换-退出-复制-删除环境"><a href="#3-显示-切换-退出-复制-删除环境" class="headerlink" title="3.显示/切换/退出/复制/删除环境"></a>3.显示/切换/退出/复制/删除环境</h2><ul><li>注意： <strong><env_name></strong> 为被删除环境的名称。环境名两边不加尖括号“&lt;&gt;”。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 显示</span><br><span class="line">conda info --envs</span><br><span class="line">或</span><br><span class="line">conda info -e</span><br><span class="line">或</span><br><span class="line">conda env list   # 个人推荐</span><br><span class="line"></span><br><span class="line"># 切换</span><br><span class="line">source activate &lt;env_name&gt;   #  Linux 或 macOS</span><br><span class="line">activate &lt;env_name&gt;#  Windows</span><br><span class="line"></span><br><span class="line"># 推出</span><br><span class="line">source deactivate</span><br><span class="line">deactivate</span><br><span class="line"></span><br><span class="line"># 复制</span><br><span class="line">conda create --name &lt;new_env_name&gt; --clone &lt;copied_env_name&gt;</span><br><span class="line"></span><br><span class="line"># 删除</span><br><span class="line">conda remove --name &lt;env_name&gt; --all</span><br></pre></td></tr></table></figure><h1 id="管理包"><a href="#管理包" class="headerlink" title="管理包"></a><strong>管理包</strong></h1><h2 id="1-查找可供安装的包版本"><a href="#1-查找可供安装的包版本" class="headerlink" title="1. 查找可供安装的包版本"></a><strong>1. 查找可供安装的包版本</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda search --full-name &lt;package_full_name&gt;  #  --full-name 为精确查找的参数。</span><br><span class="line">conda search &lt;text&gt;  # 模糊查找 conda search py 即查找含有“py”字段的包</span><br></pre></td></tr></table></figure><h2 id="2-获取当前环境中已安装的包信息"><a href="#2-获取当前环境中已安装的包信息" class="headerlink" title="2. 获取当前环境中已安装的包信息"></a><strong>2. 获取当前环境中已安装的包信息</strong></h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda list</span><br><span class="line"># 执行上述命令后将在终端显示当前环境已安装包的包名及其版本号。</span><br></pre></td></tr></table></figure><h2 id="3-安装包"><a href="#3-安装包" class="headerlink" title="3. 安装包"></a><strong>3. 安装包</strong></h2><p><strong><env_name></strong> 即将包安装的指定环境名。环境名两边不加尖括号“&lt;&gt;”。</p><p><strong><package_name></strong> 即要安装的包名。包名两边不加尖括号“&lt;&gt;”。</p><p><strong>① 在指定环境中安装包</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install --name &lt;env_name&gt; &lt;package_name&gt;</span><br></pre></td></tr></table></figure><ul><li>例如： <strong><em>conda install —name python2 pandas\</em></strong> 即在名为“python2”的环境中安装pandas包。</li></ul><p><strong>② 在当前环境中安装包</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install &lt;package_name&gt;</span><br></pre></td></tr></table></figure><p><strong>③ 使用pip安装包</strong></p><p><strong>→ 使用场景</strong></p><p>当使用 <strong><em>conda install\</em></strong> 无法进行安装时，可以使用pip进行安装。例如：see包。</p><p><strong>→ 命令</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install &lt;package_name&gt;</span><br></pre></td></tr></table></figure><p><strong>→ 注意</strong></p><ol><li>pip只是包管理器，无法对环境进行管理。因此如果想在指定环境中使用pip进行安装包，则需要先切换到指定环境中，再使用pip命令安装包。</li><li>pip无法更新python，因为pip并不将python视为包。</li><li>pip可以安装一些conda无法安装的包；conda也可以安装一些pip无法安装的包。因此当使用一种命令无法安装包时，可以尝试用另一种命令。</li></ol><p><strong>④ 从<a href="https://link.zhihu.com/?target=http%3A//Anaconda.org">http://Anaconda.org</a>安装包</strong></p><p><strong>→ 使用场景</strong></p><p>当使用 <strong><em>conda install\</em></strong> 无法进行安装时，可以考虑从<a href="https://link.zhihu.com/?target=http%3A//Anaconda.org">http://Anaconda.org</a>中获取安装包的命令，并进行安装。</p><p><strong>→ 注意</strong></p><ol><li><p>从<a href="https://link.zhihu.com/?target=http%3A//Anaconda.org">http://Anaconda.org</a>安装包时，无需注册。</p></li><li><p>在<strong>当前环境</strong>中安装来自于<a href="https://link.zhihu.com/?target=http%3A//Anaconda.org">http://Anaconda.org</a>的包时，需要通过输入要安装的包在<a href="https://link.zhihu.com/?target=http%3A//Anaconda.org">http://Anaconda.org</a>中的路径作为获取途径（channel）。查询路径的方式如下：</p><ul><li><p>在浏览器中输入：<a href="https://link.zhihu.com/?target=http%3A//anaconda.org/">http://anaconda.org</a>，或直接点击<a href="https://link.zhihu.com/?target=http%3A//anaconda.org/">Anaconda Cloud</a></p></li><li><p>在新页面“Anaconda Cloud”的上方搜索框中输入要安装的包名，然后点击右边“放大镜”标志。</p></li><li><p>搜索结果中有数以千计的包可供选择，此时点击“Downloads”可根据下载量进行排序，最上面的为下载最多的包。（图中以搜索bottleneck包为例）</p></li><li><p>选择满足需求的包或下载量最多的包，点击包名。</p></li><li><p>复制“To install this package with conda run:”下方的命令，并粘贴在终端中执行。</p></li></ul></li></ol><p><strong>4. 卸载包</strong></p><p><strong>① 卸载指定环境中的包</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda remove --name &lt;env_name&gt; &lt;package_name&gt;</span><br></pre></td></tr></table></figure><p><strong>② 卸载当前环境中的包</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda remove &lt;package_name&gt;</span><br></pre></td></tr></table></figure><p><strong>5. 更新包</strong></p><p><strong>① 更新所有包</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda update --all</span><br></pre></td></tr></table></figure><p><strong>② 更新指定包</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda update &lt;package_name&gt;</span><br></pre></td></tr></table></figure><p>② 更新多个指定包，则包名以<strong>空格</strong>隔开，向后排列。如： <strong>conda update pandas numpy matplotlib</strong> 即更新pandas、numpy、matplotlib包。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Anaconda </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Anaconda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/02/20/Python/Django/%E4%BC%9A%E8%AF%9D%E6%8E%A7%E5%88%B6/"/>
      <url>/2022/02/20/Python/Django/%E4%BC%9A%E8%AF%9D%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="会话控制"><a href="#会话控制" class="headerlink" title="会话控制"></a>会话控制</h1><p>网络中网页之间进行内容传输使用的协议是http协议</p><p>主要特点</p><p>1、简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。</p><p>2、灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。</p><p>3.无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。</p><p>4、无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。<br>5、支持B/S及C/S模式</p><p>web开发的应用往往不仅仅只是一个网页或一个功能，那么怎么多个页面不同的请求，识别用户之前的状态和行为?</p><p>为了能在多次请求过程中，识别客户端是否是一个客户端，所以就出现了会话跟踪技术，就需要使用会话控制技术，也叫会话保持技术或会话跟踪技术。</p><p>会话控制技术，主要作用是为了识别和记录用户在web应用中的身份行为和操作历史</p><h2 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h2><p>会话(session)，所谓一次会话其实就是客户端与服务的之间进行通讯的一次完整过程。</p><p>客户端和服务端之间产生的会话开始于：用户第一次网文网站的时候<br>客户端和服务端之间产生的会话关闭于：用户关闭浏览器</p><p>注意：如果移动端下面，则必须是关闭当前应用才算结束会话，那后台运行并不等于关闭应用</p><p>所以，会话跟踪技术就是在一次完整的会话中，能让服务端识别客户端在整个过程中的身份行为和操作历史的一项技术。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/11/28/%E5%89%8D%E7%AB%AF/Bootstrap%E4%B9%8B%E5%B8%83%E5%B1%80/"/>
      <url>/2021/11/28/%E5%89%8D%E7%AB%AF/Bootstrap%E4%B9%8B%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<p>BootStrap 由Twitter的设计师Mark Otto和Jacob Thornton合作开发，是一个简洁、直观、强悍的CSS/HTML前端开发框架，让web开发更迅速、简单。</p><p>使用BootStrap 可以将它预先下载到电脑上并放入静态文件中，也可以通过直接在HTML文件里导入cdn链接进行使用，cdn链接可以直接使用各种搜素哦引擎轻松获得。</p><h3 id="1-Bootstrap布局"><a href="#1-Bootstrap布局" class="headerlink" title="1 Bootstrap布局"></a>1 Bootstrap布局</h3><h3 id="1-1-概览"><a href="#1-1-概览" class="headerlink" title="1.1 概览"></a>1.1 概览</h3><h3 id="1-1-1-移动设备优先"><a href="#1-1-1-移动设备优先" class="headerlink" title="1.1.1 移动设备优先"></a>1.1.1 移动设备优先</h3><p>为了确保适当的绘制和触屏缩放，需要在 <head> 之中<strong>添加 viewport 元数据标签</strong>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在移动设备浏览器上，通过为视口（viewport）设置 meta 属性为 user-scalable=no  可以禁用其缩放（zooming）功能。这样禁用缩放功能后，用户只能滚动屏幕，就能让你的网站看上去更像原生应用的感觉。注意，这种方式我们并不推荐所有网站使用，还是要看你自己的情况而定！</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-1-2-Normalize-css"><a href="#1-1-2-Normalize-css" class="headerlink" title="1.1.2 Normalize.css"></a>1.1.2 Normalize.css</h3><p>BootStrap内置了Normalize.css</p><h3 id="1-1-3-布局容器"><a href="#1-1-3-布局容器" class="headerlink" title="1.1.3 布局容器"></a>1.1.3 布局容器</h3><p>Bootstrap 需要为页面内容和栅格系统包裹一个 .container 容器。我们提供了两个作此用处的类。注意，由于 padding 等属性的原因，这两种 容器类不能互相嵌套。</p><p>.container 类用于固定宽度并支持响应式布局的容器。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">.container-fluid 类用于 100% 宽度，占据全部视口（viewport）的容器。</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-栅格系统"><a href="#1-2-栅格系统" class="headerlink" title="1.2 栅格系统"></a>1.2 栅格系统</h3><p>Bootstrap 提供了一套响应式、移动设备优先的流式栅格系统，随着屏幕或视口（viewport）尺寸的增加，系统会自动分为最多12列</p><h3 id="1-2-1-栅格系统简介"><a href="#1-2-1-栅格系统简介" class="headerlink" title="1.2.1 栅格系统简介"></a>1.2.1 栅格系统简介</h3><p>栅格系统用于通过一系列的行（row）与列（column）的组合来创建页面布局，你的内容就可以放入这些创建好的布局中。下面就介绍一下 Bootstrap 栅格系统的工作原理：</p><ul><li>“行（row）”必须包含在 .container （固定宽度）或 .container-fluid （100% 宽度）中，以便为其赋予合适的排列（aligment）和内补（padding）。</li><li>通过“行（row）”在水平方向创建一组“列（column）”。</li><li>你的内容应当放置于“列（column）”内，并且，只有“列（column）”可以作为行（row）”的直接子元素。</li><li>类似 .row 和 .col-xs-4 这种预定义的类，可以用来快速创建栅格布局。Bootstrap 源码中定义的 mixin 也可以用来创建语义化的布局。</li><li>通过为“列（column）”设置 padding 属性，从而创建列与列之间的间隔（gutter）。通过为 .row 元素设置负值 margin 从而抵消掉为  .container 元素设置的 padding，也就间接为“行（row）”所包含的“列（column）”抵消掉了padding。</li><li>负值的 margin就是下面的示例为什么是向外突出的原因。在栅格列中的内容排成一行。</li><li>栅格系统中的列是通过指定1到12的值来表示其跨越的范围。例如，三个等宽的列可以使用三个 .col-xs-4 来创建。</li><li>如果一“行（row）”中包含了的“列（column）”大于 12，多余的“列（column）”所在的元素将被作为一个整体另起一行排列。</li></ul><div class="table-container"><table><thead><tr><th></th><th>超小屏幕 手机    (&lt;768px)</th><th>小屏幕 平板 (≥768px)</th><th>中等屏幕 桌面显示器    (≥992px)</th><th>大屏幕 大桌面显示器    (≥1200px)</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td></tr></tbody></table></div><ul><li>栅格类适用于与屏幕宽度大于或等于分界点大小的设备 ， 并且针对小屏幕设备覆盖栅格类。 因此，在元素上应用任何 .col-md-<em>栅格类适用于与屏幕宽度大于或等于分界点大小的设备 ，  并且针对小屏幕设备覆盖栅格类。 因此，在元素上应用任何 .col-lg-</em>不存在， 也影响大屏幕设备。</li></ul><h3 id="1-2-2-栅格参数"><a href="#1-2-2-栅格参数" class="headerlink" title="1.2.2 栅格参数"></a>1.2.2 栅格参数</h3><h3 id="1-2-3-栅格系统使用"><a href="#1-2-3-栅格系统使用" class="headerlink" title="1.2.3 栅格系统使用"></a>1.2.3 栅格系统使用</h3><p>使用单一的一组 .col-md-* 栅格类，就可以创建一个基本的栅格系统，在手机和平板设备上一开始是堆叠在一起的（超小屏幕到小屏幕这一范围），在桌面（中等）屏幕设备上变为水平排列。所有“列（column）必须放在 ” .row 内。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-1&quot;</span>&gt;</span>.col-md-1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-1&quot;</span>&gt;</span>.col-md-1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-1&quot;</span>&gt;</span>.col-md-1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-1&quot;</span>&gt;</span>.col-md-1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-1&quot;</span>&gt;</span>.col-md-1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-1&quot;</span>&gt;</span>.col-md-1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-1&quot;</span>&gt;</span>.col-md-1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-1&quot;</span>&gt;</span>.col-md-1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-1&quot;</span>&gt;</span>.col-md-1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-1&quot;</span>&gt;</span>.col-md-1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-1&quot;</span>&gt;</span>.col-md-1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-1&quot;</span>&gt;</span>.col-md-1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-8&quot;</span>&gt;</span>.col-md-8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4&quot;</span>&gt;</span>.col-md-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4&quot;</span>&gt;</span>.col-md-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4&quot;</span>&gt;</span>.col-md-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4&quot;</span>&gt;</span>.col-md-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-6&quot;</span>&gt;</span>.col-md-6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-6&quot;</span>&gt;</span>.col-md-6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-4-不同屏幕设置不同宽度"><a href="#1-2-4-不同屏幕设置不同宽度" class="headerlink" title="1.2.4 不同屏幕设置不同宽度"></a>1.2.4 不同屏幕设置不同宽度</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-xs-12 col-sm-6 col-md-8&quot;</span>&gt;</span>.col-xs-12 .col-sm-6 .col-md-8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-xs-6 col-md-4&quot;</span>&gt;</span>.col-xs-6 .col-md-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-xs-6 col-sm-4&quot;</span>&gt;</span>.col-xs-6 .col-sm-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-xs-6 col-sm-4&quot;</span>&gt;</span>.col-xs-6 .col-sm-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Optional: clear the XS cols if their content doesn&#x27;t match in height --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clearfix visible-xs-block&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-xs-6 col-sm-4&quot;</span>&gt;</span>.col-xs-6 .col-sm-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-5-列偏移"><a href="#1-2-5-列偏移" class="headerlink" title="1.2.5 列偏移"></a>1.2.5 列偏移</h3><p>使用 .col-md-offset-<em> 类可以将列向右侧偏移。这些类实际是通过使用 </em> 选择器为当前元素增加了左侧的边距（margin）。例如，.col-md-offset-4 类将 .col-md-4 元素向右侧偏移了4个列（column）的宽度。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4&quot;</span>&gt;</span>.col-md-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4 col-md-offset-4&quot;</span>&gt;</span>.col-md-4 .col-md-offset-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-3 col-md-offset-3&quot;</span>&gt;</span>.col-md-3 .col-md-offset-3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-3 col-md-offset-3&quot;</span>&gt;</span>.col-md-3 .col-md-offset-3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-6 col-md-offset-3&quot;</span>&gt;</span>.col-md-6 .col-md-offset-3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-6-列位置移动"><a href="#1-2-6-列位置移动" class="headerlink" title="1.2.6 列位置移动"></a>1.2.6 列位置移动</h3><p>通过使用 .col-md-push-<em> 和 .col-md-pull-</em> 类就可以很容易的改变列（column）的顺序。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-9 col-md-push-3&quot;</span>&gt;</span>.col-md-9 .col-md-push-3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-3 col-md-pull-9&quot;</span>&gt;</span>.col-md-3 .col-md-pull-9<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-3-排版"><a href="#1-3-排版" class="headerlink" title="1.3 排版"></a>1.3 排版</h3><h3 id="1-3-1-标题"><a href="#1-3-1-标题" class="headerlink" title="1.3.1 标题"></a>1.3.1 标题</h3><p>HTML 中的所有标题标签，<h1> 到 <h6> 均可使用。另外，还提供了 .h1 到 .h6 类，为的是给内联（inline）属性的文本赋予标题的样式。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>h1. Bootstrap heading<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>h2. Bootstrap heading<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>h3. Bootstrap heading<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>h4. Bootstrap heading<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>h5. Bootstrap heading<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>h6. Bootstrap heading<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure><p><h1>h1. Bootstrap heading</h1></p><p><h2>h2. Bootstrap heading</h2></p><p><h3>h3. Bootstrap heading</h3></p><p><h4>h4. Bootstrap heading</h4></p><p><h5>h5. Bootstrap heading</h5></p><h6>h6. Bootstrap heading</h6><p>在标题内还可以包含 <small> 标签或赋予 .small 类的元素，可以用来标记副标题。</p><p><h1>h1. Bootstrap heading <small>Secondary text</small></h1></p><p><h2>h2. Bootstrap heading <small>Secondary text</small></h2></p><p><h3>h3. Bootstrap heading <small>Secondary text</small></h3></p><p><h4>h4. Bootstrap heading <small>Secondary text</small></h4></p><p><h5>h5. Bootstrap heading <small>Secondary text</small></h5></p><h6>h6. Bootstrap heading <small>Secondary text</small></h6><h3 id="1-3-2-突出显示"><a href="#1-3-2-突出显示" class="headerlink" title="1.3.2 突出显示"></a>1.3.2 突出显示</h3><p>通过添加 .lead 类可以让段落突出显示。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;lead&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-3-3-对齐"><a href="#1-3-3-对齐" class="headerlink" title="1.3.3 对齐"></a>1.3.3 对齐</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-left&quot;</span>&gt;</span>Left aligned text.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-center&quot;</span>&gt;</span>Center aligned text.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-right&quot;</span>&gt;</span>Right aligned text.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-justify&quot;</span>&gt;</span>Justified text.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-nowrap&quot;</span>&gt;</span>No wrap text.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-3-4-改变大小写"><a href="#1-3-4-改变大小写" class="headerlink" title="1.3.4 改变大小写"></a>1.3.4 改变大小写</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-lowercase&quot;</span>&gt;</span>Lowercased text.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-uppercase&quot;</span>&gt;</span>Uppercased text.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-capitalize&quot;</span>&gt;</span>Capitalized text.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-3-5-引用"><a href="#1-3-5-引用" class="headerlink" title="1.3.5 引用"></a>1.3.5 引用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span>Someone famous in <span class="tag">&lt;<span class="name">cite</span> <span class="attr">title</span>=<span class="string">&quot;Source Title&quot;</span>&gt;</span>Source Title<span class="tag">&lt;/<span class="name">cite</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">blockquote</span> <span class="attr">class</span>=<span class="string">&quot;blockquote-reverse&quot;</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante.</p></blockquote><blockquote> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante.</p> <footer>Someone famous in <cite title="Source Title">Source Title</cite></footer></blockquote> <blockquote class="blockquote-reverse">...</blockquote><h3 id="1-3-6-列表"><a href="#1-3-6-列表" class="headerlink" title="1.3.6 列表"></a>1.3.6 列表</h3><p><strong>无样式列表</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list-unstyled&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>...<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>内联列表</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list-inline&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>...<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>水平排列的内联列表</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span> <span class="attr">class</span>=<span class="string">&quot;dl-horizontal&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span>...<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>...<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-4-代码"><a href="#1-4-代码" class="headerlink" title="1.4 代码"></a>1.4 代码</h3><h3 id="1-4-1-内联代码"><a href="#1-4-1-内联代码" class="headerlink" title="1.4.1 内联代码"></a>1.4.1 内联代码</h3><p>通过 <code> 标签包裹内联样式的代码片段。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">For example, <span class="tag">&lt;<span class="name">code</span>&gt;</span><span class="symbol">&amp;lt;</span>section<span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">code</span>&gt;</span> should be wrapped as inline.</span><br></pre></td></tr></table></figure><p>For example, <code>&lt;section&gt;</code> should be wrapped as inline.</p><h3 id="1-4-2-用户输入"><a href="#1-4-2-用户输入" class="headerlink" title="1.4.2 用户输入"></a>1.4.2 用户输入</h3><p>通过 <kbd> 标签标记用户通过键盘输入的内容。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">To switch directories, type <span class="tag">&lt;<span class="name">kbd</span>&gt;</span>cd<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span> followed by the name of the directory.<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">To edit settings, press <span class="tag">&lt;<span class="name">kbd</span>&gt;</span><span class="tag">&lt;<span class="name">kbd</span>&gt;</span>ctrl<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span> + <span class="tag">&lt;<span class="name">kbd</span>&gt;</span>,<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span><br></pre></td></tr></table></figure><p>To switch directories, type <kbd>cd</kbd> followed by the name of the directory.<br><br>To edit settings, press <kbd><kbd>ctrl</kbd> + <kbd>,</kbd>&lt;/kbd&gt;</p><h3 id="1-4-3-代码块"><a href="#1-4-3-代码块" class="headerlink" title="1.4.3 代码块"></a>1.4.3 代码块</h3><p>多行代码可以使用 <pre> 标签。为了正确的展示代码，注意将尖括号做转义处理。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span><span class="symbol">&amp;lt;</span>p<span class="symbol">&amp;gt;</span>Sample text here...<span class="symbol">&amp;lt;</span>/p<span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br></pre></td></tr></table></figure><p>还可以使用 .pre-scrollable 类，其作用是设置 max-height 为 350px ，并在垂直方向展示滚动条。</p><h3 id="1-4-3-变量"><a href="#1-4-3-变量" class="headerlink" title="1.4.3 变量"></a>1.4.3 变量</h3><p>通过 <var> 标签标记变量。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">var</span>&gt;</span>y<span class="tag">&lt;/<span class="name">var</span>&gt;</span> = <span class="tag">&lt;<span class="name">var</span>&gt;</span>m<span class="tag">&lt;/<span class="name">var</span>&gt;</span><span class="tag">&lt;<span class="name">var</span>&gt;</span>x<span class="tag">&lt;/<span class="name">var</span>&gt;</span> + <span class="tag">&lt;<span class="name">var</span>&gt;</span>b<span class="tag">&lt;/<span class="name">var</span>&gt;</span></span><br></pre></td></tr></table></figure><p><var>y</var> = <var>m</var><var>x</var> + <var>b</var></p><h3 id="1-4-4-程序输出"><a href="#1-4-4-程序输出" class="headerlink" title="1.4.4 程序输出"></a>1.4.4 程序输出</h3><p>通过 <samp> 标签来标记程序输出的内容。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">samp</span>&gt;</span>This text is meant to be treated as sample output from a computer program.<span class="tag">&lt;/<span class="name">samp</span>&gt;</span></span><br></pre></td></tr></table></figure><p><samp>This text is meant to be treated as sample output from a computer program.</samp></p><h3 id="1-5-表格"><a href="#1-5-表格" class="headerlink" title="1.5 表格"></a>1.5 表格</h3><h3 id="1-5-1-基本"><a href="#1-5-1-基本" class="headerlink" title="1.5.1 基本"></a>1.5.1 基本</h3><p>为任意 <table> 标签添加 .table 类可以为其赋予基本的样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table&quot;</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-5-2-条纹状表格"><a href="#1-5-2-条纹状表格" class="headerlink" title="1.5.2 条纹状表格"></a>1.5.2 条纹状表格</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table table-striped&quot;</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-5-3-带边框的表格"><a href="#1-5-3-带边框的表格" class="headerlink" title="1.5.3 带边框的表格"></a>1.5.3 带边框的表格</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table table-bordered&quot;</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-5-4-鼠标悬停"><a href="#1-5-4-鼠标悬停" class="headerlink" title="1.5.4 鼠标悬停"></a>1.5.4 鼠标悬停</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table table-hover&quot;</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-5-5-紧缩表格"><a href="#1-5-5-紧缩表格" class="headerlink" title="1.5.5 紧缩表格"></a>1.5.5 紧缩表格</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table table-condensed&quot;</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-5-6-状态类"><a href="#1-5-6-状态类" class="headerlink" title="1.5.6 状态类"></a>1.5.6 状态类</h3><p>通过这些状态类可以为行或单元格设置颜色。</p><div class="table-container"><table><thead><tr><th style="text-align:left">Class</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:left"></td></tr></tbody></table></div><h3 id="1-5-7-响应式表格"><a href="#1-5-7-响应式表格" class="headerlink" title="1.5.7 响应式表格"></a>1.5.7 响应式表格</h3><p>将任何 .table 元素包裹在 .table-responsive 元素内，即可创建响应式表格，其会在小屏幕设备上（小于768px）水平滚动。当屏幕大于 768px 宽度时，水平滚动条消失。</p><h3 id="1-6-表单"><a href="#1-6-表单" class="headerlink" title="1.6 表单"></a>1.6 表单</h3><h3 id="1-6-1-基本实例"><a href="#1-6-1-基本实例" class="headerlink" title="1.6.1 基本实例"></a>1.6.1 基本实例</h3><p>单独的表单控件会被自动赋予一些全局样式。所有设置了 .form-control 类的 <input>、<textarea> 和 <select>  元素都将被默认设置宽度属性为 width: 100%;。 将 label 元素和前面提到的控件包裹在 .form-group  中可以获得最好的排列。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;exampleInputEmail1&quot;</span>&gt;</span>Email address<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">id</span>=<span class="string">&quot;exampleInputEmail1&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Email&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;exampleInputPassword1&quot;</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">id</span>=<span class="string">&quot;exampleInputPassword1&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Password&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;exampleInputFile&quot;</span>&gt;</span>File input<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;exampleInputFile&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;help-block&quot;</span>&gt;</span>Example block-level help text here.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span> Check me out</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><form>  <div class="form-group">    <label for="exampleInputEmail1">Email address</label>    <input type="email" class="form-control" id="exampleInputEmail1" placeholder="Email">  </div>  <div class="form-group">    <label for="exampleInputPassword1">Password</label>    <input type="password" class="form-control" id="exampleInputPassword1" placeholder="Password">  </div>  <div class="form-group">    <label for="exampleInputFile">File input</label>    <input type="file" id="exampleInputFile">    <p class="help-block">Example block-level help text here.</p>  </div>  <div class="checkbox">    <label>      <input type="checkbox"> Check me out    </label>  </div>  <button type="submit" class="btn btn-default">Submit</button> </form><h3 id="1-6-2-内联表单"><a href="#1-6-2-内联表单" class="headerlink" title="1.6.2 内联表单"></a>1.6.2 内联表单</h3><p>为 <form> 元素添加 .form-inline 类可使其内容左对齐并且表现为 inline-block 级别的控件。<strong>只适用于视口（viewport）至少在 768px 宽度时（视口宽度再小的话就会使表单折叠）</strong></p><h3 id="1-6-3-水平排列的表单"><a href="#1-6-3-水平排列的表单" class="headerlink" title="1.6.3 水平排列的表单"></a>1.6.3 水平排列的表单</h3><p>通过为表单添加 .form-horizontal 类，并联合使用 Bootstrap 预置的栅格类，可以将 label 标签和控件组水平并排布局。这样做将改变 .form-group 的行为，使其表现为栅格系统中的行（row），因此就无需再额外添加 .row 了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;form-horizontal&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;inputEmail3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-2 control-label&quot;</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-10&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">id</span>=<span class="string">&quot;inputEmail3&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Email&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;inputPassword3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-2 control-label&quot;</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-10&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">id</span>=<span class="string">&quot;inputPassword3&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Password&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-offset-2 col-sm-10&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span> Remember me</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-offset-2 col-sm-10&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span>Sign in<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><form class="form-horizontal">  <div class="form-group">    <label for="inputEmail3" class="col-sm-2 control-label">Email</label>    <div class="col-sm-10">      <input type="email" class="form-control" id="inputEmail3" placeholder="Email">    </div>  </div>  <div class="form-group">    <label for="inputPassword3" class="col-sm-2 control-label">Password</label>    <div class="col-sm-10">      <input type="password" class="form-control" id="inputPassword3" placeholder="Password">    </div>  </div>  <div class="form-group">    <div class="col-sm-offset-2 col-sm-10">      <div class="checkbox">        <label>          <input type="checkbox"> Remember me        </label>      </div>    </div>  </div>  <div class="form-group">    <div class="col-sm-offset-2 col-sm-10">      <button type="submit" class="btn btn-default">Sign in</button>    </div>  </div> </form><h3 id="1-6-4-表单控件"><a href="#1-6-4-表单控件" class="headerlink" title="1.6.4 表单控件"></a>1.6.4 表单控件</h3><h3 id="输入框"><a href="#输入框" class="headerlink" title="输入框"></a>输入框</h3><p>包括大部分表单控件、文本输入域控件，还支持所有 HTML5 类型的输入控件：  text、password、datetime、datetime-local、date、month、time、week、number、email、url、search、tel 和 color。</p><p>只有正确设置了 type 属性的输入控件才能被赋予正确的样式。</p><h3 id="文本域"><a href="#文本域" class="headerlink" title="文本域"></a>文本域</h3><p>支持多行文本的表单控件。可根据需要改变 rows 属性。</p><h3 id="多选和单选框"><a href="#多选和单选框" class="headerlink" title="多选和单选框"></a>多选和单选框</h3><p><strong>默认样式</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">Option one is this and that<span class="symbol">&amp;mdash;</span>be sure to include why it&#x27;s great</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;checkbox disabled&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">disabled</span>&gt;</span></span><br><span class="line">Option two is disabled</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">​</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;radio&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;optionsRadios&quot;</span> <span class="attr">id</span>=<span class="string">&quot;optionsRadios1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;option1&quot;</span> <span class="attr">checked</span>&gt;</span></span><br><span class="line">Option one is this and that<span class="symbol">&amp;mdash;</span>be sure to include why it&#x27;s great</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;radio&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;optionsRadios&quot;</span> <span class="attr">id</span>=<span class="string">&quot;optionsRadios2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;option2&quot;</span>&gt;</span></span><br><span class="line">Option two can be something else and selecting it will deselect option one</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;radio disabled&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;optionsRadios&quot;</span> <span class="attr">id</span>=<span class="string">&quot;optionsRadios3&quot;</span> <span class="attr">value</span>=<span class="string">&quot;option3&quot;</span> <span class="attr">disabled</span>&gt;</span></span><br><span class="line">Option three is disabled</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="checkbox">  <label>    <input type="checkbox" value="">   Option one is this and that&mdash;be sure to include why it's great  </label> </div> <div class="checkbox disabled">  <label>    <input type="checkbox" value="" disabled>   Option two is disabled  </label> </div>  <div class="radio">  <label>    <input type="radio" name="optionsRadios" id="optionsRadios1" value="option1" checked>   Option one is this and that&mdash;be sure to include why it's great  </label> </div> <div class="radio">  <label>    <input type="radio" name="optionsRadios" id="optionsRadios2" value="option2">   Option two can be something else and selecting it will deselect option one  </label> </div> <div class="radio disabled">  <label>    <input type="radio" name="optionsRadios" id="optionsRadios3" value="option3" disabled>   Option three is disabled  </label> </div><p><strong>内联单选和多选框</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;checkbox-inline&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;inlineCheckbox1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;option1&quot;</span>&gt;</span> 1</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;checkbox-inline&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;inlineCheckbox2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;option2&quot;</span>&gt;</span> 2</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;checkbox-inline&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;inlineCheckbox3&quot;</span> <span class="attr">value</span>=<span class="string">&quot;option3&quot;</span>&gt;</span> 3</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">​</span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;radio-inline&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;inlineRadioOptions&quot;</span> <span class="attr">id</span>=<span class="string">&quot;inlineRadio1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;option1&quot;</span>&gt;</span> 1</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;radio-inline&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;inlineRadioOptions&quot;</span> <span class="attr">id</span>=<span class="string">&quot;inlineRadio2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;option2&quot;</span>&gt;</span> 2</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;radio-inline&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;inlineRadioOptions&quot;</span> <span class="attr">id</span>=<span class="string">&quot;inlineRadio3&quot;</span> <span class="attr">value</span>=<span class="string">&quot;option3&quot;</span>&gt;</span> 3</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>不带文本的Checkbox 和 radio</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;blankCheckbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;option1&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;radio&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;blankRadio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;blankRadio1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;option1&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="下拉列表"><a href="#下拉列表" class="headerlink" title="下拉列表"></a>下拉列表</h3><select class="form-control"> <option>1</option> <option>2</option> <option>3</option> <option>4</option> <option>5</option></select><select class="form-control"> <option>1</option> <option>2</option> <option>3</option> <option>4</option> <option>5</option></select><h3 id="静态内容"><a href="#静态内容" class="headerlink" title="静态内容"></a>静态内容</h3><p>如果需要在表单中将一行纯文本和 label 元素放置于同一行，为 <p> 元素添加 .form-control-static 类即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;form-horizontal&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-2 control-label&quot;</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-10&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;form-control-static&quot;</span>&gt;</span>email@example.com<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;inputPassword&quot;</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-2 control-label&quot;</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-10&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">id</span>=<span class="string">&quot;inputPassword&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Password&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><form class="form-horizontal">  <div class="form-group">    <label class="col-sm-2 control-label">Email</label>    <div class="col-sm-10">      <p class="form-control-static">email@example.com</p>    </div>  </div>  <div class="form-group">    <label for="inputPassword" class="col-sm-2 control-label">Password</label>    <div class="col-sm-10">      <input type="password" class="form-control" id="inputPassword" placeholder="Password">    </div>  </div> </form><p>####帮助文字</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span> <span class="attr">for</span>=<span class="string">&quot;inputHelpBlock&quot;</span>&gt;</span>Input with help text<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;inputHelpBlock&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">aria-describedby</span>=<span class="string">&quot;helpBlock&quot;</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;helpBlock&quot;</span> <span class="attr">class</span>=<span class="string">&quot;help-block&quot;</span>&gt;</span>A block of help text that breaks onto a new line and may extend beyond one line.<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="校验状态"><a href="#校验状态" class="headerlink" title="校验状态"></a>校验状态</h3><p>Bootstrap 对表单控件的校验状态，如 error、warning 和 success 状态，都定义了样式。使用时，添加  .has-warning、.has-error或 .has-success 类到这些控件的父元素即可。任何包含在此元素之内的  .control-label、.form-control 和 .help-block 元素都将接受这些校验状态的样式。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group has-success&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;control-label&quot;</span> <span class="attr">for</span>=<span class="string">&quot;inputSuccess1&quot;</span>&gt;</span>Input with success<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">id</span>=<span class="string">&quot;inputSuccess1&quot;</span> <span class="attr">aria-describedby</span>=<span class="string">&quot;helpBlock2&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;helpBlock2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;help-block&quot;</span>&gt;</span>A block of help text that breaks onto a new line and may extend beyond one line.<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group has-warning&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;control-label&quot;</span> <span class="attr">for</span>=<span class="string">&quot;inputWarning1&quot;</span>&gt;</span>Input with warning<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">id</span>=<span class="string">&quot;inputWarning1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group has-error&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;control-label&quot;</span> <span class="attr">for</span>=<span class="string">&quot;inputError1&quot;</span>&gt;</span>Input with error<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">id</span>=<span class="string">&quot;inputError1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;has-success&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;checkboxSuccess&quot;</span> <span class="attr">value</span>=<span class="string">&quot;option1&quot;</span>&gt;</span></span><br><span class="line">Checkbox with success</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;has-warning&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;checkboxWarning&quot;</span> <span class="attr">value</span>=<span class="string">&quot;option1&quot;</span>&gt;</span></span><br><span class="line">Checkbox with warning</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;has-error&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;checkboxError&quot;</span> <span class="attr">value</span>=<span class="string">&quot;option1&quot;</span>&gt;</span></span><br><span class="line">Checkbox with error</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure> <div class="form-group has-success">  <label class="control-label" for="inputSuccess1">Input with success</label>  <input type="text" class="form-control" id="inputSuccess1" aria-describedby="helpBlock2">   <span id="helpBlock2" class="help-block">A block of help text  that breaks onto a new line and may extend beyond one line.</span> </div> <div class="form-group has-warning">  <label class="control-label" for="inputWarning1">Input with warning</label>  <input type="text" class="form-control" id="inputWarning1"> </div> <div class="form-group has-error">  <label class="control-label" for="inputError1">Input with error</label>  <input type="text" class="form-control" id="inputError1"> </div> <div class="has-success">  <div class="checkbox">    <label>      <input type="checkbox" id="checkboxSuccess" value="option1">     Checkbox with success    </label>  </div> </div> <div class="has-warning">  <div class="checkbox">    <label>      <input type="checkbox" id="checkboxWarning" value="option1">     Checkbox with warning    </label>  </div> </div> <div class="has-error">  <div class="checkbox">    <label>      <input type="checkbox" id="checkboxError" value="option1">     Checkbox with error    </label>  </div> </div><h3 id="添加额外的图标"><a href="#添加额外的图标" class="headerlink" title="添加额外的图标"></a>添加额外的图标</h3><p>你还可以针对校验状态为输入框添加额外的图标。只需设置相应的 .has-feedback 类并添加正确的图标即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group has-success has-feedback&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;control-label&quot;</span> <span class="attr">for</span>=<span class="string">&quot;inputSuccess2&quot;</span>&gt;</span>Input with success<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">id</span>=<span class="string">&quot;inputSuccess2&quot;</span> <span class="attr">aria-describedby</span>=<span class="string">&quot;inputSuccess2Status&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-ok form-control-feedback&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;inputSuccess2Status&quot;</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>(success)<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="form-group has-success has-feedback">  <label class="control-label" for="inputSuccess2">Input with success</label>  <input type="text" class="form-control" id="inputSuccess2" aria-describedby="inputSuccess2Status">  <span class="glyphicon glyphicon-ok form-control-feedback" aria-hidden="true"></span>  <span id="inputSuccess2Status" class="sr-only">(success)</span> </div><h3 id="控件尺寸"><a href="#控件尺寸" class="headerlink" title="控件尺寸"></a>控件尺寸</h3><p>通过 .input-lg 类似的类可以为控件设置高度，通过 .col-lg-* 类似的类可以为控件设置宽度。</p><p><strong>高度尺寸</strong></p><p>创建大一些或小一些的表单控件以匹配按钮尺寸</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;form-control input-lg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;.input-lg&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Default input&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;form-control input-sm&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;.input-sm&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">&quot;form-control input-lg&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">&quot;form-control input-sm&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>水平排列的表单组的尺寸</strong></p><p>通过添加 .form-group-lg 或 .form-group-sm 类，为 .form-horizontal 包裹的 label 元素和表单控件快速设置尺寸。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;form-horizontal&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group form-group-lg&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-2 control-label&quot;</span> <span class="attr">for</span>=<span class="string">&quot;formGroupInputLarge&quot;</span>&gt;</span>Large label<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-10&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;formGroupInputLarge&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Large input&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group form-group-sm&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-2 control-label&quot;</span> <span class="attr">for</span>=<span class="string">&quot;formGroupInputSmall&quot;</span>&gt;</span>Small label<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-10&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;formGroupInputSmall&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Small input&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><form class="form-horizontal">  <div class="form-group form-group-lg">    <label class="col-sm-2 control-label" for="formGroupInputLarge">Large label</label>    <div class="col-sm-10">      <input class="form-control" type="text" id="formGroupInputLarge" placeholder="Large input">    </div>  </div>  <div class="form-group form-group-sm">    <label class="col-sm-2 control-label" for="formGroupInputSmall">Small label</label>    <div class="col-sm-10">      <input class="form-control" type="text" id="formGroupInputSmall" placeholder="Small input">    </div>  </div> </form><h3 id="1-7-按钮"><a href="#1-7-按钮" class="headerlink" title="1.7 按钮"></a>1.7 按钮</h3><h3 id="1-7-1-可作为按钮使用的标签或元素"><a href="#1-7-1-可作为按钮使用的标签或元素" class="headerlink" title="1.7.1 可作为按钮使用的标签或元素"></a>1.7.1 可作为按钮使用的标签或元素</h3><p>为 <a>、<button> 或 <input> 元素添加按钮类（button class）即可使用 Bootstrap 提供的样式 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Input&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-7-2-预定义样式"><a href="#1-7-2-预定义样式" class="headerlink" title="1.7.2 预定义样式"></a>1.7.2 预定义样式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Standard button --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span>（默认样式）Default<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Provides extra visual weight and identifies the primary action in a set of buttons --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>（首选项）Primary<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Indicates a successful or positive action --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-success&quot;</span>&gt;</span>（成功）Success<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Contextual button for informational alert messages --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-info&quot;</span>&gt;</span>（一般信息）Info<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Indicates caution should be taken with this action --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-warning&quot;</span>&gt;</span>（警告）Warning<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Indicates a dangerous or potentially negative action --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-danger&quot;</span>&gt;</span>（危险）Danger<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Deemphasize a button by making it look like a link while maintaining button behavior --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-link&quot;</span>&gt;</span>（链接）Link<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-7-3-尺寸"><a href="#1-7-3-尺寸" class="headerlink" title="1.7.3 尺寸"></a>1.7.3 尺寸</h3><p>需要让按钮具有不同尺寸吗？使用 .btn-lg、.btn-sm 或 .btn-xs 就可以获得不同尺寸的按钮。</p><p>通过给按钮添加 .btn-block 类可以将其拉伸至父元素100%的宽度，而且按钮也变为了块级（block）元素。</p><h3 id="1-7-4-激活状态"><a href="#1-7-4-激活状态" class="headerlink" title="1.7.4 激活状态"></a>1.7.4 激活状态</h3><p>添加 .active 类</p><h3 id="1-7-5-禁用状态"><a href="#1-7-5-禁用状态" class="headerlink" title="1.7.5 禁用状态"></a>1.7.5 禁用状态</h3><p>为 <button> 元素添加 disabled 属性，使其表现出禁用状态。</p><p>为基于 <a> 元素创建的按钮添加 .disabled 类。</p><h3 id="1-8-图片"><a href="#1-8-图片" class="headerlink" title="1.8 图片"></a>1.8 图片</h3><h3 id="1-8-1-响应式图片"><a href="#1-8-1-响应式图片" class="headerlink" title="1.8.1 响应式图片"></a>1.8.1 响应式图片</h3><p>在 Bootstrap 版本 3 中，通过为图片添加 .img-responsive 类可以让图片支持响应式布局。其实质是为图片设置了  max-width: 100%;、 height: auto; 和 display: block; 属性，从而让图片在其父元素中更好的缩放。</p><p>如果需要让使用了 .img-responsive 类的图片水平居中，请使用 .center-block 类，不要用 .text-center</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;...&quot;</span> <span class="attr">class</span>=<span class="string">&quot;img-responsive&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Responsive image&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-8-2-图片形状"><a href="#1-8-2-图片形状" class="headerlink" title="1.8.2 图片形状"></a>1.8.2 图片形状</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;...&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;...&quot;</span> <span class="attr">class</span>=<span class="string">&quot;img-rounded&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;...&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;...&quot;</span> <span class="attr">class</span>=<span class="string">&quot;img-circle&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;...&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;...&quot;</span> <span class="attr">class</span>=<span class="string">&quot;img-thumbnail&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-9-辅助类"><a href="#1-9-辅助类" class="headerlink" title="1.9 辅助类"></a>1.9 辅助类</h3><h3 id="1-9-1-文本颜色"><a href="#1-9-1-文本颜色" class="headerlink" title="1.9.1 文本颜色"></a>1.9.1 文本颜色</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-muted&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-primary&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-success&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-info&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-warning&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-danger&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-9-2-背景色"><a href="#1-9-2-背景色" class="headerlink" title="1.9.2 背景色"></a>1.9.2 背景色</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;bg-primary&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;bg-success&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;bg-info&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;bg-warning&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;bg-danger&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-9-3-三角符号"><a href="#1-9-3-三角符号" class="headerlink" title="1.9.3 三角符号"></a>1.9.3 三角符号</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;span class=&quot;caret&quot;&gt;&lt;/span&gt;</span><br></pre></td></tr></table></figure><h3 id="1-9-4-浮动"><a href="#1-9-4-浮动" class="headerlink" title="1.9.4 浮动"></a>1.9.4 浮动</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pull-left&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pull-right&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-9-5-让内容块居中"><a href="#1-9-5-让内容块居中" class="headerlink" title="1.9.5 让内容块居中"></a>1.9.5 让内容块居中</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center-block&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-9-6-清除浮动"><a href="#1-9-6-清除浮动" class="headerlink" title="1.9.6 清除浮动"></a>1.9.6 清除浮动</h3><p><strong>通过为父元素</strong>添加 .clearfix 类可以很容易地清除浮动（float）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Usage as a class --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clearfix&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-9-7-显示或隐藏内容"><a href="#1-9-7-显示或隐藏内容" class="headerlink" title="1.9.7 显示或隐藏内容"></a>1.9.7 显示或隐藏内容</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;show&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hidden&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-9-8-图片替换"><a href="#1-9-8-图片替换" class="headerlink" title="1.9.8 图片替换"></a>1.9.8 图片替换</h3><p>使用 .text-hide 类或对应的 mixin 可以用来将元素的文本内容替换为一张背景图。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;text-hide&quot;</span>&gt;</span>Custom heading<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-10-响应式工具"><a href="#1-10-响应式工具" class="headerlink" title="1.10 响应式工具"></a>1.10 响应式工具</h3><h3 id="1-10-1-不同视口下隐藏显示"><a href="#1-10-1-不同视口下隐藏显示" class="headerlink" title="1.10.1 不同视口下隐藏显示"></a>1.10.1 不同视口下隐藏显示</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.visible-xs-*</span><br><span class="line">.visible-sm-*</span><br><span class="line">.visible-md-*</span><br><span class="line">.visible-lg-*</span><br><span class="line">.hidden-xs</span><br><span class="line">.hidden-sm</span><br><span class="line">.hidden-md</span><br><span class="line">.hidden-lg</span><br><span class="line"></span><br><span class="line">.visible-*-block</span><br><span class="line">.visible-*-inline</span><br><span class="line">.visible-*-inline-block</span><br></pre></td></tr></table></figure><h3 id="1-10-2-打印类"><a href="#1-10-2-打印类" class="headerlink" title="1.10.2 打印类"></a>1.10.2 打印类</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.visible-print-block</span><br><span class="line">.visible-print-inline</span><br><span class="line">.visible-print-inline-block</span><br><span class="line"></span><br><span class="line">.hidden-print 打印机下隐藏</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/11/28/%E5%89%8D%E7%AB%AF/Bootstrap%E4%B9%8B%E6%8F%92%E4%BB%B6/"/>
      <url>/2021/11/28/%E5%89%8D%E7%AB%AF/Bootstrap%E4%B9%8B%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>Bootstrap插件</p><h1 id="2-1-BootStrap插件使用规则"><a href="#2-1-BootStrap插件使用规则" class="headerlink" title="2.1 BootStrap插件使用规则"></a>2.1 BootStrap插件使用规则</h1><p>2.1.1 单个引入</p><p>JavaScript 插件可以单个引入（使用 Bootstrap 提供的单个 <em>*.js</em> 文件），或者一次性全部引入（使用 <em>bootstrap.js</em> 或压缩版的 <em>bootstrap.min.js</em>）。 </p><p>某些插件和 CSS 组件依赖于其它插件。如果你是单个引入每个插件的，请确保在文档中检查插件之间的依赖关系。注意，所有插件都依赖 jQuery （也就是说，jQuery必须在所有插件<strong>之前</strong>引入页面）。 <em><a href="https://link.zhihu.com/?target=https%3A//github.com/twbs/bootstrap/blob/v3.3.7/bower.json">bower.json</a></em> 文件中列出了 Bootstrap 所支持的 jQuery 版本。</p><p>2.1.2 data属性</p><p>你可以仅仅通过 data 属性 API 就能使用所有的 Bootstrap 插件，无需写一行 JavaScript 代码。这是 Bootstrap 中的一等 API，也应该是你的首选方式。</p><p>话又说回来，在某些情况下可能需要将此功能关闭。因此，我们还提供了关闭 data 属性 API 的方法，即解除以 <em>data-api</em> 为命名空间并绑定在文档上的事件。就像下面这样：</p><p>$(document).off(‘.data-api’)</p><p>另外，如果是针对某个特定的插件，只需在 <em>data-api</em> 前面添加那个插件的名称作为命名空间，如下：</p><p>$(document).off(‘.alert.data-api’)</p><p>2.1.3 编程方式的 API</p><p>我们为所有 Bootstrap 插件提供了纯 JavaScript 方式的 API。所有公开的 API 都是支持单独或链式调用方式，并且返回其所操作的元素集合（注：和jQuery的调用形式一致）。</p><p><em>$(‘.btn.danger’).button(‘toggle’).addClass(‘fat’)</em></p><p>所有方法都可以接受一个可选的 option 对象作为参数，或者一个代表特定方法的字符串，或者什么也不提供（在这种情况下，插件将会以默认值初始化）：</p><p><em>$(‘#myModal’).modal()</em> // 以默认值初始化<br><em>$(‘#myModal’).modal({ keyboard: <strong>false</strong> })</em> // initialized with no keyboard<br><em>$(‘#myModal’).modal(‘show’)</em> // 初始化后立即调用 show 方法</p><p>每个插件还通过 <em>Constructor</em> 属性暴露了其原始的构造函数：<em>$.fn.popover.Constructor</em>。如果你想获取某个插件的实例，可以直接通过页面元素获取：<em>$(‘[rel=”popover”]’).data(‘popover’)</em>。</p><p><strong>默认设置</strong></p><p>每个插件都可以通过修改其自身的 <em>Constructor.DEFAULTS</em> 对象从而改变插件的默认设置：</p><p>$.fn.modal.Constructor.DEFAULTS.keyboard = <strong>false</strong> <em>// 将模态框插件的 <code>keyboard</code> 默认选参数置为 false</em></p><p>2.1.4 避免命名空间冲突</p><p>某些时候可能需要将 Bootstrap 插件与其他 UI 框架共同使用。在这种情况下，命名空间冲突随时可能发生。如果不幸发生了这种情况，你可以通过调用插件的 <em>.noConflict</em> 方法恢复其原始值。</p><p><strong>var</strong> bootstrapButton = $.fn.button.noConflict() <em>// return $.fn.button to previously assigned value</em><br>$.fn.bootstrapBtn = bootstrapButton <em>// give $().bootstrapBtn the Bootstrap functionality</em></p><p>2.1.5 事件</p><p>Bootstrap 为大部分插件所具有的动作提供了自定义事件。一般来说，这些事件都有不定式和过去式两种动词的命名形式，例如，不定式形式的动词（例如 <em>show</em>）表示其在事件开始时被触发；而过去式动词（例如 <em>shown</em> ）表示在动作执行完毕之后被触发。</p><p>从 3.0.0 版本开始，所有 Bootstrap 事件的名称都采用命名空间方式。</p><p>所有以不定式形式的动词命名的事件都提供了 <em>preventDefault</em> 功能。这就赋予你在动作开始执行前将其停止的能力。</p><p>$(‘#myModal’).on(‘show.bs.modal’, function (e) {<br> if (!data) return e.preventDefault() // 阻止模态框的展示<br>})</p><p>2.1.6 版本号</p><p>每个 Bootstrap 的 jQuery 插件的版本号都可以通过插件的构造函数上的 <em>VERSION</em> 属性获取到。例如工具提示框（tooltip）插件：</p><p>$.fn.tooltip.Constructor.VERSION // =&gt; “3.3.7”</p><h1 id="2-2-过渡效果-transition-js"><a href="#2-2-过渡效果-transition-js" class="headerlink" title="2.2 过渡效果 transition.js"></a>2.2 过渡效果 transition.js</h1><p>2.2.1 关于过渡效果</p><p>对于简单的过渡效果，只需将 <em>transition.js</em> 和其它 JS 文件一起引入即可。如果你使用的是编译（或压缩）版的 <em>bootstrap.js</em> 文件，就无需再单独将其引入了。</p><p>2.2.2 包含的内容</p><p>Transition.js 是针对 <em>transitionEnd</em> 事件的一个基本辅助工具，也是对 CSS 过渡效果的模拟。它被其它插件用来检测当前浏览器对是否支持 CSS 的过渡效果。</p><p>2.2.3 禁用过度效果</p><p>通过下面的 JavaScript 代码可以在全局范围禁用过渡效果，并且必须将此代码放在 <em>transition.js</em> （或 <em>bootstrap.js</em> 或 <em>bootstrap.min.js</em>）后面，确保在 js 文件加载完毕后再执行下面的代码：</p><p>$.support.transition = false</p><h1 id="2-3-模态框-modal-js"><a href="#2-3-模态框-modal-js" class="headerlink" title="2.3 模态框 modal.js"></a>2.3 模态框 modal.js</h1><p>务必将模态框的 HTML 代码放在文档的最高层级内（也就是说，尽量作为 body 标签的直接子元素），以避免其他组件影响模态框的展现和/或功能。 </p><p>2.3.1 模态框定义</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Modal --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal fade&quot;</span> <span class="attr">id</span>=<span class="string">&quot;myModal&quot;</span> <span class="attr">tabindex</span>=<span class="string">&quot;-1&quot;</span> <span class="attr">role</span>=<span class="string">&quot;dialog&quot;</span> <span class="attr">aria-labelledby</span>=<span class="string">&quot;myModalLabel&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-dialog&quot;</span> <span class="attr">role</span>=<span class="string">&quot;document&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-content&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-header&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;close&quot;</span> <span class="attr">data-dismiss</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;Close&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="symbol">&amp;times;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">&quot;modal-title&quot;</span> <span class="attr">id</span>=<span class="string">&quot;myModalLabel&quot;</span>&gt;</span>Modal title<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-body&quot;</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-footer&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span> <span class="attr">data-dismiss</span>=<span class="string">&quot;modal&quot;</span>&gt;</span>Close<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>Save changes<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.3.2 按钮</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Button trigger modal --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary btn-lg&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">data-target</span>=<span class="string">&quot;#myModal&quot;</span>&gt;</span></span><br><span class="line">Launch demo modal</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.3.3 模态框尺寸</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Large modal --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">data-target</span>=<span class="string">&quot;.bs-example-modal-lg&quot;</span>&gt;</span>Large modal<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal fade bs-example-modal-lg&quot;</span> <span class="attr">tabindex</span>=<span class="string">&quot;-1&quot;</span> <span class="attr">role</span>=<span class="string">&quot;dialog&quot;</span> <span class="attr">aria-labelledby</span>=<span class="string">&quot;myLargeModalLabel&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-dialog modal-lg&quot;</span> <span class="attr">role</span>=<span class="string">&quot;document&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-content&quot;</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Small modal --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">data-target</span>=<span class="string">&quot;.bs-example-modal-sm&quot;</span>&gt;</span>Small modal<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal fade bs-example-modal-sm&quot;</span> <span class="attr">tabindex</span>=<span class="string">&quot;-1&quot;</span> <span class="attr">role</span>=<span class="string">&quot;dialog&quot;</span> <span class="attr">aria-labelledby</span>=<span class="string">&quot;mySmallModalLabel&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-dialog modal-sm&quot;</span> <span class="attr">role</span>=<span class="string">&quot;document&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-content&quot;</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.3.4 禁止动画效果</p><p>如果你不需要模态框弹出时的动画效果（淡入淡出效果），删掉 <em>.fade</em> 类即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;modal&quot; tabindex=&quot;-1&quot; role=&quot;dialog&quot; aria-labelledby=&quot;...&quot;&gt;  </span><br><span class="line">... &lt;/div&gt;</span><br></pre></td></tr></table></figure><p>2.3.5 模态框中使用栅格系统</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal fade&quot;</span> <span class="attr">tabindex</span>=<span class="string">&quot;-1&quot;</span> <span class="attr">role</span>=<span class="string">&quot;dialog&quot;</span> <span class="attr">aria-labelledby</span>=<span class="string">&quot;gridSystemModalLabel&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-dialog&quot;</span> <span class="attr">role</span>=<span class="string">&quot;document&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-content&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-header&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;close&quot;</span> <span class="attr">data-dismiss</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;Close&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="symbol">&amp;times;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">&quot;modal-title&quot;</span> <span class="attr">id</span>=<span class="string">&quot;gridSystemModalLabel&quot;</span>&gt;</span>Modal title<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-body&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4&quot;</span>&gt;</span>.col-md-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4 col-md-offset-4&quot;</span>&gt;</span>.col-md-4 .col-md-offset-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-3 col-md-offset-3&quot;</span>&gt;</span>.col-md-3 .col-md-offset-3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-2 col-md-offset-4&quot;</span>&gt;</span>.col-md-2 .col-md-offset-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-6 col-md-offset-3&quot;</span>&gt;</span>.col-md-6 .col-md-offset-3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-9&quot;</span>&gt;</span></span><br><span class="line">Level 1: .col-sm-9</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-xs-8 col-sm-6&quot;</span>&gt;</span></span><br><span class="line">Level 2: .col-xs-8 .col-sm-6</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-xs-4 col-sm-6&quot;</span>&gt;</span></span><br><span class="line">Level 2: .col-xs-4 .col-sm-6</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-footer&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span> <span class="attr">data-dismiss</span>=<span class="string">&quot;modal&quot;</span>&gt;</span>Close<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>Save changes<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.modal-content --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.modal-dialog --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.modal --&gt;</span></span><br></pre></td></tr></table></figure><p>2.3.6 基于触发器按钮的不同模态内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">data-target</span>=<span class="string">&quot;#exampleModal&quot;</span> <span class="attr">data-whatever</span>=<span class="string">&quot;@mdo&quot;</span>&gt;</span>Open modal for @mdo<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">data-target</span>=<span class="string">&quot;#exampleModal&quot;</span> <span class="attr">data-whatever</span>=<span class="string">&quot;@fat&quot;</span>&gt;</span>Open modal for @fat<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">data-target</span>=<span class="string">&quot;#exampleModal&quot;</span> <span class="attr">data-whatever</span>=<span class="string">&quot;@getbootstrap&quot;</span>&gt;</span>Open modal for @getbootstrap<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">...more buttons...</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal fade&quot;</span> <span class="attr">id</span>=<span class="string">&quot;exampleModal&quot;</span> <span class="attr">tabindex</span>=<span class="string">&quot;-1&quot;</span> <span class="attr">role</span>=<span class="string">&quot;dialog&quot;</span> <span class="attr">aria-labelledby</span>=<span class="string">&quot;exampleModalLabel&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-dialog&quot;</span> <span class="attr">role</span>=<span class="string">&quot;document&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-content&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-header&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;close&quot;</span> <span class="attr">data-dismiss</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;Close&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="symbol">&amp;times;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">&quot;modal-title&quot;</span> <span class="attr">id</span>=<span class="string">&quot;exampleModalLabel&quot;</span>&gt;</span>New message<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-body&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;recipient-name&quot;</span> <span class="attr">class</span>=<span class="string">&quot;control-label&quot;</span>&gt;</span>Recipient:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">id</span>=<span class="string">&quot;recipient-name&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;message-text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;control-label&quot;</span>&gt;</span>Message:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">id</span>=<span class="string">&quot;message-text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-footer&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span> <span class="attr">data-dismiss</span>=<span class="string">&quot;modal&quot;</span>&gt;</span>Close<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>Send message<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">$(&#x27;#exampleModal&#x27;).on(&#x27;show.bs.modal&#x27;, function (event) &#123;</span><br><span class="line">var button = $(event.relatedTarget) // Button that triggered the modal</span><br><span class="line">var recipient = button.data(&#x27;whatever&#x27;) // Extract info from data-* attributes</span><br><span class="line">// If necessary, you could initiate an AJAX request here (and then do the updating in a callback).</span><br><span class="line">// Update the modal&#x27;s content. We&#x27;ll use jQuery here, but you could use a data binding library or other methods instead.</span><br><span class="line">var modal = $(this)</span><br><span class="line">modal.find(&#x27;.modal-title&#x27;).text(&#x27;New message to &#x27; + recipient)</span><br><span class="line">modal.find(&#x27;.modal-body input&#x27;).val(recipient)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>2.3.7 通过JavaScript处理模态框</p><p>打开</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&#x27;#myModal&#x27;).modal(options)</span><br></pre></td></tr></table></figure><p>参数</p><div class="table-container"><table><thead><tr><th>名称</th><th>类型</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>backdrop</td><td>boolean 或 字符串 ‘static’</td><td>true</td><td>I指定一个静态的背景，当用户点击模态框外部时不会关闭模态框。</td></tr><tr><td>keyboard</td><td>boolean</td><td>true</td><td>键盘上的 esc 键被按下时关闭模态框。</td></tr><tr><td>show</td><td>boolean</td><td>true</td><td>模态框初始化之后就立即显示出来。</td></tr><tr><td>remote</td><td>path</td><td>false</td><td>This option is deprecated since v3.3.0 and has been removed in v4. We  recommend instead using client-side templating or a data binding    framework, or calling jQuery.loadyourself.如果提供的是 URL，将利用 jQuery 的 load  方法从此 URL 地址加载要展示的内容（只加载一次）并插入 .modal-content 内。如果使用的是 data 属性 API，还可以利用  href 属性指定内容来源地址。下面是一个实例：<a data-toggle="modal" href="remote.html"   data-target="#modal">Click me</a></td></tr></tbody></table></div><p>方法</p><p><strong>.modal(options)\</strong></p><p>将页面中的某块内容作为模态框激活。接受可选参数 <em>object</em>。</p><p>$(‘#myModal’).modal({<br> keyboard: false<br>})</p><p><strong>.modal(‘toggle’)\</strong></p><p>手动打开或关闭模态框。<strong>在模态框显示或隐藏之前返回到主调函数中</strong>（也就是，在触发 <em>shown.bs.modal</em> 或 <em>hidden.bs.modal</em> 事件之前）。</p><p>$(‘#myModal’).modal(‘toggle’)</p><p><strong>.modal(‘show’)\</strong></p><p>手动打开模态框。<strong>在模态框显示之前返回到主调函数中</strong> （也就是，在触发 <em>shown.bs.modal</em> 事件之前）。</p><p>$(‘#myModal’).modal(‘show’)</p><p><strong>.modal(‘hide’)\</strong></p><p>手动隐藏模态框。<strong>在模态框隐藏之前返回到主调函数中</strong> （也就是，在触发 <em>hidden.bs.modal</em> 事件之前）。</p><p>$(‘#myModal’).modal(‘hide’)</p><p><strong>.modal(‘handleUpdate’)</strong></p><p>整模态的定位，以对抗滚动条，以防出现一个模式，这会使模态向左跳</p><p>只需要当模态的高度在打开时改变。</p><p>$(‘#myModal’).modal(‘handleUpdate’)</p><p>事件</p><p>Bootstrap 的模态框类提供了一些事件用于监听并执行你自己的代码。</p><div class="table-container"><table><thead><tr><th>事件类型</th><th>描述</th></tr></thead><tbody><tr><td>show.bs.modal</td><td>show 方法调用之后立即触发该事件。如果是通过点击某个作为触发器的元素，则此元素可以通过事件的   relatedTarget 属性进行访问。</td></tr><tr><td>shown.bs.modal</td><td>此事件在模态框已经显示出来（并且同时在 CSS 过渡效果完成）之后被触发。如果是通过点击某个作为触发器的元素，则此元素可以通过事件的 relatedTarget 属性进行访问。</td></tr><tr><td>hide.bs.modal</td><td>hide 方法调用之后立即触发该事件。</td></tr><tr><td>hidden.bs.modal</td><td>此事件在模态框被隐藏（并且同时在   CSS 过渡效果完成）之后被触发。</td></tr><tr><td>loaded.bs.modal</td><td>从远端的数据源加载完数据之后触发该事件。</td></tr></tbody></table></div><p><em>$(‘#myModal’).on(‘hidden.bs.modal’, <strong>function</strong> (e) {</em><br> // do something…<br><em>})</em></p><h1 id="2-4-下拉菜单-dropdown-js"><a href="#2-4-下拉菜单-dropdown-js" class="headerlink" title="2.4 下拉菜单 dropdown.js"></a>2.4 下拉菜单 dropdown.js</h1><p>2.4.1 JavaScript调用</p><p><em>$(‘.dropdown-toggle’).dropdown()</em></p><p>方法</p><p><strong>$().dropdown(‘toggle’)</strong></p><p>Toggles the dropdown menu of a given navbar or tabbed navigation.</p><p>事件</p><div class="table-container"><table><thead><tr><th>Event Type</th><th>Description</th></tr></thead><tbody><tr><td>show.bs.dropdown</td><td>This event fires immediately when the show instance method is called.</td></tr><tr><td>shown.bs.dropdown</td><td>This event is fired when the dropdown has been made visible to the   user (will wait for CSS transitions, to complete).</td></tr><tr><td>hide.bs.dropdown</td><td>This event is fired immediately when the hide instance method has been   called.</td></tr><tr><td>hidden.bs.dropdown</td><td>This event is fired when the dropdown has finished being hidden from   the user (will wait for CSS transitions, to complete).</td></tr></tbody></table></div><p><em>$(‘#myDropdown’).on(‘show.bs.dropdown’, <strong>function</strong> () {</em><br> // do something…<br><em>})</em></p><h1 id="2-5-滚动监听-scrollspy-js"><a href="#2-5-滚动监听-scrollspy-js" class="headerlink" title="2.5 滚动监听 scrollspy.js"></a>2.5 滚动监听 scrollspy.js</h1><p>滚动监听插件是用来根据滚动条所处的位置来自动更新导航项的。滚动导航条下面的区域并关注导航项的变化。下拉菜单中的条目也会自动高亮显示。</p><p>依赖 Bootstrap 的导航组件</p><p>滚动监听插件依赖 Bootstrap 的导航组件用于高亮显示当前激活的链接。</p><p>无论何种实现方式，滚动监听都需要被监听的组件是 <em>position: relative;</em> 即相对定位方式。大多数时候是监听 <em><body></em> 元素</p><p>2.5.1 基本调用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">position: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">data-spy</span>=<span class="string">&quot;scroll&quot;</span> <span class="attr">data-target</span>=<span class="string">&quot;#navbar-example&quot;</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;navbar-example&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav nav-tabs&quot;</span> <span class="attr">role</span>=<span class="string">&quot;tablist&quot;</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.5.2 JavaScript调用</p><p>$(‘body’).scrollspy({ target: ‘#navbar-example’ })</p><p>方法</p><p><strong>.scrollspy(‘refresh’)</strong></p><p>当使用滚动监听插件的同时在 DOM 中添加或删除元素后，你需要像下面这样调用此刷新（ refresh） 方法：</p><p><em>$(‘[data-spy=”scroll”]’).each(<strong>function</strong> () {</em><br> <strong>*var</strong> $spy = $(<strong>this</strong>).scrollspy(‘refresh’)<em></em>})*</p><p>参数</p><p>可以通过 data 属性或 JavaScript 传递参数。对于 data 属性，其名称是将参数名附着到 <em>data-</em> 后面组成，例如 <em>data-offset=””</em>。</p><div class="table-container"><table><thead><tr><th>名称</th><th>类型</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>offset</td><td>number</td><td>10</td><td>计算滚动位置时相对于顶部的偏移量（像素数）。</td></tr></tbody></table></div><p>事件</p><div class="table-container"><table><thead><tr><th>事件类型</th><th>描述</th></tr></thead><tbody><tr><td>activate.bs.scrollspy</td><td>每当一个新条目被激活后都将由滚动监听插件触发此事件。</td></tr></tbody></table></div><p>$(‘#myScrollspy’).on(‘activate.bs.scrollspy’, <strong>function</strong> () {<br> <em>// do something…</em><br>})</p><h1 id="2-6-标签页-tab-js"><a href="#2-6-标签页-tab-js" class="headerlink" title="2.6 标签页 tab.js"></a>2.6 标签页 tab.js</h1><p>2.6.1 基本使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Nav tabs --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav nav-tabs&quot;</span> <span class="attr">role</span>=<span class="string">&quot;tablist&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">&quot;presentation&quot;</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#home&quot;</span> <span class="attr">aria-controls</span>=<span class="string">&quot;home&quot;</span> <span class="attr">role</span>=<span class="string">&quot;tab&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;tab&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">&quot;presentation&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#profile&quot;</span> <span class="attr">aria-controls</span>=<span class="string">&quot;profile&quot;</span> <span class="attr">role</span>=<span class="string">&quot;tab&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;tab&quot;</span>&gt;</span>Profile<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">&quot;presentation&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#messages&quot;</span> <span class="attr">aria-controls</span>=<span class="string">&quot;messages&quot;</span> <span class="attr">role</span>=<span class="string">&quot;tab&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;tab&quot;</span>&gt;</span>Messages<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">&quot;presentation&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#settings&quot;</span> <span class="attr">aria-controls</span>=<span class="string">&quot;settings&quot;</span> <span class="attr">role</span>=<span class="string">&quot;tab&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;tab&quot;</span>&gt;</span>Settings<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Tab panes --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab-content&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">role</span>=<span class="string">&quot;tabpanel&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tab-pane active&quot;</span> <span class="attr">id</span>=<span class="string">&quot;home&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">role</span>=<span class="string">&quot;tabpanel&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tab-pane&quot;</span> <span class="attr">id</span>=<span class="string">&quot;profile&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">role</span>=<span class="string">&quot;tabpanel&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tab-pane&quot;</span> <span class="attr">id</span>=<span class="string">&quot;messages&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">role</span>=<span class="string">&quot;tabpanel&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tab-pane&quot;</span> <span class="attr">id</span>=<span class="string">&quot;settings&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.6.2 Fade特效</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab-content&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">role</span>=<span class="string">&quot;tabpanel&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tab-pane fade in active&quot;</span> <span class="attr">id</span>=<span class="string">&quot;home&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">role</span>=<span class="string">&quot;tabpanel&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tab-pane fade&quot;</span> <span class="attr">id</span>=<span class="string">&quot;profile&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">role</span>=<span class="string">&quot;tabpanel&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tab-pane fade&quot;</span> <span class="attr">id</span>=<span class="string">&quot;messages&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">role</span>=<span class="string">&quot;tabpanel&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tab-pane fade&quot;</span> <span class="attr">id</span>=<span class="string">&quot;settings&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.6.3 JavaScript调用</p><p><em>$(‘#myTabs a’).click(<strong>function</strong> (e) {</em><br> <em>e.preventDefault()</em><br> <em>$(<strong>this</strong>).tab(‘show’)</em><br><em>})</em></p><p><em>$(‘#myTabs a[href=”#profile”]’).tab(‘show’)</em> // Select tab by name<br><em>$(‘#myTabs a:first’).tab(‘show’)</em> // Select first tab<br><em>$(‘#myTabs a:last’).tab(‘show’)</em> // Select last tab<br><em>$(‘#myTabs li:eq(2) a’).tab(‘show’)</em> // Select third tab (0-indexed)</p><p>方法</p><p><strong>$().tab</strong></p><p>该方法可以激活标签页元素和内容容器。标签页需要用一个 <strong>data-target</strong> 或者一个指向 DOM 中容器节点的 <strong>href</strong>。</p><p><strong>.tab(‘show’)</strong></p><p>Selects the given tab and shows its associated content. Any other tab that was  previously selected becomes unselected and its associated content is  hidden. <strong>Returns to the caller before the tab pane has actually been shown</strong> (i.e. before the <em>shown.bs.tab</em>event occurs).</p><p>$(‘#someTab’).tab(‘show’)</p><p>事件</p><div class="table-container"><table><thead><tr><th>事件</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>show.bs.tab</td><td>该事件在标签页显示时触发，但是必须在新标签页被显示之前。分别使用 event.target 和 event.relatedTarget 来定位到激活的标签页和前一个激活的标签页。</td><td>$(‘a[data-toggle=”tab”]’).on(‘show.bs.tab’, function (e)   {   e.target // 激活的标签页   e.relatedTarget // 前一个激活的标签页 })</td></tr><tr><td>shown.bs.tab</td><td>该事件在标签页显示时触发，但是必须在某个标签页已经显示之后。分别使用 event.target 和 event.relatedTarget 来定位到激活的标签页和前一个激活的标签页。</td><td>$(‘a[data-toggle=”tab”]’).on(‘shown.bs.tab’, function (e)   {   e.target // 激活的标签页   e.relatedTarget // 前一个激活的标签页 })</td></tr></tbody></table></div><p><em>$(‘a[data-toggle=”tab”]’).on(‘shown.bs.tab’, <strong>function</strong> (e) {</em><br> <em>e.target</em> // newly activated tab<br> <em>e.relatedTarget</em> // previous active tab<br><em>})</em></p><h1 id="2-7-工具提示-tooltips-js"><a href="#2-7-工具提示-tooltips-js" class="headerlink" title="2.7 工具提示 tooltips.js"></a>2.7 工具提示 tooltips.js</h1><p>2.7.1 基本使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;tooltip&quot;</span> <span class="attr">data-placement</span>=<span class="string">&quot;left&quot;</span> <span class="attr">title</span>=<span class="string">&quot;Tooltip on left&quot;</span>&gt;</span>Tooltip on left<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;tooltip&quot;</span> <span class="attr">data-placement</span>=<span class="string">&quot;top&quot;</span> <span class="attr">title</span>=<span class="string">&quot;Tooltip on top&quot;</span>&gt;</span>Tooltip on top<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;tooltip&quot;</span> <span class="attr">data-placement</span>=<span class="string">&quot;bottom&quot;</span> <span class="attr">title</span>=<span class="string">&quot;Tooltip on bottom&quot;</span>&gt;</span>Tooltip on bottom<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;tooltip&quot;</span> <span class="attr">data-placement</span>=<span class="string">&quot;right&quot;</span> <span class="attr">title</span>=<span class="string">&quot;Tooltip on right&quot;</span>&gt;</span>Tooltip on right<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.7.2 JavaScript调用</p><p>$(‘#example’).tooltip(options)</p><p>参数</p><div class="table-container"><table><thead><tr><th>选项名称</th><th>类型/默认值</th><th>Data 属性名称</th><th>描述</th></tr></thead><tbody><tr><td>animation</td><td>boolean 默认值：true</td><td>data-animation</td><td>提示工具使用 CSS 渐变滤镜效果。</td></tr><tr><td>html</td><td>boolean 默认值：false</td><td>data-html</td><td>向提示工具插入 HTML。如果为 false，jQuery 的 text 方法将被用于向 dom 插入内容。如果您担心 XSS 攻击，请使用   text。</td></tr><tr><td>placement</td><td>string\</td><td>function 默认值：top</td><td>data-placement</td><td>规定如何定位提示工具（即 top\</td><td>bottom\</td><td>left\</td><td>right\</td><td>auto）。 当指定为 auto 时，会动态调整提示工具。例如，如果   placement 是 “auto left”，提示工具将会尽可能显示在左边，在情况不允许的情况下它才会显示在右边。</td></tr><tr><td>selector</td><td>string 默认值：false</td><td>data-selector</td><td>如果提供了一个选择器，提示工具对象将被委派到指定的目标。</td></tr><tr><td>title</td><td>string \</td><td>function 默认值：’’</td><td>data-title</td><td>如果未指定 title 属性，则 title 选项是默认的 title 值。</td></tr><tr><td>trigger</td><td>string 默认值：’hover focus’</td><td>data-trigger</td><td>定义如何触发提示工具： click\</td><td>hover \</td><td>focus \</td><td>manual。您可以传递多个触发器，每个触发器之间用空格分隔。</td></tr><tr><td>delay</td><td>number \</td><td>object 默认值：0</td><td>data-delay</td><td>延迟显示和隐藏提示工具的毫秒数 -   对 manual 手动触发类型不适用。如果提供的是一个数字，那么延迟将会应用于显示和隐藏。如果提供的是对象，结构如下所示：delay: { show: 500, hide: 100 }</td></tr><tr><td>container</td><td>string \</td><td>false 默认值：false</td><td>data-container</td><td>向指定元素追加提示工具。 实例： container: ‘body’</td></tr></tbody></table></div><p>方法</p><div class="table-container"><table><thead><tr><th>方法</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>Options: .tooltip(options)</td><td>向元素集合附加提示工具句柄。</td><td>$().tooltip(options)</td></tr><tr><td>Toggle: .tooltip(‘toggle’)</td><td>切换显示/隐藏元素的提示工具。</td><td>$(‘#element’).tooltip(‘toggle’)</td></tr><tr><td>Show: .tooltip(‘show’)</td><td>显示元素的提示工具。</td><td>$(‘#element’).tooltip(‘show’)</td></tr><tr><td>Hide: .tooltip(‘hide’)</td><td>隐藏元素的提示工具。</td><td>$(‘#element’).tooltip(‘hide’)</td></tr><tr><td>Destroy: .tooltip(‘destroy’)</td><td>隐藏并销毁元素的提示工具。</td><td>$(‘#element’).tooltip(‘destroy’)</td></tr></tbody></table></div><p>$(‘#element’).tooltip(‘destroy’)</p><p>事件</p><div class="table-container"><table><thead><tr><th>事件</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>show.bs.tooltip</td><td>当调用 show 实例方法时立即触发该事件。</td><td>$(‘#myTooltip’).on(‘show.bs.tooltip’, function () {   // 执行一些动作… })</td></tr><tr><td>shown.bs.tooltip</td><td>当提示工具对用户可见时触发该事件（将等待 CSS 过渡效果完成）。</td><td>$(‘#myTooltip’).on(‘shown.bs.tooltip’, function () {   // 执行一些动作… })</td></tr><tr><td>hide.bs.tooltip</td><td>当调用 hide 实例方法时立即触发该事件。</td><td>$(‘#myTooltip’).on(‘hide.bs.tooltip’, function () {   // 执行一些动作… })</td></tr><tr><td>hidden.bs.tooltip</td><td>当提示工具对用户隐藏时触发该事件（将等待 CSS 过渡效果完成）。</td><td>$(‘#myTooltip’).on(‘hidden.bs.tooltip’, function () {   // 执行一些动作… })</td></tr></tbody></table></div><p><em>$(‘#myTooltip’).on(‘hidden.bs.tooltip’, <strong>function</strong> () {</em><br> // do something…<br><em>})</em></p><h1 id="2-8-弹出框-popover-js"><a href="#2-8-弹出框-popover-js" class="headerlink" title="2.8 弹出框 popover.js"></a>2.8 弹出框 popover.js</h1><p>2.8.1 基本使用</p><p>基本</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-lg btn-danger&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;popover&quot;</span> <span class="attr">title</span>=<span class="string">&quot;Popover title&quot;</span> <span class="attr">data-content</span>=<span class="string">&quot;And here&#x27;s some amazing content. It&#x27;s very engaging. Right?&quot;</span>&gt;</span>点我弹出/隐藏弹出框<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>弹出方向</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span> <span class="attr">data-container</span>=<span class="string">&quot;body&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;popover&quot;</span> <span class="attr">data-placement</span>=<span class="string">&quot;left&quot;</span> <span class="attr">data-content</span>=<span class="string">&quot;Vivamus sagittis lacus vel augue laoreet rutrum faucibus.&quot;</span>&gt;</span></span><br><span class="line">Popover on 左侧</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span> <span class="attr">data-container</span>=<span class="string">&quot;body&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;popover&quot;</span> <span class="attr">data-placement</span>=<span class="string">&quot;top&quot;</span> <span class="attr">data-content</span>=<span class="string">&quot;Vivamus sagittis lacus vel augue laoreet rutrum faucibus.&quot;</span>&gt;</span></span><br><span class="line">Popover on 顶部</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span> <span class="attr">data-container</span>=<span class="string">&quot;body&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;popover&quot;</span> <span class="attr">data-placement</span>=<span class="string">&quot;bottom&quot;</span> <span class="attr">data-content</span>=<span class="string">&quot;Vivamus</span></span></span><br><span class="line"><span class="string"><span class="tag">sagittis lacus vel augue laoreet rutrum faucibus.&quot;</span>&gt;</span></span><br><span class="line">Popover on 底部</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span> <span class="attr">data-container</span>=<span class="string">&quot;body&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;popover&quot;</span> <span class="attr">data-placement</span>=<span class="string">&quot;right&quot;</span> <span class="attr">data-content</span>=<span class="string">&quot;Vivamus sagittis lacus vel augue laoreet rutrum faucibus.&quot;</span>&gt;</span></span><br><span class="line">Popover on 右侧</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>点击并让弹出框消失</p><p>通过使用 <em>focus</em> 触发器可以在用户点击弹出框是让其消失。</p><p>实现“点击并让弹出框消失”的效果需要一些额外的代码</p><p>为了更好的跨浏览器和跨平台效果，你必须使用 <em><a></em> 标签，<em>不能</em>使用 <em><button></em> 标签，并且，还必须包含 <em>role=”button”</em> 和 <em><a href="https://link.zhihu.com/?target=https%3A//developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes%23tabindex">tabindex</a></em> 属性。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">tabindex</span>=<span class="string">&quot;0&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-lg btn-danger&quot;</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;popover&quot;</span> <span class="attr">data-trigger</span>=<span class="string">&quot;focus&quot;</span> <span class="attr">title</span>=<span class="string">&quot;Dismissible popover&quot;</span> <span class="attr">data-content</span>=<span class="string">&quot;And here&#x27;s some amazing content. It&#x27;s very engaging. Right?&quot;</span>&gt;</span>可消失的弹出框<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.8.2 javaScript调用</p><p><em>$(‘#example’).popover(options)</em></p><p>参数</p><p>可以通过 data 属性或 JavaScript 传递参数。对于 data 属性，将参数名附着到 <em>data-</em> 后面，例如 <em>data-animation=””</em>。</p><div class="table-container"><table><thead><tr><th>选项名称</th><th>类型/默认值</th><th>Data 属性名称</th><th>描述</th></tr></thead><tbody><tr><td>animation</td><td>boolean 默认值：true</td><td>data-animation</td><td>向弹出框应用 CSS 褪色过渡效果。</td></tr><tr><td>html</td><td>boolean 默认值：false</td><td>data-html</td><td>向弹出框插入 HTML。如果为 false，jQuery 的 text 方法将被用于向 dom 插入内容。如果您担心 XSS 攻击，请使用   text。</td></tr><tr><td>placement</td><td>string\</td><td>function 默认值：top</td><td>data-placement</td><td>规定如何定位弹出框（即 top\</td><td>bottom\</td><td>left\</td><td>right\</td><td>auto）。 当指定为 auto 时，会动态调整弹出框。例如，如果   placement 是 “auto left”，弹出框将会尽可能显示在左边，在情况不允许的情况下它才会显示在右边。</td></tr><tr><td>selector</td><td>string 默认值：false</td><td>data-selector</td><td>如果提供了一个选择器，弹出框对象将被委派到指定的目标。</td></tr><tr><td>title</td><td>string \</td><td>function 默认值：’’</td><td>data-title</td><td>如果未指定 title 属性，则 title 选项是默认的 title 值。</td></tr><tr><td>trigger</td><td>string 默认值：’hover focus’</td><td>data-trigger</td><td>定义如何触发弹出框： click\</td><td>hover \</td><td>focus \</td><td>manual。您可以传递多个触发器，每个触发器之间用空格分隔。</td></tr><tr><td>delay</td><td>number \</td><td>object 默认值：0</td><td>data-delay</td><td>延迟显示和隐藏弹出框的毫秒数 - 对 manual 手动触发类型不适用。如果提供的是一个数字，那么延迟将会应用于显示和隐藏。如果提供的是对象，结构如下所示：delay: { show: 500, hide: 100 }</td></tr><tr><td>container</td><td>string \</td><td>false 默认值：false</td><td>data-container</td><td>向指定元素追加弹出框。 实例： container: ‘body’</td></tr></tbody></table></div><p>方法</p><div class="table-container"><table><thead><tr><th>方法</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>Options: .popover(options)</td><td>向元素集合附加弹出框句柄。</td><td>$().popover(options)</td></tr><tr><td>Toggle: .popover(‘toggle’)</td><td>切换显示/隐藏元素的弹出框。</td><td>$(‘#element’).popover(‘toggle’)</td></tr><tr><td>Show: .popover(‘show’)</td><td>显示元素的弹出框。</td><td>$(‘#element’).popover(‘show’)</td></tr><tr><td>Hide: .popover(‘hide’)</td><td>隐藏元素的弹出框。</td><td>$(‘#element’).popover(‘hide’)</td></tr><tr><td>Destroy: .popover(‘destroy’)</td><td>隐藏并销毁元素的弹出框。</td><td>$(‘#element’).popover(‘destroy’)</td></tr></tbody></table></div><p>$(‘#element’).popover(‘destroy’) </p><p>事件</p><div class="table-container"><table><thead><tr><th>事件</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>show.bs.popover</td><td>当调用 show 实例方法时立即触发该事件。</td><td>$(‘#mypopover’).on(‘show.bs.popover’, function () {   // 执行一些动作… })</td></tr><tr><td>shown.bs.popover</td><td>当弹出框对用户可见时触发该事件（将等待 CSS 过渡效果完成）。</td><td>$(‘#mypopover’).on(‘shown.bs.popover’, function () {   // 执行一些动作… })</td></tr><tr><td>hide.bs.popover</td><td>当调用 hide 实例方法时立即触发该事件。</td><td>$(‘#mypopover’).on(‘hide.bs.popover’, function () {   // 执行一些动作… })</td></tr><tr><td>hidden.bs.popover</td><td>当工具提示对用户隐藏时触发该事件（将等待 CSS 过渡效果完成）。</td><td>$(‘#mypopover’).on(‘hidden.bs.popover’, function () {   // 执行一些动作… })</td></tr></tbody></table></div><p><em>$(‘#myPopover’).on(‘hidden.bs.popover’, function () {</em><br> <em>// do something…</em><br><em>})</em></p><h1 id="2-9-警告信息-alert-js"><a href="#2-9-警告信息-alert-js" class="headerlink" title="2.9 警告信息 alert.js"></a>2.9 警告信息 alert.js</h1><p>2.9.1 基本使用</p><p>当使用 <em>.close</em> 按钮时，它必须是 <em>.alert-dismissible</em> 的第一个子元素，并且在它之前不能有任何文本内容。</p><p>为关闭按钮添加 <em>data-dismiss=”alert”</em> 属性就可以使其自动为警告框赋予关闭功能。关闭警告框也就是将其从 DOM 中删除。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;close&quot;</span> <span class="attr">data-dismiss</span>=<span class="string">&quot;alert&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;Close&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="symbol">&amp;times;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>为了让警告框在关闭时表现出动画效果，请确保为其添加了 <em>.fade</em> 和 <em>.in</em> 类。</p><p>2.9.2 JavaScript调用</p><p>方法</p><p><strong>$().alert()</strong></p><p>让警告框监听具有 <em>data-dismiss=”alert”</em> 属性的后裔元素的点击（click）事件。（如果是通过 data 属性进行的初始化则无需使用）</p><p><strong>$().alert(‘close’)</strong></p><p>关闭警告框并从 DOM 中将其删除。如果警告框被赋予了 <em>.fade</em> 和 <em>.in</em> 类，那么，警告框在淡出之后才会被删除。</p><p>事件</p><p>Bootstrap 的警告框插件对外暴露了一些可以被监听的事件。</p><div class="table-container"><table><thead><tr><th>事件类型</th><th>描述</th></tr></thead><tbody><tr><td>close.bs.alert</td><td>当 close 方法被调用后立即触发此事件。</td></tr><tr><td>closed.bs.alert</td><td>当警告框被关闭后（也即 CSS 过渡效果完毕之后）立即触发此事件。</td></tr></tbody></table></div><p><em>$(‘#myAlert’).on(‘closed.bs.alert’, function () {</em><br> <em>// do something…</em><br><em>})</em></p><h1 id="2-10-按钮-button-js"><a href="#2-10-按钮-button-js" class="headerlink" title="2.10 按钮 button.js"></a>2.10 按钮 button.js</h1><p>2.10.1 加载状态</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;myButton&quot;</span> <span class="attr">data-loading-text</span>=<span class="string">&quot;Loading...&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span></span><br><span class="line">Loading state</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">$(<span class="string">&#x27;#myButton&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> $btn = $(<span class="variable language_">this</span>).<span class="title function_">button</span>(<span class="string">&#x27;loading&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// business logic...</span></span></span><br><span class="line"><span class="language-javascript">$btn.<span class="title function_">button</span>(<span class="string">&#x27;reset&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.10.2 独立的按钮切换状态</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;button&quot;</span> <span class="attr">aria-pressed</span>=<span class="string">&quot;false&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span></span><br><span class="line">Single toggle</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.10.3 Checkbox和Radio</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-group&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;buttons&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary active&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span> <span class="attr">checked</span>&gt;</span> Checkbox 1 (pre-checked)</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span> Checkbox 2</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span> Checkbox 3</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-group&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;buttons&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary active&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;options&quot;</span> <span class="attr">id</span>=<span class="string">&quot;option1&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span> <span class="attr">checked</span>&gt;</span> Radio 1 (preselected)</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;options&quot;</span> <span class="attr">id</span>=<span class="string">&quot;option2&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span> Radio 2</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;options&quot;</span> <span class="attr">id</span>=<span class="string">&quot;option3&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span> Radio 3</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.10.4 JavaScript方法</p><div class="table-container"><table><thead><tr><th>方法</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>button(‘toggle’)</td><td>切换按压状态。赋予按钮被激活的外观。您可以使用 data-toggle 属性启用按钮的自动切换。</td><td>$().button(‘toggle’)</td></tr><tr><td>.button(‘loading’)</td><td>当加载时，按钮是禁用的，且文本变为 button 元素的   data-loading-text 属性的值。</td><td>$().button(‘loading’)</td></tr><tr><td>.button(‘reset’)</td><td>重置按钮状态，文本内容恢复为最初的内容。当您想要把按钮返回为原始的状态时，该方法非常有用。</td><td>$().button(‘reset’)</td></tr><tr><td>.button(string)</td><td>该方法中的字符串是指由用户声明的任何字符串。使用该方法，重置按钮状态，并添加新的内容。</td><td>$().button(string)</td></tr></tbody></table></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;myStateButton&quot;</span> <span class="attr">data-complete-text</span>=<span class="string">&quot;finished!&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">$(<span class="string">&#x27;#myStateButton&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">$(<span class="variable language_">this</span>).<span class="title function_">button</span>(<span class="string">&#x27;complete&#x27;</span>) <span class="comment">// button text will be &quot;finished!&quot;</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="2-11-折叠-collapse-js"><a href="#2-11-折叠-collapse-js" class="headerlink" title="2.11 折叠 collapse.js"></a>2.11 折叠 collapse.js</h1><p>2.11.1 基本使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;collapse&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#collapseExample&quot;</span> <span class="attr">aria-expanded</span>=<span class="string">&quot;false&quot;</span> <span class="attr">aria-controls</span>=<span class="string">&quot;collapseExample&quot;</span>&gt;</span></span><br><span class="line">Link with href</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;collapse&quot;</span> <span class="attr">data-target</span>=<span class="string">&quot;#collapseExample&quot;</span> <span class="attr">aria-expanded</span>=<span class="string">&quot;false&quot;</span> <span class="attr">aria-controls</span>=<span class="string">&quot;collapseExample&quot;</span>&gt;</span></span><br><span class="line">Button with data-target</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;collapse&quot;</span> <span class="attr">id</span>=<span class="string">&quot;collapseExample&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;well&quot;</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.11.2 手风琴菜单</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-group&quot;</span> <span class="attr">id</span>=<span class="string">&quot;accordion&quot;</span> <span class="attr">role</span>=<span class="string">&quot;tablist&quot;</span> <span class="attr">aria-multiselectable</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel-default&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-heading&quot;</span> <span class="attr">role</span>=<span class="string">&quot;tab&quot;</span> <span class="attr">id</span>=<span class="string">&quot;headingOne&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">&quot;panel-title&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;collapse&quot;</span> <span class="attr">data-parent</span>=<span class="string">&quot;#accordion&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#collapseOne&quot;</span> <span class="attr">aria-expanded</span>=<span class="string">&quot;true&quot;</span> <span class="attr">aria-controls</span>=<span class="string">&quot;collapseOne&quot;</span>&gt;</span></span><br><span class="line">Collapsible Group Item #1</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;collapseOne&quot;</span> <span class="attr">class</span>=<span class="string">&quot;panel-collapse collapse in&quot;</span> <span class="attr">role</span>=<span class="string">&quot;tabpanel&quot;</span> <span class="attr">aria-labelledby</span>=<span class="string">&quot;headingOne&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span><br><span class="line">Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa nesciunt laborum eiusmod. Brunch 3 wolf moon tempor, sunt aliqua put a bird on it squid single-origin coffee nulla assumenda shoreditch et. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher vice lomo. Leggings occaecat craft beer farm-to-table, raw denim aesthetic synth nesciunt you probably haven&#x27;t heard of them accusamus labore sustainable VHS.</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel-default&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-heading&quot;</span> <span class="attr">role</span>=<span class="string">&quot;tab&quot;</span> <span class="attr">id</span>=<span class="string">&quot;headingTwo&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">&quot;panel-title&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;collapsed&quot;</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;collapse&quot;</span> <span class="attr">data-parent</span>=<span class="string">&quot;#accordion&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#collapseTwo&quot;</span> <span class="attr">aria-expanded</span>=<span class="string">&quot;false&quot;</span> <span class="attr">aria-controls</span>=<span class="string">&quot;collapseTwo&quot;</span>&gt;</span></span><br><span class="line">Collapsible Group Item #2</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;collapseTwo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;panel-collapse collapse&quot;</span> <span class="attr">role</span>=<span class="string">&quot;tabpanel&quot;</span> <span class="attr">aria-labelledby</span>=<span class="string">&quot;headingTwo&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span><br><span class="line">Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa nesciunt laborum eiusmod. Brunch 3 wolf moon tempor, sunt aliqua put a bird on it squid single-origin coffee nulla assumenda shoreditch et. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher vice lomo. Leggings occaecat craft beer farm-to-table, raw denim aesthetic synth nesciunt you probably haven&#x27;t heard of them accusamus labore sustainable VHS.</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel-default&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-heading&quot;</span> <span class="attr">role</span>=<span class="string">&quot;tab&quot;</span> <span class="attr">id</span>=<span class="string">&quot;headingThree&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">&quot;panel-title&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;collapsed&quot;</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;collapse&quot;</span> <span class="attr">data-parent</span>=<span class="string">&quot;#accordion&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#collapseThree&quot;</span> <span class="attr">aria-expanded</span>=<span class="string">&quot;false&quot;</span> <span class="attr">aria-controls</span>=<span class="string">&quot;collapseThree&quot;</span>&gt;</span></span><br><span class="line">Collapsible Group Item #3</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;collapseThree&quot;</span> <span class="attr">class</span>=<span class="string">&quot;panel-collapse collapse&quot;</span> <span class="attr">role</span>=<span class="string">&quot;tabpanel&quot;</span> <span class="attr">aria-labelledby</span>=<span class="string">&quot;headingThree&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span><br><span class="line">Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa nesciunt laborum eiusmod. Brunch 3 wolf moon tempor, sunt aliqua put a bird on it squid single-origin coffee nulla assumenda shoreditch et. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher vice lomo. Leggings occaecat craft beer farm-to-table, raw denim aesthetic synth nesciunt you probably haven&#x27;t heard of them accusamus labore sustainable VHS.</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>It’s also possible to swap out .panel-bodys with .list-groups.</p><p>2.11.3 JavaScript调用</p><p>$(‘.collapse’).collapse()</p><p>选项</p><div class="table-container"><table><thead><tr><th>选项名称</th><th>类型/默认值</th><th>Data 属性名称</th><th>描述</th></tr></thead><tbody><tr><td>parent</td><td>selector 默认值：false</td><td>data-parent</td><td>如果提供了一个选择器，当可折叠项目显示时，指定父元素下的所有可折叠的元素将被关闭。这与传统的折叠面板（accordion）的行为类似 - 这依赖于 accordion-group 类。</td></tr><tr><td>toggle</td><td>boolean 默认值：true</td><td>data-toggle</td><td>切换调用可折叠元素。</td></tr></tbody></table></div><p>方法</p><div class="table-container"><table><thead><tr><th>方法</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>Options: .collapse(options)</td><td>激活内容为可折叠元素。接受一个可选的 options 对象。</td><td>$(‘#identifier’).collapse({       toggle: false })</td></tr><tr><td>Toggle: .collapse(‘toggle’)</td><td>切换显示/隐藏可折叠元素。</td><td>$(‘#identifier’).collapse(‘toggle’)</td></tr><tr><td>Show: .collapse(‘show’)</td><td>显示可折叠元素。</td><td>$(‘#identifier’).collapse(‘show’)</td></tr><tr><td>Hide: .collapse(‘hide’)</td><td>隐藏可折叠元素。</td><td>$(‘#identifier’).collapse(‘hide’)</td></tr></tbody></table></div><p>事件</p><div class="table-container"><table><thead><tr><th>事件</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>show.bs.collapse</td><td>在调用 show 方法后触发该事件。</td><td>$(‘#identifier’).on(‘show.bs.collapse’, function () {     // 执行一些动作… })</td></tr><tr><td>shown.bs.collapse</td><td>当折叠元素对用户可见时触发该事件（将等待 CSS 过渡效果完成）。</td><td>$(‘#identifier’).on(‘shown.bs.collapse’, function () {     // 执行一些动作… })</td></tr><tr><td>hide.bs.collapse</td><td>当调用 hide 实例方法时立即触发该事件。</td><td>$(‘#identifier’).on(‘hide.bs.collapse’, function () {     // 执行一些动作… })</td></tr><tr><td>hidden.bs.collapse</td><td>当折叠元素对用户隐藏时触发该事件（将等待 CSS 过渡效果完成）。</td><td>$(‘#identifier’).on(‘hidden.bs.collapse’, function () {     // 执行一些动作… })</td></tr></tbody></table></div><p><em>$(‘#myCollapsible’).on(‘hidden.bs.collapse’, <strong>function</strong> () {</em><br> // do something…<br><em>})</em></p><h1 id="2-12-轮播-carousel-js"><a href="#2-12-轮播-carousel-js" class="headerlink" title="2.12 轮播 carousel.js"></a>2.12 轮播 carousel.js</h1><p>2.12.1 基本使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;carousel-example-generic&quot;</span> <span class="attr">class</span>=<span class="string">&quot;carousel slide&quot;</span> <span class="attr">data-ride</span>=<span class="string">&quot;carousel&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Indicators --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">&quot;carousel-indicators&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">&quot;#carousel-example-generic&quot;</span> <span class="attr">data-slide-to</span>=<span class="string">&quot;0&quot;</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">&quot;#carousel-example-generic&quot;</span> <span class="attr">data-slide-to</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">&quot;#carousel-example-generic&quot;</span> <span class="attr">data-slide-to</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Wrapper for slides --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;carousel-inner&quot;</span> <span class="attr">role</span>=<span class="string">&quot;listbox&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item active&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;...&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;carousel-caption&quot;</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;...&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;carousel-caption&quot;</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Controls --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;left carousel-control&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#carousel-example-generic&quot;</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span> <span class="attr">data-slide</span>=<span class="string">&quot;prev&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-chevron-left&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>Previous<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;right carousel-control&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#carousel-example-generic&quot;</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span> <span class="attr">data-slide</span>=<span class="string">&quot;next&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-chevron-right&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>Next<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.12.2 每个项目的标题</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;...&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;carousel-caption&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>...<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.12.3 JavaScript 调用html</p><p><em>$(‘.carousel’).carousel()</em></p><p>选项</p><div class="table-container"><table><thead><tr><th>选项名称</th><th>类型/默认值</th><th>Data 属性名称</th><th>描述</th></tr></thead><tbody><tr><td>interval</td><td>number 默认值：5000</td><td>data-interval</td><td>自动循环每个项目之间延迟的时间量。如果为 false，轮播将不会自动循环。</td></tr><tr><td>pause</td><td>string 默认值：”hover”</td><td>data-pause</td><td>鼠标进入时暂停轮播循环，鼠标离开时恢复轮播循环。</td></tr><tr><td>wrap</td><td>boolean 默认值：true</td><td>data-wrap</td><td>轮播是否连续循环。</td></tr></tbody></table></div><p>方法</p><div class="table-container"><table><thead><tr><th>方法</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>.carousel(options)</td><td>初始化轮播为可选的 options   对象，并开始循环项目。</td><td>$(‘#identifier’).carousel({       interval: 2000 })</td></tr><tr><td>.carousel(‘cycle’)</td><td>从左到右循环轮播项目。</td><td>$(‘#identifier’).carousel(‘cycle’)</td></tr><tr><td>.carousel(‘pause’)</td><td>停止轮播循环项目。</td><td>$(‘#identifier’).carousel(‘pause’)</td></tr><tr><td>.carousel(number)</td><td>循环轮播到某个特定的帧（从 0 开始计数，与数组类似）。</td><td>$(‘#identifier’).carousel(number)</td></tr><tr><td>.carousel(‘prev’)</td><td>循环轮播到上一个项目。</td><td>$(‘#identifier’).carousel(‘prev’)</td></tr><tr><td>.carousel(‘next’)</td><td>循环轮播到下一个项目。</td><td>$(‘#identifier’).carousel(‘next’)</td></tr></tbody></table></div><p>事件</p><div class="table-container"><table><thead><tr><th>事件</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>slide.bs.carousel</td><td>当调用 slide 实例方法时立即触发该事件。</td><td>$(‘#identifier’).on(‘slide.bs.carousel’, function () {     // 执行一些动作… })</td></tr><tr><td>slid.bs.carousel</td><td>当轮播完成幻灯片过渡效果时触发该事件。</td><td>$(‘#identifier’).on(‘slid.bs.carousel’, function () {     // 执行一些动作… })</td></tr></tbody></table></div><p><em>$(‘#myCarousel’).on(‘slide.bs.carousel’, <strong>function</strong> () {</em><br> // do something…<br><em>})</em></p><h1 id="2-13-附加-affix-js"><a href="#2-13-附加-affix-js" class="headerlink" title="2.13 附加 affix.js"></a>2.13 附加 affix.js</h1><p>2.12.1 基本使用</p><p>To easily add affix behavior to any element, just add <em>data-spy=”affix”</em> to the element you want to spy on. Use offsets to define when to toggle the pinning of an element.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-spy</span>=<span class="string">&quot;affix&quot;</span> <span class="attr">data-offset-top</span>=<span class="string">&quot;60&quot;</span> <span class="attr">data-offset-bottom</span>=<span class="string">&quot;200&quot;</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.13.2 JavaScript调用</p><p>Call the affix plugin via JavaScript:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(&#x27;#myAffix&#x27;).affix(&#123;</span><br><span class="line">offset: &#123;</span><br><span class="line">top: 100,</span><br><span class="line">bottom: function () &#123;</span><br><span class="line">return (this.bottom = $(&#x27;.footer&#x27;).outerHeight(true))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>选项</p><p>Options can be passed via data attributes or JavaScript. For data attributes, append the option name to <em>data-</em>, as in <em>data-offset-top=”200”</em>.</p><div class="table-container"><table><thead><tr><th>Name</th><th>type</th><th>default</th><th>description</th></tr></thead><tbody><tr><td>offset</td><td>number \</td><td>function \</td><td>object</td><td>10</td><td>Pixels to offset from screen when calculating position of scroll. If a   single number is provided, the offset will be applied in both top and  bottom  directions. To provide a unique, bottom and top offset just  provide an object  offset: { top: 10 } or offset: { top: 10, bottom: 5  }. Use a function when you need to dynamically calculate an offset.</td></tr><tr><td>target</td><td>selector \</td><td>node \</td><td>jQuery element</td><td>the windowobject</td><td>Specifies the target element of the affix.</td></tr></tbody></table></div><p>方法</p><p><strong>$().affix(options)</strong></p><p>Activates your content as affixed content. Accepts an optional options <em>object</em>.</p><p><em>$(‘#myAffix’).affix({</em><br> <em>offset: 15</em><br><em>})</em></p><p><strong>$().affix(‘checkPosition’)</strong></p><p>Recalculates the state of the affix based on the dimensions, position, and scroll position of the relevant elements. The <em>.affix</em>, <em>.affix-top</em>, and <em>.affix-bottom</em> classes are added to or removed from the affixed content according to  the new state. This method needs to be called whenever the dimensions of the affixed content or the target element are changed, to ensure  correct positioning of the affixed content.</p><p>$(‘#myAffix’).affix(‘checkPosition’)</p><p>事件</p><p>Bootstrap’s affix plugin exposes a few events for hooking into affix functionality.</p><div class="table-container"><table><thead><tr><th>Event Type</th><th>Description</th></tr></thead><tbody><tr><td>affix.bs.affix</td><td>This event fires immediately before the element has been affixed.</td></tr><tr><td>affixed.bs.affix</td><td>This event is fired after the element has been affixed.</td></tr><tr><td>affix-top.bs.affix</td><td>This event fires immediately before the element has been affixed-top.</td></tr><tr><td>affixed-top.bs.affix</td><td>This event is fired after the element has been affixed-top.</td></tr><tr><td>affix-bottom.bs.affix</td><td>This event fires immediately before the element has been   affixed-bottom.</td></tr><tr><td>affixed-bottom.bs.affix</td><td>This event is fired after the element has been affixed-bottom.</td></tr></tbody></table></div><p>BootStrap上有许许多多的样式，然而作为一个后端开发人员，我们并不需要亲自把它们全部写出来，我们只要能够对大致每个样式有个印象，通过复制粘贴从BootStrap中文网上获取样式并加入我们自己的项目中就足以应付一般的需求了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ORM之多表实例</title>
      <link href="/2021/11/12/Python/Django/7.ORM%E4%B9%8B%E5%A4%9A%E8%A1%A8%E5%AE%9E%E4%BE%8B/"/>
      <url>/2021/11/12/Python/Django/7.ORM%E4%B9%8B%E5%A4%9A%E8%A1%A8%E5%AE%9E%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="多表实例"><a href="#多表实例" class="headerlink" title="多表实例"></a>多表实例</h1><h2 id="建立关系"><a href="#建立关系" class="headerlink" title="建立关系"></a>建立关系</h2><p> 显然，关系型数据库的强大之处就在于将表相互关联，Django提供了定义三种最常见的数据库关系类型的方法：</p><ul><li><strong>一对一</strong>: 一个人对应一个身份证号码，数据字段设置 unique。</li><li><strong>一对多</strong>: 一个家庭有多个人，一般通过外键来实现。</li><li><strong>多对多</strong>: 一个学生有多门课程，一个课程有很多学生，一般通过第三个表来实现关联。</li></ul><p><img src="https://www.runoob.com/wp-content/uploads/2020/05/orm11.png" alt="orm11"></p><h2 id="表关系之多对一"><a href="#表关系之多对一" class="headerlink" title="表关系之多对一"></a>表关系之多对一</h2><ul><li><p><strong>1、多对一关系</strong></p><p>要定义一个多对一关系，需要使用django.db.models.ForeignKey。您可以像使用任何其他字段类型一样去使用它：将其作为模型的类属性</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## ForeignKey需要两个位置参数：</span></span><br><span class="line">    <span class="number">1</span>、所关联的模型类</span><br><span class="line">    <span class="number">2</span>、on_delete选项</span><br></pre></td></tr></table></figure><p>例如： 制造商Manufacturer模型 汽车Car模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Manufacturer</span>(models.Model):</span><br><span class="line">    <span class="comment">## ...</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>(models.Model):</span><br><span class="line">    manufacturer = models.ForeignKey(Manufacturer, on_delete=models.CASCADE)</span><br><span class="line">    <span class="comment">## ...</span></span><br></pre></td></tr></table></figure><p>建议（但不是必需的）ForeignKey字段的名称是模型的名称、小写（如上述manufacturer），这么做是为了在后期进行查询操作时方便自己识别。当然，你想叫什么就叫什么。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>(models.Model):</span><br><span class="line">    company_that_makes_it = models.ForeignKey(</span><br><span class="line">        Manufacturer,</span><br><span class="line">        on_delete=models.CASCADE,</span><br><span class="line">    )</span><br><span class="line">    <span class="comment">## ...</span></span><br></pre></td></tr></table></figure><ul><li><strong>2、惰性关系</strong></li></ul><p>上述关联关系的建立，由于ForeignKey的第一个位置参数是模型类，所以模型Car必须在Manufacturer之后，若想排除先后顺序带来的困扰，即需要创建与尚未定义的模型类的关系，可以将ForeignKey的第一个参数换成字符串形式，如下所示，这种定义关系的形式，称之为惰性关系</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>(models.Model):</span><br><span class="line">    manufacturer = models.ForeignKey(<span class="string">&#x27;Manufacturer&#x27;</span>, on_delete=models.CASCADE)</span><br><span class="line">    <span class="comment">## ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Manufacturer</span>(models.Model):</span><br><span class="line">    <span class="comment">## ...</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><ul><li><strong>3、自关联</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Comment</span>(models.Model):</span><br><span class="line">    <span class="comment">## 评论者</span></span><br><span class="line">    user=models.ForeignKey(to=<span class="string">&#x27;User&#x27;</span>,to_field=<span class="string">&#x27;nid&#x27;</span>,on_delete=models.CASCADE)</span><br><span class="line">    <span class="comment">## 评论的文章</span></span><br><span class="line">    article=models.ForeignKey(to=<span class="string">&#x27;Article&#x27;</span>,to_field=<span class="string">&#x27;nid&#x27;</span>,on_delete=models.CASCADE)</span><br><span class="line">    <span class="comment">## 评论的内容</span></span><br><span class="line">    content=models.CharField(max_length=<span class="number">255</span>)</span><br><span class="line">    <span class="comment">## 评论时间</span></span><br><span class="line">    create_time=models.DateTimeField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment">## 自关联</span></span><br><span class="line">    parent_comment=models.ForeignKey(to=<span class="string">&#x27;self&#x27;</span>,on_delete=models.CASCADE,null=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>草稿===========&gt;</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">=================================》表之间的三种关系之多对一</span><br><span class="line">显然，关系型数据库的强大之处就在于将表相互关联，Django提供了定义三种最常见的数据库关系类型的方法：多对一、多对多和一对一。</span><br><span class="line"></span><br><span class="line">多对一：</span><br><span class="line">    要定义一个多对一关系，需要使用django.db.models.ForeignKey。</span><br><span class="line"></span><br><span class="line">    您可以像使用任何其他字段类型一样去使用它：将其作为模型的类属性</span><br><span class="line"></span><br><span class="line">    ForeignKey需要两个位置参数：</span><br><span class="line">        <span class="number">1</span>、所关联的模型类</span><br><span class="line">        <span class="number">2</span>、on_delete选项</span><br><span class="line"></span><br><span class="line">    例如：</span><br><span class="line">        制造商Manufacturer模型</span><br><span class="line">        汽车Car模型</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Manufacturer</span>(models.Model):</span><br><span class="line">    <span class="comment">## ...</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>(models.Model):</span><br><span class="line">    manufacturer = models.ForeignKey(Manufacturer, on_delete=models.CASCADE)</span><br><span class="line">    <span class="comment">## ...</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">建议（但不是必需的）ForeignKey字段的名称是模型的名称、小写（如上述manufacturer），这么做是为了在后期进行查询操作时方便自己识别。当然，你想叫什么就叫什么。例如：</span><br><span class="line">```python</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>(models.Model):</span><br><span class="line">    company_that_makes_it = models.ForeignKey(</span><br><span class="line">        Manufacturer,</span><br><span class="line">        on_delete=models.CASCADE,</span><br><span class="line">    )</span><br><span class="line">    <span class="comment">## ...</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">惰性关系：</span><br><span class="line">上述关联关系的建立，由于ForeignKey的第一个位置参数是模型类，所以模型Car必须在Manufacturer之后，若想排除先后顺序带来的困扰，即需要创建与尚未定义的模型类的关系，可以将ForeignKey的第一个参数换成字符串形式，如下所示，这种定义关系的形式，称之为惰性关系</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>(models.Model):</span><br><span class="line">    manufacturer = models.ForeignKey(<span class="string">&#x27;Manufacturer&#x27;</span>, on_delete=models.CASCADE)</span><br><span class="line">    <span class="comment">## ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Manufacturer</span>(models.Model):</span><br><span class="line">    <span class="comment">## ...</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">自关联：</span><br><span class="line">    若要要创建递归关系（模型类跟自己具有多对一的关系，即自关联），请使用models.ForeignKey（<span class="string">&#x27;self&#x27;</span>，on_delete=models.CASCADE）。</span><br><span class="line"></span><br><span class="line">    举例如下：评论表的例子</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">数据库表示：</span><br><span class="line">    默认情况下，在数据库层面，django会在ForeignKey的字段后加后缀“_<span class="built_in">id</span>”，即上述模型字段manufacturer对应的数据库表字段为manufacturer_id（我们可以用过db_column选项来进行自定义）</span><br><span class="line"></span><br><span class="line">    但是，我们在操作模型时只需要基于模型字段名字即可，只有在编写原生sql时才需要考虑数据库里的字段。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">db_index</span><br><span class="line">    django会自动为ForeignKey字段创建索引，可以指定db_index=<span class="literal">False</span>来禁用此功能。</span><br><span class="line"></span><br><span class="line">    如果我们创建外键的目的是为了一致性而不是链接，或者你需要使用自定义的部分或多列索引，那么需要将db_index设置为<span class="literal">False</span></span><br><span class="line"></span><br><span class="line">ForeignKey的其他详细参数：https://docs.djangoproject.com/zh-hans/<span class="number">3.2</span>/ref/models/fields/<span class="comment">#arguments</span></span><br></pre></td></tr></table></figure><h2 id="表关系之多对多"><a href="#表关系之多对多" class="headerlink" title="表关系之多对多"></a>表关系之多对多</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br></pre></td><td class="code"><pre><span class="line">=================================》表之间的三种关系之多对多</span><br><span class="line"></span><br><span class="line">定义多对多关系，需要使用ManyToManyField、    您可以像使用任何其他字段类型一样去使用它：将其作为模型的类属性</span><br><span class="line"></span><br><span class="line">    ManyToManyField、需要一个位置参数：</span><br><span class="line">        <span class="number">1</span>、所关联的模型类</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Topping</span>(models.Model): <span class="comment">## 馅料</span></span><br><span class="line">    <span class="comment">## ...</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pizza</span>(models.Model): <span class="comment">## 披萨</span></span><br><span class="line">    <span class="comment">## ...</span></span><br><span class="line">    toppings = models.ManyToManyField(Topping)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">建议（但不是必须）ManyToMany的字段名称（上例中的toppings）是一个关联的模型类名字的复数形式，用于描述相关模型对象集。</span><br><span class="line"></span><br><span class="line">针对ManyToMany字段，只要不是同时放入两个模型中，在哪个模型中创建并不重要，但是通常情况下我们需要考虑逻辑上的通顺已经后期的使用方便，字段与类是一个从属关系，toppings字段在类Pizza里，我们可以说Pizza拥有toppings，翻译一下就是披萨有馅料，显而易见这比在Topping类里放入MannyToMany字段，逻辑上更通顺，从而使得后期的使用更为方便</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">惰性关系与自关联</span><br><span class="line">    同ForeignKey一样</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">数据库表示：</span><br><span class="line"> 在幕后，Django创建一个中间连接表来表示多对多关系。默认情况下，此表名是：包含该字段的模型的表名_多对多字段的名称。可以使用db_table选项手动设置连接表的名称。</span><br><span class="line"></span><br><span class="line">MannyToMany的其他详细参数：https://docs.djangoproject.com/zh-hans/<span class="number">3.2</span>/ref/models/fields/<span class="comment">#manytomany-arguments</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">=======&gt;多对多额外的字段：中间模型</span><br><span class="line">使用标准的ManyToManyField创建多对多关系时，会自动生成第三张关系表，而关系表中只存放了最基本的数据，即两个模型的关联关系，大多数情况下这是没问题的</span><br><span class="line">```python</span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span>(models.Model):</span><br><span class="line">    title = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Author</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    books = models.ManyToManyField(to=<span class="string">&quot;Book&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 会自动生成第三张表，用来存放基本的关联关系</span></span><br><span class="line">create table book(<span class="built_in">id</span> <span class="built_in">int</span> primary key);</span><br><span class="line">create table author(<span class="built_in">id</span> <span class="built_in">int</span> primary key);</span><br><span class="line"></span><br><span class="line">create table app01_author_books(</span><br><span class="line">    <span class="built_in">id</span> <span class="built_in">int</span> primary key auto_increment,</span><br><span class="line">    author_id <span class="built_in">int</span>,</span><br><span class="line">    book_id <span class="built_in">int</span>,</span><br><span class="line">    foreign key(author_id) references Author(<span class="built_in">id</span>) on delete cascade,</span><br><span class="line">    foreign key(book_id) references Book(<span class="built_in">id</span>) on delete cascade,</span><br><span class="line">    unique(author_id,book_id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">但如果我们需要在两个模型的多对多关系上添加额外的数据（比如有这样一个应用，它记录音乐家Person所属的音乐小组Group。我们想在多对多关系的基础上，知道更多成员关系的细节，比如成员是何时加入小组的,加入的理由是什么），</span><br><span class="line">就需要我们自定义第三张关系表了，你可能会想到这么做</span><br><span class="line">```python</span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Group</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Membership</span>(models.Model):</span><br><span class="line">    person = models.ForeignKey(Person, on_delete=models.CASCADE)</span><br><span class="line">    group = models.ForeignKey(Group, on_delete=models.CASCADE)</span><br><span class="line">    date_joined = models.DateTimeField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    invite_reason = models.CharField(max_length=<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        <span class="comment">## 指定本模型中的两个字段person与group联合唯一</span></span><br><span class="line">        unique_together = (<span class="string">&quot;person&quot;</span>, <span class="string">&quot;group&quot;</span>)</span><br><span class="line"></span><br><span class="line">此时第三张表便是一张完全独立的表，这本身是没有问题的，但Person与Group与其关系表Membership</span><br><span class="line">完全独立开意味着我们将无法使用django提供的关联查询功能，为此，django提供了一种改进方案:<span class="string">&quot;使用through参数指定中间模型&quot;</span>，如下</span><br><span class="line">```python</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Group</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">128</span>)</span><br><span class="line">    <span class="comment">## through=&#x27;Membership&#x27;,指定中间模型为Membership</span></span><br><span class="line">    <span class="comment">## through_fields=(&#x27;person&#x27;,&#x27;group&#x27;),元组内第一个字段代表定义ManyToManyFiled的那个模型（此处为Group）对应的外键名称（此处为&#x27;group&#x27;），而元组的第二个字段代表目标模型（此处为Person）对应的外键名称（此处为&#x27;person&#x27;），切记顺序不可乱</span></span><br><span class="line">    members = models.ManyToManyField(Person, through=<span class="string">&#x27;Membership&#x27;</span>,through_fields=(<span class="string">&#x27;group&#x27;</span>,<span class="string">&#x27;person&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Membership</span>(models.Model): <span class="comment">## 称之为：中间模型</span></span><br><span class="line">    person = models.ForeignKey(Person, on_delete=models.CASCADE)</span><br><span class="line">    group = models.ForeignKey(Group, on_delete=models.CASCADE)</span><br><span class="line">    date_joined = models.DateTimeField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    invite_reason = models.CharField(max_length=<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">这样Group便可以通过字段members进行正向查询，Person便可以通过模型名group进行反向</span><br><span class="line">查询了</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p1=Person(name=<span class="string">&#x27;牛逼鼓手小egon&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p2=Person(name=<span class="string">&#x27;骚浪吉他手刘二蛋&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p1.save()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p2.save()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g1=Group(name=<span class="string">&quot;狂拽炫酷屌炸天乐队&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g2=Group(name=<span class="string">&quot;疯狂的唢呐乐队&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g1.save()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g2.save()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#当我们使用第三种方式创建多对多关联关系时，就无法使用set、add、remove、clear方法来管理多对多的关系了，需要通过第三张表的model来管理多对多关系。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Membership.objects.create(person=p1,group=g1,invite_reason=<span class="string">&#x27;需要一名牛逼的鼓手&#x27;</span>)</span><br><span class="line">&lt;Membership: Membership <span class="built_in">object</span> (<span class="number">1</span>)&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Membership.objects.create(person=p2,group=g1,invite_reason=<span class="string">&#x27;需要一名骚浪吉他手&#x27;</span>)</span><br><span class="line">&lt;Membership: Membership <span class="built_in">object</span> (<span class="number">2</span>)&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Membership.objects.create(person=p2,group=g2,invite_reason=<span class="string">&#x27;需要一名骚浪吉他手&#x27;</span>)</span><br><span class="line">&lt;Membership: Membership <span class="built_in">object</span> (<span class="number">2</span>)&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g1.members.<span class="built_in">all</span>()</span><br><span class="line">&lt;QuerySet [&lt;Person: 牛逼鼓手小egon&gt;, &lt;Person: 骚浪吉他手刘二蛋&gt;]&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g2.members.<span class="built_in">all</span>()</span><br><span class="line">&lt;QuerySet [&lt;Person: 骚浪吉他手刘二蛋&gt;]&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p1.group_set.<span class="built_in">all</span>()</span><br><span class="line">&lt;QuerySet [&lt;Group: 狂拽炫酷屌炸天乐队&gt;]&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p2.group_set.<span class="built_in">all</span>()</span><br><span class="line">&lt;QuerySet [&lt;Group: 狂拽炫酷屌炸天乐队&gt;, &lt;Group: 疯狂的唢呐乐队&gt;]&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#clear()方法却是可用的。它可以清空某个实例所有的多对多关系：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g1.members.clear()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p1.group_set.<span class="built_in">all</span>()</span><br><span class="line">&lt;QuerySet []&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p2.group_set.<span class="built_in">all</span>()</span><br><span class="line">&lt;QuerySet [&lt;Group: 疯狂的唢呐乐队&gt;]&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 自己跟自己关联，默认是数据是对称的</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(models.Model):</span><br><span class="line">    <span class="built_in">id</span>=models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    name=models.CharField(max_length=<span class="number">30</span>,null=<span class="literal">True</span>)</span><br><span class="line">    friends=models.ManyToManyField(<span class="string">&#x27;self&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj1=Person(name=<span class="string">&#x27;egon&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2=Person(name=<span class="string">&#x27;tom&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj1.save()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2.save()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj1.friends.add(obj2)</span><br><span class="line">朋友关系表里会对称着，有两条记录</span><br><span class="line"></span><br><span class="line">数据库表里app01_person_friends</span><br><span class="line"><span class="built_in">id</span>       from_person_id          to_person_id</span><br><span class="line"><span class="number">1</span>                <span class="number">1</span>                    <span class="number">2</span></span><br><span class="line"><span class="number">2</span>                <span class="number">2</span>                    <span class="number">1</span></span><br><span class="line"></span><br><span class="line">可以指定参数symmetrical=<span class="literal">False</span>，来关闭对称</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(models.Model):</span><br><span class="line">    <span class="built_in">id</span>=models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    name=models.CharField(max_length=<span class="number">30</span>,null=<span class="literal">True</span>)</span><br><span class="line">    friends=models.ManyToManyField(<span class="string">&#x27;self&#x27;</span>,symmetrical=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">如果是自关联， 并且定制了中间模型，那么必须设置symmetrical=<span class="literal">False</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(models.Model):</span><br><span class="line">    <span class="built_in">id</span>=models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    name=models.CharField(max_length=<span class="number">30</span>,null=<span class="literal">True</span>)</span><br><span class="line">    friends=models.ManyToManyField(<span class="string">&#x27;self&#x27;</span>,through=<span class="string">&#x27;PersonShip&#x27;</span>,symmetrical=<span class="literal">False</span>,through_fields=(<span class="string">&#x27;t_friend&#x27;</span>,<span class="string">&#x27;f_friend&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PersonShip</span>(models.Model):</span><br><span class="line">    create_time=models.DateTimeField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    f_friend=models.ForeignKey(<span class="string">&#x27;Person&#x27;</span>,on_delete=models.CASCADE,)</span><br><span class="line">    t_friend=models.ForeignKey(<span class="string">&#x27;Person&#x27;</span>,on_delete=models.CASCADE,related_name=<span class="string">&#x27;aaaa&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="表关系之一对一"><a href="#表关系之一对一" class="headerlink" title="表关系之一对一"></a>表关系之一对一</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">=================================》表之间的三种关系之一对一</span><br><span class="line">定义一对一关系，需要使用OneToOneField.、    您可以像使用任何其他字段类型一样去使用它：将其作为模型的类属性</span><br><span class="line"></span><br><span class="line">    OneToOneField.、需要一个位置参数：</span><br><span class="line">        <span class="number">1</span>、所关联的模型类</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    示例如下：。。。。(在示例如中强调：OneToOneField就是在ForeignKey的基础上设置一个unique=<span class="literal">True</span>,只不过反向查询出的结果就一个对象，因为本质与ForeignKey类似，所以注意on_delete也是要加的,)</span><br><span class="line"></span><br><span class="line">    因为一对一满足“是”的关系，所以事实上，为了处理这个问题，你通常会使用继承，其中就已经包含一个隐含的一对一关系）。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">惰性关系与自关联</span><br><span class="line">    同ForeignKey一样</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">现在可以在一个模型上有多个OneToOneField类型的字段。</span><br><span class="line">在以前的版本中，OneToOneField 字段会自动变成模型 的主键。 不过现在已经不这么做了(不过要是你愿意的话，你仍可以传递 primary_key参数来创建主键字段)。 所以一个 模型 中可以有多个OneToOneField 字段。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">补充：</span><br><span class="line">惰性关系的形式,在解决两个应用程序之间的循环导入依赖关系时非常有用</span><br><span class="line">例如</span><br><span class="line">```python</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>(models.Model):</span><br><span class="line">    manufacturer = models.ForeignKey(</span><br><span class="line">        <span class="string">&#x27;production.Manufacturer&#x27;</span>,</span><br><span class="line">        on_delete=models.CASCADE,</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><h2 id="跨文件建立模型关系"><a href="#跨文件建立模型关系" class="headerlink" title="跨文件建立模型关系"></a>跨文件建立模型关系</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">=================================》跨文件建立模型关系</span><br><span class="line">与另外一个app中的模型建立关联是完全可以的，如何实现呢？</span><br><span class="line">在我们定义模型的文件顶部导入其他app的模型，然后在需要的地方进行关联即可，如下</span><br><span class="line"><span class="comment">## app01下的models.py</span></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> app02.models <span class="keyword">import</span> ZipCode</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Restaurant</span>(models.Model):</span><br><span class="line">    <span class="comment">## ...</span></span><br><span class="line">    zip_code = models.ForeignKey(</span><br><span class="line">        ZipCode,</span><br><span class="line">        on_delete=models.SET_NULL,</span><br><span class="line">        blank=<span class="literal">True</span>,</span><br><span class="line">        null=<span class="literal">True</span>,</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>其他</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">多对一关系的完整示例（包括增删改查）</span><br><span class="line">https://docs.djangoproject.com/zh-hans/<span class="number">3.2</span>/topics/db/examples/many_to_one/</span><br><span class="line"></span><br><span class="line">多对多关系，完整的示例（包括增删改查）</span><br><span class="line">https://docs.djangoproject.com/zh-hans/<span class="number">3.2</span>/topics/db/examples/many_to_many/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">一对一关系的完整示例（包括增删改查）</span><br><span class="line">https://docs.djangoproject.com/zh-hans/<span class="number">3.2</span>/topics/db/examples/one_to_one/</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ORM之模型层表操作(Fields)字段</title>
      <link href="/2021/11/12/Python/Django/6.ORM%E4%B9%8B%E6%A8%A1%E5%9E%8B%E5%B1%82%E8%A1%A8%E6%93%8D%E4%BD%9CFields%E5%AD%97%E6%AE%B5/"/>
      <url>/2021/11/12/Python/Django/6.ORM%E4%B9%8B%E6%A8%A1%E5%9E%8B%E5%B1%82%E8%A1%A8%E6%93%8D%E4%BD%9CFields%E5%AD%97%E6%AE%B5/</url>
      
        <content type="html"><![CDATA[<blockquote><p>注解</p><p>从技术上讲，这些方法都被定义在 <a href="https://docs.djangoproject.com/zh-hans/3.2/ref/models/fields/#module-django.db.models.fields"><code>django.db.models.fields</code></a>，但为了方便，它们被导入到 <a href="https://docs.djangoproject.com/zh-hans/3.2/topics/db/models/#module-django.db.models"><code>django.db.models</code></a>；标准的惯例是使用 <code>from django.db import models</code> 并利用 <code>models.Field</code>。</p></blockquote><h1 id="一-字段名命名限制"><a href="#一-字段名命名限制" class="headerlink" title="一 字段名命名限制"></a>一 字段名命名限制</h1><p>Fields字段被指定为模型类的属性，是模型最重要的部分，也是模型唯一必须要有的部分，是用来定义数据库字段的。</p><p> Django 对字段的命名设置了一些限制：</p><p> 1、注意字段名不要选择与模型API冲突的名字，如clean、save或delete等</p><p> 2、字段名不能是Python保留字，因为这将导致Python语法错误。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Example</span>(models.Model):</span><br><span class="line">    <span class="keyword">pass</span> = models.IntegerField() <span class="comment"># &#x27;pass&#x27;是保留字</span></span><br></pre></td></tr></table></figure><p> 3、由于Django 查询语法的工作方式，所以字段名称中连续的下划线不能超过两个。 例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Example</span>(models.Model):</span><br><span class="line">    foo__bar = models.IntegerField() <span class="comment"># &#x27;foo__bar&#x27;有两个下划线</span></span><br></pre></td></tr></table></figure><p> 4、出于类似的原因，字段名不能以下划线结尾。</p><p>上述只是针对模型字段的限制，并不是针对数据库列的限制，我们的模型字段名与数据库列名并不是匹配的，可以用db_column字段指定数据库名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Example</span>(models.Model):</span><br><span class="line">    aaa=models.CharField(max_length=<span class="number">10</span>,db_column=<span class="string">&#x27;aaa__aaa&#x27;</span>)</span><br><span class="line">    bbb=models.CharField(max_length=<span class="number">10</span>,db_column=<span class="string">&#x27;bbb_&#x27;</span>)</span><br></pre></td></tr></table></figure><p> 5、SQL 的保留字例如select、where 和join，可以用作模型的字段名，因为Django 会对底层的SQL 查询语句中的数据库表名和列名进行转义。 它根据你的数据库引擎使用不同的引用语法。</p><h1 id="二-字段类型"><a href="#二-字段类型" class="headerlink" title="二 字段类型"></a>二 字段类型</h1><p>字段类型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、BigAutoField</span></span><br><span class="line"><span class="built_in">int</span>自增列，必须填入参数 primary_key=<span class="literal">True</span>。你通常不需要直接使用它,当model中如果没有自增列，则自动会创建一个列名为<span class="built_in">id</span>的列。</span><br><span class="line">Changed <span class="keyword">in</span> Django <span class="number">3.2</span>:</span><br><span class="line">在旧版本中，自动创建的主键字段总是 AutoField。</span><br><span class="line"></span><br><span class="line"><span class="comment">#2、IntegerField</span></span><br><span class="line">一个整数类型,范围在 -<span class="number">2147483648</span> to <span class="number">2147483647</span>。</span><br><span class="line"></span><br><span class="line"><span class="comment">#3、CharField</span></span><br><span class="line">字符类型，必须提供max_length参数， max_length表示字符长度。</span><br><span class="line"></span><br><span class="line"><span class="comment">#4、DateField</span></span><br><span class="line">日期字段，日期格式  YYYY-MM-DD，相当于Python中的datetime.date()实例。</span><br><span class="line"></span><br><span class="line"><span class="comment">#5、DateTimeField</span></span><br><span class="line">日期时间字段，格式 YYYY-MM-DD HH:MM[:ss[.uuuuuu]][TZ]，相当于Python中的datetime.datetime()实例</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Musician</span>(models.Model):</span><br><span class="line">    first_name = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line">    last_name = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line">    instrument = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Album</span>(models.Model):</span><br><span class="line">    artist = models.ForeignKey(Musician, on_delete=models.CASCADE)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    release_date = models.DateField()</span><br><span class="line">    num_stars = models.IntegerField()</span><br></pre></td></tr></table></figure><ul><li>更多详见：</li></ul><p>附录1：常用字段和非常用字段合集</p><ul><li>django提供了几十个内置的字段类型，详见 [<a href="https://docs.djangoproject.com/zh-hans/3.2/ref/models/fields/#model-field-types">https://docs.djangoproject.com/zh-hans/3.2/ref/models/fields/#model-field-types</a>]</li><li>如果django的内置类型无法满足需求，也可以自定义 [<a href="https://docs.djangoproject.com/zh-hans/3.2/howto/custom-model-fields/">https://docs.djangoproject.com/zh-hans/3.2/howto/custom-model-fields/</a>]</li></ul><h1 id="三-字段选项和参数"><a href="#三-字段选项和参数" class="headerlink" title="三 字段选项和参数"></a>三 字段选项和参数</h1><p> 每个字段都有一组特定于该字段的参数。例如字段CharField（及其子类）必须定义一个max_length参数，该参数指定用于存储数据的VARCHAR数据库字段的大小，这部分参数参考官网或提示指定即可。</p><p> 我们主要讨论一下可用于所有字段类型的公共参数，当然，所有的都是可选的</p><ul><li>1、null： 如果为True，Django将在数据库中将空值存储为NULL。默认值为False。</li><li>2、blank： 如果为True，则该字段允许为空。默认值为False。</li></ul><p>注意，这与null不同。null纯粹与数据库相关，而blank则与验证相关。如果字段的blank=True，则表单验证将允许输入空值。如果字段为空=假，则该字段是必需的。</p><ul><li><p>3、unique： 如果为True，该字段必须是唯一的</p></li><li><p>4、db_index：如果db_index=True 则代表着为此字段设置索引。</p></li><li><p>5、db_column</p></li></ul><p>指定数据对应的字段名 name = models.CharField(max_length=64, db_column=’book_name’)</p><p>默认字段名为name，指定db_column后，数据库表字段名为book_name</p><ul><li>6、choices</li></ul><p>用于指定一个二元组，如果给定了此选项，则admin界面默认表单小部件将是一个选择框，而不是标准文本字段，并且将选择限制为给定的选项，如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(models.Model):</span><br><span class="line">    <span class="comment"># 每个元组的第二个元素用来在amdin管理界面显示，而第一个元素才是被存入数据库中的值</span></span><br><span class="line">    SHIRT_SIZES = (</span><br><span class="line">        (<span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;Small&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;Medium&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;Large&#x27;</span>),</span><br><span class="line">    )</span><br><span class="line">    name = models.CharField(max_length=<span class="number">60</span>)</span><br><span class="line">    shirt_size = models.CharField(max_length=<span class="number">1</span>, choices=SHIRT_SIZES)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = Person(name=<span class="string">&quot;Fred Flintstone&quot;</span>, shirt_size=<span class="string">&quot;L&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.save()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.shirt_size</span><br><span class="line"><span class="string">&#x27;L&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.get_shirt_size_display() <span class="comment"># 可以使用get_FOO_display()方法访问具有选项的字段的显示值</span></span><br><span class="line"><span class="string">&#x27;Large&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>7、default 字段的默认值。这可以是值或可调用对象。如果可调用，则每次创建新对象时都将调用它。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;from func&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(models.Model):</span><br><span class="line">    SHIRT_SIZES = (</span><br><span class="line">        (<span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;Small&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;Medium&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;Large&#x27;</span>),</span><br><span class="line">    )</span><br><span class="line">    name = models.CharField(max_length=<span class="number">60</span>,null=<span class="literal">True</span>,default=func)</span><br><span class="line">    shirt_size = models.CharField(max_length=<span class="number">1</span>, choices=SHIRT_SIZES)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 首先我们设置null=True，default=函数</span></span><br><span class="line"><span class="comment"># 然后执行，当插入值为空时，会使用默认值，如果此时默认值为函数，则会触发函数的执行</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = Person()</span><br><span class="line"><span class="keyword">from</span> func</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.save()</span><br></pre></td></tr></table></figure><ul><li>8、auto_now_add</li></ul><p>针对 DateField和DateTimeField可以设置auto_now_add=True，新增对象时会自动添加当前时间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create_time=models.DateTimeField(auto_now_add=<span class="literal">True</span>) <span class="comment"># 只针对创建，不针对修改</span></span><br></pre></td></tr></table></figure><ul><li>9、auto_now</li></ul><p>针对 DateField和DateTimeField可以设置auto_now=True，新增或修改对象都会自动填充当前时间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">modify_time=models.DateTimeField(auto_now=<span class="literal">True</span>) <span class="comment"># 针对创建以及修改都有效</span></span><br></pre></td></tr></table></figure><p>强调：选项auto_now、auto_now_add和default是互斥的。只能有一个。</p><ul><li>10、help_text, 用于在admin管理界面显示的额外“帮助”文本。它对于文档很有用 name = models.CharField(max_length=60,null=True,default=func,help_text=’哈哈哈哈哈’)</li><li>11、primary_key</li></ul><p>如果为True，那么这个字段就是模型的主键。</p><p>主键字段是只读的。 如果你在一个已存在的对象上面更改主键的值并且保存，一个新的对象将会在原有对象之外创建出来。 例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fruit</span>(models.Model): name = models.CharField(max_length=<span class="number">100</span>, primary_key=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">fruit = Fruit.objects.create(name=<span class="string">&#x27;Apple&#x27;</span>) fruit.name = <span class="string">&#x27;Pear&#x27;</span> fruit.save() Fruit.objects.values_list(<span class="string">&#x27;name&#x27;</span>, flat=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>如果你没有指定任何一个字段的primary_key=True，Django 就会自动添加一个IntegerField 字段做为主键，所以除非你想覆盖默认的主键行为，否则没必要设置任何一个字段的primary_key=True。 详见下一小节</p><h1 id="四-自动主键字段"><a href="#四-自动主键字段" class="headerlink" title="四 自动主键字段"></a>四 自动主键字段</h1><p> 默认情况下，django自动会为每个模型创建一个主键字段，这种自动的行为称之为隐式创建</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">id</span> = models.AutoField(primary_key=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p> 如果我们想自定义主键，需要为你的某一个字段指定参数primary_key=True，这种自定义行为称之为显式创建 如果django看到你已经自定义了主键，它将不会自动创建id字段啦</p><p>每个模型只需要一个字段使primary_key=True（显式声明或隐式添加）。</p><h1 id="五-设置字段的自述名字"><a href="#五-设置字段的自述名字" class="headerlink" title="五 设置字段的自述名字"></a>五 设置字段的自述名字</h1><p> 除ForeignKey、ManyToManyField和OneToOneField外，每种字段类型都采用可选的第一个位置参数作为详细名称。如果没有指定要显示的详细名称，Django将使用字段的属性名称自动创建它，并将下划线转换为空格。</p><p>如下 admin管理界面字段显示的详细名称为：”person’s first name”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">first_name = models.CharField(<span class="string">&quot;person&#x27;s first name&quot;</span>, max_length=<span class="number">30</span>)</span><br><span class="line"><span class="comment"># first_name = models.CharField(name=&quot;person&#x27;s first name&quot;, max_length=30)</span></span><br></pre></td></tr></table></figure><p> 如下，字段显示的详细名字为： “first name”:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">first_name = models.CharField(max_length=<span class="number">30</span>)</span><br></pre></td></tr></table></figure><p> 针对ForeignKey、ManyToManyField和OneToOneField字段，第一个参数必须为模型类，如果要设置字段显示的详细名字，需要指定参数verbose_name，如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(models.Model):</span><br><span class="line">    SHIRT_SIZES = (</span><br><span class="line">        (<span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;Small&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;Medium&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;Large&#x27;</span>),</span><br><span class="line">    )</span><br><span class="line">    name = models.CharField(<span class="string">&#x27;用户名&#x27;</span>,max_length=<span class="number">60</span>,null=<span class="literal">True</span>,help_text=<span class="string">&#x27;哈哈哈&#x27;</span>)</span><br><span class="line">    role=models.ForeignKey(to=<span class="string">&#x27;Role&#x27;</span>,verbose_name=<span class="string">&#x27;权限选择&#x27;</span>,on_delete=models.CASCADE,null=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Role</span>(models.Model):</span><br><span class="line">    PRIVS = (</span><br><span class="line">        (<span class="number">0</span>, <span class="string">&#x27;superuser&#x27;</span>),</span><br><span class="line">        (<span class="number">1</span>, <span class="string">&#x27;user&#x27;</span>),</span><br><span class="line">        (<span class="number">2</span>, <span class="string">&#x27;visitor&#x27;</span>),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    role=models.CharField(<span class="string">&#x27;角色&#x27;</span>,max_length=<span class="number">20</span>)</span><br><span class="line">    priv=models.IntegerField(<span class="string">&#x27;权限&#x27;</span>,choices=PRIVS)</span><br></pre></td></tr></table></figure><p> 约定俗称不会将详细名称的第一个字母大写，django会在需要的地方自动将第一个字母大写</p><h1 id="六-建立表关系"><a href="#六-建立表关系" class="headerlink" title="六 建立表关系"></a>六 建立表关系</h1><p>涉及到字段ForeignKey、ManyToManyField、OneToOneField的使用，详见下一小节</p>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ORM初识</title>
      <link href="/2021/11/08/Python/Django/5.ORM%E4%B9%8B%E5%88%9D%E8%AF%86/"/>
      <url>/2021/11/08/Python/Django/5.ORM%E4%B9%8B%E5%88%9D%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<p><img src="ORM.png" alt="img"></p><h2 id="一-django模型层之ORM"><a href="#一-django模型层之ORM" class="headerlink" title="一 django模型层之ORM"></a>一 django模型层之ORM</h2><p>ORM是什么？为何要有ORM？</p><p> 我们在使用Django框架开发web应用的过程中，不可避免地会涉及到数据的管理操作（增、删、改、查），而一旦谈到数据的管理操作，就需要用到数据库管理软件，例如mysql、oracle、Microsoft SQL Server等。</p><p> 如果应用程序需要操作数据（比如将用户注册信息永久存放起来），那么我们需要在应用程序中编写原生sql语句，然后使用pymysql模块远程操作mysql数据库</p><p> 针对应用程序的数据操作，直接编写原生sql语句会存在两方面的问题，严重影响开发效率，如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1. sql语句的执行效率问题：应用开发程序员需要耗费一大部分精力去优化sql语句</span></span><br><span class="line"><span class="comment">#2. 数据库迁移问题：针对mysql开发的sql语句无法直接应用到oracle数据库上，一旦需要迁移数据库，便需要考虑跨平台问题</span></span><br></pre></td></tr></table></figure><p> 为了解决上述问题，django引入了ORM的概念，ORM全称Object Relational Mapping，即对象关系映射，是在pymysq之上又进行了一层封装，对于数据的操作，我们无需再去编写原生sql，取代代之的是基于面向对象的思想去编写类、对象、调用相应的方法等，ORM会将其转换/映射成原生SQL然后交给pymysql执行</p><p><img src="1.jpg" alt="img"></p><p> 基于图2所示，有了ORM框架，开发人员既不用再去考虑原生SQL的优化问题，也不用考虑数据库迁移的问题，ORM都帮我们做了优化且支持多种数据库，这极大地提升了我们的开发效率，下面就让我们来详细学习ORM的使用吧</p><h2 id="二-ORM的使用之模型"><a href="#二-ORM的使用之模型" class="headerlink" title="二 ORM的使用之模型"></a>二 ORM的使用之模型</h2><p> 在django的ORM框架中，继承自django.db.models.Model的类称之为模型类，或简称模型。</p><p> 一个模型是关于你的数据，唯一的、决定性的信息源、它包含存储数据的基本字段和方法。</p><p> 通常，每个模型都映射到一个数据库表。模型中的属性对应数据库表的字段</p><p> 如下所示：原生SQL与ORM的模型对应关系</p><p><img src="2.jpg" alt="img"></p><h2 id="三-ORM的使用之数据库迁移"><a href="#三-ORM的使用之数据库迁移" class="headerlink" title="三 ORM的使用之数据库迁移"></a>三 ORM的使用之数据库迁移</h2><h3 id="3-1-创建模型"><a href="#3-1-创建模型" class="headerlink" title="3.1 创建模型"></a>3.1 创建模型</h3><p> 数据来源于数据库的表，而ORM的模型类对应数据库表，所以若我们想操作数据，必须先创建模型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建django项目，新建名为app01的app，在app01的models.py中创建模型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span>(models.Model):  <span class="comment"># 必须是models.Model的子类</span></span><br><span class="line">    <span class="built_in">id</span>=models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    name=models.CharField(max_length=<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">    gender=models.BooleanField(default=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    birth=models.DateField() </span><br><span class="line"></span><br><span class="line">    department=models.CharField(max_length=<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">    salary=models.DecimalField(max_digits=<span class="number">10</span>,decimal_places=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="3-2-配置settings-py"><a href="#3-2-配置settings-py" class="headerlink" title="3.2 配置settings.py"></a>3.2 配置settings.py</h3><h3 id="3-2-1-注册应用"><a href="#3-2-1-注册应用" class="headerlink" title="3.2.1 注册应用"></a>3.2.1 注册应用</h3><p> 但凡涉及到数据库同步操作的应用，都需要事先在settings.py的INSTALLED_APPS中完成注册</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># django2.x+版本</span></span><br><span class="line">    <span class="string">&#x27;app01.apps.App01Config&#x27;</span>, <span class="comment"># 如果默认已经添加了，则无需重复添加</span></span><br><span class="line">    <span class="comment"># &#x27;app02.apps.App02Config&#x27;, # 若有新增的app，按照规律依次添加即可</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># django1.x版本</span></span><br><span class="line">    <span class="string">&#x27;app01&#x27;</span>,  <span class="comment"># 直接写应用名字</span></span><br><span class="line">    <span class="comment"># &#x27;app02&#x27;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="3-2-2-配置后端数据库"><a href="#3-2-2-配置后端数据库" class="headerlink" title="3.2.2 配置后端数据库"></a>3.2.2 配置后端数据库</h3><p> django的orm支持多种数据库（如PostgreSQL、MySQL、SQLite、Oracle等），如果想将上述模型转为mysql数据库中的表，需要settings.py中配置DATABASES，如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除\注释掉原来的DATABASES配置项，新增下述配置</span></span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>, <span class="comment"># 使用mysql数据库</span></span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;db1&#x27;</span>,          <span class="comment"># 要连接的数据库</span></span><br><span class="line">        <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;root&#x27;</span>,         <span class="comment"># 链接数据库的用于名</span></span><br><span class="line">        <span class="string">&#x27;PASSWORD&#x27;</span>: <span class="string">&#x27;&#x27;</span>,         <span class="comment"># 链接数据库的用于名                  </span></span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,    <span class="comment"># mysql服务监听的ip  </span></span><br><span class="line">        <span class="string">&#x27;PORT&#x27;</span>: <span class="number">3306</span>,           <span class="comment"># mysql服务监听的端口  </span></span><br><span class="line">        <span class="string">&#x27;ATOMIC_REQUEST&#x27;</span>: <span class="literal">True</span>, <span class="comment">#设置为True代表同一个http请求所对应的所有sql都放在一个事务中执行 </span></span><br><span class="line">                                <span class="comment">#(要么所有都成功，要么所有都失败)，这是全局性的配置，如果要对某个</span></span><br><span class="line">                                <span class="comment">#http请求放水（然后自定义事务），可以用non_atomic_requests修饰器 </span></span><br><span class="line">        <span class="string">&#x27;OPTIONS&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;init_command&quot;</span>: <span class="string">&quot;SET storage_engine=INNODB&quot;</span>, <span class="comment">#设置创建表的存储引擎为INNODB</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 强调！！！：在链接mysql数据库前，必须事先创建好数据库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create database db1; <span class="comment"># 数据库名必须与settings.py中指定的名字对应上</span></span><br></pre></td></tr></table></figure><h3 id="3-2-3-配置日志"><a href="#3-2-3-配置日志" class="headerlink" title="3.2.3 配置日志"></a>3.2.3 配置日志</h3><p> 如果想打印orm转换过程中的sql，需要在settings中进行配置日志：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">LOGGING = &#123;</span><br><span class="line">    <span class="string">&#x27;version&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;disable_existing_loggers&#x27;</span>: <span class="literal">False</span>,</span><br><span class="line">    <span class="string">&#x27;handlers&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;console&#x27;</span>:&#123;</span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>:<span class="string">&#x27;DEBUG&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;class&#x27;</span>:<span class="string">&#x27;logging.StreamHandler&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;loggers&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;django.db.backends&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;handlers&#x27;</span>: [<span class="string">&#x27;console&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;propagate&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>:<span class="string">&#x27;DEBUG&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-mysqlclient安装与兼容性问题"><a href="#3-3-mysqlclient安装与兼容性问题" class="headerlink" title="3.3 mysqlclient安装与兼容性问题"></a>3.3 mysqlclient安装与兼容性问题</h3><p> 首先执行下述命令来创建一个迁移</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py makemigrations</span><br></pre></td></tr></table></figure><p> 会抛出异常</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line">    <span class="keyword">raise</span> ImproperlyConfigured(</span><br><span class="line">django.core.exceptions.ImproperlyConfigured: Error loading MySQLdb module.</span><br><span class="line">Did you install mysqlclient?</span><br></pre></td></tr></table></figure><p> 提示我们需要事先安装好mysqlclient，并且默认加载的mysqlclient是模块MySQLdb，需要安装MySQL-python，但目前python官方第三库中最新版MySQLdb 1.2.5对python解释器以及MySQL Server的支持如下，并不支持python3.0+</p><ul><li>Python解释器支持</li><li><a href="https://link.zhihu.com/?target=https%3A//www.python.org/">CPython</a> : 支持2.4到2.7</li><li><a href="https://link.zhihu.com/?target=https%3A//pypy.org/">PyPy（用python实现的python解释器）</a> : 支持到最新版本</li><li>MySQL Server支持</li><li><p>3.23=&lt; <a href="https://link.zhihu.com/?target=https%3A//www.mysql.com/">MySQL</a> &lt;= 5.5</p><p>为此，有人在github中创建了一个<a href="https://link.zhihu.com/?target=https%3A//github.com/PyMySQL/mysqlclient-python">MySQLdb1分支</a> 来支持Cpython3.0+解释器，可以参照官网进行安装<a href="https://link.zhihu.com/?target=https%3A//pypi.org/project/mysqlclient/">https://pypi.org/project/mysqlclient/</a></p><p>除了使用MySQLdb作为MySQLclient之外，我们还有可以使用pymysql</p></li><li><p>Python解释器支持:</p></li><li><a href="https://link.zhihu.com/?target=https%3A//www.python.org/">CPython</a> : 2.7 and &gt;= 3.5</li><li><a href="https://link.zhihu.com/?target=https%3A//pypy.org/">PyPy</a> : Latest version</li><li>MySQL Server支持:</li><li><a href="https://link.zhihu.com/?target=https%3A//www.mysql.com/">MySQL</a> &gt;= 5.5</li><li><p><a href="https://link.zhihu.com/?target=https%3A//mariadb.org/">MariaDB</a> &gt;= 5.5</p><p>比起前者，pymysql直接支持Cpython3.0+，安装简单</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install pymysql</span><br></pre></td></tr></table></figure><p> 但是因为Django默认加载的MySQLclient是MySQLdb，所以需要作出修改</p><p><img src="3.jpg" alt="img"></p><p> 此时重新执行python manage.py makemigrations仍会抛出异常</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">......    </span><br><span class="line">    File <span class="string">&quot;/Users/linhaifeng/PycharmProjects/allen_test/venv-3.8/lib/python3.8/site-packages/django/db/backends/mysql/base.py&quot;</span>, line <span class="number">37</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">raise</span> ImproperlyConfigured(<span class="string">&#x27;mysqlclient 1.3.13 or newer is required; you have %s.&#x27;</span> % Database.__version__)</span><br><span class="line">django.core.exceptions.ImproperlyConfigured: mysqlclient <span class="number">1.3</span><span class="number">.13</span> <span class="keyword">or</span> newer <span class="keyword">is</span> required; you have <span class="number">0.9</span><span class="number">.3</span>.</span><br></pre></td></tr></table></figure><p> 需要根据上述异常提示的文件base.py路径打开文件，注释下述两行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> version &lt; (<span class="number">1</span>, <span class="number">3</span>, <span class="number">13</span>):</span><br><span class="line">    <span class="keyword">raise</span> ImproperlyConfigured(<span class="string">&#x27;mysqlclient 1.3.13 or newer is required; you have %s.&#x27;</span> % Database.__version__)</span><br></pre></td></tr></table></figure><p> 如果重新执行makemigrations命令，扔抛出异常</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line">    File “xxx\lib\site-packages\django\db\backends\mysql\operations.py”, line <span class="number">146</span>, <span class="keyword">in</span> last_executed_query</span><br><span class="line">query = query.decode(errors=‘replace’)</span><br><span class="line">AttributeError: ‘<span class="built_in">str</span>’ <span class="built_in">object</span> has no attribute ‘decode’</span><br></pre></td></tr></table></figure><p> 需要根据上述异常提示的operations.py文件路径打开文件，把146行的decode修改为encode</p><p> ps：PyPI(Python Package Index)是Python官方的<strong>第三方库</strong>，所有人都可以下载或上传Python库到PyPI。可以访问<a href="https://link.zhihu.com/?target=https%3A//pypi.org/">https://pypi.org/</a>，自行查看各个库的版本支持,</p><h3 id="3-4-数据库迁移命令"><a href="#3-4-数据库迁移命令" class="headerlink" title="3.4 数据库迁移命令"></a>3.4 数据库迁移命令</h3><p> 最后在命令行中执行两条数据库迁移命令，即可在指定的数据库db1中创建表 ：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py makemigrations</span><br><span class="line">$ python manage.py migrate</span><br><span class="line"></span><br><span class="line"># 注意：</span><br><span class="line"># 1、makemigrations只是生成一个数据库迁移记录的文件，而migrate才是将更改真正提交到数据库执行</span><br><span class="line"># 2、数据库迁移记录的文件存放于app01下的migrations文件夹里</span><br><span class="line"># 3、了解：</span><br><span class="line">如果要给迁移一个有意义的名称而不是生成的名称，则可以使用makemigrations --name选项：</span><br><span class="line">python manage.py makemigrations --name xx app01 # 会在migrations目录下生成迁移文件0001_xx.py</span><br><span class="line"></span><br><span class="line">python3 manage.py sqlmigrate app01 0001_xx  # 展示迁移的sql语句</span><br><span class="line">python manage.py showmigrations # 项目的迁移及其状态。</span><br></pre></td></tr></table></figure><p> 注意：当我们直接去数据库里查看生成的表时，会发现数据库中的表与orm规定的并不一致，这完全是正常的，事实上，orm的字段约束就是不会全部体现在数据库的表中，比如我们为字段gender设置的默认值default=1，去数据库中查看会发现该字段的default部分为null</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; desc app01_employee; <span class="comment"># 数据库中标签前会带有前缀app01_</span></span><br><span class="line">+------------+---------------+------+-----+---------+----------------+</span><br><span class="line">| Field      | <span class="type">Type</span>          | Null | Key | Default | Extra          |</span><br><span class="line">+------------+---------------+------+-----+---------+----------------+</span><br><span class="line">| <span class="built_in">id</span>         | <span class="built_in">int</span>(<span class="number">11</span>)       | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| name       | varchar(<span class="number">16</span>)   | NO   |     | NULL    |                |</span><br><span class="line">| gender     | tinyint(<span class="number">1</span>)    | NO   |     | NULL    |                |</span><br><span class="line">| birth      | date          | NO   |     | NULL    |                |</span><br><span class="line">| department | varchar(<span class="number">30</span>)   | NO   |     | NULL    |                |</span><br><span class="line">| salary     | decimal(<span class="number">10</span>,<span class="number">1</span>) | NO   |     | NULL    |                |</span><br><span class="line">+------------+---------------+------+-----+---------+----------------+</span><br></pre></td></tr></table></figure><p>,虽然数据库没有增加默认值,但是我们在使用orm插入值时，完全为gender字段插入空，orm会按照自己的约束将空转换成默认值后，再提交给数据库执行</p><h3 id="3-5-模型字段的增、删、改"><a href="#3-5-模型字段的增、删、改" class="headerlink" title="3.5 模型字段的增、删、改"></a>3.5 模型字段的增、删、改</h3><p> 在表生成之后，如果需要增加、删除、修改表中字段，需要这么做</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一：增加字段</span></span><br><span class="line"><span class="comment">#1.1、在模型类Employee里直接新增字段，强调：对于orm来说，新增的字段必须用default指定默认值</span></span><br><span class="line">publish = models.CharField(max_length=<span class="number">12</span>,default=<span class="string">&#x27;人民出版社&#x27;</span>,null=<span class="literal">True</span>)</span><br><span class="line"><span class="comment">#1.2、重新执行那两条数据库迁移命令</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 二：删除字段</span></span><br><span class="line"><span class="comment">#2.1 直接注释掉字段</span></span><br><span class="line"><span class="comment">#2.2 重新执行那两条数据库迁移命令</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 三：修改字段</span></span><br><span class="line"><span class="comment">#2.1 将模型类中字段修改</span></span><br><span class="line"><span class="comment">#2.2 重新执行那两条数据库迁移命令</span></span><br></pre></td></tr></table></figure><h3 id="3-6-加载django配置"><a href="#3-6-加载django配置" class="headerlink" title="3.6 加载django配置"></a>3.6 加载django配置</h3><p> 在开发django项目时，如果我们想跳过django的启动与操作流程，只测试某一部分的代码的功能，需要首先引入django的配置环境才可以</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> django</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1、将项目的根目录填入环境变量</span></span><br><span class="line">BASE_DIR = os.path.dirname(传入项目所在的根目录)</span><br><span class="line">sys.path.append(BASE_DIR)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、引入项目的配置环境，然后无需启动django项目就可以使用其配置环境了</span></span><br><span class="line">os.environ.setdefault(<span class="string">&#x27;DJANGO_SETTINGS_MODULE&#x27;</span>, <span class="string">&#x27;项目名.settings&#x27;</span>)</span><br><span class="line">django.setup()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以将上述代码粘贴进交互式环境，直接在交互式环境测试</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 编写测试代码，直接运行本文件即可</span></span><br><span class="line">    <span class="keyword">from</span> app01.models <span class="keyword">import</span> Person</span><br><span class="line"></span><br><span class="line">    <span class="built_in">all</span> =Person.objects.<span class="built_in">all</span>().values()</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">all</span>)</span><br></pre></td></tr></table></figure><h2 id="四-基本使用简介"><a href="#四-基本使用简介" class="headerlink" title="四 基本使用简介"></a>四 基本使用简介</h2><p> 增加一条记录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">obj=Employee(name=<span class="string">&quot;allen&quot;</span>,gender=<span class="number">0</span>,birth=<span class="string">&#x27;1997-01-27&#x27;</span>,department=<span class="string">&quot;财务部&quot;</span>,salary=<span class="number">100.1</span>)</span><br><span class="line">obj.save()</span><br></pre></td></tr></table></figure><p> 查询记录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">obj = Employee.objects.<span class="built_in">filter</span>(name=<span class="string">&quot;allen&quot;</span>).first()  <span class="comment"># 查询所有名字为allen的记录并取第一条</span></span><br><span class="line"><span class="built_in">print</span>(obj.<span class="built_in">id</span>, obj.name, obj.birth)  <span class="comment"># 输出1 allen 1997-01-27</span></span><br></pre></td></tr></table></figure><p> 修改记录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Employee.objects.<span class="built_in">filter</span>(name=<span class="string">&quot;allen&quot;</span>).update(name=<span class="string">&quot;allen&quot;</span>) <span class="comment"># 过滤出所有名字为allen的记录并将name字段改成大写allen</span></span><br></pre></td></tr></table></figure><p> 删除记录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Employee.objects.<span class="built_in">filter</span>(name=<span class="string">&quot;allen&quot;</span>).delete() <span class="comment"># 过滤出所有名字为allen的记录并删除</span></span><br></pre></td></tr></table></figure><h2 id="五-简单示例"><a href="#五-简单示例" class="headerlink" title="五 简单示例"></a>五 简单示例</h2><p> 定一个Person模型，有两个属性first_name与last_name</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(models.Model):</span><br><span class="line">    first_name = models.CharField(max_length=<span class="number">30</span>)</span><br><span class="line">    last_name = models.CharField(max_length=<span class="number">30</span>)</span><br></pre></td></tr></table></figure><p> first_name与last_name是这个模型的字段，每个字段都被指定为类属性，每个属性都映射到数据库列。</p><p> 上面的Person模型将创建如下一个数据库表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE myapp_person (</span><br><span class="line">    <span class="string">&quot;id&quot;</span> serial NOT NULL PRIMARY KEY,</span><br><span class="line">    <span class="string">&quot;first_name&quot;</span> varchar(<span class="number">30</span>) NOT NULL,</span><br><span class="line">    <span class="string">&quot;last_name&quot;</span> varchar(<span class="number">30</span>) NOT NULL</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p> 一些注意事项：</p><ul><li>1、数据库中生成的表会加上”app名_”作为前缀，如myapp_persion，也可以重新为别的名称，详见第四节</li><li>2、会自动添加一个id字段作为主键字段，但也可以重写此行为，详见第3.3小节</li><li>3、本例中的CREATE TABLE SQL是使用PostgreSQL语法格式化的，但值得注意的是Django使用的SQL是根据设置文件中指定的数据库后端定制的。</li></ul><h2 id="六-使用模型"><a href="#六-使用模型" class="headerlink" title="六 使用模型"></a>六 使用模型</h2><p>一旦你定义了模型，你就需要告诉djano你将要使用这些模型。如何做到呢？ 需要通过编辑配置文件settings.py，在配置项INSTALLED_APPS注册你包含模型文件 models.py所在的app</p><p>例如，如果你的app的模型在myapp.models里，INSTALLED_APPS配置如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="comment">#...</span></span><br><span class="line">    <span class="string">&#x27;myapp&#x27;</span>,</span><br><span class="line">    <span class="comment">#...</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>然后运行命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><p>Django 提供了基于 web 的管理工具用来管理我们的模型。如何使用呢</p><ul><li>1、通常我们在生成项目时就会在 urls.py 中自动设置好，如下</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li><p>2、启动Django ，管理工具就可以运行了，在浏览器中访问 <a href="https://link.zhihu.com/?target=http%3A//127.0.0.1%3A8000/admin/">http://127.0.0.1:8000/admin/</a></p></li><li><p>3、你可以通过命令 <strong>python manage.py createsuperuser</strong> 来创建超级用户，如下所示：</p></li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># python manage.py createsuperuser</span><br><span class="line">Username (leave blank to use &#x27;root&#x27;): allen</span><br><span class="line">Email address: admin@runoob.com</span><br><span class="line">Password:</span><br><span class="line">Password (again):</span><br><span class="line">Superuser created successfully.</span><br></pre></td></tr></table></figure><ul><li>4、为了让 admin 界面管理某个数据模型，我们需要先注册该数据模型到 admin。比如，我们之前在 app01/models.py中已经创建了模型 Person 。修改 app01/admin.py:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> app01.models <span class="keyword">import</span> Person</span><br><span class="line">admin.site.register(Person)</span><br></pre></td></tr></table></figure><p> 刷新页面即可看到Person数据表</p>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django之模版层</title>
      <link href="/2021/11/05/Python/Django/4.Django%E4%B9%8B%E6%A8%A1%E7%89%88%E5%B1%82/"/>
      <url>/2021/11/05/Python/Django/4.Django%E4%B9%8B%E6%A8%A1%E7%89%88%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h2 id="一-模板简介"><a href="#一-模板简介" class="headerlink" title="一 模板简介"></a>一 模板简介</h2><p> 在刚刚介绍完的视图层中我们提到，浏览器发送的请求信息会转发给视图进行处理，而视图在经过一系列处理后必须要有返回信息给浏览器。如果我们要返回html标签、css等数据给浏览器进行渲染，我们可以在视图中这么做</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回静态内容(静态页面)：页面内容固定不变</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    html = <span class="string">&quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;静态内容，固定不变&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(html)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回动态内容(动态页面)：后台处理会用变量值填充内容，每次得到的内容都可能不同</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">current_datetime</span>(<span class="params">request</span>):</span><br><span class="line">    now_time = time.strftime(<span class="string">&#x27;%Y-%m-%d %X&#x27;</span>)</span><br><span class="line">    html = <span class="string">&quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;动态内容，%s&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&quot;</span> % now_time</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(html)</span><br></pre></td></tr></table></figure><p>上例所示，我们直接将HTML代码放到视图里，然后进行返回，这可以使我们很直观地看清楚浏览器从发送请求到看到前端界面内容的这个过程中视图的基本工作原理，但是这种将前端代码与后端代码完全耦合到了一起开发方式会使得程序的可维护性与可扩展性变差</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">前端界面一旦需要重新设计、修改，则必须对后端的Python代码进行相应的修改。 然而前端界面的修改往往比后端 Python 代码的修改要频繁得多，因此如果可以在不进行 Python 代码修改的情况下变更前端界面的设计，那将会方便得多。</span><br></pre></td></tr></table></figure><p> 我们可以很容易想到的解决方案就是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、首先将前端代码放入单独的HTML文件中</span></span><br><span class="line"><span class="comment"># 2、然后编写查找/加载这些文件的统一方法/API（否则需要在每个视图里重复编写查找/加载的代码）。</span></span><br></pre></td></tr></table></figure><p> 作为一个成熟的Web框架，上述方案早已被Django实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、Django提供了模板系统 (Template System)用来专门定制html文件，一个html文件称之为一个模板</span></span><br><span class="line">    对于静态页面来说，直接编写就好</span><br><span class="line">    而针对动态页面，django额外提供了专门的模板语言(Django template language，简称DTL)，允许我们在页     </span><br><span class="line">    面中嵌入模板变量，这便为后期为页面动态填充内容提供了可能性。</span><br><span class="line">    DTL是模板系统的核心，因此django的模板系统也被等同于DTL</span><br><span class="line"></span><br><span class="line">    详见第三小节</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、Django定义了一套标准的API用来查找/加载（读取并进行预处理称之为加载）并且渲染模板</span></span><br><span class="line">    渲染rendering指的是用上下文数据context data插入/填充模板并返回结果，结果为字符串。</span><br><span class="line">    将要插入/填充入模板的变量组织到一个字典里，该字典称之为上个文context data</span><br><span class="line"></span><br><span class="line">    详见第二小节-&gt;<span class="number">2.1</span></span><br></pre></td></tr></table></figure><p>一个简单的示例如下</p><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">templates/index.html</button></li><li class="tab"><button type="button" data-href="#test4-2">templates/current_datetime.html</button></li><li class="tab"><button type="button" data-href="#test4-3">views.py</button></li><li class="tab"><button type="button" data-href="#test4-4">urls.py</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>静态内容，固定不变<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>动态内容，&#123;&#123; now &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-3"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回静态内容(静态页面)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回动态内容(动态页面)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">current_datetime</span>(<span class="params">request</span>):</span><br><span class="line">    now_time = time.strftime(<span class="string">&#x27;%Y-%m-%d %X&#x27;</span>)</span><br><span class="line">    context=&#123;<span class="string">&quot;now&quot;</span>:now_time&#125;</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;current_datetime.html&#x27;</span>,context)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-4"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> app01.views <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;index/&#x27;</span>, index),</span><br><span class="line">    path(<span class="string">&#x27;current_datetime/&#x27;</span>, current_datetime),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="二-模板的使用"><a href="#二-模板的使用" class="headerlink" title="二 模板的使用"></a>二 模板的使用</h2><h3 id="2-1-标准API"><a href="#2-1-标准API" class="headerlink" title="2.1 标准API"></a>2.1 标准API</h3><p>Django内置了一套标准API（兼容任何模板引擎的BACKEND）用于查找/加载、渲染模板。历史原因，模板的相关实现都存在于django.template名称空间中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 例如</span></span><br><span class="line"><span class="comment"># 1、django.template.loader 加载器，定义了函数get_template与select_template用于模板的查找</span></span><br><span class="line">get_template(template_name, using=<span class="literal">None</span>)</span><br><span class="line">select_template(template_name_list, using=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、django.template.backends 模板引擎后端实现</span></span><br><span class="line">django.template.backends.django.DjangoTemplates</span><br><span class="line">django.template.backends.jinja2.Jinja2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、Template.render(context=None, request=None) 用于渲染模板</span></span><br><span class="line"><span class="keyword">from</span> django.template.backends.django <span class="keyword">import</span> Template</span><br><span class="line"><span class="keyword">from</span> django.template.backends.jinja2 <span class="keyword">import</span> Template</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4、django.template.loader.render_to_string 是一个快捷方法，内部就是调用1和3的API</span></span><br><span class="line">render_to_string(template_name, context=<span class="literal">None</span>, request=<span class="literal">None</span>, using=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 若想深入了解，可以参照官网来阅读源码https://docs.djangoproject.com/en/3.0/topics/templates/#usage</span></span><br></pre></td></tr></table></figure><p>上述API了解即可，因为我们在日常开发过程中，常用的一个render方法（from django.shortcuts import render），其内部已经整合了上述API。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="comment">#  通过查看源码会发现render内部就是在调用上述API</span></span><br><span class="line">render(request, template_name, context=<span class="literal">None</span>, content_type=<span class="literal">None</span>, status=<span class="literal">None</span>, using=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p>render参数介绍，详细使用见下一小节</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、request就是一个HttpRequest对象</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、template_name:</span><br><span class="line">    可以是一个单独的模板</span><br><span class="line">        <span class="string">&#x27;story_detail.html&#x27;</span></span><br><span class="line">        <span class="string">&#x27;news/story_detail.html&#x27;</span></span><br><span class="line"></span><br><span class="line">    也可以是一个模板列表</span><br><span class="line">        [<span class="string">&#x27;story_1_detail.html&#x27;</span>, <span class="string">&#x27;story_detail.html&#x27;</span>]</span><br><span class="line"><span class="number">3</span>、context：</span><br><span class="line">    是一个字典，包含了将要插入/填充入模板的变量，称之为上个文数据（context data）</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、content_type</span><br><span class="line">    指定响应的内容类型，如content_type=<span class="string">&#x27;text/plain; charset=utf-8&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span>、status：</span><br><span class="line">    指定响应的状态码，如status=<span class="number">200</span></span><br><span class="line"></span><br><span class="line"><span class="number">6</span>、using：</span><br><span class="line">    指定使用的模板引擎名字，如using=<span class="string">&#x27;name1&#x27;</span>，代表使用名为name1的模板引擎</span><br></pre></td></tr></table></figure><h3 id="2-2-模板引擎配置"><a href="#2-2-模板引擎配置" class="headerlink" title="2.2 模板引擎配置"></a>2.2 模板引擎配置</h3><p>要解析DTL，需要有专门的解析器，称之为template engine模板引擎，需要在settings.py中配置TEMPLATES列表，其默认值为空，但在创建项目时会自动生成如下配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;DIRS&#x27;</span>: [os.path.join(BASE_DIR, <span class="string">&#x27;templates&#x27;</span>)],</span><br><span class="line">        <span class="string">&#x27;APP_DIRS&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&#x27;OPTIONS&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;context_processors&#x27;</span>: [</span><br><span class="line">                <span class="string">&#x27;django.template.context_processors.debug&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.template.context_processors.request&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.contrib.auth.context_processors.auth&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.contrib.messages.context_processors.messages&#x27;</span>,</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>列表中一个字典就是一个引擎配置，一个django项目可以配置一个或多个模板引擎（当然，如果你不需要使用模板，也可以不配置），如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">TEMPLATES = [</span><br><span class="line">    <span class="comment"># 引擎配置一</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span>, </span><br><span class="line">        <span class="string">&#x27;DIRS&#x27;</span>: [os.path.join(BASE_DIR, <span class="string">&#x27;templates&#x27;</span>)],  </span><br><span class="line">        <span class="string">&#x27;APP_DIRS&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&#x27;OPTIONS&#x27;</span>: &#123;</span><br><span class="line">            <span class="comment"># ... 同上，篇幅问题，下述带有同上字样的请读者在测试时自行填充上述代码 ...</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 引擎配置二</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;django.template.backends.jinja2.Jinja2&#x27;</span>, </span><br><span class="line">        <span class="string">&#x27;DIRS&#x27;</span>: [os.path.join(BASE_DIR, <span class="string">&#x27;templates&#x27;</span>)],  </span><br><span class="line">        <span class="string">&#x27;APP_DIRS&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&#x27;OPTIONS&#x27;</span>: &#123;</span><br><span class="line">            <span class="comment"># ... 同上 ...</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>1）关键配置项之BACKEND：</p><p>每个引擎都需要有专门的后端程序BACKEND，BACKEND的值为要导入的python类，Django为自己的模块系统以及非常受欢迎的Jinja2模板系统内置了后端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">django.template.backends.django.DjangoTemplates</span><br><span class="line"></span><br><span class="line">django.template.backends.jinja2.Jinja2</span><br></pre></td></tr></table></figure><p>而其他模板语言的后端需要从第三方获得。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、基于安全性考虑，最好不要使用不知名作者开发的第三方模板系统</span></span><br><span class="line"><span class="comment">#2、如果你不是必须选择其他的模板系统，还是推荐使用DTL</span></span><br></pre></td></tr></table></figure><p>2）关键配置项之DIRS与APP_DIRS</p><p>由于大多数引擎加载的模板都是文件，这就涉及到文件的路径查找，所以在每个引擎配置的顶级都包含两个相似的配置来专门负责路径查找问题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;DIRS&#x27;</span>: [], </span><br><span class="line"><span class="number">1</span>、列表中包含一系列的目录，引擎会按照列表的顺序依次查找模板文件</span><br><span class="line"><span class="number">2</span>、列表为空则代表没有对应的查找目录</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;APP_DIRS&#x27;</span>: <span class="literal">True</span>, <span class="comment"># 默认为False</span></span><br><span class="line"><span class="number">1</span>、APP_DIRS 值为<span class="literal">True</span>时，会去按照INSTALLED_APPS = []中注册的app顺序，依次去每个app目录下的templates目录中查找模板文件</span><br><span class="line"><span class="number">2</span>、APP_DIRS 值为<span class="literal">False</span>时，不会检索app目录下的templates目录  </span><br></pre></td></tr></table></figure><p> 查找的优先级为： djanog会先依次检索每个引擎下的DIRS，然后按照APP_DIRS的规定去找模板，直到找到为止。下面我们就依次举例进行验证</p><p> 我们先将ARR_DIRS设置为False来讨论加载顺序，如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"># django引擎</span></span><br><span class="line">        <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;DIRS&#x27;</span>: [</span><br><span class="line">            <span class="string">&#x27;/home/html/example.com&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;/home/html/default&#x27;</span>,</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&#x27;APP_DIRS&#x27;</span>: <span class="literal">False</span>, <span class="comment"># 关闭去每个APP下查找，不设置默认值为False</span></span><br><span class="line">        <span class="string">&#x27;OPTIONS&#x27;</span>: &#123;</span><br><span class="line">            <span class="comment"># ... 同上 ...</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"># jinja2引擎</span></span><br><span class="line">        <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;django.template.backends.jinja2.Jinja2&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;DIRS&#x27;</span>: [</span><br><span class="line">            <span class="string">&#x27;/home/html/jinja2&#x27;</span>,</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&#x27;APP_DIRS&#x27;</span>: <span class="literal">False</span>, <span class="comment"># 关闭去每个APP下查找，不设置默认值为False</span></span><br><span class="line">        <span class="string">&#x27;OPTIONS&#x27;</span>: &#123;</span><br><span class="line">            <span class="comment"># ... 同上 ...</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p> 若调用render(request,‘story_detail.html’)，查找顺序如下，找到为止</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、先检索列表中的第一个引擎，即&#x27;django&#x27; 引擎</span></span><br><span class="line">/home/html/example.com/story_detail.html </span><br><span class="line">/home/html/default/story_detail.html </span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、再检索列表中的第二个引擎，即&#x27;jinja2&#x27; 引擎</span></span><br><span class="line">/home/html/jinja2/story_detail.html</span><br></pre></td></tr></table></figure><p> 若调用render(request,[‘story_1_detail.html’, ‘story_detail.html’])，查找顺序如下，找到为止</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一：首先查找模板story_1_detail.html</span></span><br><span class="line"><span class="comment"># 1.1、先检索列表中的第一个引擎，即&#x27;django&#x27; 引擎</span></span><br><span class="line">/home/html/example.com/story_1_detail.html</span><br><span class="line">/home/html/default/story_1_detail.html</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.2、再检索列表中的第二个引擎，即&#x27;jinja2&#x27; 引擎</span></span><br><span class="line">/home/html/jinja2/story_1_detail.html </span><br><span class="line"></span><br><span class="line"><span class="comment"># 二：其次查找模板story_detail.html</span></span><br><span class="line"><span class="comment"># 2.1、先检索列表中的第一个引擎，即&#x27;django&#x27; 引擎</span></span><br><span class="line">/home/html/example.com/story_detail.html </span><br><span class="line">/home/html/default/story_detail.html </span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.2、再检索列表中的第二个引擎，即&#x27;jinja2&#x27; 引擎</span></span><br><span class="line">/home/html/jinja2/story_detail.html</span><br></pre></td></tr></table></figure><p> 所以针对[‘story_1_detail.html’, ‘story_detail.html’]，后一个模板通常作为第一个模板的备胎，从而保障第一个模板在未找到时依然能够找到模板作为替代品，这样便可以使我们的代码更为灵活，如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">article</span>(<span class="params">request, article_id</span>):</span><br><span class="line">    first_template = <span class="string">&#x27;article%s.html&#x27;</span> % article_id</span><br><span class="line">    bak_template = <span class="string">&#x27;article.html&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request, [first_template, bak_template])</span><br></pre></td></tr></table></figure><p> 然后我们ARR_DIRS设置为True来讨论完整的加载顺序，需要事先在每个app目录下顶层建立目录templates（注意，目录名字必须为templates），</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/Users/linhaifeng/PycharmProjects/allenPro</span><br><span class="line">├── app01</span><br><span class="line">│   ├── templates <span class="comment"># 目录名必须为templates</span></span><br><span class="line">├── app02</span><br><span class="line">│   ├── templates <span class="comment"># 目录名必须为templates</span></span><br></pre></td></tr></table></figure><p>然后配置如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"># django引擎</span></span><br><span class="line">        <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;DIRS&#x27;</span>: [</span><br><span class="line">            <span class="string">&#x27;/home/html/aaa&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;/home/html/bbb&#x27;</span>,</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&#x27;APP_DIRS&#x27;</span>: <span class="literal">True</span>, <span class="comment"># 关闭去每个APP下查找，不设置默认值为False</span></span><br><span class="line">        <span class="string">&#x27;OPTIONS&#x27;</span>: &#123;</span><br><span class="line">            <span class="comment"># ... 同上 ...</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"># jinja2引擎</span></span><br><span class="line">        <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;django.template.backends.jinja2.Jinja2&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;DIRS&#x27;</span>: [</span><br><span class="line">            <span class="string">&#x27;/home/html/ccc&#x27;</span>,</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&#x27;APP_DIRS&#x27;</span>: <span class="literal">True</span>, <span class="comment"># 关闭去每个APP下查找，不设置默认值为False</span></span><br><span class="line">        <span class="string">&#x27;OPTIONS&#x27;</span>: &#123;</span><br><span class="line">            <span class="comment"># ... 同上 ...</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>若调用render(request,‘story_detail.html’)，查找顺序如下，找到为止</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一：djanog会先依次检索每个引擎下的DIRS</span></span><br><span class="line"><span class="comment"># 1.1、先检索列表中的第一个引擎，即&#x27;django&#x27; 引擎</span></span><br><span class="line">/home/html/aaa/story_detail.html </span><br><span class="line">/home/html/bbb/story_detail.html </span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.2、再检索列表中的第二个引擎，即&#x27;jinja2&#x27; 引擎</span></span><br><span class="line">/home/html/ccc/story_detail.html </span><br><span class="line"></span><br><span class="line"><span class="comment"># 二：因为APP_DIRS:True,所以接下来会按照INSTALLED_APPS中注册app的顺序，依次去每个app下的templates目录里查找</span></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="comment"># ......</span></span><br><span class="line">    <span class="string">&#x27;app02.apps.App02Config&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;app01.apps.App01Config&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.1 先检索app02下的tempaltes目录</span></span><br><span class="line">/Users/linhaifeng/PycharmProjects/allenPro/app02/templates/story_detail.html</span><br><span class="line"><span class="comment"># 2.2 再检索app01下的tempaltes目录</span></span><br><span class="line">/Users/linhaifeng/PycharmProjects/allenPro/app01/templates/story_detail.html</span><br></pre></td></tr></table></figure><p>ps:针对render(request,[‘story_1_detail.html’, ‘story_detail.html’])，会按照列表中规定的模板顺序依次重复上述查找步骤，直到某一模板查找成功为止。</p><p> 在一个项目的实际开发过程中，通常会包含多个app，多个app会有一些公共的模板文件，同时每个app也都会有自己对应的模板文件，要想清晰地组织这些模板，有如下两种解决方案</p><p> 方案一：设置ARR_DIRS为False</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#一：在项目根目录下的templates目录中新建子目录用来区分不同的模板归属</span></span><br><span class="line">/Users/linhaifeng/PycharmProjects/allenPro</span><br><span class="line">├── templates</span><br><span class="line">│   ├── base <span class="comment"># 用于存放公共模板</span></span><br><span class="line">│   │   ├── base.html</span><br><span class="line">│   ├── app01 <span class="comment"># 用于存放app01单独的模板</span></span><br><span class="line">│   │   ├── index.html</span><br><span class="line">│   ├── app02 <span class="comment"># 用于存放app02单独的模板</span></span><br><span class="line">│   │   ├── index.html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#二：配置如下</span></span><br><span class="line">TEMPLATES = [</span><br><span class="line">    <span class="comment"># 引擎配置一</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span>, </span><br><span class="line">        <span class="string">&#x27;DIRS&#x27;</span>: [os.path.join(BASE_DIR, <span class="string">&#x27;templates&#x27;</span>)],  </span><br><span class="line">        <span class="string">&#x27;APP_DIRS&#x27;</span>: <span class="literal">False</span>,</span><br><span class="line">        <span class="string">&#x27;OPTIONS&#x27;</span>: &#123;</span><br><span class="line">            <span class="comment"># ... 同上 ...</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">#三：渲染方式</span></span><br><span class="line">render(request,<span class="string">&#x27;base/base.html&#x27;</span>)</span><br><span class="line">render(request,<span class="string">&#x27;app01/index.html&#x27;</span>)</span><br><span class="line">render(request,<span class="string">&#x27;app02/index.html&#x27;</span>)</span><br></pre></td></tr></table></figure><p> 方案二：设置ARR_DIRS为True（推荐使用）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#一：在ARR_DIRS为True的情况下，会检索每个app的templates目录，所以需要事先创建好下述目录：</span></span><br><span class="line"><span class="number">1</span>、项目根目录/templates</span><br><span class="line"><span class="number">2</span>、项目根目录/app01/templates <span class="comment"># 目录名字必须为templates</span></span><br><span class="line"><span class="number">3</span>、项目根目录/app02/templates <span class="comment"># 目录名字必须为templates</span></span><br><span class="line"></span><br><span class="line">注意：如果只创建到这一层就结束了，会出现冲突</span><br><span class="line">比如render(request,<span class="string">&#x27;index.html&#x27;</span>),在三个目录中都存在同名模板的情况下，查找优先级会是<span class="number">1</span>，<span class="number">2</span>，<span class="number">3</span>(假设只有配置了一个引擎，且app的注册顺序为app01、app02)。</span><br><span class="line">如果我们既想清晰地组织模板的目录结构，又想找到指定的模板、避免冲突，那么需要在<span class="number">1</span>、<span class="number">2</span>、<span class="number">3</span>的基础上继续建立子目录，子目录名无所谓，但其发挥的作用，相当于名称空间了，如下</span><br><span class="line">/Users/linhaifeng/PycharmProjects/allenPro</span><br><span class="line">├── templates</span><br><span class="line">│   ├── base </span><br><span class="line">│   │   ├── base.html </span><br><span class="line">├── app02</span><br><span class="line">│   ├── templates</span><br><span class="line">│   │   └── app01</span><br><span class="line">│   │       └── index.html </span><br><span class="line">├── app02</span><br><span class="line">│   ├── templates</span><br><span class="line">│   │   └── app02</span><br><span class="line">│   │       └── index.html </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#二：配置如下</span></span><br><span class="line">TEMPLATES = [</span><br><span class="line">    <span class="comment"># 引擎配置一</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span>, </span><br><span class="line">        <span class="string">&#x27;DIRS&#x27;</span>: [os.path.join(BASE_DIR, <span class="string">&#x27;templates&#x27;</span>)],  </span><br><span class="line">        <span class="string">&#x27;APP_DIRS&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&#x27;OPTIONS&#x27;</span>: &#123;</span><br><span class="line">            <span class="comment"># ... 同上 ...</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">#三：渲染方式</span></span><br><span class="line"><span class="comment"># 最终找到的位置/templates/base/base.html</span></span><br><span class="line">render(request,<span class="string">&#x27;base/base.html&#x27;</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 最终找到的位置/app01/templates/app01/index.html</span></span><br><span class="line">render(request,<span class="string">&#x27;app01/index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最终找到的位置/app02/templates/app02/index.html</span></span><br><span class="line">render(request,<span class="string">&#x27;app02/index.html&#x27;</span>)</span><br></pre></td></tr></table></figure><p>（3）关键配置项目之NAME</p><p> 在调用render()时，除非指定了引擎，否则会按照列表规定的顺序依次使用引擎来查找/加载模板，直到查找/加载成功为止。</p><p> 如果想选用指定的模板引擎，需要使用参数NAME为每个模板引擎设定唯一的名字，然后在render中使用using参数指定即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#一：settings.py配置如下</span></span><br><span class="line">TEMPLATES = [</span><br><span class="line">    <span class="comment"># 引擎配置一</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;b1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span>, </span><br><span class="line">        <span class="string">&#x27;DIRS&#x27;</span>: [os.path.join(BASE_DIR, <span class="string">&#x27;aaa&#x27;</span>)],    </span><br><span class="line">        <span class="string">&#x27;APP_DIRS&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&#x27;OPTIONS&#x27;</span>: &#123;</span><br><span class="line">            <span class="comment"># ... 同上 ...</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment"># 引擎配置二</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;b2&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span>, </span><br><span class="line">        <span class="string">&#x27;DIRS&#x27;</span>: [os.path.join(BASE_DIR, <span class="string">&#x27;bbb&#x27;</span>)],    </span><br><span class="line">        <span class="string">&#x27;APP_DIRS&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&#x27;OPTIONS&#x27;</span>: &#123;</span><br><span class="line">            <span class="comment"># ... 同上 ...</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">#二：为render函数指定using参数</span></span><br><span class="line">render(request, <span class="string">&#x27;index.html&#x27;</span>,using=<span class="string">&#x27;b1&#x27;</span>) <span class="comment"># b1-&gt;限定使用引擎配置一</span></span><br><span class="line">render(request, <span class="string">&#x27;index.html&#x27;</span>,using=<span class="string">&#x27;b2&#x27;</span>) <span class="comment"># b2-&gt;限定使用引擎配置二</span></span><br></pre></td></tr></table></figure><p>ps：如果没有设定参数NAME，那么引擎的名字默认为BACKEND按照点为分隔符的倒数第二个值，例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span> 引擎名字为django</span><br><span class="line"><span class="string">&#x27;django.template.backends.jinja2.Jinja2&#x27;</span>          引擎名字为jinjia2</span><br></pre></td></tr></table></figure><p> （4）关键配置项之OPTIONS</p><p> OPTIONS值为一字典，包含了要传递到模板后端的额外参数。比如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"># ......</span></span><br><span class="line">        <span class="string">&#x27;OPTIONS&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;context_processors&#x27;</span>: [</span><br><span class="line">                <span class="string">&#x27;django.template.context_processors.debug&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.template.context_processors.request&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.contrib.auth.context_processors.auth&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.contrib.messages.context_processors.messages&#x27;</span>,</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>我们在模板中常用的变量就是’django.template.context_processors.request’的功劳。</p><p>更多配置项请参照官网<a href="https://link.zhihu.com/?target=https%3A//docs.djangoproject.com/en/3.0/topics/templates/%23module-django.template.backends.django">https://docs.djangoproject.com/</a></p><h2 id="三-DTL语法"><a href="#三-DTL语法" class="headerlink" title="三 DTL语法"></a>三 DTL语法</h2><p> Django模板指的是用Django模板语言（DTL）标记的文本文档(如HTML、XML、CSV等任何文本文档都可以)或者python字符串（文本文档也是由字符组成）。</p><p> DTL的语法主要由四部分构成：变量、过滤器、标签、注释，如下</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;base_generic.html&quot; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block title %&#125;&#123;&#123; section.title &#125;&#125;&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">&#123;#    &lt;h1&gt;hello&lt;/h1&gt; #&#125;</span><br><span class="line">    &lt;h1&gt;&#123;&#123; section.title &#125;&#125;&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">    &#123;% for story in story_list %&#125;</span><br><span class="line">        &lt;h2&gt;</span><br><span class="line">            &lt;a href=&quot;&#123;&#123; story.get_absolute_url &#125;&#125;&quot;&gt;</span><br><span class="line">                &#123;&#123; story.headline|upper &#125;&#125;</span><br><span class="line">            &lt;/a&gt;</span><br><span class="line">        &lt;/h2&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123; story.tease|truncatewords:&quot;100&quot; &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>让我们来分别作详细介绍</p><h3 id="3-1-DTL之变量"><a href="#3-1-DTL之变量" class="headerlink" title="3.1 DTL之变量"></a>3.1 DTL之变量</h3><h3 id="3-1-1-变量的基本使用"><a href="#3-1-1-变量的基本使用" class="headerlink" title="3.1.1 变量的基本使用"></a>3.1.1 变量的基本使用</h3><p> 模板中的变量格式为：。变量名由字母数字和下划线组成，但是不能以下划线开头否则会因为引擎无法解析导致服务端错误。</p><p> 如果模板中的数据不是固定死的，而是动态变化的，则必须在html中嵌入变量，如下</p><p>test.html</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; msg &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; dic &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; obj &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; li &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>我们需要在视图函数中为模板test.html的变量名msg、li、dic、obj、obj_li赋值,views.py内容如下</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">from django.shortcuts import render</span><br><span class="line"></span><br><span class="line">def test(request):</span><br><span class="line">    # 传给模板的变量值可以是任意python类型，如下</span><br><span class="line">    msg=&#x27;hello world&#x27;</span><br><span class="line">    dic=&#123;&#x27;k1&#x27;:1,&#x27;k2&#x27;:2&#125;</span><br><span class="line">    class Person(object):</span><br><span class="line">        def __init__(self,name,age):</span><br><span class="line">            self.name=name</span><br><span class="line">            self.age=age</span><br><span class="line"></span><br><span class="line">    obj=Person(&#x27;allen&#x27;,18)</span><br><span class="line">    li = [1,&#x27;aaa&#x27;,obj]</span><br><span class="line"></span><br><span class="line">    return render(request,&#x27;test.html&#x27;,&#123;&#x27;msg&#x27;:msg,&#x27;dic&#x27;:dic,&#x27;obj&#x27;:obj,&#x27;li&#x27;:li&#125;)</span><br><span class="line">    # 注意：</span><br><span class="line">    # 1、render函数的第三个参数称之为上下文数据，包含了要传给模板的变量值，是一个字典，该字典中的key必须与模板文件中的变量名相对应，render函数会去templates目录下找到模板文件，然后根据字典中的key对应到模板文件中的变量名进行赋值操作，最后将赋值后的模板文件内容返回给浏览器</span><br><span class="line">    # 2、可以将render函数的第三个参数简写为locals(),如下</span><br><span class="line">    return render(request,&#x27;test.html&#x27;,locals()) #locals()会将函数test内定义的名字与值转换为字典中的k与v</span><br></pre></td></tr></table></figure><h3 id="3-1-2-深度查询之句点符的使用"><a href="#3-1-2-深度查询之句点符的使用" class="headerlink" title="3.1.2 深度查询之句点符的使用"></a>3.1.2 深度查询之句点符的使用</h3><p> 变量名中不能有空格或者标点符号，但是有一个例外，点(“.”)可以出现在变量中，点后的可以是字典相关（字典的key或者字典内置方法）、对象的属性或方法、数字索引，如下所示</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&#123;# 视图函数参照上例 #&#125;</span><br><span class="line"></span><br><span class="line">&lt;!--调用字符串对象的upper方法，注意不要加括号--&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; msg.upper &#125;&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--取字典中k1对应的值--&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; dic.k1 &#125;&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--取对象的name属性--&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; obj.name &#125;&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--取列表的第2个元素,然后变成大写--&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; li.1.upper &#125;&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--取列表的第3个元素，并取该元素的age属性--&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; li.2.age &#125;&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p> 请注意四点</p><p> （1）在渲染页面时，若变量不存在，模板引擎默认用配置项string_if_invalid的值作为替代品，配置如下，默认值为空字符串’’,可以进行配置</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 1、setting.py配置如下</span><br><span class="line">TEMPLATES = [</span><br><span class="line">    # 引擎配置一</span><br><span class="line">    &#123;</span><br><span class="line">        &#x27;NAME&#x27;: &#x27;b1&#x27;,</span><br><span class="line">        &#x27;BACKEND&#x27;: &#x27;django.template.backends.django.DjangoTemplates&#x27;, </span><br><span class="line">        &#x27;DIRS&#x27;: [os.path.join(BASE_DIR, &#x27;aaa&#x27;)],    </span><br><span class="line">        &#x27;APP_DIRS&#x27;: True,</span><br><span class="line">        &#x27;OPTIONS&#x27;: &#123;</span><br><span class="line">            &#x27;string_if_invalid&#x27;:&#x27;allen是大帅比&#x27;,</span><br><span class="line"></span><br><span class="line">            &#x27;context_processors&#x27;: [</span><br><span class="line">                &#x27;django.template.context_processors.debug&#x27;,</span><br><span class="line">                &#x27;django.template.context_processors.request&#x27;,</span><br><span class="line">                &#x27;django.contrib.auth.context_processors.auth&#x27;,</span><br><span class="line">                &#x27;django.contrib.messages.context_processors.messages&#x27;,</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"># 2、渲染时针对不存在的变量，值都会被替换成&#x27;allen是大帅比&#x27;</span><br></pre></td></tr></table></figure><p> （2）当点后的值是可调用对象时，模板引擎在渲染时会当做无参函数进行调用，将调用的返回值插入模板。（Django不推荐我们在模板中做过多的逻辑处理，所以模板中的方法调全部为无参调用，即便是遇到有参的需求，那也应该是在后端处理，然后为模板提供处理结果即可）</p><p> （3）约定俗称以下划线开头的变量属性通常被视为私有属性，可能无法访问</p><p> （4）点后值的查找优先级如下</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、先进行：  字典key的查找</span><br><span class="line">2、然后进行：属性或方法的查找</span><br><span class="line">3、最后进行：数字索引的查找</span><br></pre></td></tr></table></figure><p> 针对上述优先级，需要尤其注意冲突问题，例如</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def test(request):</span><br><span class="line">    from collections import defaultdict</span><br><span class="line">    msg=&#x27;helloallen&#x27;</span><br><span class="line">    d=defaultdict(int)</span><br><span class="line">    for s in msg:</span><br><span class="line">        d[s]+=1</span><br><span class="line"></span><br><span class="line">    return render(request, &#x27;test.html&#x27;, &#123;&#x27;d&#x27;:d&#125;)</span><br></pre></td></tr></table></figure><p>针对defaultdict字典，在访问某一个不存在的key时会返回一个默认值，这就为冲突埋下了祸根：</p><p>在模板中插入，我们的本意是想调用字典d的方法items()，但实际情况是会首先查找字典的key，所以items会被首先当做key来进行查找，很明显字典d中不存在名为items的key，而针对defaultdict类型的字典，会在key不存在时返回一个默认值（本例返回默认值为0），所以此时并不会调用items()方法。</p><p>针对上述问题的解决方案就是需要在视图中事先将defaultdict转换为dict类型</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d=dict(d)</span><br></pre></td></tr></table></figure><p>然后再传递给模板，这样在渲染时，先去字典中查找键items，无法找到也不会返回任何默认值，所以会转而查找d的属性或方法，从而调用到方法items()</p><h3 id="3-2-DTL之过滤器"><a href="#3-2-DTL之过滤器" class="headerlink" title="3.2 DTL之过滤器"></a>3.2 DTL之过滤器</h3><h3 id="3-2-1-常用过滤器基本使用"><a href="#3-2-1-常用过滤器基本使用" class="headerlink" title="3.2.1 常用过滤器基本使用"></a>3.2.1 常用过滤器基本使用</h3><p>过滤器类似于python的内置函数，用来把变量值加以修饰后再显示，具体语法如下</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#1、</span><br><span class="line">&#123;&#123; 变量名|过滤器名 &#125;&#125;</span><br><span class="line"></span><br><span class="line">#2、链式调用：上一个过滤器的结果继续被下一个过滤器处理</span><br><span class="line">&#123;&#123; 变量名|过滤器1|过滤器2 &#125;&#125;</span><br><span class="line"></span><br><span class="line">#3、有的过滤器取需要参数</span><br><span class="line">&#123;&#123; 变量名|过滤器名:传给过滤器的参数 &#125;&#125;</span><br></pre></td></tr></table></figure><p>常用内置过滤器</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">#0、default</span><br><span class="line">#作用：如果一个变量值是False或者为空、None，使用default后指定的默认值，否则，使用变量本身的值，如果value=’‘则输出“nothing”</span><br><span class="line">&#123;&#123; value|default:&quot;nothing&quot; &#125;&#125;</span><br><span class="line"></span><br><span class="line">#1、default_if_none</span><br><span class="line">#作用：如果只针对value是None这一种情况来设置默认值，需要使用default_if_none</span><br><span class="line">#只有在value=None的情况下，才会输出“None...”，</span><br><span class="line">&#123;&#123; value|default_if_none:&quot;None...&quot; &#125;&#125;</span><br><span class="line"></span><br><span class="line">#2、length</span><br><span class="line">#作用：返回值的长度。它对字符串、列表、字典等容器类型都起作用，如果value是 [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;]，那么输出是4</span><br><span class="line">&#123;&#123; value|length &#125;&#125;</span><br><span class="line"></span><br><span class="line">#3、filesizeformat</span><br><span class="line">#作用：将值的格式化为一个&quot;人类可读的&quot;文件尺寸(如13KB、4.1 MB、102bytes等等），如果 value 是 12312312321，输出将会是 11.5 GB</span><br><span class="line">&#123;&#123; value|filesizeformat &#125;&#125;</span><br><span class="line"></span><br><span class="line">#4、date</span><br><span class="line">#作用：将日期按照指定的格式输出，如果value=datetime.datetime.now(),按照格式Y-m-d则输出2019-02-02</span><br><span class="line">&#123;&#123; value|date:&quot;Y-m-d&quot; &#125;&#125;　　</span><br><span class="line"></span><br><span class="line">#5、slice</span><br><span class="line">#作用：对输出的字符串进行切片操作，顾头不顾尾,如果value=“allen“，则输出&quot;eg&quot;</span><br><span class="line">&#123;&#123; value|slice:&quot;0:2&quot; &#125;&#125;　</span><br><span class="line"></span><br><span class="line">#6、truncatechars</span><br><span class="line">#作用：如果字符串字符多于指定的字符数量，那么会被截断。截断的字符串将以可翻译的省略号序列（“...”）结尾，如果value=”hello world allen 嘎嘎“，则输出&quot;hello...&quot;,注意8个字符也包含末尾的3个点</span><br><span class="line">&#123;&#123; value|truncatechars:8 &#125;&#125;</span><br><span class="line"></span><br><span class="line">#7、truncatewords</span><br><span class="line">#作用：同truncatechars，但truncatewords是按照单词截断，注意末尾的3个点不算作单词，如果value=”hello world allen 嘎嘎“，则输出&quot;hello world ...&quot;</span><br><span class="line">&#123;&#123; value|truncatewords:2 &#125;&#125;</span><br><span class="line"></span><br><span class="line">#8、default</span><br><span class="line">#作用：如果值为False或者空或者None时，则使用默认值代替</span><br><span class="line">&#123;&#123; value|default:”(N/A)” &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-2-HTML的自动转义与关闭"><a href="#3-2-2-HTML的自动转义与关闭" class="headerlink" title="3.2.2 HTML的自动转义与关闭"></a>3.2.2 HTML的自动转义与关闭</h3><p> 模板在生成HTML时，如果变量中包含一些具有语法意义的特殊字符，则会影响HTML的结果，比如</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello, &#123;&#123; name &#125;&#125;</span><br></pre></td></tr></table></figure><p> 针对变量，如果用户注册自己的用户名name是一个中规中矩的用户名时，上述代码并无问题，但如果用户恶意注册用户名为下述内容</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 注册时，用户输入自己的用户名就是下述字符</span><br><span class="line">&lt;script&gt;alert(&#x27;hello&#x27;)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p> 后台取出name = “alert(‘hello’)”，然后执行render渲染的结果为</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello, &lt;script&gt;alert(&#x27;hello&#x27;)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p> 上述结果交给浏览器后，意味着浏览器将弹出一个JavaScript警报框！试想，如果是一个博客类网站，恶意作者在自己提交的文章中掺杂了类似上面这种恶意代码，这意味着每个读者在读取他的文章时，自己的浏览器都会弹出一个JavaScript警报框！</p><p> 类似的，如果注册的用户名包含’&lt;’号，如下</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;b&gt;allen</span><br></pre></td></tr></table></figure><p> 后台取出name = “<strong>allen”，然后执行render渲染的结果为</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello, &lt;b&gt;allen</span><br></pre></td></tr></table></figure><p><strong>上述结果交给浏览器后，有没有对应的闭合标签，意味着其后的内容都会被加粗</strong></p><p><strong>综上，可以确定的是：用户提交的数据不应该被盲目地信任并直接插入到我们的的网页中，因为恶意用户可能会利用这种漏洞来做潜在的坏事。这种类型的安全攻击称为跨站点脚本（XSS，详见：<a href="https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Cross-site_scripting">https://en.wikipedia.org/wiki/Cross-site_scripting</a>）攻击。</strong></p><p><strong>好在django已经为了做了相应的处理：django的模板引擎在生成模板时，默认就会对所有变量的值进行转移，具体是针对变量值中包含的以下五个字符的转义</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 1、使用DTL，以下5种特殊符号默认就会被转义成对应的html命名实体</span><br><span class="line">1、&lt; 被转换成 &amp;lt;</span><br><span class="line">2、&gt; 被转换成 &amp;gt;</span><br><span class="line">3、&#x27; 单引号被转换成 &amp;#x27;</span><br><span class="line">4、&quot; 双引号被转换成 &amp;quot;</span><br><span class="line">5、&amp; 被转换成 &amp;amp;</span><br><span class="line"></span><br><span class="line"># 首先经过转义后得到模板，然后递交给浏览器解析，上述内容均会被当成普通字符输出</span><br><span class="line">例如：</span><br><span class="line">针对value=&quot;&lt;script&gt;alert(123)&lt;/script&gt;&quot;，模板变量&#123;&#123; value &#125;&#125;会被渲染成&amp;lt;script&amp;gt;alert(123)&amp;lt;/script&amp;gt;交给浏览器后会被解析成普通字符”&lt;script&gt;alert(123)&lt;/script&gt;“，失去了js代码的语法意义</span><br></pre></td></tr></table></figure><hr><p><strong>虽然django默认会将所有模板变量进行转义，但有时候我们需要关闭自动转义，比如我们存入数据库的就是一段HTML代码，当我们取出来时就想让浏览器解析其中的语法呈现结果，而不是显示一堆普通字符。那如何关闭自动转义呢？具体操作如下</strong></p><p><strong>（1）针对单个变量-&gt;使用过滤器safe</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; value|safe &#125;&#125;</span><br><span class="line"></span><br><span class="line">比如如value=&#x27;&lt;a href=&quot;https://www.baidu.com&quot;&gt;点我啊&lt;/a&gt;&#x27;，经过过滤器safe的处理，浏览器在进行解析时就会将其当做超链接显示，不加safe过滤器则会当做普通字符显示’&lt;a href=&quot;https://www.baidu.com&quot;&gt;点我啊&lt;/a&gt;‘</span><br></pre></td></tr></table></figure><p><strong>(2）针对模板块-&gt;使用标签autoescape</strong></p><p><strong>autoescape通过参数on和off来控制开启或关闭模板块的整体转义行为，示例如下</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;# 对包含在标签内的模板块的转义行为进行整体关闭 #&#125;</span><br><span class="line">&#123;% autoescape off %&#125;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        不会转义 &#123;&#123; name &#125;&#125;.</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line"></span><br><span class="line">    &#123;#  支持嵌套，设置嵌套的模板块整体开启转义功能 #&#125;</span><br><span class="line">    &#123;% autoescape on %&#125;</span><br><span class="line">        &lt;p&gt;</span><br><span class="line">            会被转义: &#123;&#123; name &#125;&#125;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">    &#123;% endautoescape %&#125;</span><br><span class="line">&#123;% endautoescape %&#125;</span><br></pre></td></tr></table></figure><p><strong>autoescape的效果会遗传给子模板（使用标签extends继承当前模板），也会留给引入了当前模板的模板（使用标签include引入当前模板），例如</strong></p><p><strong>base.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">&#123;% autoescape on %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">        &#123;% block title %&#125;&#123;% endblock %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &#123;% block content %&#125;&#123;% endblock %&#125;</span><br><span class="line">&#123;% endautoescape %&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>child.html</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;# 继承父模板base.html #&#125;</span><br><span class="line">&#123;% extends &quot;base.html&quot; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;# 定制title块中的内容，其中包含的内容没有特殊字符，转义是否开启没有影响，显示结果均为allen &amp; dsb #&#125;</span><br><span class="line">&#123;% block title %&#125;allen &amp;amp; dsb&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;# 定制content块中的内容，如果变量name=&quot;&lt;b&gt;allen&lt;/b&gt;&quot;，由于content模板块在父模板中被设置成关闭转义，所以子模板也跟着关闭，生成的值为&lt;b&gt;allen&lt;/b&gt;，交给浏览器后显示结果为加粗的allen  #&#125;</span><br><span class="line">&#123;% block content %&#125;&#123;&#123; name &#125;&#125;&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p><strong>ps： autoescape的使用涉及到的标签与模板继承的概念，请读者自行查看后续章节</strong></p><p><strong>我们在介绍常用的内置过滤器时提到过：过滤器的参数可以是字符串，比如default过滤器</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; value1|default:&quot;&lt;a href=&#x27;http://www.allenav.com&#x27;&gt;allen草裙舞&lt;/a&gt;&quot; &#125;&#125;</span><br></pre></td></tr></table></figure><p><strong>针对上述代码，我们想要实现的效果是：在value值为Flase/空/None的情况下，会将字符串当成普通字符输出，即浏览器显示出的结果为字面量而不是一个超链接。</strong></p><p><strong>但是，过滤器default并不会对字符串进行转义，所以上述代码在value值为Flase/空/None的情况下，浏览器展示的就是一个超链接，要完成我们的需求，那么在默认值里需要自己将特殊符号写成命名实体，如下</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; value1|default:&quot;&amp;lt;a href=&amp;#x27;http://www.allenav.com&amp;#x27;&amp;gt;allen草裙舞&amp;lt;/a&amp;gt;&quot; &#125;&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>同理，当我们要显示的默认值是“3 &lt; 2”时，即便是按照如下所写，浏览器会显示出“3 &lt; 2”</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; data|default:&quot;3 &lt; 2&quot; &#125;&#125;  &#123;# Bad! Don&#x27;t do this. #&#125;</span><br></pre></td></tr></table></figure><p><strong>，但是我们还是应该写成下面这种格式，这才是通用的书写格式</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; data|default:&quot;3 &amp;lt; 2&quot; &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-3-其他过滤器（了解）"><a href="#3-2-3-其他过滤器（了解）" class="headerlink" title="3.2.3 其他过滤器（了解）"></a><strong>3.2.3 其他过滤器（了解）</strong></h3><p><strong>详见官网：<a href="https://link.zhihu.com/?target=https%3A//docs.djangoproject.com/en/3.0/ref/templates/builtins/%23ref-templates-builtins-filters">https://docs.djangoproject.com/en/3.0/ref/templates/builtins/#ref-templates-builtins-filters</a></strong></p><h3 id="3-3-DTL之标签"><a href="#3-3-DTL之标签" class="headerlink" title="3.3 DTL之标签"></a><strong>3.3 DTL之标签</strong></h3><p><strong>相比于模板中的变量，标签更为复杂一些，如</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#1、一些标签用来在输出中创建文本</span><br><span class="line">#2、一些标签用来进行流程控制(执行循环或者if判断)</span><br><span class="line">#3、一些标签用来将外部信息加载到模板中以供以后的变量使用</span><br></pre></td></tr></table></figure><p><strong>模板中的标签的格式为</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 1、</span><br><span class="line">&#123;% 标签名 %&#125;</span><br><span class="line"></span><br><span class="line"># 2、大多数标签都需要接收参数</span><br><span class="line">&#123;% 标签名 参数1 参数2 %&#125;</span><br><span class="line"></span><br><span class="line"># 3、一些标签需要有开始&#123;% tag %&#125;和结束标记&#123;% endtag %&#125;</span><br><span class="line">&#123;% 标签名 %&#125;</span><br><span class="line">...内容...</span><br><span class="line">&#123;% end标签名 %&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-1-常用标签之for标签"><a href="#3-3-1-常用标签之for标签" class="headerlink" title="3.3.1 常用标签之for标签"></a><strong>3.3.1 常用标签之for标签</strong></h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#1、遍历每一个元素：</span><br><span class="line">&#123;% for person in person_list %&#125;</span><br><span class="line">    &lt;p&gt;&#123;&#123; person.name &#125;&#125;&lt;/p&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">#2、可以利用&#123;% for obj in list reversed %&#125;反向循环。</span><br><span class="line"></span><br><span class="line">#3、遍历一个字典：</span><br><span class="line">&#123;% for key,val in dic.items %&#125;</span><br><span class="line">    &lt;p&gt;&#123;&#123; key &#125;&#125;:&#123;&#123; val &#125;&#125;&lt;/p&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">#4、循环序号可以通过&#123;&#123; forloop &#125;&#125;显示　</span><br><span class="line">forloop.counter            当前循环的索引值（从1开始）</span><br><span class="line">forloop.counter0           当前循环的索引值（从0开始）</span><br><span class="line">forloop.revcounter         当前循环的倒序索引值（从1开始）</span><br><span class="line">forloop.revcounter0        当前循环的倒序索引值（从0开始）</span><br><span class="line">forloop.first              当前循环是第一次循环则返回True，否则返回False</span><br><span class="line">forloop.last               当前循环是最后一次循环则返回True，否则返回False</span><br><span class="line">forloop.parentloop         本层循环的外层循环</span><br><span class="line"></span><br><span class="line">#5、for标签可以带有一个可选的&#123;% empty %&#125; 从句，在变量person_list为空或者没有被找到时，则执行empty子句</span><br><span class="line">&#123;% for person in person_list %&#125;</span><br><span class="line">    &lt;p&gt;&#123;&#123; person.name &#125;&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&#123;% empty %&#125;</span><br><span class="line">    &lt;p&gt;sorry,no person here&lt;/p&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p><strong>案列如下</strong></p><p><strong>url.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> re_path</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    re_path(<span class="string">r&#x27;^test/&#x27;</span>,views.test)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>view.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">request</span>):</span><br><span class="line">    names=[<span class="string">&#x27;allen&#x27;</span>,<span class="string">&#x27;kevin&#x27;</span>]</span><br><span class="line">    dic=&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;allen&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>,<span class="string">&#x27;sex&#x27;</span>:<span class="string">&#x27;male&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">    list1=[]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;test.html&#x27;</span>,<span class="built_in">locals</span>())</span><br></pre></td></tr></table></figure><p><strong>test.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">&#123;% for name in names %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; forloop.counter0 &#125;&#125; &#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">输出结果为：</span></span><br><span class="line"><span class="comment">0 allen</span></span><br><span class="line"><span class="comment">1 kevin</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">&#123;% for name in names reversed %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; forloop.revcounter0 &#125;&#125; &#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">输出结果为：</span></span><br><span class="line"><span class="comment">1 kevin</span></span><br><span class="line"><span class="comment">0 allen</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">&#123;% for k,v in dic.items %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; forloop.counter &#125;&#125; &#123;&#123; k &#125;&#125; &#123;&#123; v &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">输出结果为：</span></span><br><span class="line"><span class="comment">1 name allen</span></span><br><span class="line"><span class="comment">2 age 18</span></span><br><span class="line"><span class="comment">3 sex male</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">&#123;% for item in list1 %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    &#123;% empty %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>sorry,no value here<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">输出结果为：</span></span><br><span class="line"><span class="comment">sorry,no value here</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-3-2-常用标签之if标签"><a href="#3-3-2-常用标签之if标签" class="headerlink" title="3.3.2 常用标签之if标签"></a><strong>3.3.2 常用标签之if标签</strong></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"># 1、注意：</span><br><span class="line">&#123;% if 条件 %&#125;条件为真时if的子句才会生效，条件也可以是一个变量，if会对变量进行求值，在变量值为空、或者视图没有为其传值的情况下均为False</span><br><span class="line"></span><br><span class="line"># 2、具体语法</span><br><span class="line">&#123;% if num &gt; 100 or num &lt; 0 %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>无效<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% elif num &gt; 80 and num &lt; 100 %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>优秀<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>凑活吧<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">#3、if语句支持 and 、or、==、&gt;、&lt;、!=、&lt;=、&gt;=、in、not in、is、is not判断。</span><br><span class="line"></span><br><span class="line">#4、判断条件中可以引入过滤器</span><br><span class="line">&#123;% if athlete_list|length &gt; 1 %&#125;</span><br><span class="line">   Team: &#123;% for athlete in athlete_list %&#125; ... &#123;% endfor %&#125;</span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">   Athlete: &#123;&#123; athlete_list.0.name &#125;&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">过滤器length返回的数字可用于与数字进行比较，除此之外大多数过滤器返回的都是字符串并不能用于与数字比较</span><br><span class="line"></span><br><span class="line">#5、补充标签firstof</span><br><span class="line">针对下述多分支</span><br><span class="line">    &#123;% if var1 %&#125;</span><br><span class="line">        &#123;&#123; var1 &#125;&#125;</span><br><span class="line">    &#123;% elif var2 %&#125;</span><br><span class="line">        &#123;&#123; var2 &#125;&#125;</span><br><span class="line">    &#123;% elif var3 %&#125;</span><br><span class="line">        &#123;&#123; var3 &#125;&#125;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">可以简写为一行</span><br><span class="line">    &#123;% firstof var1 var2 var3 %&#125;</span><br><span class="line"></span><br><span class="line">也可以定义一个备用值，当var1、var2、var3均无值的时使用</span><br><span class="line">&#123;% firstof var1 var2 var3 &quot;fallback value&quot; %&#125;</span><br><span class="line"></span><br><span class="line">还可以使用as语法，将firsof得到的值赋值给一个变量value，以后在模板中使用&#123;&#123; value &#125;&#125;即可</span><br><span class="line">&#123;% firstof var1 var2 var3 &quot;fallback value&quot; as value %&#125;</span><br></pre></td></tr></table></figure><p><strong>案例如下</strong></p><p><strong>urls.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path,register_converter,re_path</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># 输入http://127.0.0.1:8008/或者http://127.0.0.1:8008/index/都会转发给视图函数index</span></span><br><span class="line">    re_path(<span class="string">r&#x27;^$&#x27;</span>,views.index),</span><br><span class="line">    re_path(<span class="string">r&#x27;^index/$&#x27;</span>,views.index),</span><br><span class="line"></span><br><span class="line">    re_path(<span class="string">r&#x27;^login/&#x27;</span>,views.login),</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>views.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request,<span class="string">&#x27;login.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    name=request.POST.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">    pwd=request.POST.get(<span class="string">&#x27;pwd&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> name == <span class="string">&#x27;allen&#x27;</span> <span class="keyword">and</span> pwd == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">        current_user=name</span><br><span class="line">        <span class="keyword">return</span> render(request,<span class="string">&#x27;index.html&#x27;</span>,<span class="built_in">locals</span>())</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        msg=<span class="string">&#x27;账号或密码错误&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> render(request,<span class="string">&#x27;login.html&#x27;</span>,<span class="built_in">locals</span>())</span><br></pre></td></tr></table></figure><p><strong>在templates目录下新建模板文件index.html与login.html</strong></p><p><strong>index.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">如果用户已经登录，则current_user变量有值，if判断结果为真，会打印变量current_user的值，为当前登录的用户名</span></span><br><span class="line"><span class="comment">如果用户没有登录，则current_user变量无值，if判断结果为假，会打印a标签要求用户先登录</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">&#123;% if current_user %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>当前登录用户为：&#123;&#123; current_user &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/login/&quot;</span>&gt;</span>请先登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>login.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--输错账号密码时的提示信息--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver 8008 #在浏览器输入http://127.0.0.1:8008/,然后点击登录，输入账号密码进行验证......</span><br></pre></td></tr></table></figure><h3 id="3-3-3-常用标签之with标签"><a href="#3-3-3-常用标签之with标签" class="headerlink" title="3.3.3 常用标签之with标签"></a><strong>3.3.3 常用标签之with标签</strong></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># with标签用来为一个复杂的变量名起别名,如果变量的值来自于数据库，在起别名后只需要使用别名即可，无需每次都向数据库发送请求来重新获取变量的值</span><br><span class="line">&#123;% with li.1.upper as v %&#125;</span><br><span class="line">    &#123;&#123; v &#125;&#125;</span><br><span class="line">&#123;% endwith %&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-4-常用标签之csrf-token标签"><a href="#3-3-4-常用标签之csrf-token标签" class="headerlink" title="3.3.4 常用标签之csrf_token标签"></a><strong>3.3.4 常用标签之csrf_token标签</strong></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 当用form表单提交POST请求时必须加上标签&#123;% csrf_token%&#125;，该标签用于防止跨站伪造请求</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"># 具体工作原理为：</span><br><span class="line"># 1、在GET请求到form表单时，标签&#123;% csrf_token%&#125;会被渲染成一个隐藏的input标签，该标签包含了由服务端生成的一串随机字符串,如<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;csrfmiddlewaretoken&quot;</span> <span class="attr">value</span>=<span class="string">&quot;dmje28mFo...OvnZ5&quot;</span>&gt;</span></span><br><span class="line"># 2、在使用form表单提交POST请求时，会提交上述随机字符串，服务端在接收到该POST请求时会对比该随机字符串，对比成功则处理该POST请求，否则拒绝，以此来确定客户端的身份</span><br><span class="line"></span><br><span class="line"># ps：什么是跨站请求伪造（英语：Cross-site request forgery）详见附录2</span><br></pre></td></tr></table></figure><p><strong>更多内置标签与过滤器：<a href="https://link.zhihu.com/?target=https%3A//docs.djangoproject.com/en/3.0/ref/templates/builtins/%23ref-templates-builtins-tags">https://docs.djangoproject.com/en/3.0/ref/templates/builtins/#ref-templates-builtins-tags</a></strong></p><h3 id="3-4-DTL之注释"><a href="#3-4-DTL之注释" class="headerlink" title="3.4 DTL之注释"></a><strong>3.4 DTL之注释</strong></h3><p><strong>单行注释，用注释语法：，在分隔符之间不允许有换行符</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#1、注释一行的某一部分,如下，渲染出的结果只会显示hello</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello&#123;# allen #&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">#2、注释可以包含任何模板代码，如下</span><br><span class="line">&#123;# &#123;% if foo %&#125;bar&#123;% else %&#125; #&#125;</span><br></pre></td></tr></table></figure><p><strong>多行注释，用comment标签，注意：comment标签不能嵌套</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% comment &quot;可以在引号里写好下述代码被注释的原因&quot; %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>备注释的内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endcomment %&#125;</span><br></pre></td></tr></table></figure><h2 id="四-模板的导入和继承"><a href="#四-模板的导入和继承" class="headerlink" title="四 模板的导入和继承"></a><strong>四 模板的导入和继承</strong></h2><p><strong>在实际开发中，模板文件彼此之间可能会有大量冗余代码，为此django提供了专门的语法来解决这个问题,主要围绕三种标签的使用：include标签、extends标签、block标签，详解如下</strong></p><h3 id="4-1、模板的导入之include标签"><a href="#4-1、模板的导入之include标签" class="headerlink" title="4.1、模板的导入之include标签"></a><strong>4.1、模板的导入之include标签</strong></h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#作用：在一个模板文件中，引入/重用另外一个模板文件的内容，</span><br><span class="line">&#123;% include &#x27;模版名称&#x27; %&#125;</span><br></pre></td></tr></table></figure><p><strong>案例：</strong></p><p><strong>可以把广告栏写到专门的文件里advertise.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;adv&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel-default&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-heading&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;panel-title&quot;</span>&gt;</span>Panel title<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span><br><span class="line">            Panel content</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel-danger&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-heading&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;panel-title&quot;</span>&gt;</span>Panel title<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span><br><span class="line">            Panel content</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel-warning&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-heading&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;panel-title&quot;</span>&gt;</span>Panel title<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span><br><span class="line">            Panel content</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>然后在base.html文件中用include标签引入advertise.html文件的内容</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap.min.css&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">integrity</span>=<span class="string">&quot;sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        * &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.header</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-3&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--在base.html引入advertise.html文件的内容--&gt;</span></span><br><span class="line">            &#123;% include &quot;advertise.html&quot; %&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-9&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-2、模板的继承-派生之extends标签、block标签"><a href="#4-2、模板的继承-派生之extends标签、block标签" class="headerlink" title="4.2、模板的继承\派生之extends标签、block标签"></a><strong>4.2、模板的继承\派生之extends标签、block标签</strong></h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#作用：在一个模板文件中，引入/重用另外一个模板文件的内容</span><br><span class="line">&#123;% extends &quot;模版名称&quot; %&#125;</span><br><span class="line">#  也就是说include有的功能extends全都有，但是extends可以搭配一个block标签，用于在继承的基础上定制新的内容</span><br></pre></td></tr></table></figure><p><strong>案例</strong></p><p><strong>Django模版引擎中最复杂且最强大的部分就是模版继承了。我们以先创建一个基本的“骨架”模版，它包含我们站点中的全部元素，并且可以定义多处blocks ，例如我们创建base.html内容如下</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span></span><br><span class="line">        &#123;% block title %&#125;自定义title名&#123;% endblock %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap.min.css&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">integrity</span>=<span class="string">&quot;sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        * &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.header</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#919191</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-3&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-group&quot;</span>&gt;</span></span><br><span class="line">                &#123;% block sidebar %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item active&quot;</span>&gt;</span>服装城<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span>美妆馆<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span>超市<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span>全球购<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span>闪购<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span>团购<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                &#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-9&quot;</span>&gt;</span></span><br><span class="line">            &#123;% block content %&#125;</span><br><span class="line">                base.html页面内容</span><br><span class="line">            &#123;% endblock %&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>模板base.html 定义了一个可以用于两列排版页面的简单HTML骨架。我们新建子模板index.html的主要工作就是继承base.html然后填充/覆盖其内部的blocks。</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;base.html&quot; %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!--用新内容完全覆盖了父模板内容--&gt;</span><br><span class="line">&#123;% block title %&#125;</span><br><span class="line">    index页面</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% block sidebar %&#125;</span><br><span class="line">    &lt;!--该变量会将父模板中sidebar中原来的内容继承过来，然后我们可以在此基础上新增，否则就是纯粹地覆盖--&gt;</span><br><span class="line">    &#123;&#123; block.super &#125;&#125;</span><br><span class="line"></span><br><span class="line">    &lt;!--在继承父模板内容的基础上新增的标签--&gt;</span><br><span class="line">    &lt;a href=&quot;#&quot; class=&quot;list-group-item&quot;&gt;拍卖&lt;/a&gt;</span><br><span class="line">    &lt;a href=&quot;#&quot; class=&quot;list-group-item&quot;&gt;金融&lt;/a&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">    &lt;!--用新内容完全覆盖了父模板内容--&gt;</span><br><span class="line">    &lt;p&gt;index页面内容&lt;/p&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>我们通过django访问index.html看到内容如下(block标签的内容都完成了替换或更新)</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;</span><br><span class="line">        index页面</span><br><span class="line">    &lt;/title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap.min.css&quot;</span><br><span class="line">          integrity=&quot;sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u&quot; crossorigin=&quot;anonymous&quot;&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .header &#123;</span><br><span class="line">            height: 50px;</span><br><span class="line">            width: 100%;</span><br><span class="line">            background-color: #919191;</span><br><span class="line">            margin-bottom: 20px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;header&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;row&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;col-md-3&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;list-group&quot;&gt;</span><br><span class="line">                &lt;!--基于&#123;&#123; block.super &#125;&#125;继承自父模板中的内容--&gt;</span><br><span class="line">                &lt;a href=&quot;#&quot; class=&quot;list-group-item active&quot;&gt;服装城&lt;/a&gt;</span><br><span class="line">                &lt;a href=&quot;#&quot; class=&quot;list-group-item&quot;&gt;美妆馆&lt;/a&gt;</span><br><span class="line">                &lt;a href=&quot;#&quot; class=&quot;list-group-item&quot;&gt;超市&lt;/a&gt;</span><br><span class="line">                &lt;a href=&quot;#&quot; class=&quot;list-group-item&quot;&gt;全球购&lt;/a&gt;</span><br><span class="line">                &lt;a href=&quot;#&quot; class=&quot;list-group-item&quot;&gt;闪购&lt;/a&gt;</span><br><span class="line">                &lt;a href=&quot;#&quot; class=&quot;list-group-item&quot;&gt;团购&lt;/a&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                &lt;!--在继承父模板内容的基础上新增的标签--&gt;</span><br><span class="line">                &lt;a href=&quot;#&quot; class=&quot;list-group-item&quot;&gt;拍卖&lt;/a&gt;</span><br><span class="line">                &lt;a href=&quot;#&quot; class=&quot;list-group-item&quot;&gt;金融&lt;/a&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div class=&quot;col-md-9&quot;&gt;</span><br><span class="line">            &lt;!--用新内容完全覆盖了父模板内容--&gt;</span><br><span class="line">            &lt;p&gt;index页面内容&lt;/p&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>我们可以根据需要使用尽可能多的继承级别，使用继承的一种常见方式是分成三个级别</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、创建一个base.html用来保存站点的主要外观</span><br><span class="line">2、为站点的每个部分创建一个base_SECTIONNAME.html模板。例如，base_news.html、base_sports.html。这些模板都继承自base.html并包含每部分特定的样式/设计。</span><br><span class="line">3、为每种类型的页面创建单独的模板，如新闻文章或博客条目。这些继承自2中的对应的模板。</span><br></pre></td></tr></table></figure><p><strong>总结与注意：</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#1、include仅仅只是完全引用其他模板文件，而extends却可以搭配block在引用的基础上进行扩写</span><br><span class="line"></span><br><span class="line">#2、如果使用模板继承，那么子模板必须将标签&#123;% extends %&#125;放在首行，否则模板继承无效。</span><br><span class="line"></span><br><span class="line">#3、base.html中&#123;% block %&#125;标记越多，它的可定制性就越强。子模板不必将父模板中定义的&#123;% block %&#125;全部重新定义一遍，你只需要定义自己需要的即可，未定义的&#123;% block %&#125;会继承父模板的内容</span><br><span class="line"></span><br><span class="line">#4、如果你发现在多个模板中存在重复的内容，我们应该将其放入父模板中</span><br><span class="line"></span><br><span class="line">#5、变量&#123;&#123; block.super &#125;&#125; 可以重用父类的内容，然后在父类基础上增加新内容，而不是完全覆盖。使用&#123;&#123;block.super&#125;插入的数据将不会自动转义，因为它已在父模板中转义（如果需要）。</span><br><span class="line"></span><br><span class="line">#6、为了提升可读性，我们可以给标签&#123;% endblock %&#125; 起一个名字 。例如：</span><br><span class="line">    &#123;% block content %&#125;</span><br><span class="line">    ...</span><br><span class="line">    &#123;% endblock content %&#125;　</span><br><span class="line"></span><br><span class="line">#7、在一个模版中不能出现重名的block标签。</span><br></pre></td></tr></table></figure><h2 id="五-自定义过滤器和标签"><a href="#五-自定义过滤器和标签" class="headerlink" title="五 自定义过滤器和标签"></a><strong>五 自定义过滤器和标签</strong></h2><h3 id="5-1-自定义过滤器和标签"><a href="#5-1-自定义过滤器和标签" class="headerlink" title="5.1 自定义过滤器和标签"></a><strong>5.1 自定义过滤器和标签</strong></h3><p><strong>当内置的过滤器或标签无法满足我们需求时，我们可以自定义，具体操作步骤如下</strong></p><p><strong>1、在settings中的INSTALLED_APPS添加当前app的名字，不然django无法找到自定义的过滤器或标签</strong></p><p><strong>settings.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在settings.py中找到该列表，然后加以配置</span></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;app01.apps.App01Config&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;app01&#x27;</span>, <span class="comment"># 添加当前app的名字</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>2、在文件夹app01下创建包templatetags</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、templatetags目录下需要有__init__.py文件，确保它是一个python的包</span><br><span class="line">2、文件夹名只能是templatetags</span><br><span class="line">3、templatetags与models.py，views.py在同一级别</span><br></pre></td></tr></table></figure><p><strong>3、在templatetags新建任意.py文件，如my_tags.py，在该文件中自定义过滤器或标签，由于我们后期是要通过加载文件来引入自定义的过滤器或标签，所以请保障文件名的唯一性，如此方可保障多个app之间不相互冲突</strong></p><p><strong>目录层级如下</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">app01/</span><br><span class="line">    __init__.py</span><br><span class="line">    models.py</span><br><span class="line">    templatetags/</span><br><span class="line">        __init__.py</span><br><span class="line">        my_tags.py</span><br><span class="line">    views.py</span><br><span class="line"></span><br><span class="line"># 加载方式：&#123;% load 自定义标签或过滤器所处的文件名字 %&#125;,本例对应为&#123;% load my_tags %&#125;</span><br></pre></td></tr></table></figure><p><strong>my_tags.py文件内容如下</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#一、必须首先在模板顶级定义一个变量register，该变量值为template.Library的实例</span></span><br><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> template</span><br><span class="line"></span><br><span class="line">register = template.Library() <span class="comment"># 注意变量名必须为register,不可改变</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#二、然后再开始自定义过滤器与标签</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">2.1、自定义过滤器</span></span><br><span class="line"><span class="string">    自定义过滤器是一个python函数，该函数需要1或2个参数，两个参数会一同传入</span></span><br><span class="line"><span class="string">    (1) 第一个参数来自过滤器左侧的变量(固定有)</span></span><br><span class="line"><span class="string">    (2) 第二个参数来自过滤右侧的参数值(可有可无)</span></span><br><span class="line"><span class="string">    例如：针对自定义过滤器foo的使用</span></span><br><span class="line"><span class="string">    &#123;&#123; var|foo:&quot;bar&quot; &#125;&#125;，会执行foo(var,&quot;bar&quot;)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="meta">@register.filter(<span class="params">name=<span class="string">&#x27;cut&#x27;</span></span>) </span><span class="comment"># name参数用来命名自定义过滤器</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cut</span>(<span class="params">value, arg</span>): <span class="comment"># 有两个参数</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Removes all values of arg from the given string&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> value.replace(arg, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@register.filter </span><span class="comment"># 省略name参数，过滤器名字默认为函数名</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lower</span>(<span class="params">value</span>): <span class="comment"># 只有一个参数</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Converts a string into all lowercase&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> value.lower()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.2、自定义标签：可以定义多个参数</span></span><br><span class="line"><span class="meta">@register.simple_tag</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_multi_tag</span>(<span class="params">v1, v2</span>): </span><br><span class="line">    <span class="keyword">return</span> v1 * v2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">2.3、自定义标签扩展之mark_safe</span></span><br><span class="line"><span class="string">    我们可以用内置标签safe来关闭转义，从而让标签内容有语法意义，但如果我们想让自定义标签处理的结果也有语法意义，则不能使用内置标签safe了，需要使用mark_safe，可以实现与内置标签safe同样的功能</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">from</span> django.utils.safestring <span class="keyword">import</span> mark_safe</span><br><span class="line"></span><br><span class="line"><span class="meta">@register.simple_tag</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_input_tag</span>(<span class="params"><span class="built_in">id</span>, name</span>):</span><br><span class="line">    res = <span class="string">&quot;&lt;input type=&#x27;text&#x27; id=&#x27;%s&#x27; name=&#x27;%s&#x27; /&gt;&quot;</span> % (<span class="built_in">id</span>, name)</span><br><span class="line">    <span class="keyword">return</span> mark_safe(res)</span><br></pre></td></tr></table></figure><p><strong>4、自定义过滤器或标签必须重新启动django方可生效</strong></p><h3 id="5-2-自定义过滤器和标签的使用"><a href="#5-2-自定义过滤器和标签的使用" class="headerlink" title="5.2 自定义过滤器和标签的使用"></a><strong>5.2 自定义过滤器和标签的使用</strong></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--必须先加载存有自定义过滤器和标签的文件--&gt;</span></span><br><span class="line">&#123;% load my_tags %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--过滤器cut使用：处理结果为：allen is 18 years old--&gt;</span></span><br><span class="line">&#123;&#123; &#x27;allen is 180 years old&#x27;|cut:&quot;0&quot; &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--过滤器lower使用：处理结果为：allen--&gt;</span></span><br><span class="line">&#123;&#123; &#x27;allen&#x27;|lower &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--结果为2--&gt;</span></span><br><span class="line">&#123;% my_multi_tag 1 2 %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">结果为一个input标签，该表的属性id=&quot;inp1&quot; name=&quot;username&quot;</span></span><br><span class="line"><span class="comment">注意：input的属性值均为字符串类型，所以my_input_tag后的两个值均为字符串类型</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">&#123;% my_input_tag &quot;inp1&quot; &quot;username&quot; %&#125; </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>对比自定义标签与自定义过滤器</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#1、自定义过滤器只能传两个参数，而自定义标签却可以传多个参数</span><br><span class="line"></span><br><span class="line">#2、过滤器可以用于if判断，而标签不能</span><br><span class="line">&#123;% if salary|my_multi_filter:12 &gt; 200 %&#125;</span><br><span class="line">    &lt;p&gt;优秀&lt;/p&gt;</span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">    &lt;p&gt;垃圾&lt;/p&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p><strong>### 5.3 Inclusion tags</strong></p><p><strong>在4.1小节我们提及内置的include标签可以在当前模板中引入其他的模板，但有一个问题是：被引入的模板内容是固定死的，如果我们想根据传入不同的参数控制被引入模板的内容，就需要自定义inclusion标签。</strong></p><p><strong>先创建好被引入的模板userinfo.html,嵌入变量</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>靓仔的名字: &#123;&#123; username &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>靓仔的年龄: &#123;&#123; age &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>然后自定义inclusion标签</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># my_tags.py，其余准备工作请读者自行参考自定义标签，此处我们直接上代码</span></span><br><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> template</span><br><span class="line"></span><br><span class="line">register = template.Library()</span><br><span class="line"></span><br><span class="line"><span class="meta">@register.inclusion_tag(<span class="params"><span class="string">&#x27;userinfo.html&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_userinfo</span>(<span class="params">username, age</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    可以函数内编写一系列的逻辑，比如根据传来的参数，去后台数据库中取出相应的数据</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    res = &#123;</span><br><span class="line">        <span class="string">&#x27;username&#x27;</span>: username,</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span>: age,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p><strong>自定义标签get_userinfo的返回值必须是一个字典，该字典用来渲染模板userinfo.html。</strong></p><p><strong>如果我们想在index.html中引入userinfo.html的内容，做法如下，为标签get_userinfo传入不同的参数则会得到不同的模板内容</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">&#123;% load my_tags %&#125;</span><br><span class="line">&#123;% get_userinfo &quot;allen&quot; age=18 %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>自定义inclusion标签函数可以接收任意数量的位置或关键字参数，例如</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@register.inclusion_tag(&#x27;my_template.html&#x27;)</span><br><span class="line">def my_inclusion_tag(a, b, *args, **kwargs):</span><br><span class="line">    warning = kwargs[&#x27;warning&#x27;]</span><br><span class="line">    profile = kwargs[&#x27;profile&#x27;]</span><br><span class="line">    ...</span><br><span class="line">    return 用于渲染模板&#x27;my_template.html&#x27;的字典</span><br></pre></td></tr></table></figure><p><strong>但此时的参数都需要在模板中直接传递，比如</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% my_inclusion_tag &quot;allen&quot; 18 book.title warning=message|lower profile=user.profile %&#125;</span><br></pre></td></tr></table></figure><p><strong>毫无疑问，让模板的开发者去记住所有参数的顺序并进行传递是非常痛苦的，为此register.inclusion_tag提供了一个参数takes_context专门用来解决这个问题。该参数默认值为False，当设置成True时，就像单词字面所表达的一样：从contex中获取参数。context是由当前模板对应的视图返回的，如当前模板时index.html，那context就来自于index.html对应的后台视图返回。所以当takes_context=True时，自定义标签只需有一个参数，且参数名必须为context，与render函数的context参数相呼应</strong></p><p><strong>my_template.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">&#123;&#123; aaa &#125;&#125;</span><br><span class="line">&#123;&#123; bbb &#125;&#125;</span><br><span class="line">&#123;&#123; ccc &#125;&#125;</span><br><span class="line">&#123;&#123; ddd &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>my_tags.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> template</span><br><span class="line"></span><br><span class="line">register = template.Library()  <span class="comment"># 注意变量名必须为register,不可改变</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@register.inclusion_tag(<span class="params"><span class="string">&#x27;my_template.html&#x27;</span>, takes_context=<span class="literal">True</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_inclusion_tag</span>(<span class="params">context</span>):</span><br><span class="line"></span><br><span class="line">    res = &#123;</span><br><span class="line">        <span class="string">&#x27;aaa&#x27;</span>: context[<span class="string">&#x27;a&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;bbb&#x27;</span>: context[<span class="string">&#x27;b&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;ccc&#x27;</span>: context[<span class="string">&#x27;warning&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;ddd&#x27;</span>: context[<span class="string">&#x27;profile&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;other_data&#x27;</span>:<span class="string">&#x27;...&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res <span class="comment"># 该字典是用来渲染模板&#x27;my_template.html&#x27;的，不要与context混淆</span></span><br></pre></td></tr></table></figure><p><strong>如果我们想在index.html中引入my_template.html的内容，做法如下，此时无需为标签my_inclusion_tag传入参数</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">&#123;% load my_tags %&#125;</span><br><span class="line">&#123;% my_inclusion_tag %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>my_inclusion_tag的参数是来自于当前模板(即index.html)对应的后台视图返回的context</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 该字典与标签my_inclusion_tag的参数context呼应</span></span><br><span class="line">    context = &#123;</span><br><span class="line">        <span class="string">&#x27;a&#x27;</span>: <span class="string">&quot;allen&quot;</span>,</span><br><span class="line">        <span class="string">&#x27;b&#x27;</span>: <span class="number">18</span>,</span><br><span class="line">        <span class="string">&#x27;warning&#x27;</span>: <span class="string">&#x27;xxx&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;profile&#x27;</span>: <span class="string">&#x27;yyy&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;index.html&#x27;</span>, context=context)</span><br></pre></td></tr></table></figure><h2 id="六-静态文件配置"><a href="#六-静态文件配置" class="headerlink" title="六 静态文件配置"></a><strong>六 静态文件配置</strong></h2><h3 id="6-1-单app下静态文件的组织与使用"><a href="#6-1-单app下静态文件的组织与使用" class="headerlink" title="6.1 单app下静态文件的组织与使用"></a><strong>6.1 单app下静态文件的组织与使用</strong></h3><p><strong>我们在编写模板文件时，需要大量引用css、js、图片等静态文件，如果我们将这些文件在服务端存放的路径都固定写死那么将非常不利于后期的扩展，我们可以这么做</strong></p><p><strong>1、settings.py</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">STATIC_URL = &#x27;/static/&#x27; # 找到这一行，然后新增下述代码</span><br><span class="line">STATICFILES_DIRS = [</span><br><span class="line">    os.path.join(BASE_DIR, &#x27;statics&#x27;),# 获取静态文件在服务端的绝对路径</span><br><span class="line">]</span><br><span class="line">#STATIC_URL = &#x27;/static/&#x27;就是为静态文件的绝对路径起了一个别名，以后我们只需要用路径/static/即可</span><br></pre></td></tr></table></figure><p><strong>2、在项目根目录下新增文件夹statics，为了更便于管理，可以在statics下新建子文件夹css、js、img等</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># statics目录结构</span><br><span class="line">statics</span><br><span class="line">├── css</span><br><span class="line">│   └── my.css</span><br><span class="line">├── img</span><br><span class="line">│   └── rr.jpeg</span><br><span class="line">└── js</span><br><span class="line">    ├── jquery-3.6.1.min.js</span><br><span class="line">    └── my.js</span><br></pre></td></tr></table></figure><p><strong>3、新建模板文件index.html,在该文件中对静态文件的引用如下</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/static/css/my.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>我是红色的，点我就绿<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/static/img/rb.jpeg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/static/js/jquery-3.3.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/static/js/my.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>综上，在配置完settings.py后，所有的静态文件路径都可以采用别名/static/作为起始，这在一定程度上会有利于程序的扩展性，但如果我们在项目后期维护时，连/static/这个值也需要修改，那意味着所有模板文件中也都需要跟着改了，扩展性依然很差，为此，django在一个名为static.py的文件中定义了标签static、get_static_prefix，二者都可以解决该问题</strong></p><p><strong>test.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注意：必须先加载文件static.py--&gt;</span></span><br><span class="line">    &#123;% load static %&#125;</span><br><span class="line">    <span class="comment">&lt;!--注意：此处的static是一个定义在static.py中的一个标签，名字与文件名一样而已，不要搞混--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% static &#x27;css/my.css&#x27; %&#125;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>我是红色的，点我就绿<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&#123;% static &#x27;img/rb.jpeg&#x27; %&#125;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% load static %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&#123;% static &#x27;js/jquery-3.3.1.min.js&#x27; %&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&#123;% static &#x27;js/my.js&#x27; %&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>标签static会接收传入的参数，然后这根据<code>settings.py</code>中变量<code>STATIC_URL</code>的值拼接出一个完整的路径，如果<code>STATIC_URL = &#39;/static/&#39;</code>，那么<code>href=&quot;&#123;% static 'css/my.css' %&#125;&quot;</code>会被渲染成<code>href=&quot;/static/css/my.css&quot;</code>，如果<code>STATIC_URL = &#39;/static123/&#39;</code>，那么<code>href=&quot;&#123;% static 'css/my.css' %&#125;&quot;</code>会被渲染成<code>href=&quot;/static123/css/my.css&quot;</code>。</p><p><strong>标签get_static_prefix也可以完成同样的效果，只不过用法不同。我们不能为标签get_static_prefix传参，因为标签get_static_prefix代表的只是settings.py中STATIC_URL的值，所以我们需要做的是在get_static_prefix的基础上自行拼接路径，如下</strong></p><p><strong>test.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注意：同样需要先加载文件static.py--&gt;</span></span><br><span class="line">    &#123;% load static %&#125;</span><br><span class="line">    <span class="comment">&lt;!--使用标签get_static_prefix拼接路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% get_static_prefix %&#125;css/my.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>我是红色的，点我就绿<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&#123;% get_static_prefix %&#125;img/rb.jpeg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% load static %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&#123;% get_static_prefix %&#125;js/jquery-3.3.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&#123;% get_static_prefix %&#125;js/my.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>如果<code>STATIC_URL = &#39;/static/&#39;</code>，那么<code>href=&quot;&#123;% get_static_prefix %&#125;css/my.css&quot;</code>会被渲染成<code>href=&quot;/static/css/my.css&quot;</code>，其它同理</strong></p><h3 id="6-2-多app下静态文件的组织与使用"><a href="#6-2-多app下静态文件的组织与使用" class="headerlink" title="6.2 多app下静态文件的组织与使用"></a><strong>6.2 多app下静态文件的组织与使用</strong></h3><p><strong>静态文件的查找与模板的查找是一致的，当我们有多个app时，可以如下组织目录结构(只列举了静态文件相关目录)</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/Users/linhaifeng/PycharmProjects/allenPro</span><br><span class="line">├── app01</span><br><span class="line">│   ├── static</span><br><span class="line">│   │   └── a.css # 文件内容为：h1 &#123; color: red; &#125;</span><br><span class="line">├── app02</span><br><span class="line">│   ├── static</span><br><span class="line">│   │   └── a.css # 文件内容为：h1 &#123; color: green; &#125;</span><br><span class="line">├── static</span><br><span class="line">│   └── a.css     # 文件内容为：h1 &#123; color: blue; &#125;</span><br><span class="line">├── static1</span><br><span class="line">│   └── a.css     # 文件内容为：h1 &#123; color: goldenrod; &#125;</span><br><span class="line">├── templates</span><br><span class="line">│   └── index.html</span><br></pre></td></tr></table></figure><p><strong>配置文件settings.py</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">STATIC_URL = &#x27;/static/&#x27;</span><br><span class="line"></span><br><span class="line">STATICFILES_DIRS = [</span><br><span class="line">    os.path.join(BASE_DIR, &quot;static&quot;),</span><br><span class="line">    os.path.join(BASE_DIR, &quot;static1&quot;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>在模板index.html中,</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    &#123;% load static %&#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% static &quot;</span><span class="attr">a.css</span>&quot; %&#125;&quot;&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>模板内容<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>静态文件的加载优先级模板的查找优先级是一样的原理，<code>&#123;% static "a.css" %&#125;</code>查找优先级为</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1、djanog首先会先依次检索STATICFILES_DIRS列表中的目录</span><br><span class="line">2、然后按照配置项INSTALLED_APPS注册的app顺序，依次检索每个app下的static目录</span><br></pre></td></tr></table></figure><p><strong>为了避免出现冲突，与模板的组织原理一样，我们可以在每个static下创建子目录来充当名称空间的作用，所以上述目录结构调整为</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/Users/linhaifeng/PycharmProjects/allenPro</span><br><span class="line">├── app01</span><br><span class="line">│   ├── static</span><br><span class="line">│   │   └── app01</span><br><span class="line">│   │       └── a.css</span><br><span class="line">├── app02</span><br><span class="line">│   ├── static</span><br><span class="line">│   │   └── app02</span><br><span class="line">│   │       └── a.css</span><br><span class="line">├── static</span><br><span class="line">│   └── base</span><br><span class="line">│       └── a.css</span><br><span class="line">├── static1</span><br><span class="line">│   └── base1</span><br><span class="line">│       └── a.css</span><br><span class="line">├── templates</span><br><span class="line">│   └── index.html</span><br></pre></td></tr></table></figure><p><strong>模板index.html中引入静态文件a.css的路径如下，即便静态文件重名，也不会发生冲突</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% static &quot;</span><span class="attr">base</span>/<span class="attr">a.css</span>&quot; %&#125;&quot;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% static &quot;</span><span class="attr">base1</span>/<span class="attr">a.css</span>&quot; %&#125;&quot;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% static &quot;</span><span class="attr">app01</span>/<span class="attr">a.css</span>&quot; %&#125;&quot;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% static &quot;</span><span class="attr">app02</span>/<span class="attr">a.css</span>&quot; %&#125;&quot;&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django之视图层</title>
      <link href="/2021/11/03/Python/Django/3.Django%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%B1%82/"/>
      <url>/2021/11/03/Python/Django/3.Django%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<p><img src="视图层.png" alt="img"></p><p>django的视图主要有2种，分别是<code>函数视图</code>和<code>类视图</code></p><p>Django的视图层默认定义在views.py文件中，用来处理web请求信息和返回信息的函数：请求对象（HttpRequest）和相应对象（HttpResponse）</p><p>官网解释：<a href="https://docs.djangoproject.com/zh-hans/3.2/ref/request-response/">请求和响应对象</a></p><h1 id="一、请求与相应"><a href="#一、请求与相应" class="headerlink" title="一、请求与相应"></a>一、请求与相应</h1><h2 id="请求对象（HttpReques）"><a href="#请求对象（HttpReques）" class="headerlink" title="请求对象（HttpReques）"></a>请求对象（HttpReques）</h2><p>​    当一个页面被请求时，django会创建一个包含本次请求原信息（如http协议请求报文中的请求行、首部信息、内容主体）的HttpRequest对象。</p><p>​     之后，django会找到匹配的视图，将该对象传给视图函数的第一个参数，约定俗称该参数名为request。 </p><p>​    在视图函数中，通过访问该对象的属性便可以提取http协议的请求数据</p><blockquote><p>常用的http请求：</p><p>POST                            添加/上传</p><p>GET                              获取/下载</p><p>PUT/PATCH                 修改，其中PUT表示修改整体数据，PATCH表示修改部分数据</p><p>DELETE                         删除</p></blockquote><h3 id="HttpRequest对象常用属性part1"><a href="#HttpRequest对象常用属性part1" class="headerlink" title="HttpRequest对象常用属性part1"></a>HttpRequest对象常用属性part1</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">request本质就是WSGIRequest的实例对象，父类是<span class="keyword">from</span> django.http.request <span class="keyword">import</span> HttpRequest</span><br><span class="line">一.HttpRequest.method</span><br><span class="line">　　获取请求使用的方法（值为纯大写的字符串格式）。例如：<span class="string">&quot;GET&quot;</span>、<span class="string">&quot;POST&quot;</span></span><br><span class="line">   应该通过该属性的值来判断请求方法</span><br><span class="line"></span><br><span class="line">   在视图函数中：</span><br><span class="line">   <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">       ...</span><br><span class="line">   <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">       ...</span><br><span class="line"></span><br><span class="line">二.HttpRequest.GET</span><br><span class="line">　　值为一个类似于字典的QueryDict对象，封装了GET请求的所有参数，可通过HttpRequest.GET.get(<span class="string">&#x27;键&#x27;</span>)获取相对应的值</span><br><span class="line">    http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8000</span>/app01/login?name=allen&amp;passwd=<span class="number">123</span></span><br><span class="line">&lt;QueryDict: &#123;<span class="string">&#x27;name&#x27;</span>: [<span class="string">&#x27;allen&#x27;</span>], <span class="string">&#x27;passwd&#x27;</span>: [<span class="string">&#x27;123&#x27;</span>]&#125;&gt;</span><br><span class="line">    QueryDict 是一个经过封装的字典，提供了基本的字典操作，还提供额外的操作给开发者获取字典内部的数据，因为python基本数据类型<span class="built_in">dict</span>是无法让字典在一个key下指向多个值的情况，所以Django封装了一个新的字典来实现</span><br><span class="line"></span><br><span class="line">   在视图函数中：</span><br><span class="line">   request.GET.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"></span><br><span class="line">三.HttpRequest.POST</span><br><span class="line">   值为一个类似于字典的QueryDict对象，封装了POST请求所包含的表单数据，可通过HttpRequest.POST.get(<span class="string">&#x27;键&#x27;</span>)获取相对应的值</span><br><span class="line"></span><br><span class="line">   在视图函数中：</span><br><span class="line">   request.POST.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"></span><br><span class="line">   针对表单中checkbox类型的<span class="built_in">input</span>标签、select标签提交的数据，键对应的值为多个，需要用：HttpRequest.POST.getlist(<span class="string">&quot;hobbies&quot;</span>)获取存有多个值的列表,同理也有HttpRequest.GET.getlist(<span class="string">&quot;键&quot;</span>)</span><br><span class="line">   针对有多个值的的情况，也可以用HttpRequest.GET.get(<span class="string">&quot;键&quot;</span>)，会获取列表中的最后一个值</span><br><span class="line">四. 比如</span><br><span class="line">  request.method   获取请求动作</span><br><span class="line">    request.path       获取请求地址</span><br><span class="line">    request.path_info  获取请求地址信息</span><br><span class="line">    request.get_port 获取端口</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>案例：</p><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">urls.py</button></li><li class="tab"><button type="button" data-href="#test4-2">views.py</button></li><li class="tab"><button type="button" data-href="#test4-3">在templates目录下新建login.html</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> re_path</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    re_path(<span class="string">&#x27;login/&#x27;</span>,views.login),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render,HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="comment"># 当请求url为：http://127.0.0.1:8000/login/?a=1&amp;b=2&amp;c=3&amp;c=4&amp;c=5</span></span><br><span class="line">        <span class="comment"># 请求方法是GET，?后的请求参数都存放于request.GET中</span></span><br><span class="line">        <span class="built_in">print</span>(request.GET)</span><br><span class="line">        <span class="comment"># 输出&lt;QueryDict: &#123;&#x27;a&#x27;: [&#x27;1&#x27;], &#x27;b&#x27;: [&#x27;2&#x27;], &#x27;c&#x27;: [&#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;]&#125;&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取？后参数的方式为</span></span><br><span class="line">        a=request.GET.get(<span class="string">&#x27;a&#x27;</span>) <span class="comment"># 1</span></span><br><span class="line">        b=request.GET.get(<span class="string">&#x27;b&#x27;</span>) <span class="comment"># 2</span></span><br><span class="line">        c=request.GET.getlist(<span class="string">&#x27;c&#x27;</span>) <span class="comment"># [&#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;]</span></span><br><span class="line">        c1=request.GET.get(<span class="string">&#x27;c&#x27;</span>) <span class="comment"># 5</span></span><br><span class="line">        c2=request.GET.<span class="built_in">dict</span>()  <span class="comment"># 转换成字典，会去重&#123;&#x27;a&#x27;: &#x27;1&#x27;, &#x27;b&#x27;: &#x27;2&#x27;, &#x27;c&#x27;: &#x27;5&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> render(request,<span class="string">&#x27;login.html&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="comment"># 在输入框内输入用户名allen、年龄18，选择爱好，点击提交</span></span><br><span class="line">        <span class="comment"># 请求方法为POST，表单内的数据都会存放于request.POST中</span></span><br><span class="line">        <span class="built_in">print</span>(request.POST) </span><br><span class="line">        <span class="comment"># 输出&lt;QueryDict: &#123;..., &#x27;name&#x27;: [&#x27;allen&#x27;], &#x27;age&#x27;: [&#x27;18&#x27;], &#x27;hobbies&#x27;: [&#x27;music&#x27;, &#x27;read&#x27;]&#125;&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取表单中数据的方式为</span></span><br><span class="line">        name=request.POST.get(<span class="string">&#x27;name&#x27;</span>) <span class="comment"># allen</span></span><br><span class="line">        age=request.POST.get(<span class="string">&#x27;age&#x27;</span>) <span class="comment"># 18</span></span><br><span class="line">        hobbies=request.POST.getlist(<span class="string">&#x27;hobbies&#x27;</span>) <span class="comment"># [&#x27;music&#x27;, &#x27;read&#x27;]</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;提交成功&#x27;</span>)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-3"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">method=&quot;post&quot;代表在提交表单时会以POST方法提交表单数据</span></span><br><span class="line"><span class="comment">action=&quot;/login/&quot; 代表表单数据的提交地址为http://127.0.0.1:8000/login/,可以简写为action=&quot;/login/&quot;,或者action=&quot;&quot;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://127.0.0.1:8000/login/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125; <span class="comment">&lt;!--强调：必须加上这一行，后续我们会详细介绍--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        爱好：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span> <span class="attr">value</span>=<span class="string">&quot;music&quot;</span>&gt;</span>音乐</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span> <span class="attr">value</span>=<span class="string">&quot;read&quot;</span>&gt;</span>阅读</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span> <span class="attr">value</span>=<span class="string">&quot;dancing&quot;</span>&gt;</span>跳舞</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="HttpRequest对象常用属性part2"><a href="#HttpRequest对象常用属性part2" class="headerlink" title="HttpRequest对象常用属性part2"></a>HttpRequest对象常用属性part2</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">一.HttpRequest.body</span><br><span class="line">  <span class="number">1.1</span> 当浏览器基于http协议的GET方法提交数据时(没有请求体一说),数据会按照k1=v1&amp;k2=v2&amp;k3=v3的格式放到url中，然后发送给django，django会将这些数据封装到request.GET中，注意此时的请求体request.body为空、无用</span><br><span class="line"></span><br><span class="line">  <span class="number">1.2</span> 当浏览器基于http协议的POST方法提交数据时，数据会被放到请求体中发送给django，django会将接收到的请求体数据存放于HttpRequest.body属性中.</span><br><span class="line">  但该属性的值为Bytes类型(套接字数据传输都是<span class="built_in">bytes</span>类型)，而通常情况下直接处理Bytes、并从中提取有用数据的操作是复杂而繁琐的，好在django会对它做进一步的处理与封装以便我们更为方便地提取数据，具体如何处理呢？</span><br><span class="line"></span><br><span class="line">  当前端采用POST提交数据时，数据有三种常用编码格式，编码格式不同Django会有不同的处理方式</span><br><span class="line">  <span class="comment"># 编码格式1：application/x-www-form-urlencoded，是form表单默认编码格式</span></span><br><span class="line">  <span class="comment"># 编码格式2：multipart/form-data，上传文件专用格式</span></span><br><span class="line">  <span class="comment"># 编码格式2：application/json，提交json格式字符串</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#====》I: 当POST数据的编码格式为application/x-www-form-urlencoded时《====</span></span><br><span class="line">      HttpRequest.body中的数据格式为<span class="string">b&#x27;a=1&amp;b=2&amp;c=3&#x27;</span></span><br><span class="line">      django会将其提取出来封装到request.POST中</span><br><span class="line">      request.FILES此时为空</span><br><span class="line"></span><br><span class="line">      如：</span><br><span class="line">      <span class="built_in">print</span>(request.body) <span class="comment"># b&#x27;a=1&amp;b=2&amp;c=3&#x27;</span></span><br><span class="line">      <span class="built_in">print</span>(request.POST) <span class="comment"># &lt;QueryDict: &#123;&#x27;a&#x27;: [&#x27;1&#x27;],&#x27;b&#x27;: [&#x27;2&#x27;],&#x27;c&#x27;: [&#x27;3&#x27;]&#125;</span></span><br><span class="line">      <span class="built_in">print</span>(request.FILES) <span class="comment"># &lt;MultiValueDict: &#123;&#125;&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">#====》II: 当POST数据的编码格式为multipart/form-data时《====</span></span><br><span class="line">      详见：https://my.oschina.net/cnlw/blog/<span class="number">168466</span>?fromerr=aQL9sTI2</span><br><span class="line"></span><br><span class="line">      HttpRequest.body中的数据格式为<span class="string">b&#x27;------WebKitFormBoundaryKtcwuksQltpNprep\r\nContent-Disposition: form-data;......&#x27;</span>,注意，文件部分数据是流数据，所以不在浏览器中显示是正常的</span><br><span class="line">      django会将request.body中的非文件数据部分提取出来封装到request.POST中</span><br><span class="line">      将上传的文件部分数据专门提取出来封装到request.FILES属性中</span><br><span class="line"></span><br><span class="line">      如：</span><br><span class="line">      <span class="built_in">print</span>(request.body) <span class="comment"># 不要打印它，打印则报错，因为它是数据流</span></span><br><span class="line">      <span class="built_in">print</span>(request.POST) <span class="comment"># &lt;QueryDict: &#123;&#x27;a&#x27;: [&#x27;1&#x27;],&#x27;b&#x27;: [&#x27;2&#x27;],&#x27;c&#x27;: [&#x27;3&#x27;]&#125;</span></span><br><span class="line">      <span class="built_in">print</span>(request.FILES) <span class="comment"># &lt;MultiValueDict: &#123;&#x27;head_img&#x27;: [&lt;InMemoryUploadedFile: 11111.jpg (image/jpeg)&gt;]&#125;&gt;</span></span><br><span class="line"></span><br><span class="line">      强调：</span><br><span class="line">        <span class="number">1</span>、毫无疑问，编码格式<span class="number">2</span>的数据量要大于编码格式<span class="number">1</span>，如果无需上传文件，还是推荐使用更为精简的编码格式<span class="number">1</span></span><br><span class="line">        <span class="number">2</span>、FILES will only contain data <span class="keyword">if</span> the request method was POST <span class="keyword">and</span> the &lt;form&gt; that posted to the request had enctype=<span class="string">&quot;multipart/form-data&quot;</span>. Otherwise, FILES will be a blank dictionary-like <span class="built_in">object</span>.</span><br><span class="line"></span><br><span class="line">  <span class="comment">#===》III: 当POST数据的编码格式为application/json时《====</span></span><br><span class="line">      此时在django后台，request.POST和request.FILES中是没有值的，都放到request.body中了，需要用json.loads对其进行反序列化</span><br><span class="line"></span><br><span class="line">      如：</span><br><span class="line">      <span class="built_in">print</span>(request.body) <span class="comment"># b&#x27;&#123;&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3&#125;&#x27;</span></span><br><span class="line">      <span class="built_in">print</span>(request.POST) <span class="comment"># &lt;QueryDict: &#123;&#125;&gt;</span></span><br><span class="line">      <span class="built_in">print</span>(request.FILES) <span class="comment"># &lt;MultiValueDict: &#123;&#125;&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="number">1.3</span> 如何设定POST提交数据的编码格式 </span><br><span class="line">    前端往后台POST提交数据，常用技术有form表单和ajax两种</span><br><span class="line">    form表单可以设置的数据编码格式有：编码格式<span class="number">1</span>、编码格式<span class="number">2</span></span><br><span class="line">    ajax可以设置的数据编码格式有：编码格式<span class="number">1</span>、编码格式<span class="number">2</span>、编码格式<span class="number">3</span></span><br><span class="line"></span><br><span class="line">    我们将在后续章节中介绍ajax技术，此处我们先介绍我们熟知的form表单</span><br><span class="line">    form表单可以通过属性enctype进行设置编码格，如下</span><br><span class="line">      编码格式<span class="number">1</span>(默认的编码格式):enctype=<span class="string">&quot;application/x-www-form-urlencoded&quot;</span> </span><br><span class="line">      编码格式<span class="number">2</span>(使用form表单上传文件时只能用该编码):enctype=<span class="string">&quot;multipart/form-data&quot;</span></span><br></pre></td></tr></table></figure><p>案例：form表单上传文件</p><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">urls.py</button></li><li class="tab"><button type="button" data-href="#test4-2">views.py</button></li><li class="tab"><button type="button" data-href="#test4-3">在templates目录下新建register.html</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> re_path</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    re_path(<span class="string">&#x27;register/&#x27;</span>,views.register),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render,HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    保存上传文件前，数据需要存放在某个位置。默认当上传文件小于2.5M时，django会将上传文件的全部内容读进内存。从内存读取一次，写磁盘一次。</span></span><br><span class="line"><span class="string">    但当上传文件很大时，django会把上传文件写到临时文件中，然后存放到系统临时文件夹中。</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&#x27;register.html&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="comment"># print(request.body) # 读取流数据会抛出异常，请注释掉它</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 从request.POST中获取用户名</span></span><br><span class="line">        name = request.POST.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 从request.FILES获取文件对象</span></span><br><span class="line">        file_obj = request.FILES.get(<span class="string">&#x27;header_img&#x27;</span>)</span><br><span class="line">        <span class="comment"># 从文件对象中获取文件名</span></span><br><span class="line">        filename = file_obj.name</span><br><span class="line">        <span class="built_in">print</span>(filename)</span><br><span class="line"></span><br><span class="line">        file_obj.chunks()</span><br><span class="line">        <span class="comment"># 上传的文件存放于templates文件夹下</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&quot;templates/<span class="subst">&#123;file_name&#125;</span>&quot;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> file_obj.chunks():</span><br><span class="line">                f.write(line)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;注册成功&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 强调：</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    file_obj.read() 当文件过大时，会导致内存溢出，系统崩溃</span></span><br><span class="line"><span class="string">    应该使用file_obj.chunks()读取，官网解释如下</span></span><br><span class="line"><span class="string">    uploadedFile.chunks(chunk_size=None)¶</span></span><br><span class="line"><span class="string">    A generator returning chunks of the file. If multiple_chunks() is True, you should use this method in a loop instead of read().</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    In practice, it’s often easiest simply to use chunks() all the time. Looping over chunks() instead of using read() ensures that large files don’t overwhelm your system’s memory.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    注意：直接for循环file_obj也不行，因为直接for读取文件是按照行分隔符来依次读取的，不同平台下的文件行分隔符不同，有可能一行的数据就很大，所以还是推荐file_obj.chunks()来读取，官网解释如下</span></span><br><span class="line"><span class="string">    Like regular Python files, you can read the file line-by-line simply by iterating over the uploaded file:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    for line in uploadedfile:</span></span><br><span class="line"><span class="string">        do_something_with(line)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Lines are split using universal newlines. The following are recognized as ending a line: the Unix end-of-line convention &#x27;\n&#x27;, the Windows convention &#x27;\r\n&#x27;, and the old Macintosh convention &#x27;\r&#x27;.</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-3"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>注册页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span> &gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        头像:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;header_img&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="HttpRequest对象常用属性part3"><a href="#HttpRequest对象常用属性part3" class="headerlink" title="HttpRequest对象常用属性part3"></a>HttpRequest对象常用属性part3</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">一.HttpRequest.path</span><br><span class="line">　　获取url地址的路径部分，只包含路径部分</span><br><span class="line"></span><br><span class="line">二.HttpRequest.get_full_path()</span><br><span class="line">　　获取url地址的完整path，既包含路径又包含参数部分</span><br><span class="line"></span><br><span class="line">如果请求地址是http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8000</span>/order/?name=allen&amp;age=<span class="number">10</span><span class="comment">#_label3，</span></span><br><span class="line">HttpRequest.path的值为<span class="string">&quot;/order/&quot;</span></span><br><span class="line">HttpRequest.get_full_path()的值为<span class="string">&quot;/order/?name=allen&amp;age=10&quot;</span></span><br></pre></td></tr></table></figure><p>案例：</p><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">urls.py</button></li><li class="tab"><button type="button" data-href="#test4-2">views.py</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path,register_converter,re_path</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    re_path(<span class="string">r&#x27;^order&#x27;</span>,views.order),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render,HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="comment"># 针对请求的url地址：http://127.0.0.1:8000/order/?name=allen&amp;age=10#_label3</span></span><br><span class="line"><span class="comment"># 从域名后的最后一个“/”开始到“？”为止是路径部分，即/order/</span></span><br><span class="line"><span class="comment"># 从“？”开始到“#”为止之间的部分为参数部分,即name=allen&amp;age=10</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">order</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="built_in">print</span>(request.path) <span class="comment"># 结果为“/order/”</span></span><br><span class="line">    <span class="built_in">print</span>(request.get_full_path()) <span class="comment"># 结果为&quot;/order/?name=allen&amp;age=10&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;order page OK&#x27;</span>)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="HttpRequest对象常用属性part4（暂作了解）"><a href="#HttpRequest对象常用属性part4（暂作了解）" class="headerlink" title="HttpRequest对象常用属性part4（暂作了解）"></a>HttpRequest对象常用属性part4（暂作了解）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">　　django将请求报文中的请求行、头部信息、内容主体封装成 HttpRequest 类中的属性。</span></span><br><span class="line"><span class="string">   除了特殊说明的之外，其他均为只读的。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">一.HttpRequest.META</span><br><span class="line"> 　 值为包含了HTTP协议的请求头数据的Python字典，字典中的key及期对应值的解释如下</span><br><span class="line">    CONTENT_LENGTH —— 请求的正文的长度（是一个字符串）。</span><br><span class="line">    CONTENT_TYPE —— 请求的正文的MIME类型。</span><br><span class="line">    HTTP_ACCEPT —— 响应可接收的Content-<span class="type">Type</span>。</span><br><span class="line">    HTTP_ACCEPT_ENCODING —— 响应可接收的编码。</span><br><span class="line">    HTTP_ACCEPT_LANGUAGE —— 响应可接收的语言。</span><br><span class="line">    HTTP_HOST —— 客服端发送数据的目标主机与端口</span><br><span class="line">    HTTP_REFERER —— Referring 页面。</span><br><span class="line">    HTTP_USER_AGENT —— 客户端使用的软件版本信息</span><br><span class="line">    QUERY_STRING —— 单个字符串形式的查询字符串（未解析过的形式）。</span><br><span class="line">    REMOTE_ADDR —— 客户端的IP地址。</span><br><span class="line">    REMOTE_HOST —— 客户端的主机名。</span><br><span class="line">    REMOTE_USER —— 服务器认证后的用户。</span><br><span class="line">    REQUEST_METHOD —— 一个字符串，例如<span class="string">&quot;GET&quot;</span> 或<span class="string">&quot;POST&quot;</span>。</span><br><span class="line">    SERVER_NAME —— 服务器的主机名。</span><br><span class="line">    SERVER_PORT —— 服务器的端口（是一个字符串）。</span><br><span class="line"> 　　从上面可以看到，除 CONTENT_LENGTH 和 CONTENT_TYPE 之外，HTTP协议的请求头数据转换为 META 的键时，</span><br><span class="line">    都会</span><br><span class="line">    <span class="number">1</span>、将所有字母大写</span><br><span class="line">    <span class="number">2</span>、将单词的连接符替换为下划线</span><br><span class="line">    <span class="number">3</span>、加上前缀HTTP_。</span><br><span class="line">    所以，一个叫做 X-Bender 的头部将转换成 META 中的 HTTP_X_BENDER 键。</span><br><span class="line"></span><br><span class="line">注意：下述常用属性暂且了解即可，待我们讲到专门的知识点时再专门详细讲解</span><br><span class="line">二.HttpRequest.COOKIES</span><br><span class="line">　　一个标准的Python 字典，包含所有的cookie。键和值都为字符串。</span><br><span class="line"></span><br><span class="line">三.HttpRequest.session</span><br><span class="line"> 　一个既可读又可写的类似于字典的对象，表示当前的会话。只有当Django 启用会话的支持时才可用。</span><br><span class="line"></span><br><span class="line"><span class="number">11.</span>HttpRequest.user(用户认证组件下使用)</span><br><span class="line"></span><br><span class="line">　　一个 AUTH_USER_MODEL 类型的对象，表示当前登录的用户。</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>HttpRequest.is_ajax()</span><br><span class="line"></span><br><span class="line">　　如果请求是通过XMLHttpRequest 发起的，则返回<span class="literal">True</span>，方法是检查 HTTP_X_REQUESTED_WITH 相应的首部是否是字符串<span class="string">&#x27;XMLHttpRequest&#x27;</span>。</span><br><span class="line"></span><br><span class="line">　　大部分现代的 JavaScript 库都会发送这个头部。如果你编写自己的 XMLHttpRequest 调用（在浏览器端），你必须手工设置这个值来让 is_ajax() 可以工作。</span><br><span class="line"></span><br><span class="line">　　如果一个响应需要根据请求是否是通过AJAX 发起的，并且你正在使用某种形式的缓存例如Django 的 cache middleware，</span><br><span class="line">   你应该使用 vary_on_headers(<span class="string">&#x27;HTTP_X_REQUESTED_WITH&#x27;</span>) 装饰你的视图以让响应能够正确地缓存。</span><br><span class="line"></span><br><span class="line">四.HttpRequest.encoding</span><br><span class="line">　　一个字符串，表示提交的数据的编码方式（如果为 <span class="literal">None</span> 则表示使用 DEFAULT_CHARSET 的设置，默认为 <span class="string">&#x27;utf-8&#x27;</span>）。</span><br><span class="line">   这个属性是可写的，你可以修改它来修改访问表单数据使用的编码。</span><br><span class="line">   接下来对属性的任何访问（例如从 GET 或 POST 中读取数据）将使用新的 encoding 值。</span><br><span class="line">   如果你知道表单数据的编码不是 DEFAULT_CHARSET ，则使用它。</span><br><span class="line"></span><br><span class="line">五.HttpRequest.scheme</span><br><span class="line">   表示请求方案的字符串（通常为http或https）</span><br><span class="line"></span><br><span class="line">六.HttpRequest.user</span><br><span class="line">　　一个AUTH_USER_MODEL类型的对象，表示当前登录的用户。</span><br><span class="line"></span><br><span class="line">　　如果用户当前没有登录，user将设置为django.contrib.auth.models.AnonymousUser的一个实例。</span><br><span class="line">你可以通过is_authenticated()区分它们，例如：</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.user.is_authenticated():</span><br><span class="line">        <span class="comment"># Do something for logged-in users.</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># Do something for anonymous users.</span></span><br><span class="line"></span><br><span class="line">    HttpRequest.user只有当Django 启用 AuthenticationMiddleware中间件时才可用。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    匿名用户</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">models</span>.AnonymousUser</span><br><span class="line"></span><br><span class="line">    django.contrib.auth.models.AnonymousUser 类实现了django.contrib.auth.models.User 接口，但具有下面几个不同点：</span><br><span class="line"></span><br><span class="line">    <span class="built_in">id</span> 永远为<span class="literal">None</span>。</span><br><span class="line">    username 永远为空字符串。</span><br><span class="line">    get_username() 永远返回空字符串。</span><br><span class="line">    is_staff 和 is_superuser 永远为<span class="literal">False</span>。</span><br><span class="line">    is_active 永远为 <span class="literal">False</span>。</span><br><span class="line">    groups 和 user_permissions 永远为空。</span><br><span class="line">    is_anonymous() 返回<span class="literal">True</span> 而不是<span class="literal">False</span>。</span><br><span class="line">    is_authenticated() 返回<span class="literal">False</span> 而不是<span class="literal">True</span>。</span><br><span class="line">    set_password()、check_password()、save() 和delete() 引发 NotImplementedError。</span><br><span class="line">    New <span class="keyword">in</span> Django <span class="number">1.8</span>:</span><br><span class="line">    新增 AnonymousUser.get_username() 以更好地模拟 django.contrib.auth.models.User。</span><br></pre></td></tr></table></figure><h2 id="响应对象"><a href="#响应对象" class="headerlink" title="响应对象"></a>响应对象</h2><p>请求对象HttpRequest是由django为我们创建好的，直接使用即可，而响应对象则需要我们负责创建。我们编写的每个视图都应该返回一个HttpResponse对象，响应可以是一个网页的HTML内容，一个重定向，一个404错误，一个XML文档，或者一张图片。用来返回响应对象的常用类如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> redirect</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.http importJsonResponse</span><br></pre></td></tr></table></figure><h3 id="HttpResponse"><a href="#HttpResponse" class="headerlink" title="HttpResponse"></a>HttpResponse</h3><p>传递字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line">response = HttpResponse(<span class="string">&quot;Here&#x27;s the text of the Web page.&quot;</span>)</span><br><span class="line">response = HttpResponse(<span class="string">&quot;Text only, please.&quot;</span>, content_type=<span class="string">&quot;text/plain&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">ps：Content-Type用于指定响应体的MIME类型</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">MIME类型：</span></span><br><span class="line"><span class="string">mime类型是多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型,当该扩展名文件被访问的时候,浏览器会自动使用指定应用程序来打开</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">MIME 类型有非常多种，一般常见的有：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">　　text/html：浏览器在获取到这种文件时会自动调用html的解析器对文件进行相应的处理。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">　　text/plain：意思是将文件设置为纯文本的形式，浏览器在获取到这种文件时并不会对其进行处理。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">　　image/jpeg：JPEG格式的图片</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">　　image/gif：GIF格式的图片</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">　　video/quicktime：Apple 的 QuickTime 电影</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">　　application/vnd.ms-powerpoint：微软的powerpoint文件</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>依次增加字符串（了解）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>response = HttpResponse()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>response.write(<span class="string">&quot;&lt;p&gt;Here&#x27;s the text of the Web page.&lt;/p&gt;&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>response.write(<span class="string">&quot;&lt;p&gt;Here&#x27;s another paragraph.&lt;/p&gt;&quot;</span>)</span><br></pre></td></tr></table></figure><p>传递迭代器对象（了解）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以为HttpResponse传递可迭代对象，HttpRespone会将其依次迭代然后存储成字符串，类似文件或者其他带有close()方法的生成器对象，会自动调用close()关闭</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    f=<span class="built_in">open</span>(<span class="string">r&#x27;a.txt&#x27;</span>,mode=<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="comment"># a.txt文件内容为111</span></span><br><span class="line">    response=HttpResponse(f)</span><br><span class="line">    <span class="built_in">print</span>(response.content) <span class="comment"># 打印内容为: b&#x27;111&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># f.read() # 如果执行，则会抛出异常，说明文件已经关闭了，无法读取</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><p>自定义添加或删除响应头信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">response = HttpResponse()</span><br><span class="line">response[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;text/html; charset=UTF-8&#x27;</span></span><br><span class="line">response[<span class="string">&#x27;X-Frame-Options&#x27;</span>] = <span class="string">&#x27;SAMEORIGIN&#x27;</span></span><br><span class="line"><span class="keyword">del</span> response[<span class="string">&#x27;Content-Type&#x27;</span>]</span><br></pre></td></tr></table></figure><p>属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HttpResponse.status_code：响应的状态码</span><br><span class="line"></span><br><span class="line">HttpResponse.charset：响应内容的编码encode格式</span><br><span class="line"></span><br><span class="line">HttpResponse.content：响应内容</span><br></pre></td></tr></table></figure><p>返回图片信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;相应内容&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    通过django.http.response.HttpResponse响应html内容</span></span><br><span class="line"><span class="string">    return HttpResponse(&quot;&lt;h1&gt;HELLO&lt;/h1&gt;&quot;) </span></span><br><span class="line"><span class="string">    content: 响应正文内容</span></span><br><span class="line"><span class="string">    status： 响应状态码</span></span><br><span class="line"><span class="string">    content-type: 响应内容的MIME类型</span></span><br><span class="line"><span class="string">    ret = HttpResponse(content=&#x27;HELLO&#x27;,status=&#x27;206&#x27;,content_type=&#x27;text/html&#x27;)</span></span><br><span class="line"><span class="string">    return ret</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 返回其他格式内容如：图片信息，文件，资源下载。。。</span></span><br><span class="line">    content=<span class="built_in">open</span>(<span class="string">&#x27;qqq.png&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(content=content,status=<span class="number">206</span>,content_type=<span class="string">&quot;image/png&quot;</span>)</span><br></pre></td></tr></table></figure><p>提供下载支持</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">wget</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;C:\Users\User\Downloads\app.zip&quot;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        content=f.read()</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(content=content,content_type=<span class="string">&quot;application/x-zip-compressed&quot;</span>)</span><br></pre></td></tr></table></figure><p>字符串编码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编码设定原则：编码格式与解码格式保持一致</span></span><br><span class="line">response = HttpResponse(charset=<span class="string">&#x27;gbk&#x27;</span>,content_type=<span class="string">&#x27;text/html; charset=gbk&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数charset=&#x27;gbk&#x27;指定响应体内容response.content的编码格式</span></span><br><span class="line"><span class="comment"># 参数content_type=&#x27;text/html; charset=gbk&#x27;是设置响应头，用于告诉浏览器响应体内容response.content应该采用何种解码格式，注意：设置时必须加上内容的类型，如text/html</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 强调：</span></span><br><span class="line"><span class="comment"># 如果在实例化HttpResponse时没有指定charset=gbk&#x27;，将会采用与content_type中设定的解码格式一样的编码，这样统一起来就不会出现乱码问题</span></span><br><span class="line"><span class="comment"># 如果也没有指定content_type，那么django默认会读取配置文件中的配置settings.py.DEFAULT_CHARSET来作为默认的编码与解码格式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    response = HttpResponse(charset=<span class="string">&#x27;gbk&#x27;</span>,content_type=<span class="string">&#x27;text/html; charset=gbk&#x27;</span>)</span><br><span class="line">    response.charset=<span class="string">&#x27;gbk&#x27;</span> <span class="comment"># 实例化后，可以对该属性重新赋值，只要是在write内容前，就会以最新赋值的编码格式为准</span></span><br><span class="line"></span><br><span class="line">    response.write(<span class="string">&quot;&lt;p&gt;Hello allen美男子&lt;/p&gt;&quot;</span>)</span><br><span class="line">    response.write(<span class="string">&quot;&lt;p&gt;Hello 林sb&lt;/p&gt;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果实例化处未指定响应头Content-Type，也可以在此处设置，在一处就可以了，无需重复设置</span></span><br><span class="line">    response[<span class="string">&#x27;Content-Type&#x27;</span>]=<span class="string">&#x27;text/html; charset=gbk&#x27;</span>  </span><br><span class="line">    <span class="comment"># response[&#x27;Content-Type&#x27;]=&#x27;text/html; charset=UTF-8&#x27; </span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(response.charset)</span><br><span class="line">    <span class="built_in">print</span>(response.content) </span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><h3 id="render"><a href="#render" class="headerlink" title="render"></a>render</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">render</span>(<span class="params">request, template_name, context=<span class="literal">None</span>, content_type=<span class="literal">None</span>, status=<span class="literal">None</span>, using=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Return a HttpResponse whose content is filled with the result of calling</span></span><br><span class="line"><span class="string">    django.template.loader.render_to_string() with the passed arguments.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    content = loader.render_to_string(template_name, context, request, using=using)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(content, content_type, status)</span><br><span class="line"></span><br><span class="line">参数：</span><br><span class="line">    <span class="number">1</span>、request：用于生成响应的请求对象，固定必须传入的第一个参数</span><br><span class="line"></span><br><span class="line">    <span class="number">2</span>、template_name：要使用的模板的完整名称，必须传入，render默认会去templates目录下查找模板文件</span><br><span class="line"></span><br><span class="line">    <span class="number">3</span>、context：可选参数，可以传入一个字典用来替换模块文件中的变量，默认是一个空字典。如果字典中的某个值是可调用的，视图将在渲染模板之前调用它。</span><br><span class="line"></span><br><span class="line">    <span class="number">4</span>、content_type：生成的文档要使用的MIME类型。默认为 DEFAULT_CONTENT_TYPE 设置的值。默认为<span class="string">&#x27;text/html&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="number">5</span>、status：响应的状态码。默认为<span class="number">200</span>。</span><br><span class="line"></span><br><span class="line">    <span class="number">6</span>、useing: 用于加载模板的模板引擎的名称。</span><br></pre></td></tr></table></figure><p>综上，render的功能可以总结为：根据给定字典渲染模板文件，并返回一个渲染后的HttpResponse对象。简单示例如下</p><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">urls.py</button></li><li class="tab"><button type="button" data-href="#test4-2">views.py</button></li><li class="tab"><button type="button" data-href="#test4-3">templates目录下新增文件index.html</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> re_path</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    re_path(<span class="string">r&#x27;^$&#x27;</span>,views.index),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;index.html&#x27;</span>, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;allen&#x27;</span>, <span class="string">&#x27;tag&#x27;</span>: <span class="string">&#x27;dsb&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上述代码等同于</span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.template <span class="keyword">import</span> loader</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    t = loader.get_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">    dic = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;allen&#x27;</span>, <span class="string">&#x27;tag&#x27;</span>: <span class="string">&#x27;dsb&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(t.render(dic, request)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-3"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; tag &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>测试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动django，在浏览器中访问url地址http://ip地址:端口号/，会看到&#123;&#123; name &#125;&#125; &#123;&#123; tag &#125;&#125;被替换成了allen和dsb</span></span><br></pre></td></tr></table></figure><h3 id="redirect"><a href="#redirect" class="headerlink" title="redirect"></a>redirect</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">返回重定向对象，返回的状态码为<span class="number">302</span>，第一个参数用来指定浏览器重定向的地址，可以是</span><br><span class="line"><span class="comment">#1、一个完全标准的URL地址，如&#x27;https://www.yahoo.com/search/&#x27;</span></span><br><span class="line"><span class="comment">#2、也可以是一个没有域名的绝对路径，如&#x27;/search/&#x27;</span></span><br><span class="line"><span class="comment">#3、或者是一个没有域名的相对路径，如&#x27;search/&#x27;,与1、2直接跳转到指定的绝对路径不同，相对路径需要先与当前路径进行拼后才能跳转，例如：如果当前路径为http://127.0.0.1:8080/index/，拼接后的路径为http://127.0.0.1:8080/index/search/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">baidu</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># redirect重定向等同于下述操作</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">baidu</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;浏览器收到Location和302后就自动跳转&#x27;&#x27;&#x27;</span></span><br><span class="line">    response=HttpResponse(<span class="string">&quot;&quot;</span>,status=<span class="number">302</span>)<span class="comment"># 自定义响应头</span></span><br><span class="line">    <span class="comment"># response[&#x27;Location&#x27;]=&#x27;/register/&#x27;</span></span><br><span class="line">    response[<span class="string">&quot;Location&quot;</span>]=<span class="string">&quot;https:/www.baidu.com&quot;</span><span class="comment"># 发送Location响应信息指定跳转地址 </span></span><br><span class="line">    <span class="keyword">return</span> response </span><br></pre></td></tr></table></figure><p>示例如下</p><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">urls.py</button></li><li class="tab"><button type="button" data-href="#test4-2">views.py</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> re_path</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    re_path(<span class="string">r&#x27;^baidu/$&#x27;</span>, views.baidu),</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> HttpResponse,redirect</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&#x27;/login/&#x27;</span>) <span class="comment"># 跳转到http://127.0.0.1:8000/login/</span></span><br><span class="line">    <span class="comment"># return redirect(&#x27;login/&#x27;) # 跳转到http://127.0.0.1:8000/index/login/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;login page&quot;</span>)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>测试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">启动django，在浏览器中访问url地址http://ip地址:端口号/index/，跳转到login页面</span><br></pre></td></tr></table></figure><p>重定向转态码301与302的区别（了解）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">一、<span class="number">301</span>和<span class="number">302</span>的异同。</span><br><span class="line">   <span class="number">1</span>、相同之处：</span><br><span class="line">   <span class="number">301</span>和<span class="number">302</span>状态码都表示重定向，具体点说就是浏览器在拿到服务器返回的这个状态码后会自动跳转到一个新的URL地址（浏览器会从响应头Location中获取新地址），用户看到的效果都是输入地址A后瞬间跳转到了另一个地址B</span><br><span class="line"></span><br><span class="line">   <span class="number">2</span>、不同之处：</span><br><span class="line">　　<span class="number">301</span>表示永久重定向，旧地址A的资源已经被永久地移除了，即这个资源不可访问了。</span><br><span class="line">　　<span class="number">302</span>表示临时重定向，旧地址A的资源还在，即这个资源仍然可以访问。</span><br><span class="line"></span><br><span class="line">    A页面临时重定向到B页面，那搜索引擎收录的就是A页面。</span><br><span class="line">    A页面永久重定向到B页面，那搜索引擎收录的就是B页面。</span><br><span class="line">    从SEO层面考虑，<span class="number">302</span>要好于<span class="number">301</span></span><br><span class="line"></span><br><span class="line">二、重定向原因：</span><br><span class="line">   <span class="number">1</span>、网站调整（如改变网页目录结构）；</span><br><span class="line">   <span class="number">2</span>、网页被移到一个新地址；</span><br><span class="line">   <span class="number">3</span>、网页扩展名改变(如应用需要把.php改成.Html或.shtml)。</span><br><span class="line">      这种情况下，如果不做重定向，则用户收藏夹或搜索引擎数据库中旧地址只能让访问客户得到一个<span class="number">404</span>页面错误信息，访问流量白白丧失；再者某些注册了多个域名的网站，也需要通过重定向让访问这些域名的用户自动跳转到主站点等。</span><br></pre></td></tr></table></figure><h3 id="JsonResponse"><a href="#JsonResponse" class="headerlink" title="JsonResponse"></a>JsonResponse</h3><p>JSON就是Javascript Object Notation.最早来源于JavaScript</p><p>json就是一个数据格式，一般保存在文件中，以<code>.json</code>作为文件扩展名</p><ol><li>json数据类型：</li></ol><ul><li>字符串，必须以双引号圈起来</li></ul><ul><li>数组，python里面的列表</li></ul><ul><li>json，python里面的字典格式</li></ul><ul><li>数值，所有的整数，小数，布尔值都是数值</li></ul><ul><li>unidentified        # 未定义</li></ul><ul><li>null          python里的None</li></ul><ol><li>数组成员，可以是json中任何的数据类型，但是每一个成员之间必须以英文逗号隔开，最后一个成员后面不能带有逗号，否则报错！！！</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">,</span><span class="number">3</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span><span class="string">&quot;xiaoming&quot;</span><span class="punctuation">,</span><span class="keyword">true</span><span class="punctuation">,</span><span class="keyword">false</span><span class="punctuation">,</span><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">,</span><span class="number">3</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;k&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;w&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><ol><li>json成员的键必须是字符串格式,成员之间用逗号隔开，最后一个成员不能带有逗号、</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;xiaoming&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">30</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;son&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;xiaoxiaoming&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">3</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ol><li>json文件中，一般只能存在一个json数据</li></ol><p>json一般用于不同系统，不同项目之间传递数据用的， 向前端返回一个json格式字符串的两种方式</p><p>方式一：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">import</span> json</span><br><span class="line">    content=&#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>:<span class="string">&quot;xiaoming&quot;</span>,</span><br><span class="line">            <span class="string">&quot;age&quot;</span>:<span class="number">30</span>,</span><br><span class="line">            <span class="string">&quot;son&quot;</span>:&#123;</span><br><span class="line">                <span class="string">&quot;name&quot;</span>:<span class="string">&quot;xiaoxiaoming&quot;</span>,</span><br><span class="line">                <span class="string">&quot;age&quot;</span>:<span class="number">3</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    content=json.dumps(content)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(content=content,status=<span class="number">206</span>,content_type=<span class="string">&quot;application/json&quot;</span>)</span><br><span class="line">  <span class="comment"># return HttpResponse(content=content)</span></span><br></pre></td></tr></table></figure><p>方式二：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line">    content=&#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>:<span class="string">&quot;xiaoming&quot;</span>,</span><br><span class="line">            <span class="string">&quot;age&quot;</span>:<span class="number">30</span>,</span><br><span class="line">            <span class="string">&quot;son&quot;</span>:&#123;</span><br><span class="line">                <span class="string">&quot;name&quot;</span>:<span class="string">&quot;xiaoxiaoming&quot;</span>,</span><br><span class="line">                <span class="string">&quot;age&quot;</span>:<span class="number">3</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> JsonResponse(content)</span><br><span class="line"><span class="comment">### 如果是以列表的方式返回会报错</span></span><br><span class="line"><span class="comment">#TypeError at /app01/index/</span></span><br><span class="line"><span class="comment">#In order to allow non-dict objects to be serialized set the safe parameter to False.</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line">    content=[</span><br><span class="line">        &#123;<span class="string">&quot;id&quot;</span>:<span class="number">10</span>,<span class="string">&quot;title&quot;</span>:<span class="string">&quot;qqqqq&quot;</span>,<span class="string">&quot;pric&quot;</span>:<span class="number">10</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;id&quot;</span>:<span class="number">11</span>,<span class="string">&quot;title&quot;</span>:<span class="string">&quot;wwwwww&quot;</span>,<span class="string">&quot;pric&quot;</span>:<span class="number">10</span>&#125;,</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">return</span> JsonResponse(content,safe=<span class="literal">False</span>)</span><br><span class="line">    <span class="comment">#默认safe=True代表只能序列化字典对象，safe=False代表序列化字典以外的对象</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="二、异常处理"><a href="#二、异常处理" class="headerlink" title="二、异常处理"></a>二、异常处理</h1><h2 id="django内置异常处理视图"><a href="#django内置异常处理视图" class="headerlink" title="django内置异常处理视图"></a>django内置异常处理视图</h2><p>Web应用在线上运行的过程中出现错误，是不可避免的，常见错误如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、<span class="number">400</span>：<span class="number">400</span> Bad Request 是由于明显的客户端错误（例如，格式错误的请求语法，太大的大小，无效的请求消息或欺骗性路由请求），服务器不能或不会处理该请求。</span><br><span class="line"><span class="number">2</span>、<span class="number">403</span>：用户没有访问某一资源的权限</span><br><span class="line"><span class="number">3</span>、<span class="number">404</span>：请求的url地址不存在</span><br><span class="line"><span class="number">4</span>、<span class="number">500</span>：服务端出错</span><br></pre></td></tr></table></figure><p>django框架为其中的一些常见错误提供了标准的错误页面，但它们仅限于DEBUG=True调试模式下使用，要想符合生产环境的需求，则需要我们进行自定制，配置过程如下</p><p>步骤1.在templates目录下的顶层创建错误页面400.html、403.html、404.html、500.html，注意文件内容自定义，但文件名与放置位置不可改变</p><p>templates/400.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>自定义400页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>templates/403.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>自定义403页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    &#123;&#123; exception &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>templates/404.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>自定义404页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    &#123;&#123; exception &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>templates/500.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>自定义500页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>步骤2.编写处理异常的视图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 针对上述四种错误，django框架内置了处理异常的视图，如下</span></span><br><span class="line"><span class="keyword">from</span> django.views.defaults <span class="keyword">import</span> bad_request <span class="comment"># 用来处理400异常</span></span><br><span class="line"><span class="keyword">from</span> django.views.defaults <span class="keyword">import</span> permission_denied <span class="comment"># 用来处理403异常</span></span><br><span class="line"><span class="keyword">from</span> django.views.defaults <span class="keyword">import</span> page_not_found <span class="comment"># 用来处理404异常</span></span><br><span class="line"><span class="keyword">from</span> django.views.defaults <span class="keyword">import</span> server_error <span class="comment"># 用来处理500异常</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 此处由于篇幅问题，请读者自行查看源码，通过查看源码，可以知道</span></span><br><span class="line"><span class="comment"># 1、内置的异常处理视图会去固定位置找对应的文件名，这就是我们自定制错误页面文件位置与文件名固定的原因</span></span><br><span class="line"><span class="comment"># 2、内置的异常处理视图，针对400和500错误返回的就是静态页面，而针对403和404错误会用异常变量exception来渲染页面，我们在定制403.html、404.html页面时设定一个模板语法&#123;&#123; exception &#125;&#125;就是用来专门接收异常值的</span></span><br></pre></td></tr></table></figure><p>步骤3.请将 settings.py 中的 DEBUG设置为Fasle,这样，如果出现错误，就会出现我们自己定义的页面</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># settings.py</span></span><br><span class="line">DEBUG = <span class="literal">False</span> <span class="comment"># 在生产环境中就应该设置成False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ps：设置完DEBUG=False后，必须设置ALLOWED_HOSTS才能启动django，设为ALLOWED_HOSTS = [&#x27;*&#x27;]即可</span></span><br><span class="line">ALLOWED_HOSTS = [<span class="string">&#x27;*&#x27;</span>]</span><br></pre></td></tr></table></figure><p> 完成上述步骤后，我们来测试一下</p><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">urls.py</button></li><li class="tab"><button type="button" data-href="#test4-2">views.py</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;test/400&#x27;</span>,views.error_test_400),</span><br><span class="line">    path(<span class="string">&#x27;test/403&#x27;</span>,views.error_test_403),</span><br><span class="line">    path(<span class="string">&#x27;test/404&#x27;</span>,views.error_test_404),</span><br><span class="line">    path(<span class="string">&#x27;test/500&#x27;</span>,views.error_test_500),</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core.exceptions <span class="keyword">import</span> SuspiciousFileOperation</span><br><span class="line"><span class="keyword">from</span> django.core.exceptions <span class="keyword">import</span> PermissionDenied</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> Http404</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们在编写正常视图view时会依据具体的逻辑，主动或被动抛出相对应的异常类型，此处为了测试精简，省略了正常逻辑，直接抛出异常</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">error_test_400</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">raise</span> SuspiciousFileOperation(<span class="string">&#x27;抛出400异常&#x27;</span>) <span class="comment"># 异常信息不会展现在页面中</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">error_test_403</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">raise</span> PermissionDenied(<span class="string">&#x27;抛出403异常&#x27;</span>) <span class="comment"># 异常信息会展现在页面中</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">error_test_404</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">raise</span> PermissionDenied(<span class="string">&#x27;抛出404异常&#x27;</span>) <span class="comment"># 异常信息会展现在页面中</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">error_test_500</span>(<span class="params">request</span>):</span><br><span class="line">    xxx <span class="comment"># 会抛出异常NameError，异常信息不会展现在页面中</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>测试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在浏览器依次输入下述url地址，会执行对应的视图函数，触发异常，django内置的异常处理视图会捕捉异常并返回我们定制的错误页面</span></span><br><span class="line">http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8002</span>/test/<span class="number">400</span></span><br><span class="line">http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8002</span>/test/<span class="number">403</span></span><br><span class="line">http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8002</span>/test/<span class="number">404</span></span><br><span class="line">http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8002</span>/test/<span class="number">500</span></span><br></pre></td></tr></table></figure><h2 id="自定义异常处理视图"><a href="#自定义异常处理视图" class="headerlink" title="自定义异常处理视图"></a>自定义异常处理视图</h2><p>django内置的异常处理视图应该可以满足大部分Web应用的需求，但不可否认的是缺乏灵活性，比如我们想在400.html页面中也获取异常信息，此时就需要自定制400异常的处理视图了，为了满足读者日后的需求，我们在此将四个异常处理视图都自定义一下，在上例的基础上，作出如下操作</p><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">1、修改上例的templates/400.html，其他页面不变</button></li><li class="tab"><button type="button" data-href="#test4-2">2、views.py中新增自定义异常处理视图</button></li><li class="tab"><button type="button" data-href="#test4-3">3、urls.py中，让异常处理指向自定义视图</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>自定义400页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    &#123;&#123; exception &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ================》下面是我们正常的应用视图《================</span></span><br><span class="line"><span class="keyword">from</span> django.core.exceptions <span class="keyword">import</span> SuspiciousFileOperation</span><br><span class="line"><span class="keyword">from</span> django.core.exceptions <span class="keyword">import</span> PermissionDenied</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> Http404</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们在编写正常视图view时会依据具体的逻辑，主动或被动抛出相对应的异常类型，此处为了测试精简，省略了正常逻辑，直接抛出异常</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">error_test_400</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">raise</span> SuspiciousFileOperation(<span class="string">&#x27;抛出400异常&#x27;</span>) <span class="comment"># 异常信息不会展现在页面中</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">error_test_403</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">raise</span> PermissionDenied(<span class="string">&#x27;抛出403异常&#x27;</span>) <span class="comment"># 异常信息会展现在页面中</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">error_test_404</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">raise</span> PermissionDenied(<span class="string">&#x27;抛出404异常&#x27;</span>) <span class="comment"># 异常信息会展现在页面中</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">error_test_500</span>(<span class="params">request</span>):</span><br><span class="line">    xxx <span class="comment"># 会抛出异常NameError，异常信息不会展现在页面中</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ================》新增自定义异常处理视图《================</span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_custom_bad_request_view</span>(<span class="params">request, exception</span>):  <span class="comment"># 400</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    处理400异常的视图，必须接收两个参数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数request:</span></span><br><span class="line"><span class="string">    参数exception: 捕获的异常值</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回值: django规定该函数需要返回一个HttpResponseBadRequest类的对象</span></span><br><span class="line"><span class="string">           可以查看该类的源码，该类是HttpResponse的子类，并设置status_code = 400</span></span><br><span class="line"><span class="string">           from django.views.defaults import HttpResponseBadRequest</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">           明白了上述原理，为了方便我们渲染自定义页面，此处我们采用render返回，设置好status_code即可</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;====&gt;400&#x27;</span>)</span><br><span class="line">    response = render(request, <span class="string">&#x27;400.html&#x27;</span>, &#123;<span class="string">&#x27;exception&#x27;</span>: exception&#125;)</span><br><span class="line">    response.status_code = <span class="number">400</span>  <span class="comment"># 如果不设置，默认状态码为200</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_custom_permission_denied_view</span>(<span class="params">request, exception</span>):  <span class="comment"># 403</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    处理403异常的视图，必须接收两个参数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数request:</span></span><br><span class="line"><span class="string">    参数exception: 捕获的异常值</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回值: django规定该函数需要返回一个HttpResponseForbidden类的对象</span></span><br><span class="line"><span class="string">           可以查看该类的源码，该类是HttpResponse的子类，并设置status_code = 403</span></span><br><span class="line"><span class="string">           from django.views.defaults import HttpResponseForbidden</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">           明白了上述原理，为了方便我们渲染自定义页面，此处我们采用render返回，设置好status_code即可</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;====&gt;403&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    response = render(request, <span class="string">&#x27;403.html&#x27;</span>, &#123;<span class="string">&#x27;exception&#x27;</span>: exception&#125;)</span><br><span class="line">    response.status_code = <span class="number">403</span>  <span class="comment"># 如果不设置，默认状态码为200</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_custom_page_not_found_view</span>(<span class="params">request, exception</span>):  <span class="comment"># 404</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    处理404异常的视图，必须接收两个参数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数request:</span></span><br><span class="line"><span class="string">    参数exception: 捕获的异常值</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回值: django规定该函数需要返回一个HttpResponseNotFound类的对象</span></span><br><span class="line"><span class="string">           可以查看该类的源码，该类是HttpResponse的子类，并设置status_code = 404</span></span><br><span class="line"><span class="string">           from django.views.defaults import HttpResponseNotFound</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">           明白了上述原理，为了方便我们渲染自定义页面，此处我们采用render返回，设置好status_code即可</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;====&gt;404&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    response = render(request, <span class="string">&#x27;404.html&#x27;</span>, &#123;<span class="string">&#x27;exception&#x27;</span>: exception&#125;)</span><br><span class="line">    response.status_code = <span class="number">404</span>  <span class="comment"># 如果不设置，默认状态码为200</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_custom_error_view</span>(<span class="params">request</span>):  <span class="comment"># 500</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    处理500异常的视图，只接收一个参数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回值: django规定该函数需要返回一个HttpResponseServerError类的对象</span></span><br><span class="line"><span class="string">           可以查看该类的源码，该类是HttpResponse的子类，并设置status_code = 500</span></span><br><span class="line"><span class="string">           from django.views.defaults import HttpResponseServerError</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">           明白了上述原理，为了方便我们渲染自定义页面，此处我们采用render返回，设置好status_code即可</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;====&gt;500&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    response = render(request, <span class="string">&#x27;500.html&#x27;</span>, )  <span class="comment"># 服务端的错误本就不应该暴露给客户端</span></span><br><span class="line">    response.status_code = <span class="number">500</span>  <span class="comment"># 如果不设置，默认状态码为200</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-3"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;test/400&#x27;</span>,views.error_test_400),</span><br><span class="line">    path(<span class="string">&#x27;test/403&#x27;</span>,views.error_test_403),</span><br><span class="line">    path(<span class="string">&#x27;test/404&#x27;</span>,views.error_test_404),</span><br><span class="line">    path(<span class="string">&#x27;test/500&#x27;</span>,views.error_test_500),</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增下列四行，下述变量名固定，对应的值为自定义异常处理视图</span></span><br><span class="line">handler400 = <span class="string">&#x27;app01.views.my_custom_bad_request_view&#x27;</span> <span class="comment"># 代表处理400异常指向自定义异常处理视图</span></span><br><span class="line">handler403 = <span class="string">&#x27;app01.views.my_custom_permission_denied_view&#x27;</span></span><br><span class="line"></span><br><span class="line">handler404 = <span class="string">&#x27;app01.views.my_custom_page_not_found_view&#x27;</span></span><br><span class="line">handler500 = <span class="string">&#x27;app01.views.my_custom_error_view&#x27;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="三、FBV与CBV"><a href="#三、FBV与CBV" class="headerlink" title="三、FBV与CBV"></a>三、FBV与CBV</h1><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p> 官网地址：<a href="https://link.zhihu.com/?target=https%3A//docs.djangoproject.com/en/3.0/topics/class-based-views/">https://docs.djangoproject.com/en/3.0/topics/class-based-views/</a></p><p> 视图是可调用的，用来处理请求(request)并且返回响应(response)，django的视图有两种形式：FBV和CBV</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、FBV基于函数的视图（Function base views），我们之前一直介绍的都是FBV</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、CBV基于类的视图(Class base views)，我们本节主要介绍它</span><br></pre></td></tr></table></figure><p> 在早期，人们意识到视图开发的过程中存在一些常见的语法和模式，于是引入基于函数的通用视图来抽象这些模式，并简化了常见情况下的视图开发。因此，刚开始的时候只有FBV，django所做的事情就是向你定义的视图函数传递一个HttpRequest，并且希望返回一个HttpResponse。</p><p> 随着进一步的发展，人们发现，基于函数的通用视图是有问题的，问题在于它很好地覆盖了简单的情况，但针对稍微复杂的场景，它没有办法在某些配置项之外进行扩展或自定义，从而极大地限制了它在许多实际应用程序中的实用性。而考虑到扩展性与自定义，这正是面向对象技术的强大之处，于是诞生了CBV。</p><p> 基于类的通用视图与基于函数的通用视图目的都一样，都是为了让视图开发更加容易。但是CBV的解决方案是通过使用mixins，并且django内置了一系列通用视图作为工具集提供给我们继承使用，从而使得基于类的通用视图比基于函数的通用视图更具扩展性和灵活性。</p><p> 如果你之前尝试过FBV，但发现它有缺陷，CBV是一种新的解决方案，而不是单纯地换了一种定义视图的形式，如果CBV只是视图的另外一种定义形式而已，那岂不是很无聊，连介绍的必要都没有了。</p><p> 为了让读者快速掌握CBV的使用，我们只能从简单情况下举例，这看起来会是增加了代码的复杂度，读者可能会对其嗤之以鼻，其实不然，在读者日后遇到复杂的情况时，唯有CBV可以进行更高级的设计</p><p>综上，CBV并非是FBV的完全替代品，但相对于FBV，CBV确实有一些差异和优势，详解下一小节</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、针对不同的HTTP请求方法(如GET、POST)，CBV可以分别对应到专门的处理方法上，无需采用条件分支，代码更加精简</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、CBV采用面向对象技术，比如mixins（多重继承）可用于将代码转换成可重用的组件。</span><br></pre></td></tr></table></figure><h2 id="使用CBV"><a href="#使用CBV" class="headerlink" title="使用CBV"></a>使用CBV</h2><h2 id="使用不同的实例方法来响应不同的HTTP请求方法"><a href="#使用不同的实例方法来响应不同的HTTP请求方法" class="headerlink" title="使用不同的实例方法来响应不同的HTTP请求方法"></a>使用不同的实例方法来响应不同的HTTP请求方法</h2><p>CBV允许我们使用不同的实例方法来响应不同的HTTP请求方法，而不是像FBV那样使用条件分支代码</p><p>1.1 FBV中视图函数处理HTTP的GET请求如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_view</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="comment"># &lt;view logic&gt;</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;GET result&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="comment"># &lt;view logic&gt;</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;POST result&#x27;</span>)</span><br></pre></td></tr></table></figure><p>FBV关于url的配置略</p><p>1.2 CBV的实现如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyView</span>(<span class="title class_ inherited__">View</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="comment"># &lt;view logic&gt;</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;GET result&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="comment"># &lt;view logic&gt;</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;POST result&#x27;</span>)</span><br></pre></td></tr></table></figure><p>所有基于类的视图都必须继承View类，该类用来处理视图关联到URL的操作，具体分析如下：</p><p>由于django的URL解析器期望发送request以及相关参数给一个可调用的函数，而不是一个类，所以基于类的视图有一个as_view()类方法（该方法继承自父类View），调用该方法会返回URL解析器所期望的函数，该函数会在请求到达与关联模式匹配的URL时调用，就像调用视图函数一个样子。查看源码会发现调用该函数首先会创建一个MyView类的实例，然后</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、调用self.setup()方法，用于初始化一系列属性。</span><br><span class="line"><span class="number">2</span>、之后调用self.dispatch(),该方法查看request以确定本次请求是GET还是POST等，如果定义了匹配方法，则将请求转发给匹配方法；如果没有，则引发HttpResponseNotAllowed。本例中将调用我们自定义的get与post方法来响应请求</span><br><span class="line"></span><br><span class="line">ps：基于面向对象的知识，上述方法，如果子类MyView未重写，则去父类View中寻找</span><br></pre></td></tr></table></figure><p>urls.py的配置如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> myapp.views <span class="keyword">import</span> MyView</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;about/&#x27;</span>, MyView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p> 虽然最精简的CBV不需要设置任何类属性就可以使用，但类属性确实在基于CBV的设计中非常有用，我们又两种方法可以配置或设置类属性</p><p>方法一：python标准的套路，在子类中重写/覆盖父类的属性和方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GreetingView</span>(<span class="title class_ inherited__">View</span>):</span><br><span class="line">    greeting = <span class="string">&quot;Good Day&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(self.greeting)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以在子类中对属性进行重写</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MorningGreetingView</span>(<span class="title class_ inherited__">GreetingView</span>):</span><br><span class="line">    greeting = <span class="string">&quot;Morning to ya&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在url配置中使用子类调用as_view()方法即可</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> myapp.views <span class="keyword">import</span> MyView</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;about/&#x27;</span>, MorningGreetingView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>方法二：在URL配置里为as_view()方法传递关键字参数来设置类属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;about/&#x27;</span>, GreetingView.as_view(greeting=<span class="string">&quot;G&#x27;day&quot;</span>)),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意1：as_view方法只接受已经是类属性的参数，即在类GreetingView中必须已经有greeting属性，as_view只是一种覆盖操作</span></span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GreetingView</span>(<span class="title class_ inherited__">View</span>):</span><br><span class="line">    greeting = <span class="string">&quot;Good Day&quot;</span> <span class="comment"># 必须已经有了该属性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(self.greeting)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意2：这种覆盖操作只在本条url匹配成功时生效一次</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># 访问结果为覆盖后的属性值:&quot;G&#x27;day&quot;</span></span><br><span class="line">    path(<span class="string">&#x27;about/&#x27;</span>, GreetingView.as_view(greeting=<span class="string">&quot;G&#x27;day&quot;</span>)),</span><br><span class="line">    <span class="comment"># 访问结果仍为原值:&quot;Good Day&quot;</span></span><br><span class="line">    path(<span class="string">&#x27;about1/&#x27;</span>, views.GreetingView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="使用mixins"><a href="#使用mixins" class="headerlink" title="使用mixins"></a>使用mixins</h2><p>Mixins机制指的是子类混合(mixin)不同类的属性和功能，比如在django内置的通用视图里有一个mixin类叫TemplateResponseMixin，它的主要目的就是来定义一个方法render_to_response()。当该类和View类组合到一起时，就得到了TemplateView类，TemplateView类分发请求到相应的方法上（通过执行继承自View类的dispath()方法），并且使用render_to_response()方法来找到template_name属性读取指定的模板从而返回一个TemplateResponse对象（通过执行继承自TemplateResponseMixin类的render_to_response()方法）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views.generic.base <span class="keyword">import</span> TemplateResponseMixin</span><br></pre></td></tr></table></figure><p>这就极大利用了面向对象重之多继承技术来重用代码的优点，但是鱼与熊掌不可兼得，需要付出的代价就是，在多继承背景下，我们定义的mixin类越多，代码的可读性越差。</p><p>关于mixins的用法详见官网<a href="https://link.zhihu.com/?target=https%3A//docs.djangoproject.com/en/3.0/topics/class-based-views/mixins/">https://docs.djangoproject.com/en/3.0/topics/class-based-views/mixins/</a>，篇幅问题此处不再累述。</p><p>需要强调的是，CBV可以继承多个mixins类（推荐写在左边），但是只能继承一个父类，该父类只能是View类或者其子/子孙类（推荐写在右面），同时继承两个父类将会导致你的子类无法按照预期那样工作。</p><h1 id="四、django内置的CBV"><a href="#四、django内置的CBV" class="headerlink" title="四、django内置的CBV"></a>四、django内置的CBV</h1><p> django内置了基本的CBV可以满足相当多的应用，所以的视图都继承自View类，View类负责处理将视图链接到url、HTTP方法调度和其他常见功能。内置的CBV如RedirectView提供了一个HTTP重定向，TemplateView扩展了基类，使其同时可以渲染一个模板。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views.generic <span class="keyword">import</span> View,TemplateView,RedirectView</span><br></pre></td></tr></table></figure><h2 id="最简单的使用"><a href="#最简单的使用" class="headerlink" title="最简单的使用"></a>最简单的使用</h2><p>以TemplateView为例来介绍内置CBV的使用。最直接使用方式就是直接在URL配置中创建，如果只想改变该CBV的几个属性，你可以为as_view传递参数，如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> django.views.generic <span class="keyword">import</span> TemplateView</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;about/&#x27;</span>, TemplateView.as_view(template_name=<span class="string">&quot;about.html&quot;</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>一样的道理，如果我们想要重定向一个地址，可以设置RedirectView的url属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> django.views.generic <span class="keyword">import</span> RedirectView</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;index/&#x27;</span>, views.index),</span><br><span class="line">    path(<span class="string">&#x27;about/&#x27;</span>, RedirectView.as_view(url=<span class="string">&quot;/index/&quot;</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="继承内置CBV进行重写"><a href="#继承内置CBV进行重写" class="headerlink" title="继承内置CBV进行重写"></a>继承内置CBV进行重写</h2><p> 第二种更有效的使用内置CBV的方式就是是从现有视图继承并重写子类中的属性（例如template_name）或方法（例如get_context_data）,以提供新的值或方法。</p><p> 例如，我们的需求是要定制一个视图，该视图专门用来显示/渲染模板about.html。Django有一个内置的CBV即TemplateView可以实现，因此我们可以继承它，并重写模板名称template_name以及用来获取渲染模板数据的方法get_context_data</p><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">views.py</button></li><li class="tab"><button type="button" data-href="#test4-2">url.py</button></li><li class="tab"><button type="button" data-href="#test4-3">templates/home.html</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">from</span> django.views.generic.base <span class="keyword">import</span> TemplateView</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HomePageView</span>(<span class="title class_ inherited__">TemplateView</span>):</span><br><span class="line">    template_name = <span class="string">&quot;home.html&quot;</span> <span class="comment"># django会去templates目录下查找到该模板</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_context_data</span>(<span class="params">self, **kwargs</span>): <span class="comment"># 获取数据，用来渲染模块</span></span><br><span class="line">        context = <span class="built_in">super</span>().get_context_data(**kwargs)</span><br><span class="line"></span><br><span class="line">        context[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&quot;egon&quot;</span></span><br><span class="line">        context[<span class="string">&#x27;age&#x27;</span>] = <span class="string">&quot;18&quot;</span></span><br><span class="line">        context[<span class="string">&#x27;title&#x27;</span>] = <span class="string">&quot;dsb&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> context</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;home/&#x27;</span>, views.HomePageView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-3"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; age &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>更多内置CBV详见：</p><p><a href="https://link.zhihu.com/?target=https%3A//docs.djangoproject.com/en/3.0/topics/class-based-views/generic-display/">https://docs.djangoproject.com/en/3.0/topics/class-based-views/generic-display/</a></p><h1 id="五、使用CBV处理表单"><a href="#五、使用CBV处理表单" class="headerlink" title="五、使用CBV处理表单"></a>五、使用CBV处理表单</h1><p> 请看完后续章节中关于表单的使用之后再来读本小节</p><p> FBV处理表单代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponseRedirect</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .forms <span class="keyword">import</span> MyForm <span class="comment"># forms.py内的MyForm表单类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myview</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        form = MyForm(request.POST)</span><br><span class="line">        <span class="keyword">if</span> form.is_valid():</span><br><span class="line">            <span class="comment"># &lt;process form cleaned data&gt;</span></span><br><span class="line">            <span class="keyword">return</span> HttpResponseRedirect(<span class="string">&#x27;/success/&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        form = MyForm(initial=&#123;<span class="string">&#x27;key&#x27;</span>: <span class="string">&#x27;value&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;form_template.html&#x27;</span>, &#123;<span class="string">&#x27;form&#x27;</span>: form&#125;)</span><br></pre></td></tr></table></figure><p>CBV处理表单代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponseRedirect</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .forms <span class="keyword">import</span> MyForm</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyFormView</span>(<span class="title class_ inherited__">View</span>):</span><br><span class="line">    form_class = MyForm</span><br><span class="line">    initial = &#123;<span class="string">&#x27;key&#x27;</span>: <span class="string">&#x27;value&#x27;</span>&#125;</span><br><span class="line">    template_name = <span class="string">&#x27;form_template.html&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        form = self.form_class(initial=self.initial)</span><br><span class="line">        <span class="keyword">return</span> render(request, self.template_name, &#123;<span class="string">&#x27;form&#x27;</span>: form&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        form = self.form_class(request.POST)</span><br><span class="line">        <span class="keyword">if</span> form.is_valid():</span><br><span class="line">            <span class="comment"># &lt;process form cleaned data&gt;</span></span><br><span class="line">            <span class="keyword">return</span> HttpResponseRedirect(<span class="string">&#x27;/success/&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> render(request, self.template_name, &#123;<span class="string">&#x27;form&#x27;</span>: form&#125;)</span><br></pre></td></tr></table></figure><p>上述只是一个很想的例子，但是我们可以定制这个视图，比如覆盖任意的类属性（例如form_class）,或者为as_view()传参，或者继承MyForView并重写其中方法。</p><p>更多表单处理详见：</p><p><a href="https://link.zhihu.com/?target=https%3A//docs.djangoproject.com/en/3.0/topics/class-based-views/generic-editing/">https://docs.djangoproject.com/en/3.0/topics/class-based-views/generic-editing/</a></p><h1 id="六、为CBV添加装饰器"><a href="#六、为CBV添加装饰器" class="headerlink" title="六、为CBV添加装饰器"></a>六、为CBV添加装饰器</h1><p> 之前我们介绍过，若想要为CBV添加额外的功能，可以采用mixins机制，但除此之外，还可以通过添加装饰器的方法实现。有两个地方可以添加装饰</p><h2 id="装饰as-view-方法"><a href="#装饰as-view-方法" class="headerlink" title="装饰as_view()方法"></a>装饰as_view()方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入内置的装饰器</span></span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.decorators <span class="keyword">import</span> login_required, permission_required </span><br><span class="line"><span class="keyword">from</span> django.views.generic <span class="keyword">import</span> TemplateView</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .views <span class="keyword">import</span> VoteView</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;about/&#x27;</span>, login_required(TemplateView.as_view(template_name=<span class="string">&quot;secret.html&quot;</span>))),</span><br><span class="line">    path(<span class="string">&#x27;vote/&#x27;</span>, permission_required(<span class="string">&#x27;polls.can_vote&#x27;</span>)(VoteView.as_view())),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>示例：</p><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">views.py</button></li><li class="tab"><button type="button" data-href="#test4-2">urls.py</button></li><li class="tab"><button type="button" data-href="#test4-3">login.html</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 装饰器</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">timer</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">request, *args, **kwargs</span>):</span><br><span class="line">        start = time.time()</span><br><span class="line">        ret = func(request, *args, **kwargs)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;函数执行的时间是&#123;&#125;&quot;</span>.<span class="built_in">format</span>(time.time() - start))</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="comment"># CBV视图</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoginView</span>(<span class="title class_ inherited__">View</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dispatch</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        obj = <span class="built_in">super</span>().dispatch(request, *args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;login.html&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request</span>):</span><br><span class="line">        username = request.POST.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        password = request.POST.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> username == <span class="string">&#x27;egon&#x27;</span> <span class="keyword">and</span> password == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;登录成功&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;账号或密码错误&#x27;</span>)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path <span class="keyword">from</span> app01.views <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">urlpatterns = [ path(<span class="string">&#x27;login/&#x27;</span>,timer(LoginView.as_view())), ] </span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-3"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        用户名：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        密码：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p> 装饰as_views()相当于给视图类的中的所有方法（例如get、post）都加上了装饰器</p><h2 id="装饰视图类"><a href="#装饰视图类" class="headerlink" title="装饰视图类"></a>装饰视图类</h2><p>类方法与独立函数不完全相同，所以你不能简单地把函数装饰器加到类方法上，这就用到了method_decorator方法，该方法会将函数装饰器转换为方法装饰器，然后才可以用来装饰类方法，例如：</p><p>装饰dispatch方法，基于CBV，当请求过来后会先执行dispatch()这个方法进而分发到对用的get、post方法上，所以如果需要批量装饰处理请求的方法（如get，post等）可以为dispatch方法添加装饰，这与为as_view()添加装饰器效果时一样的，如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"><span class="keyword">from</span> django.utils.decorators <span class="keyword">import</span> method_decorator</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 装饰器</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">timer</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">request, *args, **kwargs</span>):</span><br><span class="line">        start = time.time()</span><br><span class="line">        ret = func(request, *args, **kwargs)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;函数执行的时间是&#123;&#125;&quot;</span>.<span class="built_in">format</span>(time.time() - start))</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="comment"># CBV视图</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoginView</span>(<span class="title class_ inherited__">View</span>):</span><br><span class="line">    <span class="comment">#相当于给get,post请求都加上了装饰器</span></span><br><span class="line"><span class="meta">    @method_decorator(<span class="params">timer</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dispatch</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        obj = <span class="built_in">super</span>().dispatch(request, *args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;login.html&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request</span>):</span><br><span class="line">        username = request.POST.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        password = request.POST.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> username == <span class="string">&#x27;egon&#x27;</span> <span class="keyword">and</span> password == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;登录成功&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;账号或密码错误&#x27;</span>)</span><br></pre></td></tr></table></figure><p>ps：url配置中正常调用即可，无需重复装饰，下同</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> app01.views <span class="keyword">import</span> *</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;login/&#x27;</span>,LoginView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>我们当然可以单独装饰不同的方法，如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">......省略代码,同上</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoginView</span>(<span class="title class_ inherited__">View</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dispatch</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        obj = <span class="built_in">super</span>().dispatch(request, *args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line"></span><br><span class="line"><span class="meta">    @method_decorator(<span class="params">timer</span>) </span><span class="comment"># 只装饰get方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;login.html&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request</span>):</span><br><span class="line">        username = request.POST.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        password = request.POST.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> username == <span class="string">&#x27;egon&#x27;</span> <span class="keyword">and</span> password == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;登录成功&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;账号或密码错误&#x27;</span>)</span><br></pre></td></tr></table></figure><p> 更简洁一点，我们可以把装饰器加在类上，通过name参数指定要装饰的方法，如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># @method_decorator(timer,name=&#x27;dispatch&#x27;) # 批量添加</span></span><br><span class="line"><span class="meta">@method_decorator(<span class="params">timer,name=<span class="string">&#x27;get&#x27;</span></span>) </span><span class="comment"># 单独给get方法添加</span></span><br><span class="line"><span class="comment"># @method_decorator(timer,name=&#x27;post&#x27;) # 单独给post方法添加</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoginView</span>(<span class="title class_ inherited__">View</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dispatch</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        obj = <span class="built_in">super</span>().dispatch(request, *args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;login.html&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request</span>):</span><br><span class="line">        username = request.POST.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        password = request.POST.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> username == <span class="string">&#x27;egon&#x27;</span> <span class="keyword">and</span> password == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;登录成功&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;账号或密码错误&#x27;</span>)</span><br></pre></td></tr></table></figure><p> 如果有多个装饰器需要添加，可以定义一个列表或者元组将其存放起来，然后按照下述方式指定</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"><span class="keyword">from</span> django.utils.decorators <span class="keyword">import</span> method_decorator</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义多个装饰</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deco1</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">request, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;===&gt;deco1&#x27;</span>)</span><br><span class="line">        ret = func(request, *args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deco2</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">request, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;===&gt;deco2&#x27;</span>)</span><br><span class="line">        ret = func(request, *args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义装饰列表</span></span><br><span class="line">decorators = [deco1, deco2]</span><br><span class="line"></span><br><span class="line"><span class="meta">@method_decorator(<span class="params">decorators,name=<span class="string">&#x27;get&#x27;</span></span>) </span><span class="comment"># 为get方法添加多个装饰器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoginView</span>(<span class="title class_ inherited__">View</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dispatch</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        obj = <span class="built_in">super</span>().dispatch(request, *args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;login.html&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request</span>):</span><br><span class="line">        username = request.POST.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        password = request.POST.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> username == <span class="string">&#x27;egon&#x27;</span> <span class="keyword">and</span> password == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;登录成功&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;账号或密码错误&#x27;</span>)</span><br></pre></td></tr></table></figure><p>上述装饰器会按照列表规定的顺序依次执行装饰器，即先执行deco1，然后deco2。。。与下述添加方式是等同的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">......省略代码,同上</span><br><span class="line"></span><br><span class="line"><span class="meta">@method_decorator(<span class="params">deco1,name=<span class="string">&#x27;get&#x27;</span></span>)</span></span><br><span class="line"><span class="meta">@method_decorator(<span class="params">deco2,name=<span class="string">&#x27;get&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoginView</span>(<span class="title class_ inherited__">View</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dispatch</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        obj = <span class="built_in">super</span>().dispatch(request, *args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;login.html&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request</span>):</span><br><span class="line">        username = request.POST.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        password = request.POST.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> username == <span class="string">&#x27;egon&#x27;</span> <span class="keyword">and</span> password == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;登录成功&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;账号或密码错误&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="七、支持其他的HTTP方法"><a href="#七、支持其他的HTTP方法" class="headerlink" title="七、支持其他的HTTP方法"></a>七、支持其他的HTTP方法</h1><p> 假设我们写了一个图书管理系统，如果有人想使用视图作为API通过HTTP协议访问我们的图书库。API客户端想要获取最新的图书数据，需要时不时地发起连接并下载自上次访问以来新出版的图书数据。但是如果自上次访问完后，就没有新的图书出版，那么从数据库查询图书信息，渲染一个完整的reponse并发送给客户端将白白耗费CPU时间和带宽，此时，我们最好的方式，就是在得知有新书出版时才发起一次请求完整数据的的API调用，这就用到了head方法来查询是否有数据更新</p><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">urls.py</button></li><li class="tab"><button type="button" data-href="#test4-2">views.py</button></li><li class="tab"><button type="button" data-href="#test4-3">models.py</button></li><li class="tab"><button type="button" data-href="#test4-4">settings.py</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> app01.views <span class="keyword">import</span> BookListView</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;books/&#x27;</span>, BookListView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.views.generic <span class="keyword">import</span> ListView</span><br><span class="line"><span class="keyword">from</span> app01.models <span class="keyword">import</span> Book</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookListView</span>(<span class="title class_ inherited__">ListView</span>):</span><br><span class="line">    model = Book</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">head</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        last_book = self.get_queryset().latest(<span class="string">&#x27;publication_date&#x27;</span>)</span><br><span class="line">        response = HttpResponse()</span><br><span class="line"></span><br><span class="line">        response[<span class="string">&#x27;Last-Modified&#x27;</span>] = last_book.publication_date.strftime(<span class="string">&#x27;%Y-%m-%d %X&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self,request</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        返回完整的数据，此处我们简单地用返回所有书籍名字代表将要返回的完整数据</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        books=Book.objects.<span class="built_in">all</span>()</span><br><span class="line">        names=<span class="string">&#x27;|&#x27;</span>.join([book.name <span class="keyword">for</span> book <span class="keyword">in</span> books])</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(names)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-3"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span>(models.Model):</span><br><span class="line">    name=models.CharField(max_length=<span class="number">30</span>)</span><br><span class="line">    publication_date=models.DateTimeField(auto_now_add=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-4"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TIME_ZONE = <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line">USE_TZ = <span class="literal">False</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django之路由层(URL调度器)</title>
      <link href="/2021/11/02/Python/Django/2.Django%E4%B9%8B%E8%B7%AF%E7%94%B1%E5%B1%82/"/>
      <url>/2021/11/02/Python/Django/2.Django%E4%B9%8B%E8%B7%AF%E7%94%B1%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h2 id="Django-如何处理一个请求"><a href="#Django-如何处理一个请求" class="headerlink" title="Django 如何处理一个请求"></a>Django 如何处理一个请求</h2><p>当一个用户请求Django 站点的一个页面，下面是Django 系统决定执行哪个Python 代码使用的算法：</p><ol><li><p>Django 加载该 Python 模块并寻找可用的 <code>urlpatterns</code> 。它是 <a href="https://docs.djangoproject.com/zh-hans/3.0/ref/urls/#django.urls.path"><code>django.urls.path()</code></a> 和(或) <a href="https://docs.djangoproject.com/zh-hans/3.0/ref/urls/#django.urls.re_path"><code>django.urls.re_path()</code></a> 实例的序列(<a href="https://docs.python.org/3/glossary.html#term-sequence">sequence</a>)。</p></li><li><p>Django 会按顺序遍历每个 URL 模式，然后会在所请求的URL匹配到第一个模式后停止，并与 <a href="https://docs.djangoproject.com/zh-hans/3.0/ref/request-response/#django.http.HttpRequest.path_info"><code>path_info</code></a> 匹配。</p></li><li><p>一旦有 URL 匹配成功，Djagno 导入并调用相关的视图，这个视图是一个Python 函数（或基于类的视图 <a href="https://docs.djangoproject.com/zh-hans/3.0/topics/class-based-views/">class-based view</a> ）。视图会获得如下参数：</p><ul><li><p>一个 <a href="https://docs.djangoproject.com/zh-hans/3.0/ref/request-response/#django.http.HttpRequest"><code>HttpRequest</code></a> 实例。</p></li><li><p>如果匹配的 URL 包含未命名组，那么来自正则表达式中的匹配项将作为位置参数提供。</p></li><li><p>关键字参数由路径表达式匹配的任何命名部分组成，并由 <a href="https://docs.djangoproject.com/zh-hans/3.0/ref/urls/#django.urls.path"><code>django.urls.path()</code></a> 或 <a href="https://docs.djangoproject.com/zh-hans/3.0/ref/urls/#django.urls.re_path"><code>django.urls.re_path()</code></a> 的可选 <code>kwargs</code> 参数中指定的任何参数覆盖。</p><blockquote><p>Changed in Django 3.0:</p><p>在旧版本里，带有 <code>None</code> 值的关键字参数也可以由未提供的命名部分组成。</p></blockquote></li></ul></li><li><p>如果没有 URL 被匹配，或者匹配过程中出现了异常，Django 会调用一个适当的错误处理视图。参加下面的错误处理( <a href="https://docs.djangoproject.com/zh-hans/3.0/topics/http/urls/#error-handling">Error handling</a> )。</p></li></ol><h2 id="一-路由的作用"><a href="#一-路由的作用" class="headerlink" title="一 路由的作用"></a>一 路由的作用</h2><p>路由即请求地址与视图函数的映射关系，如果把网站比喻为一本书，那路由就好比是这本书的目录，在Django中路由默认配置在urls.py中</p><h2 id="二-简单的路由配置"><a href="#二-简单的路由配置" class="headerlink" title="二 简单的路由配置"></a>二 简单的路由配置</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># urls.py </span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> re_path</span><br><span class="line"></span><br><span class="line"><span class="comment"># 由一条条映射关系组成的urlpatterns这个列表称之为路由表</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">     re_path(regex, view, kwargs=<span class="literal">None</span>, name=<span class="literal">None</span>), </span><br><span class="line">]</span><br><span class="line"><span class="comment"># re_path参数介绍</span></span><br><span class="line"><span class="comment">#1、regex：正则表达式,专门用来匹配url地址（url地址中所有内容均被当作字符串）的路径部分，不考虑请求方法如GET、POST或者域名，例如：</span></span><br><span class="line">  <span class="comment"># 请求url地址为：https://www.example.com/myapp/,正则表达式要匹配的部分是myapp/</span></span><br><span class="line">  <span class="comment"># 请求url地址为：https://www.example.com/myapp/?page=3, 正则表达式要匹配的部分是myapp/</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 注意：</span></span><br><span class="line">  <span class="comment"># 1.1 django的url配置不会考虑请求方法，换句话说，对于相同的URL地址，所有的请求方法如POST、GET、HEAD等，都将被路由到相同的功能view上</span></span><br><span class="line">  <span class="comment"># 1.2 切记正则表达式开头无需加/</span></span><br><span class="line"><span class="comment"># 2、view：通常为一个视图函数，用来处理业务逻辑</span></span><br><span class="line"><span class="comment"># 3、kwargs：额外传递给视图函数的参数，可选（用法详见第三小节：分组）</span></span><br><span class="line"><span class="comment"># 4、name：为正则表达式匹配到的url地址起别名，可选（用法详见第五小节：反向解析）</span></span><br></pre></td></tr></table></figure><p>案例：</p><p>urls.py文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, re_path <span class="comment"># 导入re_path,关于path的使用我们在本章最后一小节介绍</span></span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views <span class="comment"># 导入模块views.py</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls), <span class="comment"># 由django自动生成该行代码，本质与re_path一样都只是一条匹配规则而已，只不过该规则的实现由django框架提供（对应的视图为admin.site.urls）,在没有正式介绍该行代码作用之前，忽略即可，暂时注释掉也可以</span></span><br><span class="line"></span><br><span class="line">    re_path(<span class="string">r&#x27;^index/$&#x27;</span>,views.index), <span class="comment"># 新增一条</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>views.py文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> HttpResponse <span class="comment"># 导入HttpResponse，用来生成响应信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增视图函数index</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;index page...&#x27;</span>)</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver 8001 # 在浏览器输入：http://127.0.0.1:8001/index/ 会看到 index page...</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意一：</span></span><br><span class="line">刚刚我们在浏览器输入：http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8001</span>/index/，Django会拿着路径部分index/去路由表中自上而下匹配正则表达式，一旦匹配成功，则立即执行其后的视图函数，不会继续往下匹配，此处匹配成功的正则表达式是 <span class="string">r&#x27;^index/$&#x27;</span>。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意二：</span></span><br><span class="line">但是我们在浏览器输入：http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8001</span>/index，Django同样会拿着路径部分index去路由表中自上而下匹配正则表达式，貌似并不会匹配成功任何正则表达式（ <span class="string">r&#x27;^index/$&#x27;</span>匹配的是必须以 / 结尾，所以不会匹配成功index），但实际上仍然会看到结果 index page...，原因如下：</span><br><span class="line"></span><br><span class="line">在配置文件settings.py中有一个参数APPEND_SLASH，该参数有两个值<span class="literal">True</span>或<span class="literal">False</span></span><br><span class="line"></span><br><span class="line">当APPEND_SLASH=<span class="literal">True</span>（如果配置文件中没有该配置，APPEND_SLASH的默认值为<span class="literal">True</span>），并且用户请求的url地址的路径部分不是以 / 结尾，例如请求的url地址是 http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8001</span>/index，Django会拿着路径部分（即index）去路由表中匹配正则表达式，发现匹配不成功，那么Django会在路径后加 / （即index/）再去路由表中匹配，如果匹配失败则会返回路径未找到，如果匹配成功，则会返回重定向信息给浏览器，要求浏览器重新向 http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8001</span>/index/地址发送请求。</span><br><span class="line"></span><br><span class="line">当APPEND_SLASH=<span class="literal">False</span>时，则不会执行上述过程，即一旦url地址的路径部分匹配失败就立即返回路径未找到，不会做任何的附加操作</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意三：</span></span><br><span class="line">正则表达式不需要添加一个前导的反斜杠，因为每个URL都有。例如，应该是^index而不是 ^/index</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意四：</span></span><br><span class="line">每个正则表达式前面的<span class="string">&#x27;r&#x27;</span> 是可选的但是建议加上</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意五：</span></span><br><span class="line">如果我们想匹配的路径就只是index/,那么正则表达式应该有开始符与结束符, 如 ^index/$，这样逻辑才算严谨</span><br></pre></td></tr></table></figure><p>了解知识：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># django1.x中有一个函数url与Django2.x中的re_path一样，可以查看一下源码如下</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">from django.conf.urls import url</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">def url(regex, view, kwargs=None, name=None):</span></span><br><span class="line"><span class="string">    return re_path(regex, view, kwargs, name)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> re_path <span class="comment"># django2.x中的re_path</span></span><br><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url <span class="comment"># 在django2.x中同样可以导入1.x中的url</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># 用法完全一致</span></span><br><span class="line">    url(<span class="string">r&#x27;^index/$&#x27;</span>, views.index),</span><br><span class="line">    re_path(<span class="string">r&#x27;^home/$&#x27;</span>, views.home),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">django2.x还有一个path，它的用法牵扯到其他知识，所以我们将其放在最后介绍</span><br></pre></td></tr></table></figure><h2 id="三-分组"><a href="#三-分组" class="headerlink" title="三 分组"></a>三 分组</h2><p>什么是分组、为何要分组呢？比如我们开发了一个博客系统，当我们需要根据文章的id查看指定文章时，浏览器在发送请求时需要向后台传递参数（文章的id号），可以使用 <a href="https://link.zhihu.com/?target=http%3A//127.0.0.1%3A8001/article/%3Fid%3D3">http://127.0.0.1:8001/article/?id=3</a>，也可以直接将参数放到路径中<a href="https://link.zhihu.com/?target=http%3A//127.0.0.1%3A8001/article/3/">http://127.0.0.1:8001/article/3/</a></p><p>针对后一种方式Django就需要直接从路径中取出参数，这就用到了正则表达式的分组功能了，分组分为两种：普通分组与命名分组</p><h3 id="3-1-普通分组"><a href="#3-1-普通分组" class="headerlink" title="3.1 普通分组"></a>3.1 普通分组</h3><p>urls.py文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path,re_path</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 下述正则表达式会匹配url地址的路径部分为:article/数字/，匹配成功的分组部分会以位置参数的形式传给视图函数，有几个分组就传几个位置参数</span></span><br><span class="line">    re_path(<span class="string">r&#x27;^article/(\d+)/$&#x27;</span>,views.article), </span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>views.py文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要额外增加一个形参用于接收传递过来的分组数据</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">article</span>(<span class="params">request,article_id</span>):</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;id为 %s 的文章内容...&#x27;</span> %article_id)</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver 8001 # 在浏览器输入：http://127.0.0.1:8001/article/3/ 会看到: id为 3 的文章内容...</span><br></pre></td></tr></table></figure><h3 id="3-2-命名分组"><a href="#3-2-命名分组" class="headerlink" title="3.2 命名分组"></a>3.2 命名分组</h3><p>当我们对分组命名后，就会按照key=value的关键字参数形式为视图函数传参</p><blockquote><p>在 Python 正则表达式中，命名正则表达式组的语法是 <code>(?P&lt;name&gt;pattern)</code> ，其中 <code>name</code> 是组名，<code>pattern</code> 是要匹配的模式。</p></blockquote><p>urls.py文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path,re_path</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 该正则会匹配url地址的路径部分为:article/数字/，匹配成功的分组部分会以关键字参数（article_id=匹配成功的数字）的形式传给视图函数，有几个有名分组就会传几个关键字参数，需要强调一点是：视图函数得到的值均为字符串类型</span></span><br><span class="line">    re_path(<span class="string">r&#x27;^article/(?P&lt;article_id&gt;\d+)/$&#x27;</span>,views.article), </span><br><span class="line">    path(<span class="string">&#x27;articles/2003/&#x27;</span>, views.special_case_2003),</span><br><span class="line">    re_path(<span class="string">r&#x27;^articles/(?P&lt;year&gt;[0-9]&#123;4&#125;)/$&#x27;</span>, views.year_archive),</span><br><span class="line">    re_path(<span class="string">r&#x27;^articles/(?P&lt;year&gt;[0-9]&#123;4&#125;)/(?P&lt;month&gt;[0-9]&#123;2&#125;)/$&#x27;</span>, views.month_archive),</span><br><span class="line">    re_path(<span class="string">r&#x27;^articles/(?P&lt;year&gt;[0-9]&#123;4&#125;)/(?P&lt;month&gt;[0-9]&#123;2&#125;)/(?P&lt;slug&gt;[\w-]+)/$&#x27;</span>, views.article_detail),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>views.py文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要额外增加一个形参，形参名必须为article_id</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">article</span>(<span class="params">request,article_id</span>):</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;id为 %s 的文章内容...&#x27;</span> %article_id)</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver 8001 # 在浏览器输入：http://127.0.0.1:8001/article/3/ 会看到: id为 3 的文章内容...</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>普通分组和命名分组都是为了获取路径中的参数，并传递给视图函数，区别在于普通分组是以位置参数的形式传递，命名分组是以关键字参数的形式传递。</p><h3 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h3><p>普通分组和有名分组不要混合使用</p><h3 id="3-3-指定默认值"><a href="#3-3-指定默认值" class="headerlink" title="3.3 指定默认值"></a>3.3 指定默认值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># urls.py中</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> re_path </span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    re_path(<span class="string">r&#x27;^article/$&#x27;</span>, views.article), <span class="comment"># 第一条</span></span><br><span class="line">    re_path(<span class="string">r&#x27;^article/(?P&lt;article_id&gt;\d+)/$&#x27;</span>,views.article), <span class="comment"># 第二条</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># views.py中，可以为num指定默认值</span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">article</span>(<span class="params">request, article_id=<span class="string">&quot;1&quot;</span></span>):</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;id为 %s 的文章内容...&#x27;</span> %article_id)</span><br><span class="line"></span><br><span class="line">为视图函数article指定默认参数article_id=<span class="string">&quot;1&quot;</span>后，urlpattrens中的两条匹配规则就可以共用一个视图函数了，具体分析如下：</span><br><span class="line">当url为：http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8080</span>/article/时，匹配成功第一条</span><br><span class="line">当url为：http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8080</span>/article/<span class="number">111</span>/时，匹配成功第二条</span><br></pre></td></tr></table></figure><h3 id="3-4-re-path的参数kwargs"><a href="#3-4-re-path的参数kwargs" class="headerlink" title="3.4 re_path的参数kwargs"></a>3.4 re_path的参数kwargs</h3><p>如果我们想额外给视图函数传递参数，就用到了kwargs参数，该参数要求传入一个字典，会按照key=value的形式为视图函数额外传递参数,我们通常用kwargs中的参数来为多个共用一个视图函数的re_path做标记</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># urls.py中</span></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path,re_path</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line"></span><br><span class="line">    re_path(<span class="string">r&#x27;^user/([a-zA-Z]+)/$&#x27;</span>, article,kwargs=&#123;<span class="string">&#x27;tag&#x27;</span>: <span class="number">1</span>&#125;),  <span class="comment"># 第一条</span></span><br><span class="line">    re_path(<span class="string">r&#x27;^user/(\d&#123;4&#125;)/$&#x27;</span>,     article,kwargs=&#123;<span class="string">&#x27;tag&#x27;</span>:<span class="number">2</span>&#125;),  <span class="comment"># 第二条</span></span><br><span class="line">    re_path(<span class="string">r&#x27;^user/(\d&#123;2&#125;)/$&#x27;</span>,     article,kwargs=&#123;<span class="string">&#x27;tag&#x27;</span>:<span class="number">3</span>&#125;),  <span class="comment"># 第三条</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># views.py中，可以为num指定默认值</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">article</span>(<span class="params">request, x,tag</span>): <span class="comment"># 通过tag的值即可判定是来自于匹配了不同的url</span></span><br><span class="line">    <span class="keyword">if</span> tag == <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;name is %s&#x27;</span> %x)</span><br><span class="line">    <span class="keyword">elif</span> tag == <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;year is %s&#x27;</span> %x)</span><br><span class="line">    <span class="keyword">elif</span> tag == <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;mon is %s&#x27;</span> %x)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入url地址依次测试即可</span></span><br><span class="line">http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8080</span>/user/jerry/</span><br><span class="line">http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8002</span>/user/<span class="number">1995</span>/</span><br><span class="line">http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8002</span>/user/<span class="number">12</span>/</span><br></pre></td></tr></table></figure><p>注意：如果命名分组的名字与额外参数的key相同了，视图函数最终会获取额外参数中的值，所以应该尽量避免出现这种情况</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># urls.py中</span></span><br><span class="line">urlpatterns = [    </span><br><span class="line">    re_path(<span class="string">r&#x27;^user/(?P&lt;xxx&gt;\w+)/$&#x27;</span>, test,kwargs=&#123;<span class="string">&#x27;xxx&#x27;</span>:<span class="number">111</span>&#125;)</span><br><span class="line">]</span><br><span class="line"><span class="comment"># views.py中, xxx的值始终为111</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">request,xxx</span>):</span><br><span class="line">    <span class="built_in">print</span>(xxx)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;ok&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="四-路由分发"><a href="#四-路由分发" class="headerlink" title="四 路由分发"></a>四 路由分发</h2><p>随着项目功能的增加，app会越来越多，路由也越来越多，每个app都会有属于自己的路由，如果再将所有的路由都放到一张路由表中，会导致结构不清晰，不便于管理，所以我们应该将app自己的路由交由自己管理，然后在总路由表中做分发，具体做法如下</p><p>1 创建两个app</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建项目mystie2</span></span><br><span class="line">E:\git&gt;django-admin startproject mysite2</span><br><span class="line"><span class="comment"># 切换到项目目录下</span></span><br><span class="line">E:\git&gt;cd mysite2</span><br><span class="line"><span class="comment"># 创建app01和app02</span></span><br><span class="line">E:\git\mysite2&gt;python3 manage.py startapp app01</span><br><span class="line">E:\git\mysite2&gt;python3 manage.py startapp app02</span><br></pre></td></tr></table></figure><p>2 在每个app下手动创建urls.py来存放自己的路由，如下：</p><p>app01下的urls.py文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> re_path</span><br><span class="line"><span class="comment"># 导入app01的views</span></span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    re_path(<span class="string">r&#x27;^index/$&#x27;</span>,views.index), </span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>app01下的views.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;我是app01的index页面...&#x27;</span>)</span><br></pre></td></tr></table></figure><p>app02下的urls.py文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> re_path</span><br><span class="line"><span class="comment"># 导入app02的views</span></span><br><span class="line"><span class="keyword">from</span> app02 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    re_path(<span class="string">r&#x27;^index/$&#x27;</span>,views.index), </span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>app02下的views.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;我是app02的index页面...&#x27;</span>)</span><br></pre></td></tr></table></figure><p>3 在总的urls.py文件中（mysite2文件夹下的urls.py）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path,re_path,include</span><br><span class="line"></span><br><span class="line"><span class="comment"># 总路由表</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 新增两条路由，注意不能以$结尾</span></span><br><span class="line">    <span class="comment"># include函数就是做分发操作的，当在浏览器输入http://127.0.0.1:8001/app01/index/时，会先进入到总路由表中进行匹配，正则表达式r&#x27;^app01/&#x27;会先匹配成功路径app01/，然后include功能会去app01下的urls.py中继续匹配剩余的路径部分</span></span><br><span class="line">    re_path(<span class="string">r&#x27;^app01/&#x27;</span>, include(<span class="string">&#x27;app01.urls&#x27;</span>)),</span><br><span class="line">    re_path(<span class="string">r&#x27;^app02/&#x27;</span>, include(<span class="string">&#x27;app02.urls&#x27;</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver 8001  </span><br><span class="line"># 在浏览器输入：http://127.0.0.1:8001/app01/index/ 会看到:我是app01的index页面...</span><br><span class="line"># 在浏览器输入：http://127.0.0.1:8001/app02/index/ 会看到:我是app02的index页面...</span><br></pre></td></tr></table></figure><h2 id="五-反向解析"><a href="#五-反向解析" class="headerlink" title="五 反向解析"></a>五 反向解析</h2><p>在软件开发初期，url地址的路径设计可能并不完美，后期需要进行调整，如果项目中很多地方使用了该路径，一旦该路径发生变化，就意味着所有使用该路径的地方都需要进行修改，这是一个非常繁琐的操作。</p><p>解决方案就是在编写一条re_path(regex, view, kwargs=None, name=None)时，可以通过参数name为url地址的路径部分起一个别名，项目中就可以通过别名来获取这个路径。以后无论路径如何变化别名与路径始终保持一致。</p><p>上述方案中通过别名获取路径的过程称为反向解析，一般用于前后端不分离的项目</p><p>案例：登录成功跳转到index.html页面</p><p>在urls.py文件中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path,re_path</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line"></span><br><span class="line">    re_path(<span class="string">r&#x27;^login/$&#x27;</span>, views.login,name=<span class="string">&#x27;login_page&#x27;</span>), <span class="comment"># 路径login/的别名为login_page</span></span><br><span class="line">    re_path(<span class="string">r&#x27;^index/$&#x27;</span>, views.index,name=<span class="string">&#x27;index_page&#x27;</span>), <span class="comment"># 路径index/的别名为index_page</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在views.py中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render </span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> reverse <span class="comment"># 用于反向解析</span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> redirect <span class="comment">#用于重定向页面</span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="comment"># 当为get请求时，返回login.html页面,页面中的&#123;% url &#x27;login_page&#x27; %&#125;会被反向解析成路径：/login/</span></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&#x27;login.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 当为post请求时，可以从request.POST中取出请求体的数据</span></span><br><span class="line">    name = request.POST.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">    pwd = request.POST.get(<span class="string">&#x27;pwd&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> name == <span class="string">&#x27;kevin&#x27;</span> <span class="keyword">and</span> pwd == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">        url = reverse(<span class="string">&#x27;index_page&#x27;</span>)  <span class="comment"># reverse会将别名&#x27;index_page&#x27;反向解析成路径：/index/       </span></span><br><span class="line">        <span class="keyword">return</span> redirect(url) <span class="comment"># 重定向到/index/</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;用户名或密码错误&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;index.html&#x27;</span>)</span><br></pre></td></tr></table></figure><p>login.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--强调：login_page必须加引号--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&#123;% url &#x27;login_page&#x27; %&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125; <span class="comment">&lt;!--强调：必须加上这一行，后续我们会详细介绍--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是index页面...<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver <span class="number">8001</span>  </span><br><span class="line"><span class="comment"># 在浏览器输入：http://127.0.0.1:8001/login/ 会看到登录页面，输入正确的用户名密码会跳转到index.html</span></span><br><span class="line"><span class="comment"># 当我们修改路由表中匹配路径的正则表达式时，程序其余部分均无需修改</span></span><br></pre></td></tr></table></figure><p>总结：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在views.py中，反向解析的使用：</span><br><span class="line">    url = reverse(<span class="string">&#x27;index_page&#x27;</span>)</span><br><span class="line">在模版login.html文件中，反向解析的使用</span><br><span class="line">    &#123;% url <span class="string">&#x27;login_page&#x27;</span> %&#125;</span><br></pre></td></tr></table></figure><p>拓展阅读：</p><p>如果路径存在分组的反向解析使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path,re_path</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line"></span><br><span class="line">    re_path(<span class="string">r&#x27;^article/(\d+)/$&#x27;</span>,views.article,name=<span class="string">&#x27;article_page&#x27;</span>), <span class="comment">#　普通分组</span></span><br><span class="line">    re_path(<span class="string">r&#x27;^user/(?P&lt;uid&gt;\d+)/$&#x27;</span>,views.article,name=<span class="string">&#x27;user_page&#x27;</span>), <span class="comment"># 命名分组</span></span><br><span class="line">]</span><br><span class="line"><span class="comment"># 1 针对普通分组，比如我们要反向解析出：/article/1/ 这种路径，写法如下</span></span><br><span class="line">在views.py中，反向解析的使用：</span><br><span class="line">    url = reverse(<span class="string">&#x27;article_page&#x27;</span>,args=(<span class="number">1</span>,)) </span><br><span class="line">在模版login.html文件中，反向解析的使用</span><br><span class="line">    &#123;% url <span class="string">&#x27;article_page&#x27;</span> <span class="number">1</span> %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2 针对命名分组，比如我们要反向解析出：/user/1/ 这种路径，写法如下</span></span><br><span class="line">在views.py中，反向解析的使用：</span><br><span class="line">    url = reverse(<span class="string">&#x27;user_page&#x27;</span>,kwargs=&#123;<span class="string">&#x27;uid&#x27;</span>:<span class="number">1</span>&#125;) </span><br><span class="line">在模版login.html文件中，反向解析的使用</span><br><span class="line">    &#123;% url <span class="string">&#x27;user_page&#x27;</span> uid=<span class="number">1</span> %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># ps:如果有多个参数，按空格分隔开即可</span></span><br><span class="line">&#123;% url <span class="string">&#x27;xxx_page&#x27;</span> <span class="number">1</span> <span class="number">2</span> %&#125;</span><br><span class="line">&#123;% url <span class="string">&#x27;yyy_page&#x27;</span> a=<span class="number">1</span> b=<span class="number">2</span> %&#125;</span><br></pre></td></tr></table></figure><h2 id="六-名称空间"><a href="#六-名称空间" class="headerlink" title="六 名称空间"></a>六 名称空间</h2><p>当我们的项目下创建了多个app，并且每个app下都针对匹配的路径起了别名，如果别名存在重复，那么在反向解析时则会出现覆盖，如下</p><p>1 创建两个app</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建项目mystie2</span></span><br><span class="line">E:\git&gt;django-admin startproject mysite2</span><br><span class="line"><span class="comment"># 切换到项目目录下</span></span><br><span class="line">E:\git&gt;cd mysite2</span><br><span class="line"><span class="comment"># 创建app01和app02</span></span><br><span class="line">E:\git\mysite2&gt;python3 manage.py startapp app01</span><br><span class="line">E:\git\mysite2&gt;python3 manage.py startapp app02</span><br></pre></td></tr></table></figure><p>2 在每个app下手动创建urls.py来存放自己的路由，并且为匹配的路径起别名</p><p>app01下的urls.py文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> re_path</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># 为匹配的路径app01/index/起别名&#x27;index_page&#x27;</span></span><br><span class="line">    re_path(<span class="string">r&#x27;^index/$&#x27;</span>,views.index,name=<span class="string">&#x27;index_page&#x27;</span>), </span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>app02下的urls.py文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> re_path</span><br><span class="line"><span class="keyword">from</span> app02 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># 为匹配的路径app02/index/起别名&#x27;index_page&#x27;,与app01中的别名相同</span></span><br><span class="line">    re_path(<span class="string">r&#x27;^index/$&#x27;</span>,views.index,name=<span class="string">&#x27;index_page&#x27;</span>), </span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>3 在每个app下的view.py中编写视图函数，在视图函数中针对别名’index_page’做反向解析</p><p>app01下的views.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> reverse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    url=reverse(<span class="string">&#x27;index_page&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;app01的index页面，反向解析结果为%s&#x27;</span> %url)</span><br></pre></td></tr></table></figure><p>app02下的views.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> reverse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    url=reverse(<span class="string">&#x27;index_page&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;app02的index页面，反向解析结果为%s&#x27;</span> %url)</span><br></pre></td></tr></table></figure><p>3 在总的urls.py文件中（mysite2文件夹下的urls.py）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path,re_path</span><br><span class="line"></span><br><span class="line"><span class="comment"># 总路由表</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 新增两条路由，注意不能以$结尾</span></span><br><span class="line">    re_path(<span class="string">r&#x27;^app01/&#x27;</span>, include(<span class="string">&#x27;app01.urls&#x27;</span>)),</span><br><span class="line">    re_path(<span class="string">r&#x27;^app02/&#x27;</span>, include(<span class="string">&#x27;app02.urls&#x27;</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>4、测试：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver 8001</span><br></pre></td></tr></table></figure><p>在测试时，无论在浏览器输入：<a href="https://link.zhihu.com/?target=http%3A//127.0.0.1%3A8001/app01/index/">http://127.0.0.1:8001/app01/index/</a>还是输入<a href="https://link.zhihu.com/?target=http%3A//127.0.0.1%3A8001/app02/index/">http://127.0.0.1:8001/app02/index/</a> 针对别名’index_page’反向解析的结果都是/app02/index/，覆盖了app01下别名的解析。</p><p>解决这个问题的方法之一就是避免使用相同的别名，如果就想使用相同的别名，那就需要用到django中名称空间的概念，将别名放到不同的名称空间中，这样即便是出现重复，彼此也不会冲突，具体做法如下</p><p>1、总urls.py在路由分发时，指定名称空间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path,re_path,include</span><br><span class="line"></span><br><span class="line"><span class="comment"># 总路由表</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 传给include功能一个元组，元组的第一个值是路由分发的地址，第二个值则是我们为名称空间起的名字</span></span><br><span class="line">    re_path(<span class="string">r&#x27;^app01/&#x27;</span>, include((<span class="string">&#x27;app01.urls&#x27;</span>,<span class="string">&#x27;app01&#x27;</span>))),</span><br><span class="line">    re_path(<span class="string">r&#x27;^app02/&#x27;</span>, include((<span class="string">&#x27;app02.urls&#x27;</span>,<span class="string">&#x27;app02&#x27;</span>))),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>2、修改每个app下的view.py中视图函数，针对不同名称空间中的别名’index_page’做反向解析</p><p>app01下的views.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> reverse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    url=reverse(<span class="string">&#x27;app01:index_page&#x27;</span>) <span class="comment"># 解析的是名称空间app01下的别名&#x27;index_page&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;app01的index页面，反向解析结果为%s&#x27;</span> %url)</span><br></pre></td></tr></table></figure><p>app02下的views.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> reverse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    url=reverse(<span class="string">&#x27;app02:index_page&#x27;</span>) <span class="comment"># 解析的是名称空间app02下的别名&#x27;index_page&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;app02的index页面，反向解析结果为%s&#x27;</span> %url)</span><br></pre></td></tr></table></figure><p>3、测试：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver 8001</span><br></pre></td></tr></table></figure><p>浏览器输入：<a href="https://link.zhihu.com/?target=http%3A//127.0.0.1%3A8001/app01/index/">http://127.0.0.1:8001/app01/index/</a>反向解析的结果是/app01/index/</p><p>在浏览器输入<a href="https://link.zhihu.com/?target=http%3A//127.0.0.1%3A8001/app02/index/">http://127.0.0.1:8001/app02/index/</a> 反向解析的结果是/app02/index/</p><p>总结+补充</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、在视图函数中基于名称空间的反向解析，用法如下</span><br><span class="line">url=reverse(<span class="string">&#x27;名称空间的名字:待解析的别名&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、在模版里基于名称空间的反向解析，用法如下</span><br><span class="line">&lt;a href=<span class="string">&quot;&#123;% url &#x27;名称空间的名字:待解析的别名&#x27;%&#125;&quot;</span>&gt;哈哈&lt;/a&gt;</span><br></pre></td></tr></table></figure><h2 id="七-django2-x中的path"><a href="#七-django2-x中的path" class="headerlink" title="七 django2.x中的path"></a>七 django2.x中的path</h2><p>在Django2.x中新增了一个path功能，用来解决：数据类型转换问题与正则表达式冗余问题，如下</p><p>urls.py文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> re_path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># 问题一：数据类型转换</span></span><br><span class="line">    <span class="comment"># 正则表达式会将请求路径中的年份匹配成功然后以str类型传递函数year_archive，在函数year_archive中如果想以int类型的格式处理年份，则必须进行数据类型转换</span></span><br><span class="line">    re_path(<span class="string">r&#x27;^articles/(?P&lt;year&gt;[0-9]&#123;4&#125;)/$&#x27;</span>, views.year_archive),</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 问题二：正则表达式冗余</span></span><br><span class="line">    <span class="comment"># 下述三个路由中匹配article_id采用了同样的正则表达式，重复编写了三遍，存在冗余问题，并且极不容易管理，因为一旦article_id规则需要改变，则必须同时修改三处代码</span></span><br><span class="line"></span><br><span class="line">    re_path(<span class="string">r&#x27;^article/(?P&lt;article_id&gt;[a-zA-Z0-9]+)/detail/$&#x27;</span>, views.detail_view),</span><br><span class="line">    re_path(<span class="string">r&#x27;^articles/(?P&lt;article_id&gt;[a-zA-Z0-9]+)/edit/$&#x27;</span>, views.edit_view),</span><br><span class="line">    re_path(<span class="string">r&#x27;^articles/(?P&lt;article_id&gt;[a-zA-Z0-9]+)/delete/$&#x27;</span>, views.delete_view),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>views.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render,HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">year_archive</span>(<span class="params">request,year</span>):</span><br><span class="line">    <span class="built_in">print</span>(year,<span class="built_in">type</span>(year))</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;year_archive page&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">detail_view</span>(<span class="params">request,article_id</span>):</span><br><span class="line">    <span class="built_in">print</span>(article_id, <span class="built_in">type</span>(article_id))</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;detail_view page&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit_view</span>(<span class="params">request,article_id</span>):</span><br><span class="line">    <span class="built_in">print</span>(article_id, <span class="built_in">type</span>(article_id))</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;edit_view page&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete_view</span>(<span class="params">request,article_id</span>):</span><br><span class="line">    <span class="built_in">print</span>(article_id, <span class="built_in">type</span>(article_id))</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;delete_view page&#x27;</span>)</span><br></pre></td></tr></table></figure><p>Django2.0中的path如何解决上述两个问题的呢？请看示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path,re_path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># 问题一的解决方案：</span></span><br><span class="line">    path(<span class="string">&#x27;articles/&lt;int:year&gt;/&#x27;</span>, views.year_archive), <span class="comment"># &lt;int:year&gt;相当于一个有名分组，其中int是django提供的转换器，相当于正则表达式，专门用于匹配数字类型，而year则是我们为有名分组命的名，并且int会将匹配成功的结果转换成整型后按照格式（year=整型值）传给函数year_archive</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 问题二解决方法：用一个int转换器可以替代多处正则表达式</span></span><br><span class="line">    path(<span class="string">&#x27;articles/&lt;int:article_id&gt;/detail/&#x27;</span>, views.detail_view), </span><br><span class="line">    path(<span class="string">&#x27;articles/&lt;int:article_id&gt;/edit/&#x27;</span>, views.edit_view),</span><br><span class="line">    path(<span class="string">&#x27;articles/&lt;int:article_id&gt;/delete/&#x27;</span>, views.delete_view),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>强调：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、path与re_path或者2.x中的re_path的不同之处是，传给path的第一个参数不再是正则表达式，而是一个完全匹配的路径，相同之处是第一个参数中的匹配字符均无需加前导斜杠</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2、使用尖括号(&lt;&gt;)从url中捕获值，相当于有名分组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3、&lt;&gt;中可以包含一个转化器类型（converter type），比如使用 &lt;int:name&gt; 使用了转换器int。若果没有转化器，将匹配任何字符串，当然也包括了 / 字符</span></span><br></pre></td></tr></table></figure><p>django默认支持一下5种转换器（Path converters）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>,匹配除了路径分隔符（/）之外的非空字符串，这是默认的形式</span><br><span class="line"><span class="built_in">int</span>,匹配正整数，包含<span class="number">0</span>。</span><br><span class="line">slug,匹配字母、数字以及横杠、下划线组成的字符串。</span><br><span class="line">uuid,匹配格式化的uuid，如 075194d3-<span class="number">6885</span>-417e-a8a8-6c931e272f00。</span><br><span class="line">path,匹配任何非空字符串，包含了路径分隔符（/）.它允许你匹配完整的 URL 路径而不是像 <span class="built_in">str</span> 那样匹配 URL 的一部分。</span><br></pre></td></tr></table></figure><p>例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&#x27;articles/&lt;int:year&gt;/&lt;int:month&gt;/&lt;slug:other&gt;/&#x27;</span>, views.article_detail) </span><br><span class="line"><span class="comment"># 针对路径http://127.0.0.1:8000/articles/2009/123/hello/，path会匹配出参数year=2009,month=123,other=&#x27;hello&#x27;传递给函数article_detail</span></span><br></pre></td></tr></table></figure><p>很明显针对月份month，转换器int是无法精准匹配的，如果我们只想匹配两个字符，那么转换器slug也无法满足需求，针对等等这一系列复杂的需要，我们可以定义自己的转化器。转化器是一个类或接口，它的要求有三点：</p><ul><li><p><code>regex</code> 类属性，字符串类型</p></li><li><p><code>to_python(self, value)</code> 方法，value是由类属性 <code>regex</code> 所匹配到的字符串，返回具体的Python变量值，以供Django传递到对应的视图函数中。</p></li><li><p><code>to_url(self, value)</code> 方法，和 <code>to_python</code> 相反，value是一个具体的Python变量值，返回其字符串，通常用于url反向引用。</p></li></ul><p>自定义转换器示例：</p><ol><li>在app01下新建文件path_ converters.py,文件名可以随意命名</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MonthConverter</span>:</span><br><span class="line">    regex = <span class="string">&#x27;\d&#123;2&#125;&#x27;</span>  <span class="comment"># 属性名必须为regex</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">to_python</span>(<span class="params">self,value</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(value)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">to_url</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="keyword">return</span> value<span class="comment"># 匹配的regex是两个数字，返回的结果也必须是两个数字</span></span><br></pre></td></tr></table></figure><p>2 在urls.py中，使用<code>register_converter</code> 将其注册到URL配置中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> register_converter</span><br><span class="line"><span class="keyword">from</span> app01.path_ converters <span class="keyword">import</span> MonthConverter</span><br><span class="line">register_converter(MonthConverter,<span class="string">&#x27;mon&#x27;</span>)</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;articles////&#x27;</span>, views.article_detail, name=<span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3 views.py中的视图函数article_detail</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render,HttpResponse,reverse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">article_detail</span>(<span class="params">request,year,month,other</span>):</span><br><span class="line">    <span class="built_in">print</span>(year,<span class="built_in">type</span>(year))</span><br><span class="line">    <span class="built_in">print</span>(month,<span class="built_in">type</span>(month))</span><br><span class="line">    <span class="built_in">print</span>(other,<span class="built_in">type</span>(other))</span><br><span class="line">    <span class="built_in">print</span>(reverse(<span class="string">&#x27;xxx&#x27;</span>,args=(<span class="number">1988</span>,<span class="number">12</span>,<span class="string">&#x27;hello&#x27;</span>))) <span class="comment"># 反向解析结果/articles/1988/12/hello/ return HttpResponse(&#x27;xxxx&#x27;)</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;Jerry&#x27;</span>)</span><br></pre></td></tr></table></figure><p>4 测试</p><ol><li><p>在浏览器输入<a href="http://127.0.0.1:8000/articles/2009/12/hello/，path会成功匹配出参数year=2009,month=12,other=&#39;hello&#39;传递给函数article_detail">http://127.0.0.1:8000/articles/2009/12/hello/，path会成功匹配出参数year=2009,month=12,other=&#39;hello&#39;传递给函数article_detail</a>    </p></li><li><p>在浏览器输入<a href="http://127.0.0.1:8000/articles/2009/123/hello/，path会匹配失败，因为我们自定义的转换器mon只匹配两位数字，而对应位置的123超过了2位">http://127.0.0.1:8000/articles/2009/123/hello/，path会匹配失败，因为我们自定义的转换器mon只匹配两位数字，而对应位置的123超过了2位</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web应用</title>
      <link href="/2021/11/01/Python/Django/1.Web%E6%A1%86%E6%9E%B6%E4%B8%8EDjango%E7%AE%80%E4%BB%8B/"/>
      <url>/2021/11/01/Python/Django/1.Web%E6%A1%86%E6%9E%B6%E4%B8%8EDjango%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="一-Web应用的组成"><a href="#一-Web应用的组成" class="headerlink" title="一 Web应用的组成"></a>一 Web应用的组成</h2><p>​      对于传统的应用软件来说，基本上都是部署于单机使用的，而Web应用软件则不一样，Web应用软件是基于B/S架构的，B与S部署于不同的计算机上，并且基于网络通信，所以B与S的本质都是套接字，其中B指的是浏览器(browser)，我们需要开发的是S端。</p><p>​    很明显我们在开发套接字服务端S时，思路应该是这样的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、接收套接字客户端B发来的请求信息并加以解析</span></span><br><span class="line"><span class="comment">#2、根据解析出的结果，加以判断，获取/生成用户想要的数据</span></span><br><span class="line"><span class="comment">#3、返回数据给套接字客户端B</span></span><br></pre></td></tr></table></figure><p>其中上述1和3属于套接字的底层通信，而2则属于应用程序的逻辑，所以我们通常说S端的开发由两大部分构成：server和application</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sever：称之为服务器程序，指的是套接字的通信相关事宜，包含1和3</span></span><br><span class="line"><span class="comment"># application：称之为应用程序，指的是应用程序的逻辑，包含2</span></span><br></pre></td></tr></table></figure><h2 id="二-开发一个Web应用"><a href="#二-开发一个Web应用" class="headerlink" title="二 开发一个Web应用"></a>二 开发一个Web应用</h2><h3 id="2-1-S端的简单开发与Http协议"><a href="#2-1-S端的简单开发与Http协议" class="headerlink" title="2.1 S端的简单开发与Http协议"></a>2.1 S端的简单开发与Http协议</h3><p>按照上述思路，开发S端如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># S端</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_server</span>(<span class="params">ip, port, app</span>):  <span class="comment"># 代表server</span></span><br><span class="line">    <span class="comment"># 处理套接字通信相关事宜</span></span><br><span class="line">    sock = socket.socket()</span><br><span class="line">    sock.bind((ip, port))</span><br><span class="line">    sock.listen(<span class="number">5</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Starting development server at http://%s:%s/&#x27;</span> %(ip,port))</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        conn, addr = sock.accept()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1、接收浏览器发来的请求信息</span></span><br><span class="line">        recv_data = conn.recv(<span class="number">1024</span>)</span><br><span class="line">        <span class="comment"># print(recv_data.decode(&#x27;utf-8&#x27;))</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2、将请求信息直接转交给application处理，得到返回值</span></span><br><span class="line">        res = app(recv_data)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3、向浏览器返回消息（此处并没有按照http协议返回）</span></span><br><span class="line">        conn.send(res)</span><br><span class="line"></span><br><span class="line">        conn.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">app</span>(<span class="params">environ</span>):  <span class="comment"># 代表application</span></span><br><span class="line">    <span class="comment"># 处理业务逻辑</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;hello world&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    make_server(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8008</span>, app)  <span class="comment"># 在客户端浏览器输入：http://127.0.0.1:8008 会报错（注意：请使用谷歌浏览器）</span></span><br></pre></td></tr></table></figure><blockquote><p>目前S端已经可以正常接收浏览器发来的请求消息了，但是浏览器在接收到S端回复的响应消息b’hello world’时却<code>无法正常解析</code>  ，因为浏览器与S端之间收发消息默认使用的应用层协议是HTTP，浏览器默认会按照HTTP协议规定的格式发消息，而S端也必须按照HTTP协议的格式回消息才行，所以接下来我们详细介绍HTTP协议</p></blockquote><h3 id="2-2-结合http协议改进S端"><a href="#2-2-结合http协议改进S端" class="headerlink" title="2.2 结合http协议改进S端"></a>2.2 结合http协议改进S端</h3><p>S端修订版本：处理HTTP协议的请求消息，并按照HTTP协议的格式回复消息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># S端</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_server</span>(<span class="params">ip, port, app</span>): <span class="comment"># 代表server</span></span><br><span class="line">    <span class="comment"># 处理套接字通信相关事宜</span></span><br><span class="line">    sock = socket.socket()</span><br><span class="line">    sock.bind((ip, port))</span><br><span class="line">    sock.listen(<span class="number">5</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Starting development server at http://%s:%s/&#x27;</span> %(ip,port))</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        conn, addr = sock.accept()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1、接收并处理浏览器发来的请求信息</span></span><br><span class="line">        <span class="comment"># 1.1 接收浏览器发来的http协议的消息</span></span><br><span class="line">        recv_data = conn.recv(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1.2 对http协议的消息加以处理，简单示范如下</span></span><br><span class="line">        ll=recv_data.decode(<span class="string">&#x27;utf-8&#x27;</span>).split(<span class="string">&#x27;\r\n&#x27;</span>)</span><br><span class="line">        head_ll=ll[<span class="number">0</span>].split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        environ=&#123;&#125;</span><br><span class="line">        environ[<span class="string">&#x27;PATH_INFO&#x27;</span>]=head_ll[<span class="number">1</span>]</span><br><span class="line">        environ[<span class="string">&#x27;method&#x27;</span>]=head_ll[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2：将请求信息处理后的结果environ交给application，这样application便无需再关注请求信息的处理，可以更加专注于业务逻辑的处理</span></span><br><span class="line">        res = app(environ)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3：按照http协议向浏览器返回消息</span></span><br><span class="line">        <span class="comment"># 3.1 返回响应首行</span></span><br><span class="line">        conn.send(<span class="string">b&#x27;HTTP/1.1 200 OK\r\n&#x27;</span>)</span><br><span class="line">        <span class="comment"># 3.2 返回响应头（可以省略）</span></span><br><span class="line">        conn.send(<span class="string">b&#x27;Content-Type: text/html\r\n\r\n&#x27;</span>)</span><br><span class="line">        <span class="comment"># 3.3 返回响应体</span></span><br><span class="line">        conn.send(res)</span><br><span class="line"></span><br><span class="line">        conn.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">app</span>(<span class="params">environ</span>): <span class="comment"># 代表application</span></span><br><span class="line">    <span class="comment"># 处理业务逻辑</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;hello world&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    make_server(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8008</span>, app)</span><br></pre></td></tr></table></figure><p>此时，重启S端后，再在客户端浏览器输入：<a href="https://link.zhihu.com/?target=http%3A//127.0.0.1%3A8008">http://127.0.0.1:8008</a> 便可以看到正常结果hello world了。</p><h3 id="2-3-返回Html"><a href="#2-3-返回Html" class="headerlink" title="2.3 返回Html"></a>2.3 返回Html</h3><p>我们不仅可以回复hello world这样的普通字符，还可以夹杂html标签，浏览器在接收到消息后会对解析出的html标签加以渲染</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># S端</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_server</span>(<span class="params">ip, port, app</span>): </span><br><span class="line">    sock = socket.socket()</span><br><span class="line">    sock.bind((ip, port))</span><br><span class="line">    sock.listen(<span class="number">5</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Starting development server at http://%s:%s/&#x27;</span> %(ip,port))</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        conn, addr = sock.accept()</span><br><span class="line"></span><br><span class="line">        recv_data = conn.recv(<span class="number">1024</span>)</span><br><span class="line">        ll=recv_data.decode(<span class="string">&#x27;utf-8&#x27;</span>).split(<span class="string">&#x27;\r\n&#x27;</span>)</span><br><span class="line">        head_ll=ll[<span class="number">0</span>].split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        environ=&#123;&#125;</span><br><span class="line">        environ[<span class="string">&#x27;PATH_INFO&#x27;</span>]=head_ll[<span class="number">1</span>]</span><br><span class="line">        environ[<span class="string">&#x27;method&#x27;</span>]=head_ll[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        res = app(environ)</span><br><span class="line"></span><br><span class="line">        conn.send(<span class="string">b&#x27;HTTP/1.1 200 OK\r\n&#x27;</span>)</span><br><span class="line">        conn.send(<span class="string">b&#x27;Content-Type: text/html\r\n\r\n&#x27;</span>)</span><br><span class="line">        conn.send(res)</span><br><span class="line"></span><br><span class="line">        conn.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">app</span>(<span class="params">environ</span>):</span><br><span class="line">    <span class="comment"># 返回html标签</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;&lt;h1&gt;hello web&lt;/h1&gt;&lt;img src=&quot;https://www.baidu.com/img/bd_logo1.png&quot;&gt;&lt;/img&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    make_server(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8008</span>, app)</span><br></pre></td></tr></table></figure><p>在上述函数app中，python代码与html代码耦合到一起，这是不合理的，我们应该将二者分离开，将html代码放入专门的文件中，于是我们新建timer.html文件，内容如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前时间为：2020-02-02 20:20:20<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>S端程序如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># S端</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_server</span>(<span class="params">ip, port, app</span>): <span class="comment"># 代表server</span></span><br><span class="line">    sock = socket.socket()</span><br><span class="line">    sock.bind((ip, port))</span><br><span class="line">    sock.listen(<span class="number">5</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Starting development server at http://%s:%s/&#x27;</span> %(ip,port))</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        conn, addr = sock.accept()</span><br><span class="line"></span><br><span class="line">        recv_data = conn.recv(<span class="number">1024</span>)</span><br><span class="line">        ll=recv_data.decode(<span class="string">&#x27;utf-8&#x27;</span>).split(<span class="string">&#x27;\r\n&#x27;</span>)</span><br><span class="line">        head_ll=ll[<span class="number">0</span>].split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        environ=&#123;&#125;</span><br><span class="line">        environ[<span class="string">&#x27;PATH_INFO&#x27;</span>]=head_ll[<span class="number">1</span>]</span><br><span class="line">        environ[<span class="string">&#x27;method&#x27;</span>]=head_ll[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        res = app(environ)</span><br><span class="line"></span><br><span class="line">        conn.send(<span class="string">b&#x27;HTTP/1.1 200 OK\r\n&#x27;</span>)</span><br><span class="line">        conn.send(<span class="string">b&#x27;Content-Type: text/html\r\n\r\n&#x27;</span>)</span><br><span class="line">        conn.send(res)</span><br><span class="line"></span><br><span class="line">        conn.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">app</span>(<span class="params">environ</span>):</span><br><span class="line">    <span class="comment"># 处理业务逻辑：打开文件，读取文件内容并返回</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;timer.html&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">    <span class="keyword">return</span> data.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    make_server(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8008</span>, app)</span><br></pre></td></tr></table></figure><p>上述S端为浏览器返回的都是静态页面（内容都固定的），要想返回动态页面（内容是变化的），那timer.html中的内容就不能写死，可以定义一个特殊的符号（类似于变量名），然后每次用得到的值覆盖该符号即可（类似于为变量赋值），于是timer.html内容修改如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前时间为：&#123;&#123; xxx &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>S端修改如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># S端</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_server</span>(<span class="params">ip, port, app</span>): <span class="comment"># 代表server</span></span><br><span class="line">    sock = socket.socket()</span><br><span class="line">    sock.bind((ip, port))</span><br><span class="line">    sock.listen(<span class="number">5</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Starting development server at http://%s:%s/&#x27;</span> %(ip,port))</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        conn, addr = sock.accept()</span><br><span class="line"></span><br><span class="line">        recv_data = conn.recv(<span class="number">1024</span>)</span><br><span class="line">        ll=recv_data.decode(<span class="string">&#x27;utf-8&#x27;</span>).split(<span class="string">&#x27;\r\n&#x27;</span>)</span><br><span class="line">        head_ll=ll[<span class="number">0</span>].split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        environ=&#123;&#125;</span><br><span class="line">        environ[<span class="string">&#x27;PATH_INFO&#x27;</span>]=head_ll[<span class="number">1</span>]</span><br><span class="line">        environ[<span class="string">&#x27;method&#x27;</span>]=head_ll[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        res = app(environ)</span><br><span class="line"></span><br><span class="line">        conn.send(<span class="string">b&#x27;HTTP/1.1 200 OK\r\n&#x27;</span>)</span><br><span class="line">        conn.send(<span class="string">b&#x27;Content-Type: text/html\r\n\r\n&#x27;</span>)</span><br><span class="line">        conn.send(res)</span><br><span class="line"></span><br><span class="line">        conn.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">app</span>(<span class="params">environ</span>):</span><br><span class="line">    <span class="comment"># 处理业务逻辑</span></span><br><span class="line">    <span class="keyword">import</span> time</span><br><span class="line">    now = time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, time.localtime())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;timer.html&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line"></span><br><span class="line">    data = data.replace(<span class="string">&#x27;&#123;&#123; xxx &#125;&#125;&#x27;</span>, now)  <span class="comment"># 字符串替换</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    make_server(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8008</span>, app) <span class="comment"># 在浏览器输入http://127.0.0.1:8008,每次刷新都会看到不同的时间</span></span><br></pre></td></tr></table></figure><h3 id="2-4-jinja2模块"><a href="#2-4-jinja2模块" class="headerlink" title="2.4 jinja2模块"></a>2.4 jinja2模块</h3><p>承接上例我们返回动态页面的解决方案，思考一个问题，如果页面中需要引入特殊符号/“变量”过多，那么函数app中要写一大堆字符串替换代码，相当麻烦，有一个模块jinja2很好地帮我们解决了这个问题，本质原理也就是字符串的替换，我们用它就好</p><p>timer.html内容如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前时间为：&#123;&#123; xxx &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前用户为：&#123;&#123; user &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前角色：&#123;&#123; role &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>S端内容如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># S端</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">from</span> jinja2 <span class="keyword">import</span> Template <span class="comment"># pip3 install jinja2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_server</span>(<span class="params">ip, port, app</span>): <span class="comment"># 代表server</span></span><br><span class="line">    sock = socket.socket()</span><br><span class="line">    sock.bind((ip, port))</span><br><span class="line">    sock.listen(<span class="number">5</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Starting development server at http://%s:%s/&#x27;</span> %(ip,port))</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        conn, addr = sock.accept()</span><br><span class="line"></span><br><span class="line">        recv_data = conn.recv(<span class="number">1024</span>)</span><br><span class="line">        ll=recv_data.decode(<span class="string">&#x27;utf-8&#x27;</span>).split(<span class="string">&#x27;\r\n&#x27;</span>)</span><br><span class="line">        head_ll=ll[<span class="number">0</span>].split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        environ=&#123;&#125;</span><br><span class="line">        environ[<span class="string">&#x27;PATH_INFO&#x27;</span>]=head_ll[<span class="number">1</span>]</span><br><span class="line">        environ[<span class="string">&#x27;method&#x27;</span>]=head_ll[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        res = app(environ)</span><br><span class="line"></span><br><span class="line">        conn.send(<span class="string">b&#x27;HTTP/1.1 200 OK\r\n&#x27;</span>)</span><br><span class="line">        conn.send(<span class="string">b&#x27;Content-Type: text/html\r\n\r\n&#x27;</span>)</span><br><span class="line">        conn.send(res)</span><br><span class="line"></span><br><span class="line">        conn.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">app</span>(<span class="params">environ</span>):</span><br><span class="line">    <span class="comment"># 处理业务逻辑</span></span><br><span class="line">    <span class="keyword">import</span> time</span><br><span class="line">    now = time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, time.localtime())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;timer.html&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">        template=Template(data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># data = data.replace(&#x27;&#123;&#123; xxx &#125;&#125;&#x27;, now)  # 字符串替换</span></span><br><span class="line">    data=template.render(&#123;<span class="string">&#x27;xxx&#x27;</span>:now,<span class="string">&#x27;user&#x27;</span>:<span class="string">&#x27;Allen&#x27;</span>,<span class="string">&#x27;role&#x27;</span>:<span class="string">&#x27;大总管&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    make_server(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8008</span>, app) <span class="comment"># 在浏览器输入http://127.0.0.1:8008,每次刷新都会看到不同的时间</span></span><br></pre></td></tr></table></figure><h2 id="三-Web框架的由来"><a href="#三-Web框架的由来" class="headerlink" title="三 Web框架的由来"></a>三 Web框架的由来</h2><h3 id="3-1-wsgiref模块"><a href="#3-1-wsgiref模块" class="headerlink" title="3.1 wsgiref模块"></a>3.1 wsgiref模块</h3><p>综上案例我们可以发现一个规律，在开发S端时，server的功能是复杂且固定的（处理socket消息的收发、解析http协议的数据），而app中的业务逻辑却各不相同（不同的软件就应该有不同的业务逻辑），重复开发复杂且固定的server是毫无意义的，有一个wsgiref模块帮我们写好了server的功能，这样我们便只需要专注于app功能的编写即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># wsgiref实现了server，即make_server</span></span><br><span class="line"><span class="keyword">from</span> wsgiref.simple_server <span class="keyword">import</span> make_server </span><br><span class="line"><span class="keyword">from</span> jinja2 <span class="keyword">import</span> Template</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">app</span>(<span class="params">environ, start_response</span>): <span class="comment"># 代表application </span></span><br><span class="line">    <span class="comment"># 1、返回http协议的响应首行和响应头信息</span></span><br><span class="line">    start_response(<span class="string">&#x27;200 OK&#x27;</span>, [(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html&#x27;</span>)])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2、处理业务逻辑：根据请求url的不同返回不同的页面内容</span></span><br><span class="line">    <span class="keyword">if</span> environ.get(<span class="string">&#x27;PATH_INFO&#x27;</span>) == <span class="string">&#x27;/index&#x27;</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;index.html&#x27;</span>,<span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            data=f.read()</span><br><span class="line">    <span class="keyword">elif</span> environ.get(<span class="string">&#x27;PATH_INFO&#x27;</span>) == <span class="string">&#x27;/timer&#x27;</span>:</span><br><span class="line">        <span class="keyword">import</span> time</span><br><span class="line">        now = time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, time.localtime())</span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;timer.html&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            data = f.read()</span><br><span class="line">            template=Template(data)</span><br><span class="line"></span><br><span class="line">        data=template.render(&#123;<span class="string">&#x27;xxx&#x27;</span>:now,<span class="string">&#x27;user&#x27;</span>:<span class="string">&#x27;Allen&#x27;</span>,<span class="string">&#x27;role&#x27;</span>:<span class="string">&#x27;大总管&#x27;</span>&#125;)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        data=<span class="string">&#x27;&lt;h1&gt;Hello, web!&lt;/h1&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3、返回http响应体信息，必须是bytes类型，必须放在列表中</span></span><br><span class="line">    <span class="keyword">return</span> [data.encode(<span class="string">&#x27;utf-8&#x27;</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 当接收到请求时，wsgiref模块会对该请求加以处理，然后后调用app函数，自动传入两个参数：</span></span><br><span class="line">    <span class="comment"># 1 environ是一个字典，存放了http的请求信息</span></span><br><span class="line">    <span class="comment"># 2 start_response是一个功能，用于返回http协议的响应首行和响应头信息</span></span><br><span class="line">    s = make_server(<span class="string">&#x27;&#x27;</span>, <span class="number">8011</span>, app) <span class="comment"># 代表server</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;监听8011&#x27;</span>)</span><br><span class="line">    s.serve_forever() <span class="comment"># 在浏览器输入http://127.0.0.1:8011/index和http://127.0.0.1:8011/timer会看到不同的页面内容</span></span><br></pre></td></tr></table></figure><p>timer.html已经存在了，新增的index.html页面内容如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>主页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上述案例中app在处理业务逻辑时需要根据不同的url地址返回不同的页面内容，当url地址越来越多，需要写一堆if判断，代码不够清晰，耦合程度高，所以我们做出以下优化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 处理业务逻辑的函数</span></span><br><span class="line"><span class="keyword">from</span> jinja2 <span class="keyword">import</span> Template</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">environ</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;index.html&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">    <span class="keyword">return</span> data.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">timer</span>(<span class="params">environ</span>):</span><br><span class="line">    <span class="keyword">import</span> time</span><br><span class="line">    now = time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, time.localtime())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;timer.html&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">        template=Template(data)</span><br><span class="line"></span><br><span class="line">    data=template.render(&#123;<span class="string">&#x27;xxx&#x27;</span>:now,<span class="string">&#x27;user&#x27;</span>:<span class="string">&#x27;Allen&#x27;</span>,<span class="string">&#x27;role&#x27;</span>:<span class="string">&#x27;大总管&#x27;</span>&#125;)</span><br><span class="line">    <span class="keyword">return</span> data.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 路径跟函数的映射关系</span></span><br><span class="line">url_patterns = [</span><br><span class="line">    (<span class="string">&#x27;/index&#x27;</span>, index),</span><br><span class="line">    (<span class="string">&#x27;/timer&#x27;</span>, timer),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> wsgiref.simple_server <span class="keyword">import</span> make_server </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">app</span>(<span class="params">environ, start_response</span>):</span><br><span class="line">    start_response(<span class="string">&#x27;200 OK&#x27;</span>, [(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html&#x27;</span>)])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 拿到请求的url并根据映射关系url_patters执行相应的函数</span></span><br><span class="line">    reuqest_url = environ.get(<span class="string">&#x27;PATH_INFO&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> url_patterns:</span><br><span class="line">        <span class="keyword">if</span> url[<span class="number">0</span>] == reuqest_url:</span><br><span class="line">            data = url[<span class="number">1</span>](environ)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        data = <span class="string">b&#x27;404&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [data]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    s = make_server(<span class="string">&#x27;&#x27;</span>, <span class="number">8011</span>, app)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;监听8011&#x27;</span>)</span><br><span class="line">    s.serve_forever()</span><br></pre></td></tr></table></figure><h3 id="3-2-简单Web框架实现"><a href="#3-2-简单Web框架实现" class="headerlink" title="3.2 简单Web框架实现"></a>3.2 简单Web框架实现</h3><p>随着业务逻辑复杂度的增加，处理业务逻辑的函数以及url_patterns中的映射关系都会不断地增多，此时仍然把所有代码都放到一个文件中，程序的可读性和可扩展性都会变得非常差，所以我们应该将现有的代码拆分到不同文件中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysite <span class="comment"># 文件夹</span></span><br><span class="line">    ├── app01 <span class="comment"># 文件夹</span></span><br><span class="line">    │   └── views.py</span><br><span class="line">    ├── mysite <span class="comment"># 文件夹</span></span><br><span class="line">    │   └── urls.py</span><br><span class="line">    └── templates <span class="comment"># 文件夹</span></span><br><span class="line">    │   ├── index.html</span><br><span class="line">    │   └── timer.html</span><br><span class="line">    ├── main.py</span><br></pre></td></tr></table></figure><p>views.py 内容如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 处理业务逻辑的函数</span></span><br><span class="line"><span class="keyword">from</span> jinja2 <span class="keyword">import</span> Template</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">environ</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;index.html&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">    <span class="keyword">return</span> data.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">timer</span>(<span class="params">environ</span>):</span><br><span class="line">    <span class="keyword">import</span> time</span><br><span class="line">    now = time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, time.localtime())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;timer.html&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">        template=Template(data)</span><br><span class="line"></span><br><span class="line">    data=template.render(&#123;<span class="string">&#x27;xxx&#x27;</span>:now,<span class="string">&#x27;user&#x27;</span>:<span class="string">&#x27;Allen&#x27;</span>,<span class="string">&#x27;role&#x27;</span>:<span class="string">&#x27;大总管&#x27;</span>&#125;)</span><br><span class="line">    <span class="keyword">return</span> data.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br></pre></td></tr></table></figure><p>urls.py内容如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 路径跟函数的映射关系</span></span><br><span class="line"><span class="keyword">from</span> app01.views <span class="keyword">import</span> * <span class="comment"># 需要导入views中的函数</span></span><br><span class="line"></span><br><span class="line">url_patterns = [</span><br><span class="line">    (<span class="string">&#x27;/index&#x27;</span>, index),</span><br><span class="line">    (<span class="string">&#x27;/timer&#x27;</span>, timer),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>main.py 内容如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> wsgiref.simple_server <span class="keyword">import</span> make_server</span><br><span class="line"><span class="keyword">from</span> mysite.urls <span class="keyword">import</span> url_patterns  <span class="comment"># 需要导入urls中的url_patterns</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">app</span>(<span class="params">environ, start_response</span>):</span><br><span class="line">    start_response(<span class="string">&#x27;200 OK&#x27;</span>, [(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html&#x27;</span>)])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 拿到请求的url并根据映射关系url_patters执行相应的函数</span></span><br><span class="line">    reuqest_url = environ.get(<span class="string">&#x27;PATH_INFO&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> url_patterns:</span><br><span class="line">        <span class="keyword">if</span> url[<span class="number">0</span>] == reuqest_url:</span><br><span class="line">            data = url[<span class="number">1</span>](environ)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        data = <span class="string">b&#x27;404&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [data]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    s = make_server(<span class="string">&#x27;&#x27;</span>, <span class="number">8011</span>, app)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;监听8011&#x27;</span>)</span><br><span class="line">    s.serve_forever()</span><br></pre></td></tr></table></figure><p>至此，我们就针对application的开发自定义了一个框架，所以说框架的本质就是一系列功能的集合体、不同的功能放到不同的文件中。有了该框架，可以让我们专注于业务逻辑的编写，极大的提高了开发web应用的效率（开发web应用的框架可以简称为web框架），比如我们新增一个业务逻辑，要求为：浏览器输入<a href="https://link.zhihu.com/?target=http%3A//127.0.0.1%3A8011/home">http://127.0.0.1:8011/home</a> 就能访问到home.html页面</p><h3 id="3-3-简单web框架的使用"><a href="#3-3-简单web框架的使用" class="headerlink" title="3.3 简单web框架的使用"></a>3.3 简单web框架的使用</h3><p>在框架的基础上具体开发步骤如下：</p><p>步骤一：在templates文件夹下新增home.html</p><p>步骤二：在urls.py的url_patterns中新增一条映射关系</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">url_patterns = [</span><br><span class="line">    (<span class="string">&#x27;/index&#x27;</span>, index),</span><br><span class="line">    (<span class="string">&#x27;/timer&#x27;</span>, timer),</span><br><span class="line">    (<span class="string">&#x27;/home&#x27;</span>, home), <span class="comment"># 新增的映射关系</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>步骤三：在views.py中新增一个名为home的函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>(<span class="params">environ</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;templates/home.html&#x27;</span>, <span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f: </span><br><span class="line">        data = f.read()</span><br><span class="line">    <span class="keyword">return</span> data.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br></pre></td></tr></table></figure><p>我们自定义的框架功能有限，总结下来大致有这么几个功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">功能<span class="number">1</span>、socket收发消息，指的是server</span><br><span class="line">功能<span class="number">2</span>、根据不同的路径执行不同的处理逻辑/功能</span><br><span class="line">功能<span class="number">3</span>、返回动态页面(字符串的替换)，如jinja2</span><br></pre></td></tr></table></figure><h3 id="3-4-三大web框架简介与wsgi协议"><a href="#3-4-三大web框架简介与wsgi协议" class="headerlink" title="3.4 三大web框架简介与wsgi协议"></a>3.4 三大web框架简介与wsgi协议</h3><p>在Python中我们可以使用别人开发的、功能更强大的Web框架,如django、tornado、flask等,三种区别如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、django框架</span></span><br><span class="line">实现了上述功能<span class="number">1</span>、<span class="number">2</span>、<span class="number">3</span></span><br><span class="line">django框架自定义了server（基于wsgiref+socketserver模块来实现），但这只是提供给开发测试使用的server，并不能在生产环境应用，生产环境部署django的server通常采用uwsgi</span><br><span class="line">django自定义了视图系统，即实现了功能<span class="number">2</span></span><br><span class="line">django自定义了模块系统，即实现了功能<span class="number">2</span></span><br><span class="line"><span class="comment">#2、tornado框架</span></span><br><span class="line">实现了上述功能<span class="number">1</span>、<span class="number">2</span>、<span class="number">3</span></span><br><span class="line">tornado框架自定义了server，是异步非阻塞的，效率很高，生产环境也可使用，考虑到高并发，通常选择该框架</span><br><span class="line"></span><br><span class="line"><span class="comment">#3、flask框架</span></span><br><span class="line">只实现了上述功能<span class="number">2</span></span><br></pre></td></tr></table></figure><p>wsgi协议</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">综上，我们得知一个Web应用的S端由server和application构成，服务器程序server负责接受HTTP请求、解析HTTP请求、发送HTTP响应等底层套接字通信的处理，都是苦力活，如果我们自己来写这些底层代码，还没开始写应用程序逻辑application呢，就得花个把月去读HTTP规范，所以我们通常直接使用别人开发好的server程序，比如wsgiref、uwsgi、或者框架自带的等等，我们则只需要把精力放在开发应用程序逻辑application上即可。因为我们在开发application时不希望接触到诸如TCP连接、HTTP原始请求和响应格式等底层套接字通信，所以需要在server与application之间建立一套统一的规范/接口，让我们专心用Python编写Web业务。</span><br><span class="line">这个接口就是WSGI：Web Server Gateway Interface。</span><br><span class="line">详见（了解即可）：https://www.liaoxuefeng.com/wiki/<span class="number">897692888725344</span>/<span class="number">923057027806560</span></span><br><span class="line"></span><br><span class="line">其实wsgiref、uwsgi等服务器程序server都是遵循wsgi协议的，有了这套协议/标准，server与application的开发就完全解开了耦合，一批程序员可以专注于开发不同的server，一批程序员(就是我们自己)则专注于开发不同的application，只要二者都遵循wsgi协议，则开发的程序可以完美整合，这跟谈恋爱是一个道理，定好你对老婆的要求/标准，只要符合这个标准的女人都可以做你的老婆，反之也一样，所以，找到单身的原因没有</span><br><span class="line"></span><br><span class="line">web框架的出现是为了让我们把精力更多地放在开发application上，有的web框架自己实现了高性能的server(比如tornado)，有的web框架需要借助别人开发的高性能server=&gt;uwsgi(比如django)，之所以可以这么灵活，都要归功于wsgi协议</span><br><span class="line"></span><br><span class="line">在开发过程中我们也无需关系wsgi协议，web框架都会按照wsgi协议为我们定制好application的基本功能，所以我们只需要关心最上</span><br></pre></td></tr></table></figure><h2 id="四-Django框架的安装"><a href="#四-Django框架的安装" class="headerlink" title="四 Django框架的安装"></a>四 Django框架的安装</h2><h3 id="Django-生产环境的版本选择"><a href="#Django-生产环境的版本选择" class="headerlink" title="Django-生产环境的版本选择"></a>Django-生产环境的版本选择</h3><p>Django有很多版本，而且在不断的更新，那如果生产环境要开发部署使用，需要选择什么样子的版本呢？</p><p>我们需要事先了解关于django的三个版本标识</p><h3 id="功能发布的版本号如何标识？"><a href="#功能发布的版本号如何标识？" class="headerlink" title="功能发布的版本号如何标识？"></a>功能发布的版本号如何标识？</h3><blockquote><p>目前开源软件发布一般会有2个不同的分支版本:</p><ol><li><p>普通发行版本：经常用于一些新功能，新特性，但是维护周期短,不稳定.</p></li><li><p>长线支持版本[LongTerm supper]: 维护周期长,稳定</p></li></ol><p>软件版本格式:大版本.小版本.修订号</p><ol><li><p>大版本一般是项目内容/软件的核心架构发生改动，以前的代码已经不适用于新的版本</p></li><li><p>小版本一般是功能的删减，删一个功能，小版本+1，减一个功能，小版本+1</p></li><li><p>修订号-般就是原来的代码出现了bug，会针对bug代码进行修复，此时就会增加修订号的数值</p></li></ol></blockquote><h3 id="LTS版本"><a href="#LTS版本" class="headerlink" title="LTS版本"></a>LTS版本</h3><p>LTS是长期支持(Long Term Support)的缩写，某个特性版本将被指定为长期支持(LTS)版本。这些版本将对导致安全性和数据丢失的bug进行修复，支持时间通常三年。</p><h3 id="补丁版本的版本号如何标识？"><a href="#补丁版本的版本号如何标识？" class="headerlink" title="补丁版本的版本号如何标识？"></a>补丁版本的版本号如何标识？</h3><p>版本号一般是：A.B.C格式的，例如1.8.18、 1.9.2等最后一位数字代表的版本号的就是补丁版本了。这些版本的发布，是为了修正错误或安全问题。这些版本将100%兼容相关的主版本，因此我们应该保持升级到最新的补丁版本，以保证数据的完整和安全。</p><p>综上所述，最新的LTS版本，而且补丁版本也是要最新的，是最好的选择</p><h3 id="Django的版本规划"><a href="#Django的版本规划" class="headerlink" title="Django的版本规划"></a>Django的版本规划</h3><p><a href="https://www.djangoproject.com/download/#supported-versions">官网地址</a></p><p><img src="5.png" alt="Django发布路线图"></p><h3 id="主要几个版本的支持时间"><a href="#主要几个版本的支持时间" class="headerlink" title="主要几个版本的支持时间"></a>主要几个版本的支持时间</h3><p><img src="2.png" alt=""></p><p>所以在当下，最合适的版本应该为2.2.9，虽然官网推荐使用最新版本3.0.2，但是生产环境还是不要去做小白鼠了，你懂的。</p><h3 id="Django是python的Web框架，应该为其选择哪个版本的python解释器呢？"><a href="#Django是python的Web框架，应该为其选择哪个版本的python解释器呢？" class="headerlink" title="Django是python的Web框架，应该为其选择哪个版本的python解释器呢？"></a>Django是python的Web框架，应该为其选择哪个版本的python解释器呢？</h3><p><a href="https://docs.djangoproject.com/en/3.2/faq/install/#faq-python-version-support">官网地址</a></p><div class="table-container"><table><thead><tr><th>Django 版本</th><th>Python 版本</th></tr></thead><tbody><tr><td>2.2</td><td>3.5、3.6、3.7、3.8（在 2.2.8 中添加）、3.9（在 2.2.17 中添加）</td></tr><tr><td>3.0</td><td>3.6、3.7、3.8、3.9（在 3.0.11 中添加）</td></tr><tr><td>3.1</td><td>3.6、3.7、3.8、3.9（在 3.1.3 中新增）</td></tr><tr><td>3.2</td><td>3.6、3.7、3.8、3.9、3.10（在 3.2.9 中新增）</td></tr></tbody></table></div><p>django的版本我们推荐3.2.10LTS，所以搭配的python解释器版本，我们应该选择python3.5之后的解释器</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django==<span class="number">3.2</span><span class="number">.10</span><span class="comment"># 在命令行执行该命令</span></span><br></pre></td></tr></table></figure><p>查看</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip show django</span><br></pre></td></tr></table></figure><h2 id="五-django框架的使用"><a href="#五-django框架的使用" class="headerlink" title="五 django框架的使用"></a>五 django框架的使用</h2><h3 id="命令行创建并启动Django项目"><a href="#命令行创建并启动Django项目" class="headerlink" title="命令行创建并启动Django项目"></a>命令行创建并启动Django项目</h3><p>如果使用的是我们自定义的框架来开发web应用，需要事先生成框架包含的一系列基础文件，然后在此基础上进行开发。</p><p>如果使用的是Django框架来开发web应用，同样需要事先生成Django框架包含的一系列基础文件，然后在此基础上进行开发。</p><p>但Django框架更为方便的地方在于它已经为我们提供了一系列命令来帮我们快速地生成这一系列基础文件</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 在命令行执行以下指令，会在当前目录生成一个名为mysite的文件夹，该文件夹中包含Django框架的一系列基础文件</span><br><span class="line">django-admin startproject mysite</span><br></pre></td></tr></table></figure><p>创建功能模块</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd mysite # 切换到mysite目录下,执行以下命令</span><br><span class="line">python manage.py startapp app01 # 创建功能模块app01，此处的startapp代表创建application下的一个功能模块。例如我们要开发application是京东商城，京东商城这个大项目下有一个订单管理模块，我们可以将其命名为app01</span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver 8001 # 在浏览器输入：http://127.0.0.1：8001 会看到Django的欢迎页面。</span><br></pre></td></tr></table></figure><h3 id="基于Pycharm创建Django项目以及虚拟环境"><a href="#基于Pycharm创建Django项目以及虚拟环境" class="headerlink" title="基于Pycharm创建Django项目以及虚拟环境"></a>基于Pycharm创建Django项目以及虚拟环境</h3><p>文件—-》新建项目—》Django</p><p><img src="1.png" alt="image-20211227140051762"></p><p>在命令创建好的django，用pycharm加载目录</p><p>文件—-打开创建好的django目录—-然后设置中—设置python解释器</p><p><img src="image-20211227140533463.png" alt="image-20211227140533463"></p><p>pytcharm 报错<code>ImportError: DLL load failed while importing _sqlite3: 找不到指定的模块。</code>是因为anaconda虚拟环境,<a href="https://blog.csdn.net/qq_46214369/article/details/117260528">CSDN</a></p><p><strong>去<a href="https://www.sqlite.org/download.html">官网</a>根据系统对应的版本下载相应DDL文件。</strong></p><p>复制黏贴到，Pycharm加载anaconda配置的<code>虚拟环境目录下</code>的DLLs下</p><p><img src="image-20211227142830737.png" alt="image-20211227142830737"></p><h3 id="Django项目目录结构"><a href="#Django项目目录结构" class="headerlink" title="Django项目目录结构"></a>Django项目目录结构</h3><p>截目录树的图(按照下述目录截图)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysite <span class="comment"># 文件夹</span></span><br><span class="line">    ├── app01   <span class="comment"># 应用目录</span></span><br><span class="line">    │   └── migrations <span class="comment"># 数据库迁移记录</span></span><br><span class="line">    │   └── admin.py  <span class="comment"># django后台管理</span></span><br><span class="line">    │   └── apps.py<span class="comment"># 注册使用</span></span><br><span class="line">    │   └── models.py<span class="comment"># 数据库相关的 模型类(orm)</span></span><br><span class="line">    │   └── tests.py <span class="comment"># 测试文件</span></span><br><span class="line">    │   └── views.py <span class="comment"># 测试文件</span></span><br><span class="line">    ├── mysite  <span class="comment"># 项目目录</span></span><br><span class="line">    │   └── asgi.py</span><br><span class="line">    │   └── settings.py   <span class="comment"># 配置</span></span><br><span class="line">    │   └── urls.py<span class="comment"># 路由和视图函数的对应关系(路由层)</span></span><br><span class="line">    │   └── wsgi.py<span class="comment"># runserver命令就使用wsgiref模块做简单的web server</span></span><br><span class="line">    └── templates <span class="comment"># 文件夹</span></span><br><span class="line">    ├── manage.py <span class="comment"># 管理文件. django的入口文件</span></span><br></pre></td></tr></table></figure><p>关键文件介绍</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-manage.py---项目入口，终端脚本命令，提供一系列用于生成文件或者目录的命令，也叫脚手架</span><br><span class="line">-项目名            主应用开发目录，保存了项目中所有开发人员编写的代码，目录是生成项目指定的</span><br><span class="line">    -asgi.py      django3.0以后新增的，用于让django运行在异步编程模式的一个web应用对象</span><br><span class="line">    -settings.py  全局配置信息</span><br><span class="line">    -urls.py      总路由,请求地址跟视图函数的映射关系</span><br><span class="line">    -wsgi.py      wsgi项目运行在wsgi服务器时的入口文件，本质上来说 manage.py runserver 内部调用的就是wsgi</span><br><span class="line">-app名字</span><br><span class="line">    -migrations   数据库迁移的记录</span><br><span class="line">    -models.py    数据库表模型</span><br><span class="line">    -views.py     处理业务逻辑的函数，简称视图函数</span><br></pre></td></tr></table></figure><p>配置文件settings.py</p><div class="table-container"><table><thead><tr><th style="text-align:left">BASE_DIR</th><th style="text-align:left">项目目录</th></tr></thead><tbody><tr><td style="text-align:left">DEBUG</td><td style="text-align:left">上线之后改为False.</td></tr><tr><td style="text-align:left">ALLOWED_HOSTS</td><td style="text-align:left">允许访问的主机. 上线之后可以写<code>*</code>. 星号表示所有</td></tr><tr><td style="text-align:left">INSTALLED_APPS</td><td style="text-align:left">注册的app. (app就是功能模块)</td></tr><tr><td style="text-align:left">MIDDLEWARE</td><td style="text-align:left">Django中简件</td></tr><tr><td style="text-align:left">TEMPLATES</td><td style="text-align:left">HTML文件存放路径配置</td></tr><tr><td style="text-align:left">DATABASES</td><td style="text-align:left">项目指定的数据库</td></tr><tr><td style="text-align:left">LANGUAGE_CODE</td><td style="text-align:left">文字编码</td></tr><tr><td style="text-align:left">TIME_ZONE</td><td style="text-align:left">时间</td></tr></tbody></table></div><h3 id="命令行与pycharm创建django项目的区别"><a href="#命令行与pycharm创建django项目的区别" class="headerlink" title="命令行与pycharm创建django项目的区别"></a>命令行与pycharm创建django项目的区别</h3><p><strong>用命令行创建django项目:</strong> 用命令行创建django项目不会自动创建templates文件夹. 并且也不会自动配置templates文件夹路径, 需要你手动到setting.py配置文件中找到TEMPLATES在DIRS对应的[]中加上<code>BASE_DIR / &#39;templates&#39;</code>或者<code>os.path.join(BASE_DIR, &#39;templates&#39;)</code><br><strong>用pycharm创建django项目:</strong> 会自动创建并且自动配置路径, 还可以自动帮你创建一个应用并且自动注册, 不过只能在创建项目的时候创一个, 后续的应用(app01)创建需要手动到settings.py配置文件中找到INSTALLED_APPS中添加<code>app01.apps.App01Config 或者 app01</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__))) </span><br><span class="line"></span><br><span class="line"><span class="comment"># pycharm创建</span></span><br><span class="line">TEMPLATES = [</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;DIRS&#x27;</span>: [BASE_DIR / <span class="string">&#x27;templates&#x27;</span>],</span><br><span class="line">    ...</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 命令行创建</span></span><br><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;DIRS&#x27;</span>: [],</span><br><span class="line">        ...</span><br><span class="line">]  </span><br></pre></td></tr></table></figure><h3 id="基于Django实现的一个简单示例"><a href="#基于Django实现的一个简单示例" class="headerlink" title="基于Django实现的一个简单示例"></a>基于Django实现的一个简单示例</h3><h3 id="（1）url-py"><a href="#（1）url-py" class="headerlink" title="（1）url.py"></a>（1）url.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path,re_path <span class="comment"># 导入re_path</span></span><br><span class="line"><span class="comment">#导入views模块</span></span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls), <span class="comment"># 该行代码是新建项目时django框架自动生成的，暂且忽略，暂时注释掉也可以，随着一步步深入介绍，都会讲到它的专门用法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 新增地址http://127.0.0.1:8001/index/与index函数的映射关系</span></span><br><span class="line">    re_path(<span class="string">r&#x27;^index/$&#x27;</span>,views.index), <span class="comment"># r&#x27;^index/$&#x27;会匹配url地址的路径部分</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="（2）视图"><a href="#（2）视图" class="headerlink" title="（2）视图"></a>（2）视图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="comment"># 必须定义一个request形参，request相当于我们自定义框架时的environ参数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">import</span> datetime</span><br><span class="line">    now=datetime.datetime.now()</span><br><span class="line">    ctime=now.strftime(<span class="string">&quot;%Y-%m-%d %X&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&quot;index.html&quot;</span>,&#123;<span class="string">&quot;ctime&quot;</span>:ctime&#125;) <span class="comment"># render会读取templates目录下的index.html文件的内容并且用字典中的ctime的值替换模版中的&#123;&#123; ctime &#125;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="（3）模版"><a href="#（3）模版" class="headerlink" title="（3）模版"></a>（3）模版</h3><p>在templates目录下新建文件index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>当前时间:&#123;&#123; ctime &#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver 8001 # 在浏览器输入：http://127.0.0.1:8001/index/ 会看到当前时间。</span><br></pre></td></tr></table></figure><h2 id="六-MVC和MTV模型"><a href="#六-MVC和MTV模型" class="headerlink" title="六 MVC和MTV模型"></a>六 MVC和MTV模型</h2><p>Web服务器开发领域里著名的MVC模式，所谓MVC就是把Web应用分为模型(M)，控制器(C)和视图(V)三层，他们之间以一种插件式的、松耦合的方式连接在一起，模型负责业务对象与数据库的映射(ORM)，视图负责与用户的交互(页面)，控制器接受用户的输入调用模型和视图完成用户的请求，其示意图如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># M:Model模型负责业务对象与数据库的映射(ORM),用于数据库打交道</span></span><br><span class="line"><span class="comment"># V:view视图负责与用户的交互(html页面)</span></span><br><span class="line"><span class="comment"># C:Controller控制器接受用户的输入调用模型和视图完成用户的请求</span></span><br></pre></td></tr></table></figure><p><img src="877318-20180418162558974-92667466.png" alt="img"></p><p>MVC的软件架构模式具有有耦合性低、重用性高、生命周期成本低等优点，主要用于web框架，常用的开发语言，有java，php，node.js等等。  Django框架的设计模式借鉴了MVC框架的思想，也是分成三部分，不同之处在于它拆分的三部分为：Model（模型）、Template（模板）和View（视图），也就是MTV模式，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Model(模型)：负责业务对象与数据库的对象(ORM)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Template(模版)：负责如何把页面展示给用户</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># View(视图)：负责业务逻辑，并在适当的时候调用Model和Template</span></span><br><span class="line"></span><br><span class="line">此外，Django还有一个urls分发器，它的作用是将一个个URL的页面请求分发给不同的view处理，</span><br><span class="line">view再调用相应的Model和Template</span><br></pre></td></tr></table></figure><p>MTV模式与MVC本质上都是一样的，都是为了各组件保持松耦合关系，如下所示</p><p><img src="877318-20180418162350672-193671507.png" alt="img"></p><p>一般是用户通过浏览器向我们的服务器发起一个请求(request)，这个请求回去访问视图函数，（如果不涉及到数据调用，那么这个时候视图函数返回一个模板也就是一个网页给用户），视图函数调用模型，模型去数据库查找数据，然后逐级返回，视图函数把返回的数据填充到模板中空格中，最后返回网页给用户。</p><h2 id="七-Django框架的分层与请求生命周期"><a href="#七-Django框架的分层与请求生命周期" class="headerlink" title="七 Django框架的分层与请求生命周期"></a>七 Django框架的分层与请求生命周期</h2><p>综上，我们使用Django框架就是为了开发application，而application的工作过程本质就是根据不同的请求返回不同的数据，Django框架将这个工作过程细分为如下四层去实现</p><p>1、路由层（根据不同的地址执行不同的视图函数，详见urls.py）</p><p>2、视图层（定义处理业务逻辑的视图函数，详见views.py）</p><p>3、模型层 （跟数据库打交道的，详解models.py）</p><p>4、模板层（待返回给浏览器的html文件，详见templates）</p><p><img src="1497529-20201108173703964-641810819.jpg" alt="img"></p><p>这体现了一种解耦合的思想，下面我们开始详细介绍每一层</p>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux Shell 中 ()、(())、[]、[[]]、{} 的作用</title>
      <link href="/2021/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA/Linux%20Shell%20%E4%B8%AD%20()%E3%80%81(())%E3%80%81%5B%5D%E3%80%81%5B%5B%5D%5D%E3%80%81%7B%7D%20%E7%9A%84%E4%BD%9C%E7%94%A8/"/>
      <url>/2021/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA/Linux%20Shell%20%E4%B8%AD%20()%E3%80%81(())%E3%80%81%5B%5D%E3%80%81%5B%5B%5D%5D%E3%80%81%7B%7D%20%E7%9A%84%E4%BD%9C%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="一、小括号，圆括号（）"><a href="#一、小括号，圆括号（）" class="headerlink" title="一、小括号，圆括号（）"></a>一、小括号，圆括号（）</h2><p><strong>1、单小括号 ()</strong></p><p>①命令组。括号中的命令将会新开一个子shell顺序执行，所以括号中的变量不能够被脚本余下的部分使用。括号中多个命令之间用分号隔开，最后一个命令可以没有分号，各命令和括号之间不必有空格。</p><p>②命令替换。等同于<code>cmd</code>，<a href="http://mp.weixin.qq.com/s?__biz=MzI0MDQ4MTM5NQ%3D%3D&amp;chksm=e9189128de6f183e74243e993bf0715d8bea5bad56852a4f6d0fe6d884cbe3af07f2a27b01ae&amp;idx=1&amp;mid=2247496756&amp;scene=21&amp;sn=03c2d54ab2ac11ffc58266f964ee9e3a#wechat_redirect">shell</a>扫描一遍命令行，发现了 <code>cmd</code> 结构，便将(cmd)中的cmd执行一次，得到其标准输出，再将此输出放到原来命令。有些shell不支持，如tcsh。</p><p>③用于初始化数组。如：array=(a b c d)</p><p><strong>2、双小括号 (( ))</strong></p><p>①整数扩展。这种扩展计算是整数型的计算，不支持浮点型。((exp))结构扩展并计算一个算术表达式的值，如果表达式的结果为0，那么返回的退出状态码为1，或者 是”假”，而一个非零值的表达式所返回的退出状态码将为0，或者是”true”。若是逻辑判断，表达式exp为真则为1,假则为0。</p><p>②只要括号中的运算符、表达式符合C语言运算规则，都可用在((exp))中，甚至是三目运算符。作不同进位(如二进制、八进制、十六进制)运算时，输出结果全都自动转化成了十进制。如：echo((16#5f)) 结果为95 (16进位转十进制)</p><p>③单纯用 (( )) 也可重定义变量值，比如 a=5; ((a++)) 可将 $a 重定义为6</p><p>④常用于算术运算比较，双括号中的变量可以不使用符号前缀。括号内支持多个表达式用逗号分开。只要括号中的表达式符合C语言运算规则,比如可以直接使用for((i=0;i&lt;5;i++)),如果不使用双括号,则为foriin‘seq04‘或者foriin0..4。再如可以直接使用if((i&lt;5)), 如果不使用双括号, 则为if [ $i -lt 5 ]。</p><h2 id=""><a href="#" class="headerlink" title=" "></a> </h2><h2 id="二、中括号，方括号"><a href="#二、中括号，方括号" class="headerlink" title="二、中括号，方括号[]"></a>二、中括号，方括号[]</h2><p><strong>1、单中括号 []</strong></p><p>①<a href="http://mp.weixin.qq.com/s?__biz=MzI0MDQ4MTM5NQ%3D%3D&amp;chksm=e91b68a8de6ce1be5165b5e81d4e461c7d9267bd79d28646fe44b2c453f773fd49d6f663f2f1&amp;idx=1&amp;mid=2247486900&amp;scene=21&amp;sn=49a671a6509a70a8e71fff7ae0d22f2c#wechat_redirect">bash</a> 的内部命令，[和test是等同的。如果我们不用绝对路径指明，通常我们用的都是bash自带的命令。if/test结构中的左中括号是调用test的命令标识，右中括号是关闭条件判断的。这个命令把它的参数作为比较表达式或者作为文件测试，并且根据比较的结果来返回一个退出状态码。if/test结构中并不是必须右中括号，但是新版的Bash中要求必须这样。</p><p>②Test和[]中可用的比较运算符只有==和!=，两者都是用于字符串比较的，不可用于整数比较，整数比较只能使用-eq，-gt这种形式。无论是字符串比较还是整数比较都不支持大于号小于号。如果实在想用，对于字符串比较可以使用转义形式，如果比较”ab”和”bc”：[ ab &lt; bc ]，结果为真，也就是返回状态为0。[ ]中的逻辑与和逻辑或使用-a 和-o 表示。</p><p>③字符范围。用作正则表达式的一部分，描述一个匹配的字符范围。作为test用途的中括号内不能使用正则。</p><p>④在一个array 结构的上下文中，中括号用来引用数组中每个元素的编号。</p><p><strong>2、双中括号[[ ]]</strong></p><p>①[[是 bash 程序语言的关键字。并不是一个命令，[[ ]] 结构比[ ]结构更加通用。在[[和]]之间所有的字符都不会发生文件名扩展或者单词分割，但是会发生参数扩展和命令替换。</p><p>②支持字符串的模式匹配，使用=~操作符时甚至支持shell的正则表达式。字符串比较时可以把右边的作为一个模式，而不仅仅是一个字符串，比如[[ hello == hell? ]]，结果为真。[[ ]] 中匹配字符串或通配符，不需要引号。</p><p>③使用[[ … ]]条件判断结构，而不是[ …  ]，能够防止脚本中的许多逻辑错误。比如，&amp;&amp;、||、&lt;和&gt; 操作符能够正常存在于[[  ]]条件判断结构中，但是如果出现在[ ]结构中的话，会报错。比如可以直接使用if [[ $a != 1 &amp;&amp; $a != 2  ]], 如果不适用双括号, 则为if [ $a -ne 1] &amp;&amp; [ $a != 2 ]或者if [ $a -ne 1 -a  $a != 2 ]。</p><p>④bash把双中括号中的表达式看作一个单独的元素，并返回一个退出状态码。</p><p>例子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if ($i&lt;5) </span><br><span class="line">if [ $i -lt 5 ] </span><br><span class="line">if [ $a -ne 1 -a $a != 2 ] </span><br><span class="line">if [ $a -ne 1] &amp;&amp; [ $a != 2 ] </span><br><span class="line">if [[ $a != 1 &amp;&amp; $a != 2 ]] </span><br><span class="line">for i in $(seq 0 4);do echo $i;done</span><br><span class="line">for i in `seq 0 4`;do echo $i;done</span><br><span class="line">for ((i=0;i&lt;5;i++));do echo $i;done</span><br><span class="line">for i in &#123;0..4&#125;;do echo $i;done</span><br></pre></td></tr></table></figure><h2 id="三、大括号、花括号"><a href="#三、大括号、花括号" class="headerlink" title="三、大括号、花括号 {}"></a>三、大括号、花括号 {}</h2><p><strong>1、常规用法</strong></p><p>①大括号拓展。(通配(globbing))将对大括号中的文件名做扩展。在大括号中，不允许有空白，除非这个空白被引用或转义。第一种：对大括号中的以逗号分割的文件列表进行拓展。如 touch {a,b}.txt 结果为a.txt b.txt。第二种：对大括号中以点点（..）分割的顺序文件列表起拓展作用，如：touch  {a..d}.txt 结果为a.txt b.txt c.txt d.txt</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">ls</span> &#123;ex1,ex2&#125;.sh</span> </span><br><span class="line">ex1.sh ex2.sh </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">ls</span> &#123;ex&#123;1..3&#125;,ex4&#125;.sh</span> </span><br><span class="line">ex1.sh ex2.sh ex3.sh ex4.sh </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">ls</span> &#123;ex[1-3],ex4&#125;.sh</span> </span><br><span class="line">ex1.sh ex2.sh ex3.sh ex4.sh</span><br></pre></td></tr></table></figure><p>②代码块，又被称为内部组，这个结构事实上创建了一个匿名函数 。与小括号中的命令不同，大括号内的命令不会新开一个子<a href="http://mp.weixin.qq.com/s?__biz=MzI0MDQ4MTM5NQ%3D%3D&amp;chksm=e918a302de6f2a142eda86907f20174e882a1e016f4ee7a603372f2e5ac20ce30b527b19049b&amp;idx=2&amp;mid=2247501342&amp;scene=21&amp;sn=65f38ae2fb19ae1623a299e75a51419c#wechat_redirect">shell</a>运行，即脚本余下部分仍可使用括号内变量。括号内的命令间用分号隔开，最后一个也必须有分号。{}的第一个命令和左括号之间必须要有一个空格。</p><p><strong>2、几种特殊的替换结构</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;var:-string&#125;,<span class="variable">$&#123;var:+string&#125;</span>,<span class="variable">$&#123;var:=string&#125;</span>,<span class="variable">$&#123;var:?string&#125;</span></span></span><br></pre></td></tr></table></figure><p>①${var:-string}和${var:=string}:若变量var为空，则用在命令行中用string来替换${var:-string}，否则变量var不为空时，则用变量var的值来替换${var:-string}；对于${var:=string}的替换规则和${var:-string}是一样的，所不同之处是${var:=string}若var为空时，用string替换${var:=string}的同时，把string赋给变量var：${var:=string}很常用的一种用法是，判断某个变量是否赋值，没有的话则给它赋上一个默认值。</p><p>② ${var:+string}的替换规则和上面的相反，即只有当var不是空的时候才替换成string，若var为空时则不替换或者说是替换成变量 var的值，即空值。(因为变量var此时为空，所以这两种说法是等价的) </p><p>③${var:?string}替换规则为：若变量var不为空，则用变量var的值来替换${var:?string}；若变量var为空，则把string输出到标准错误中，并从脚本中退出。我们可利用此特性来检查是否设置了变量的值。</p><p>补充扩展：在上面这五种替换结构中string不一定是常值的，可用另外一个变量的值或是一种命令的输出。</p><p><strong>3、四种模式匹配替换结构</strong></p><p>模式匹配记忆方法：</p><ul><li><p>#是去掉左边(在键盘上#在$之左边)</p></li><li><p>%是去掉右边(在键盘上%在$之右边)</p></li><li><p>#和%中的单一符号是最小匹配，两个相同符号是最大匹配。</p></li></ul>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;var%pattern&#125;,<span class="variable">$&#123;var%%pattern&#125;</span>,<span class="variable">$&#123;var#pattern&#125;</span>,<span class="variable">$&#123;var##pattern&#125;</span></span></span><br></pre></td></tr></table></figure><p>第一种模式：${variable%pattern}，这种模式时，<a href="http://mp.weixin.qq.com/s?__biz=MzI0MDQ4MTM5NQ%3D%3D&amp;chksm=e918878ade6f0e9c253814dd697db0834346a1f04de28db2d5bb0c86f9ca8a868f8e1e6c2f71&amp;idx=1&amp;mid=2247492246&amp;scene=21&amp;sn=6fc4255dc410d257745fc76b31a1b36b#wechat_redirect">shell</a>在variable中查找，看它是否一给的模式pattern结尾，如果是，就从命令行把variable中的内容去掉右边最短的匹配模式</p><p>第二种模式：${variable%%pattern}，这种模式时，<a href="http://mp.weixin.qq.com/s?__biz=MzI0MDQ4MTM5NQ%3D%3D&amp;chksm=e91884c7de6f0dd1553eb42846ffe529c578e4652f987e47aca63f078d518baf125c93dbef1b&amp;idx=1&amp;mid=2247492059&amp;scene=21&amp;sn=979e157ee9c26602fb5ac97c19f4c314#wechat_redirect">shell</a>在variable中查找，看它是否一给的模式pattern结尾，如果是，就从命令行把variable中的内容去掉右边最长的匹配模式</p><p>第三种模式：${variable#pattern} 这种模式时，<a href="http://mp.weixin.qq.com/s?__biz=MzI0MDQ4MTM5NQ%3D%3D&amp;chksm=e91b7127de6cf83195fab6d7da4169ebf9aaaf458b271d832072cbed029de0752d003ddb970a&amp;idx=1&amp;mid=2247488571&amp;scene=21&amp;sn=6f29df5a384bd68ee20c752234e7ae69#wechat_redirect">shell</a>在variable中查找，看它是否一给的模式pattern开始，如果是，就从命令行把variable中的内容去掉左边最短的匹配模式</p><p>第四种模式：${variable##pattern} 这种模式时，<a href="http://mp.weixin.qq.com/s?__biz=MzI0MDQ4MTM5NQ%3D%3D&amp;chksm=e91b754bde6cfc5d7d43e9909b4ca70d26f62d7fdd8b63c181270f9d2a9b3f662afb9701e380&amp;idx=1&amp;mid=2247487575&amp;scene=21&amp;sn=10a24333a35eb1bb3c709d1816ca7172#wechat_redirect">shell</a>在variable中查找，看它是否一给的模式pattern结尾，如果是，就从命令行把variable中的内容去掉右边最长的匹配模式</p><p>这四种模式中都不会改变variable的值，其中，只有在pattern中使用了<em>匹配符号时，%和%%，#和##才有区别。结构中的pattern支持通配符，</em>表示零个或多个任意字符，?表示仅与一个任意字符匹配，[…]表示匹配中括号里面的字符，[!…]表示不匹配中括号里面的字符。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">var=testcase</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">echo</span> <span class="variable">$var</span></span> </span><br><span class="line">testcase </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">echo</span> <span class="variable">$&#123;var%s*e&#125;</span></span> </span><br><span class="line">testca </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">echo</span> <span class="variable">$var</span></span> </span><br><span class="line">testcase </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">echo</span> <span class="variable">$&#123;var%%s*e&#125;</span></span> </span><br><span class="line">te </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">echo</span> <span class="variable">$&#123;var#?e&#125;</span></span> </span><br><span class="line">stcase </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">echo</span> <span class="variable">$&#123;var##?e&#125;</span></span> </span><br><span class="line">stcase </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">echo</span> <span class="variable">$&#123;var##*e&#125;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">echo</span> <span class="variable">$&#123;var##*s&#125;</span></span> </span><br><span class="line">e </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">echo</span> <span class="variable">$&#123;var##test&#125;</span></span> </span><br><span class="line">case</span><br></pre></td></tr></table></figure><p><strong>4、字符串提取和替换</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;var:num&#125;,<span class="variable">$&#123;var:num1:num2&#125;</span>,<span class="variable">$&#123;var/pattern/pattern&#125;</span>,<span class="variable">$&#123;var//pattern/pattern&#125;</span></span></span><br></pre></td></tr></table></figure><p>第一种模式：${var:num}，这种模式时，<a href="http://mp.weixin.qq.com/s?__biz=MzI0MDQ4MTM5NQ%3D%3D&amp;chksm=e91b6ae1de6ce3f78b204c011e54d3e367703eb66de91aea4c0501d51e92f89000f4fbc8e3a1&amp;idx=1&amp;mid=2247487485&amp;scene=21&amp;sn=5b4b45aca89a898a388100b09672f1af#wechat_redirect">shell</a>在  var中提取第num个字符到末尾的所有字符。若num为正数，从左边0处开始；若num为负数，从右边开始提取字串，但必须使用在冒号后面加空格或一个数字或整个num加上括号，如${var: -2}、${var:1-3}或${var:(-2)}。    </p><p>第二种模式：${var:num1:num2}，num1是位置，num2是长度。表示从$var字符串的第$num1个位置开始提取长度为$num2的子串。不能为负数。</p><p>第三种模式：${var/pattern/pattern}表示将var字符串的第一个匹配的pattern替换为另一个pattern。</p><p>第四种模式：${var//pattern/pattern}表示将var字符串中的所有能匹配的pattern替换为另一个pattern。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@centos ~]# var=/home/centos </span><br><span class="line">[root@centos ~]# echo $var </span><br><span class="line">/home/centos</span><br><span class="line">[root@centos ~]# echo $&#123;var:5&#125; </span><br><span class="line">/centos</span><br><span class="line">[root@centos ~]# echo $&#123;var: -6&#125; </span><br><span class="line">centos </span><br><span class="line">[root@centos ~]# echo $&#123;var:(-6)&#125; </span><br><span class="line">centos </span><br><span class="line">[root@centos ~]# echo $&#123;var:1:4&#125; </span><br><span class="line">home </span><br><span class="line">[root@centos ~]# echo $&#123;var/o/h&#125; </span><br><span class="line">/hhme/centos</span><br><span class="line">[root@centos ~]# echo $&#123;var//o/h&#125; </span><br><span class="line">/hhme/cenths</span><br></pre></td></tr></table></figure><h2 id="四、符号-后的括号"><a href="#四、符号-后的括号" class="headerlink" title="四、符号$后的括号"></a>四、符号$后的括号</h2><p>（1）${a} 变量a的值, 在不引起歧义的情况下可以省略大括号。</p><p>（2）$(cmd) 命令替换，和<code>cmd</code>效果相同，结果为<a href="http://mp.weixin.qq.com/s?__biz=MzI0MDQ4MTM5NQ%3D%3D&amp;chksm=e91b621ade6ceb0cd55fa63ee03b107c8061cb594518be45048cf7c0a9de7172c0f3bdad821b&amp;idx=1&amp;mid=2247485190&amp;scene=21&amp;sn=68f72ee8fba05e8cc2e1a61699df93b1#wechat_redirect">shell</a>命令cmd的输，过某些Shell版本不支持$()形式的命令替换, 如tcsh。</p><p>（3）$((expression)) 和<code>exprexpression</code>效果相同, 计算数学表达式exp的数值, 其中exp只要符合C语言的运算规则即可, 甚至三目运算符和逻辑表达式都可以计算。</p><h2 id="-1"><a href="#-1" class="headerlink" title=" "></a> </h2><h2 id="五、使用"><a href="#五、使用" class="headerlink" title="五、使用"></a>五、使用</h2><p><strong>多条命令执行</strong></p><p>（1）单小括号，(cmd1;cmd2;cmd3) 新开一个子<a href="http://mp.weixin.qq.com/s?__biz=MzI0MDQ4MTM5NQ%3D%3D&amp;chksm=e91b6144de6ce852f04452614fe9093a1bdfed5bee9f7f39b58fe26386a5bf034321e7f7ec0e&amp;idx=1&amp;mid=2247484504&amp;scene=21&amp;sn=bd1c900d953a6c1aa03846c587be56df#wechat_redirect">shell</a>顺序执行命令cmd1,cmd2,cmd3, 各命令之间用分号隔开, 最后一个命令后可以没有分号。</p><p>（2）单大括号，{ cmd1;cmd2;cmd3;} 在当前shell顺序执行命令cmd1,cmd2,cmd3, 各命令之间用分号隔开, 最后一个命令后必须有分号, 第一条命令和左括号之间必须用空格隔开。</p><p>对{}和()而言, 括号中的重定向符只影响该条命令， 而括号外的重定向符影响到括号中的所有命令。</p><blockquote><p>原文作者：<a href="https://blog.csdn.net/xiaoxiaole0313">程序员小乐</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos Axel下载安装使用</title>
      <link href="/2021/07/11/%E8%AE%A1%E7%AE%97%E6%9C%BA/axel%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85/"/>
      <url>/2021/07/11/%E8%AE%A1%E7%AE%97%E6%9C%BA/axel%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="源码安装"><a href="#源码安装" class="headerlink" title="源码安装"></a>源码安装</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">一、旧版</span><br><span class="line"></span><br><span class="line">wget &#x27;http://www.ha97.com/code/axel-2.4.tar.gz&#x27;</span><br><span class="line">tar -xf axel-2.4.tar.gz</span><br><span class="line">cd axel-2.4</span><br><span class="line">yum -y install gcc</span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line">二、新版</span><br><span class="line"></span><br><span class="line">新版解决了 Too many redirects-重定向过多</span><br><span class="line">原因是你的 axel 版本太低了!(包括yum install axel的安装)</span><br><span class="line">安装 AXEL</span><br><span class="line">wget https://github.com/axel-download-accelerator/axel/releases/download/v2.17.10/axel-2.17.10.tar.bz2</span><br><span class="line">tar -xjvf axel-2.17.9.tar.bz2</span><br><span class="line">cd axel-2.17.9</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">yum groupinstall <span class="string">&quot;Development tools&quot;</span> -y</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">yum install openssl-devel wget -y</span></span><br><span class="line">./configure &amp;&amp; make &amp;&amp; make install</span><br><span class="line">axel -n1000  https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.7.1-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure><h1 id="Mac-OS-X-Homebrew"><a href="#Mac-OS-X-Homebrew" class="headerlink" title="Mac OS X (Homebrew)"></a>Mac OS X (Homebrew)</h1><p>在 Mac OS X (Homebrew) 上构建 </p><p>您需要为 autotools 提供一些额外的选项，以便它可以找到 gettext 和openssl。 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GETTEXT=/usr/local/opt/gettext</span><br><span class="line">OPENSSL=/usr/local/opt/openssl</span><br><span class="line">PATH=&quot;$GETTEXT/bin:$PATH&quot;</span><br><span class="line"></span><br><span class="line">[ -x configure ] || autoreconf -fiv -I$GETTEXT/share/aclocal/</span><br><span class="line"></span><br><span class="line">CFLAGS=&quot;-I$GETTEXT/include -I$OPENSSL/include&quot; \</span><br><span class="line">LDFLAGS=-L$GETTEXT/lib ./configure</span><br></pre></td></tr></table></figure><h1 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">axel -h</span><br><span class="line">Axel 2.17.10 (linux-gnu)</span><br><span class="line">Usage: axel [options] url1 [url2] [url...]</span><br><span class="line"></span><br><span class="line">--max-speed=x-s x指定最大速度（字节/秒）</span><br><span class="line">--num-connections=x-n x指定最大连接数</span><br><span class="line">--max-redirect=x指定重定向的最大数量</span><br><span class="line">--output=f-o f指定本地输出文件</span><br><span class="line">--search[=n]-S[n]搜索镜像并从n台服务器下载</span><br><span class="line">--ipv4-4使用ipv4协议</span><br><span class="line">--ipv6-6使用ipv6协议</span><br><span class="line">--header=x-H x添加HTTP头域，格式为“Header: Value”。</span><br><span class="line">--user-agent=x-U x有些web服务器会根据不同的User-Agent返回不同的内容。这个参数就可以用来指定User-Agent头域。缺省时此头域值包括“Axel”，它的版本号以及平台信息。</span><br><span class="line">--no-proxy-N只是不要使用任何代理服务器</span><br><span class="line">--insecure-k不验证SSL证书</span><br><span class="line">--no-clobber-c如果文件已经存在，则跳过下载</span><br><span class="line">--quiet-q不向标准输出平台(stdout)输入信息。</span><br><span class="line">--verbose-v更多状态信息 </span><br><span class="line">--alternate-a指定这个参数后将显示一个交替变化的进度条。它显示不同的线程的进度和状态，以及当前的速度和估计的剩余下载时间。</span><br><span class="line">--help-h返回参数的简要介绍信息。</span><br><span class="line">--timeout=x-T x设置I/O和连接超时</span><br><span class="line">--version-V显示版本信息。</span><br><span class="line"></span><br><span class="line">Visit https://github.com/axel-download-accelerator/axel/issues to report bugs</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速生成web服务器http.server模块</title>
      <link href="/2021/07/07/Python/%E5%A5%87%E9%97%BB%E6%9D%82%E8%B0%88/python%E4%B8%8BSimpleHTTPServer%E7%94%A8%E6%B3%95/"/>
      <url>/2021/07/07/Python/%E5%A5%87%E9%97%BB%E6%9D%82%E8%B0%88/python%E4%B8%8BSimpleHTTPServer%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>SimpleHTTPServer是Python 2自带的一个模块，是Python的Web服务器。在Python 3已经合并到http.server模块中。如果不指定端口号默认的是8000端口。在局域网中使用web去访问http:/IP:8000即可<br>python2语法：python -m SimpleHTTPServer</p><p><img src="20190401174145380.png" alt="img"> </p><p>python3语法：python -m http.server</p><p><img src="20190401174328570.png" alt="img"></p><p>也可以在语句后门添加特定端口例如1234，在局域网中去使用web进行访问<a href="http://IP:1234即可">http://IP:1234即可</a></p><p><img src="1.png" alt="img"></p><p><img src="20190401174427357.png" alt="img"></p><p>SimpleHTTPServer有一个特性，如果待共享的目录下有index.html，那么index.html文件会被视为默认主页；如果不存在index.html文件，那么就会显示整个目录列表。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 模块 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一键搭建vsFTP</title>
      <link href="/2021/02/06/%E8%AE%A1%E7%AE%97%E6%9C%BA/Linux%E4%B8%80%E9%94%AE%E6%90%AD%E5%BB%BAvsFTP/"/>
      <url>/2021/02/06/%E8%AE%A1%E7%AE%97%E6%9C%BA/Linux%E4%B8%80%E9%94%AE%E6%90%AD%E5%BB%BAvsFTP/</url>
      
        <content type="html"><![CDATA[<p>read -p “创建用户 :” name<br>read -p “密码 :” passwd</p><h1 id="下载vsftpd"><a href="#下载vsftpd" class="headerlink" title="下载vsftpd"></a>下载vsftpd</h1><p>yum -y install vsftpd<br>yum -y install openssl<br>cd /etc/vsftpd<br>mv vsftpd.conf vsftpd.conf.bak</p><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><p>cat&gt;vsftpd.conf&lt;&lt;EOF<br>anonymous_enable=NO<br>local_enable=YES<br>write_enable=YES<br>local_umask=022<br>dirmessage_enable=YES<br>xferlog_enable=YES<br>connect_from_port_20=YES<br>xferlog_std_format=YES<br>listen=YES<br>listen_port=56118<br>pam_service_name=vsftpd<br>userlist_enable=NO<br>tcp_wrappers=YES<br>accept_timeout=1800<br>connect_timeout=1800<br>data_connection_timeout=1800<br>idle_session_timeout=1800<br>chroot_local_user=YES<br>ftpd_banner=Welcom to JG FTP server<br>virtual_use_local_privs=YES<br>guest_enable=YES<br>guest_username=virtualftp<br>pam_service_name=vsftpdftp.vu<br>user_config_dir=/etc/vsftpd/user_config_dir<br>local_root=/data/ftp<br>EOF</p><h1 id="创建系统用户"><a href="#创建系统用户" class="headerlink" title="创建系统用户"></a>创建系统用户</h1><p>useradd virtualftp<br>mkdir -p /etc/vsftpd/user_config_dir<br>mkdir -p /data/ftp<br>chown -R virtualftp.virtualftp /data/ftp</p><h1 id="ftp-验证模块"><a href="#ftp-验证模块" class="headerlink" title="ftp 验证模块"></a>ftp 验证模块</h1><p>cat&gt;/etc/pam.d/vsftpdftp.vu &lt;&lt;EOF<br>auth required /lib64/security/pam_userdb.so db=/etc/vsftpd/vsftpdlogin</p><p>account required /lib64/security/pam_userdb.so db=/etc/vsftpd/vsftpdlogin<br>EOF</p><h1 id="添加账号-单行账号，双行是密码"><a href="#添加账号-单行账号，双行是密码" class="headerlink" title="添加账号,单行账号，双行是密码"></a>添加账号,单行账号，双行是密码</h1><p>cat &gt;accuser.txt&lt;&lt;EOF<br>$name<br>$passwd<br>EOF</p><p>yum -y install db4*<br>db_load -T -t hash -f ./accuser.txt /etc/vsftpd/vsftpdlogin.db</p><p>cat &gt;/etc/vsftpd/user_config_dir/$name &lt;&lt;EOF<br>anon_world_readable_only=NO<br>write_enable=YES<br>anon_upload_enable=YES<br>anon_other_write_enable=YES<br>anon_mkdir_write_enable=YES<br>local_root=/data/ftp<br>EOF<br>service vsftpd restart<br>echo “vsFTP搭建成功，账号：密码：端口===$name:$passwd:56118”</p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vsFTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>秒懂区块链</title>
      <link href="/2021/01/25/%E7%A7%92%E6%87%82%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
      <url>/2021/01/25/%E7%A7%92%E6%87%82%E5%8C%BA%E5%9D%97%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>区块链是一个没有中心，能安全存储和传送消息，还能达成和共识完成交易的网络系统。</p><p>区块链被列入国家”十三五”规划，是下一代信息革命的引爆区，在即将到来的5G时代与我们每个人息息相关。</p><p>比特币是一种基于区块链技术的加密货币。随着比特币的价格猛涨，区块链概念也在国内火了起来。一时间<code>币圈</code>,<code>链圈</code>风起云涌，热钱源源涌入。</p><p>内部原理不清，则外部功能不明。接下来我们就来简单了解些我知道的区块链知识。</p><h1 id="技术篇"><a href="#技术篇" class="headerlink" title="技术篇"></a>技术篇</h1><h2 id="区块链是什么"><a href="#区块链是什么" class="headerlink" title="区块链是什么"></a>区块链是什么</h2><p>区块链是什么：</p><p>区块链是一个公开的数据列表，其中的每一份记录被称作一个区块。这些区块想链条一样链成一串，越来越长，所以就叫做区块链！</p><p>有点像成语接龙：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">成语接龙的相邻词语之间必须有某种联系，才能形成一个链条。区块链与此类似，不过相邻区块之间的联系要复杂得多。</span><br><span class="line">​ 成语接龙：穷极无聊 ---&gt; 聊胜于无  ---&gt; 无言以对  ---&gt; 对酒当歌</span><br><span class="line"></span><br><span class="line">​ 区块链：区块1  ---&gt; 区块2  ---&gt; 区块3  ---&gt;  区块4</span><br></pre></td></tr></table></figure><p>区块链与比特币</p><p>区块链就是一个没有中心，能安全存储和传送信息，还能达成共识和完成交易的网络系统。</p><p>比特币就是一个典型的区块链系统。虽然称作<code>币</code>，但它却没有实体形态，也没有银行或政府控制它的运行。</p><blockquote><p>比特币</p><p>创始于：2009年</p><p>创始人：中本聪</p><p>目前流通量约1770万枚（2019年）</p><p>预计数量上限2100万枚（2140年）</p></blockquote><h2 id="中心式系统，全靠领导英明"><a href="#中心式系统，全靠领导英明" class="headerlink" title="中心式系统，全靠领导英明"></a>中心式系统，全靠领导英明</h2><p>区块链是一个分布式系统，又叫去中心化系统。想理解这个概念，要从节点说起。节点是指网络通信中的各种设备比如：电脑、手机、服务器等</p><p>下图中每个圆点代表一个节点，左边是中心式网络，右边是分布式网络</p><p><img src="xitong.png" alt="系统"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">中心式网络：</span><br><span class="line"></span><br><span class="line">​ 中心式网络就像一条大章鱼，一个大脑，很多出售。每个节点都信任和服从同一个`老大哥`，老大哥想干坏事，可就没有人能拦住他哟。</span><br><span class="line"></span><br><span class="line">​ 转账就是中心式的，你转账到朋友手机的钱，实际你的钱要先到中心式服务器，处理完后中心服务器在发回你朋友的手机里，而且来来回回要好几趟。</span><br><span class="line"></span><br><span class="line">​ 中心服系统依赖一个繁忙的服务器。如果这个服务器挂了，整个系统就都瘫痪了---（集群化可以来解决这个问题，将流量分摊到每个机器上）</span><br><span class="line"></span><br><span class="line">分布式网络：</span><br><span class="line"></span><br><span class="line">​ 分布式系统就像珊瑚，每个节点都是平等的，他们互相交流，却不互相服从，看起来像一盘散沙，邻里间却能和谐相处，“共建家园”。</span><br><span class="line"></span><br><span class="line">​ 因为区块链是分布式的没有领导所以没有宕机的风险，但是没有统治者就会出现偷懒，撒谎的风险，最终进入弱肉强食的混乱状态。</span><br><span class="line"></span><br><span class="line">​ 分布式系统必须找到一个人人平等的情况下确保信息真实可信的方法，这就是传说的“共识问题”。</span><br></pre></td></tr></table></figure><blockquote><ol><li>网络结构分为中心式与分布式</li><li>区块链采用与分布式网络</li><li>分布式网络难点在于如何达成共识</li></ol></blockquote><h2 id="拜占庭将军问题"><a href="#拜占庭将军问题" class="headerlink" title="拜占庭将军问题"></a>拜占庭将军问题</h2><p>很久以前有两位拜占庭将军合作打某一城堡，只有两位将军统一出兵才能获胜，如果一位将军出兵将会被消灭。因此两个人必须协调行动，送信的传信兵必须突破敌方哨卡，一旦抓住必死无疑。</p><p>A将军的传信兵去给B将军传信，B将军又觉得A将军不知道他的传信兵到底把信息传达给B将军没，B将军又让A将军的传信兵回去告诉A将军他收到了，A将军的传信兵回到A将军阵营汇报给A将军，A将军又觉得B将军不知道A将军的传信兵到底把B将军的知道的消息传送到了，A将军又让自己的传信兵去B将军阵营高告诉B将军他收到了B将军知道A将军告诉他的信息。如此反反复复没有答案。</p><p>​            </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux命令</title>
      <link href="/2021/01/25/ssh/"/>
      <url>/2021/01/25/ssh/</url>
      
        <content type="html"><![CDATA[<p>查看现在登陆的用户及登陆过的用户</p><h1 id="who命令"><a href="#who命令" class="headerlink" title="who命令"></a>who命令</h1><p>Linux who命令用于显示系统中有哪些使用者正在上面，显示的资料包含了使用者 ID、使用的终端机、从哪边连上来的、上线时间、呆滞时间、CPU 使用量、动作等等。</p><p>使用权限：所有使用者都可使用。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">who - [husfV] [user]</span><br></pre></td></tr></table></figure><p><strong>参数说明</strong>：</p><ul><li>-H 或 —heading：显示各栏位的标题信息列；</li><li>-i 或 -u 或 —idle：显示闲置时间，若该用户在前一分钟之内有进行任何动作，将标示成”.”号，如果该用户已超过24小时没有任何动作，则标示出”old”字符串；</li><li>-m：此参数的效果和指定”am i”字符串相同；</li><li>-q 或—count：只显示登入系统的帐号名称和总人数；</li><li>-s：此参数将忽略不予处理，仅负责解决who指令其他版本的兼容性问题；</li><li>-w 或-T或—mesg或—message或—writable：显示用户的信息状态栏；</li><li>—help：在线帮助；</li><li>—version：显示版本信息。</li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>显示当前登录系统的用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">who</span>  //显示当前登录系统的用户</span></span><br><span class="line">root   tty7     2014-05-13 12:12 (:0)</span><br><span class="line">root   pts/0    2014-05-14 17:09 (:0.0)</span><br><span class="line">root   pts/1    2014-05-14 18:51 (192.168.1.17)</span><br><span class="line">root   pts/2    2014-05-14 19:48 (192.168.1.17)</span><br></pre></td></tr></table></figure><p>显示标题栏</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">who</span> -H</span></span><br><span class="line">NAME   LINE     TIME       COMMENT</span><br><span class="line">root   tty7     2014-05-13 12:12 (:0)</span><br><span class="line">root   pts/0    2014-05-14 17:09 (:0.0)</span><br><span class="line">root   pts/1    2014-05-14 18:51 (192.168.1.17)</span><br><span class="line">root   pts/2    2014-05-14 19:48 (192.168.1.17)</span><br></pre></td></tr></table></figure><p>显示用户登录来源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">who</span> -l -H</span></span><br><span class="line">NAME   LINE     TIME       IDLE     PID COMMENT</span><br><span class="line">LOGIN  tty4     2014-05-13 12:11        852 id=4</span><br><span class="line">LOGIN  tty5     2014-05-13 12:11        855 id=5</span><br><span class="line">LOGIN  tty2     2014-05-13 12:11        862 id=2</span><br><span class="line">LOGIN  tty3     2014-05-13 12:11        864 id=3</span><br><span class="line">LOGIN  tty6     2014-05-13 12:11        867 id=6</span><br><span class="line">LOGIN  tty1     2014-05-13 12:11       1021 id=1</span><br></pre></td></tr></table></figure><p>显示终端属性</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">who</span> -T -H</span></span><br><span class="line">NAME    LINE     TIME       COMMENT</span><br><span class="line">root   + tty7     2014-05-13 12:12 (:0)</span><br><span class="line">root   + pts/0    2014-05-14 17:09 (:0.0)</span><br><span class="line">root   - pts/1    2014-05-14 18:51 (192.168.1.17)</span><br><span class="line">root   - pts/2    2014-05-14 19:48 (192.168.1.17)</span><br></pre></td></tr></table></figure><p>只显示当前用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">who</span> -m -H</span></span><br><span class="line">NAME   LINE     TIME       COMMENT</span><br><span class="line">root   pts/1    2014-05-14 18:51 (192.168.1.17)</span><br></pre></td></tr></table></figure><p>精简模式显示</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">who</span> -q</span></span><br><span class="line">root root root root</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">users</span>=4</span></span><br></pre></td></tr></table></figure><h1 id="last命令"><a href="#last命令" class="headerlink" title="last命令"></a>last命令</h1><p>Linux last 命令用于显示用户最近登录信息。</p><p>使用权限：所有使用者。</p><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">shell&gt;</span><span class="language-bash">&gt; last [options]</span></span><br></pre></td></tr></table></figure><p><strong>参数说明</strong>：</p><ul><li>-R 省略 hostname 的栏位</li><li>-num 展示前 num 个</li><li>username 展示 username 的登入讯息</li><li>tty 限制登入讯息包含终端机代号</li></ul><h3 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-R 不显示登录系统或终端的主机名称或IP</span><br><span class="line">-a 将登录系统或终端的主机名过IP地址显示在最后一行</span><br><span class="line">-d 将IP地址转成主机名称</span><br><span class="line">-I 显示特定IP登录情况。</span><br><span class="line">-o 读取有linux-libc5应用编写的旧类型wtmp文件</span><br><span class="line">-x 显示系统关闭、用户登录和退出的历史</span><br><span class="line">-F 显示登录的完整时间</span><br><span class="line">-w 在输出中显示完整的用户名或域名</span><br></pre></td></tr></table></figure><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><p>第一列：用户名</p><p>第二列：终端位置（pts/0伪终端，意味着从SSH或telnet等工具远程连接的用户，图形界面终端归于此类。tty0直接连接到计算机或本地连接的用户。后面的数字代表连接编号）</p><p>第三列：登录IP或内核（如果是：0.0或者什么都没有，意味着用户通过本地终端连接。除了重启活动，内核版本会显示在状态中）</p><p>第四列：开始时间</p><p>第五列：结束时间（still login in尚未退出，down直到正常关机，crash直到强制关机）</p><p>第六列：持续时间</p><p>指定显示记录的数量（显示记录中最后登录的数量）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@xnyh ~]# last -10 </span><br><span class="line">root     pts/1        129.204.519.11    Thu Feb 25 03:09   still logged in   </span><br><span class="line">wangnian pts/0        101.231.234.11   Thu Feb 25 03:00 - 04:00  (01:00)    </span><br><span class="line">wangnian pts/1        101.231.234.11   Wed Feb 24 01:26 - 02:27  (01:01)    </span><br><span class="line">wangnian pts/5        101.231.234.11   Wed Feb 24 00:03 - 01:03  (01:00)    </span><br><span class="line">wangnian pts/4        101.231.234.11   Tue Feb 23 23:59 - 01:03  (01:04)    </span><br><span class="line">wangnian pts/3        101.231.234.11   Tue Feb 23 23:58 - 01:27  (01:29)    </span><br><span class="line">wangnian pts/2        101.231.234.11   Tue Feb 23 23:58 - 00:57  (00:59)    </span><br><span class="line">wangnian pts/1        101.231.234.11   Tue Feb 23 23:23 - 00:23  (01:00)    </span><br><span class="line">wangnian pts/0        101.231.234.11   Tue Feb 23 23:23 - 01:04  (01:40)    </span><br><span class="line">root     pts/3        129.204.519.11    Tue Feb 23 21:46 - 23:03  (01:16)</span><br></pre></td></tr></table></figure><p>指定查询的文件，原本默认的是wtmp</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@xnyh ~]# last -10 -f /var/log/btmp</span><br></pre></td></tr></table></figure><p> 显示指定时间之前的记录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@ftp 2021022512314]# last -10 -t 20210221000000</span><br><span class="line">root     pts/4        114.82.16.196     Sat Feb 20 22:17 - 23:17  (01:00)    </span><br><span class="line">root     pts/3        101.231.234.12   Sat Feb 20 21:17 - 22:19  (01:02)    </span><br><span class="line">root     pts/3        101.231.234.12   Sat Feb 20 20:01 - 21:02  (01:00)    </span><br><span class="line">root     pts/3        101.231.234.12   Sat Feb 20 18:42 - 19:43  (01:00)    </span><br><span class="line">root     pts/3        101.231.234.12   Sat Feb 20 16:38 - 17:40  (01:01)    </span><br><span class="line">root     pts/4        101.231.234.12   Sat Feb 20 15:45 - 16:46  (01:00)    </span><br><span class="line">root     pts/3        101.231.234.12   Sat Feb 20 14:58 - 16:00  (01:01)    </span><br><span class="line">root     pts/5        101.231.234.12   Sat Feb 20 14:19 - 15:39  (01:20)    </span><br><span class="line">root     pts/4        101.231.234.12   Sat Feb 20 14:09 - 15:30  (01:20)    </span><br><span class="line">root     pts/3        101.231.234.12   Sat Feb 20 13:30 - 14:21  (00:50</span><br></pre></td></tr></table></figure><h1 id="ssh-key"><a href="#ssh-key" class="headerlink" title="ssh-key"></a>ssh-key</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[wangxian@37wan ~]$ chmod 755 .ssh/</span><br><span class="line">[wangxian@37wan ~]$ chmod 644 .ssh/.keys</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>直播源</title>
      <link href="/2021/01/21/%E6%95%99%E7%A8%8B/%E7%9B%B4%E6%92%AD%E6%BA%90/"/>
      <url>/2021/01/21/%E6%95%99%E7%A8%8B/%E7%9B%B4%E6%92%AD%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<h1 id="四川成都电信源（182-138-51-71）"><a href="#四川成都电信源（182-138-51-71）" class="headerlink" title="四川成都电信源（182.138.51.71）"></a>四川成都电信源（182.138.51.71）</h1><p>现在电信公开的有公网的静态直播源不多，目前这套节目只发现以下一些地址，自测胡建电信宽带很流畅。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">#EXTM3U</span><br><span class="line">#EXTINF:-1,直播九曲黄河 4M1080</span><br><span class="line">http://182.138.51.71/PLTV/88888920/224/3221225795/index.m3u8</span><br><span class="line">#EXTINF:-1,风景 4M1080</span><br><span class="line">http://182.138.51.71/PLTV/88888920/224/3221225794/index.m3u8</span><br><span class="line">#EXTINF:-1,CCTV1 Max6M/3M1080</span><br><span class="line">http://182.138.51.71/PLTV/88888920/224/3221225793/index.m3u8</span><br><span class="line">#EXTINF:-1,CCTV1 Max6M1080</span><br><span class="line">http://182.138.51.71/PLTV/88888920/224/3221225792/index.m3u8</span><br><span class="line">#EXTINF:-1,四川卫视 8M1080</span><br><span class="line">http://182.138.51.71/PLTV/88888920/224/3221225782/index.m3u8</span><br><span class="line">#EXTINF:-1,CCTV1 576</span><br><span class="line">http://182.138.51.71/PLTV/88888920/224/3221225698/index.m3u8</span><br><span class="line">#EXTINF:-1,CCTV1 720</span><br><span class="line">http://182.138.51.71/PLTV/88888920/224/3221225697/index.m3u8</span><br><span class="line">#EXTINF:-1,CCTV13 720</span><br><span class="line">http://182.138.51.71/PLTV/88888920/224/3221225658/index.m3u8</span><br><span class="line">#EXTINF:-1,东南卫视 720</span><br><span class="line">http://182.138.51.71/PLTV/88888920/224/3221225598/index.m3u8</span><br><span class="line">#EXTINF:-1,东方卫视 720+576</span><br><span class="line">http://182.138.51.71/PLTV/88888920/224/3221225541/index.m3u8</span><br><span class="line">#EXTINF:-1,云南卫视 720</span><br><span class="line">http://182.138.51.71/PLTV/88888920/224/3221225601/index.m3u8</span><br><span class="line">#EXTINF:-1,内蒙古卫视 576</span><br><span class="line">http://182.138.51.71/PLTV/88888920/224/3221225606/index.m3u8</span><br><span class="line">#EXTINF:-1,北京卫视 720+576</span><br><span class="line">http://182.138.51.71/PLTV/88888920/224/3221225543/index.m3u8</span><br><span class="line">#EXTINF:-1,吉林卫视 720</span><br><span class="line">http://182.138.51.71/PLTV/88888920/224/3221225599/index.m3u8</span><br><span class="line">#EXTINF:-1,四川卫视 576</span><br><span class="line">http://182.138.51.71/PLTV/88888920/224/3221225695/index.m3u8</span><br><span class="line">#EXTINF:-1,四川卫视 720+576</span><br><span class="line">http://182.138.51.71/PLTV/88888920/224/3221225539/index.m3u8</span><br><span class="line">#EXTINF:-1,四川卫视 720</span><br><span class="line">http://182.138.51.71/PLTV/88888920/224/3221225696/index.m3u8</span><br><span class="line">#EXTINF:-1,天津卫视 720+576</span><br><span class="line">http://182.138.51.71/PLTV/88888920/224/3221225537/index.m3u8</span><br><span class="line">#EXTINF:-1,宁夏卫视 576</span><br><span class="line">http://182.138.51.71/PLTV/88888920/224/3221225583/index.m3u8</span><br><span class="line">#EXTINF:-1,安徽卫视 720+576</span><br><span class="line">http://182.138.51.71/PLTV/88888920/224/3221225595/index.m3u8</span><br><span class="line">#EXTINF:-1,山东卫视 720+576</span><br><span class="line">http://182.138.51.71/PLTV/88888920/224/3221225534/index.m3u8</span><br><span class="line">#EXTINF:-1,山西卫视 720</span><br><span class="line">http://182.138.51.71/PLTV/88888920/224/3221225588/index.m3u8</span><br><span class="line">#EXTINF:-1,广东卫视 720+576</span><br><span class="line">http://182.138.51.71/PLTV/88888920/224/3221225535/index.m3u8</span><br><span class="line">#EXTINF:-1,广西卫视 576</span><br><span class="line">http://182.138.51.71/PLTV/88888920/224/3221225594/index.m3u8</span><br><span class="line">#EXTINF:-1,新疆卫视 720</span><br><span class="line">http://182.138.51.71/PLTV/88888920/224/3221225608/index.m3u8</span><br><span class="line">#EXTINF:-1,江苏卫视 720+576</span><br><span class="line">http://182.138.51.71/PLTV/88888920/224/3221225545/index.m3u8</span><br><span class="line">#EXTINF:-1,江西卫视 720</span><br><span class="line">http://182.138.51.71/PLTV/88888920/224/3221225596/index.m3u8</span><br><span class="line">#EXTINF:-1,河北卫视 576</span><br><span class="line">http://182.138.51.71/PLTV/88888920/224/3221225590/index.m3u8</span><br><span class="line">#EXTINF:-1,河南卫视 576</span><br><span class="line">http://182.138.51.71/PLTV/88888920/224/3221225604/index.m3u8</span><br><span class="line">#EXTINF:-1,海南卫视 576</span><br><span class="line">http://182.138.51.71/PLTV/88888920/224/3221225592/index.m3u8</span><br><span class="line">#EXTINF:-1,深圳卫视 720+576</span><br><span class="line">http://182.138.51.71/PLTV/88888920/224/3221225542/index.m3u8</span><br><span class="line">#EXTINF:-1,湖北卫视 720+576</span><br><span class="line">http://182.138.51.71/PLTV/88888920/224/3221225536/index.m3u8</span><br><span class="line">#EXTINF:-1,甘肃卫视 720</span><br><span class="line">http://182.138.51.71/PLTV/88888920/224/3221225602/index.m3u8</span><br><span class="line">#EXTINF:-1,西藏卫视 720</span><br><span class="line">http://182.138.51.71/PLTV/88888920/224/3221225603/index.m3u8</span><br><span class="line">#EXTINF:-1,贵州卫视 576</span><br><span class="line">http://182.138.51.71/PLTV/88888920/224/3221225597/index.m3u8</span><br><span class="line">#EXTINF:-1,辽宁卫视 720+576</span><br><span class="line">http://182.138.51.71/PLTV/88888920/224/3221225605/index.m3u8</span><br><span class="line">#EXTINF:-1,重庆卫视 720+576</span><br><span class="line">http://182.138.51.71/PLTV/88888920/224/3221225600/index.m3u8</span><br><span class="line">#EXTINF:-1,陕西卫视 720</span><br><span class="line">http://182.138.51.71/PLTV/88888920/224/3221225587/index.m3u8</span><br><span class="line">#EXTINF:-1,青海卫视 576</span><br><span class="line">http://182.138.51.71/PLTV/88888920/224/3221225589/index.m3u8</span><br><span class="line">#EXTINF:-1,黑龙江卫视 720</span><br><span class="line">http://182.138.51.71/PLTV/88888920/224/3221225533/index.m3u8</span><br><span class="line">#EXTINF:-1,四川康巴卫视 576</span><br><span class="line">http://182.138.51.71/PLTV/88888920/224/3221225586/index.m3u8</span><br><span class="line">#EXTINF:-1,四川公共乡村 720</span><br><span class="line">http://182.138.51.71/PLTV/88888920/224/3221225614/index.m3u8</span><br><span class="line">#EXTINF:-1,四川妇女儿童 720</span><br><span class="line">http://182.138.51.71/PLTV/88888920/224/3221225615/index.m3u8</span><br><span class="line">#EXTINF:-1,四川影视文艺 720+576</span><br><span class="line">http://182.138.51.71/PLTV/88888920/224/3221225538/index.m3u8</span><br><span class="line">#EXTINF:-1,四川文化旅游 720+576</span><br><span class="line">http://182.138.51.71/PLTV/88888920/224/3221225553/index.m3u8</span><br><span class="line">#EXTINF:-1,四川新闻 720+576</span><br><span class="line">http://182.138.51.71/PLTV/88888920/224/3221225551/index.m3u8</span><br><span class="line">#EXTINF:-1,四川科教 720</span><br><span class="line">http://182.138.51.71/PLTV/88888920/224/3221225644/index.m3u8</span><br><span class="line">#EXTINF:-1,四川经济 720+576</span><br><span class="line">http://182.138.51.71/PLTV/88888920/224/3221225552/index.m3u8</span><br><span class="line">#EXTINF:-1,熊猫新闻 720</span><br><span class="line">http://182.138.51.71/PLTV/88888920/224/3221225693/index.m3u8</span><br><span class="line">#EXTINF:-1,温江 720</span><br><span class="line">http://182.138.51.71/PLTV/88888920/224/3221225796/index.m3u8</span><br></pre></td></tr></table></figure><h1 id="来吧-展示"><a href="#来吧-展示" class="headerlink" title="来吧-展示"></a>来吧-展示</h1><p><img src="zhiboyuan.png" alt="直播源"></p><h1 id="在线直播源转换"><a href="#在线直播源转换" class="headerlink" title="在线直播源转换"></a>在线直播源转换</h1><p><a href="https://guihet.com/tvlistconvert.html">黑鸟博客</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mac应用程序无法打开或文件损坏的处理方法</title>
      <link href="/2020/12/16/%E6%95%99%E7%A8%8B/Mac%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80%E6%88%96%E6%96%87%E4%BB%B6%E6%8D%9F%E5%9D%8F%E7%9A%84%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95/"/>
      <url>/2020/12/16/%E6%95%99%E7%A8%8B/Mac%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80%E6%88%96%E6%96%87%E4%BB%B6%E6%8D%9F%E5%9D%8F%E7%9A%84%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Mac应用程序无法打开或文件损坏的处理方法"><a href="#Mac应用程序无法打开或文件损坏的处理方法" class="headerlink" title="Mac应用程序无法打开或文件损坏的处理方法"></a>Mac应用程序无法打开或文件损坏的处理方法</h1><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>大多数用户在安装 Mac 应用时，经常会遇到提示 “ <em>XXX.app 已损坏，打不开。您应该将它移到废纸篓</em> ” 或 “ <em>打不开 XXX.app，因为它来自身份不明的开发者</em> ”</p><h3 id="遇到这种情况，解决的方法很简单，步骤如下："><a href="#遇到这种情况，解决的方法很简单，步骤如下：" class="headerlink" title="遇到这种情况，解决的方法很简单，步骤如下："></a>遇到这种情况，解决的方法很简单，步骤如下：</h3><ol><li><p>打开<em>系统偏好设置</em>界面，进入<em>安全性与隐私</em></p></li><li><p>点按左下角的锁头图标，解锁更改权限</p></li><li><p>将允许从以下位置下载的应用，更改为 “ <em>任何来源</em> ” ，然后再打开应用即可</p></li></ol><h3 id="若没有“任何来源”这个选项（macOS-Sierra-10-12及以上的用户可能会遇到），按以下步骤执行："><a href="#若没有“任何来源”这个选项（macOS-Sierra-10-12及以上的用户可能会遇到），按以下步骤执行：" class="headerlink" title="若没有“任何来源”这个选项（macOS Sierra 10.12及以上的用户可能会遇到），按以下步骤执行："></a>若没有“任何来源”这个选项（macOS Sierra 10.12及以上的用户可能会遇到），按以下步骤执行：</h3><ol><li>打开终端（Terminal.app）</li><li>拷贝粘贴 <em>sudo spctl —master-disable</em>，按回车键</li><li>输入你的账户密码，按回车键确认执行（该密码不会显示，直接输入即可）</li></ol><h3 id="如已经开启任何来源，但依旧打不开（macOS-Catalina-10-15以上会遇到）按以下步骤执行："><a href="#如已经开启任何来源，但依旧打不开（macOS-Catalina-10-15以上会遇到）按以下步骤执行：" class="headerlink" title="如已经开启任何来源，但依旧打不开（macOS Catalina 10.15以上会遇到）按以下步骤执行："></a>如已经开启任何来源，但依旧打不开（macOS Catalina 10.15以上会遇到）按以下步骤执行：</h3><p>1、打开终端；</p><p>2、输入以下命令，回车；</p><blockquote><p><em>sudo xattr -d com.apple.quarantine /Applications/xxxx.app</em></p></blockquote><p>注意：<code>/Applications/xxxx.app</code> 换成你的App路径</p><p>3、重启App即可。</p><p>详细步骤参考：<a href="https://www.macbl.com/article/tips/2123">《macOS Catalina (macOS 10.15) 已损坏无法打开解决办法》</a></p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>如安装应用时，出现 <em>“ 打不开 XXX.app，因为它来自身份不明的开发者 ”</em> ，并提示你的软件在什么位置什么时间下载了磁盘影像。如图所示：</p><h3 id="遇到这种情况，方法如下："><a href="#遇到这种情况，方法如下：" class="headerlink" title="遇到这种情况，方法如下："></a>遇到这种情况，方法如下：</h3><p>1、将软件放入“应用程序”后，点击软件 <em>右键-打开</em> ，如图所示：</p><p>2、弹出以下对话框后，你打开即可。</p><h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><p>某些软件的最新版本在 <em>macOS Mojave 10.14 及以上系统</em>会出现报错无法使用的情况，可在终端输入以下代码即可运行：</p><blockquote><p><em>sudo codesign —force —deep —sign - 文件位置（直接将应用拖进去即可）</em></p></blockquote><p>（注意最后一个 <em>-</em> 与 <em>文件位置</em> 中间有一个 <em>空格</em>）</p><p>P.S. 还可以戳戳视频教程：<a href="https://www.macbl.com/video/tips/1689"> 《 三分钟轻松搞定各种应用程序打不开的问题》</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Openvpn一键安装脚本</title>
      <link href="/2020/12/04/%E6%95%99%E7%A8%8B/Openvpn%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC/"/>
      <url>/2020/12/04/%E6%95%99%E7%A8%8B/Openvpn%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<blockquote><p>GitHub:<a href="https://github.com/angristan/openvpn-install">https://github.com/angristan/openvpn-install</a></p></blockquote><p>下载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -O https://raw.githubusercontent.com/angristan/openvpn-install/master/openvpn-install.sh</span><br><span class="line">sh openvpn-install.sh</span><br></pre></td></tr></table></figure><p>以下基本全部默认即回车就行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></td><td class="code"><pre><span class="line">欢迎使用OpenVPN安装程序！</span><br><span class="line"></span><br><span class="line">git存储库位于：https://github.com/angristan/openvpn-install</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">在开始安装之前我需要问你几个问题。</span><br><span class="line"></span><br><span class="line">您可以保留默认选项，如果可以，只需按enter键。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">我需要知道你想要OpenVPN监听的网络接口的IPv4地址。</span><br><span class="line"></span><br><span class="line">除非您的服务器在NAT之后，否则它应该是您的公共IPv4地址。</span><br><span class="line"></span><br><span class="line">IP地址：192.168.0.91</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">似乎这个服务器在NAT后面。它的公共IPv4地址或主机名是什么？</span><br><span class="line"></span><br><span class="line">我们需要它让客户机连接到服务器。</span><br><span class="line"></span><br><span class="line">公用IPv4地址或主机名：159.138.135.207</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">正在检查IPv6连接。。。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">您的主机似乎没有IPv6连接。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">是否要启用IPv6支持（NAT）？[是/否]：n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">您希望OpenVPN监听哪个端口？</span><br><span class="line"></span><br><span class="line">1） 默认值：1194</span><br><span class="line"></span><br><span class="line">2） 风俗习惯</span><br><span class="line"></span><br><span class="line">3） 随机[49152-65535]</span><br><span class="line"></span><br><span class="line">端口选择[1-3]：1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">您希望OpenVPN使用什么协议？</span><br><span class="line"></span><br><span class="line">UDP更快。除非它不可用，否则不应该使用TCP。</span><br><span class="line"></span><br><span class="line">1） UDP协议</span><br><span class="line"></span><br><span class="line">2） TCP协议</span><br><span class="line"></span><br><span class="line">方案[1-2]：2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">您想在VPN中使用哪些DNS解析程序？</span><br><span class="line"></span><br><span class="line">1） 来自系统的电流/决议.conf)</span><br><span class="line"></span><br><span class="line">2） 自托管DNS解析程序（未绑定）</span><br><span class="line"></span><br><span class="line">3） Cloudflare（Anycast:全球）</span><br><span class="line"></span><br><span class="line">4） Quad9（选播：全球）</span><br><span class="line"></span><br><span class="line">5） Quad9未经审查（选播：全球）</span><br><span class="line"></span><br><span class="line">6） FDN（法国）</span><br><span class="line"></span><br><span class="line">（七）DNS.监视（德国）</span><br><span class="line"></span><br><span class="line">8） OpenDNS（Anycast:全球）</span><br><span class="line"></span><br><span class="line">9） 谷歌（Anycast:全球）</span><br><span class="line"></span><br><span class="line">10） Yandex Basic（俄罗斯）</span><br><span class="line"></span><br><span class="line">11） AdGuard DNS（Anycast:全球）</span><br><span class="line"></span><br><span class="line">12） NextDNS（Anycast:全球）</span><br><span class="line"></span><br><span class="line">13） 定制</span><br><span class="line"></span><br><span class="line">DNS[1-12]：11</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">要使用压缩吗？这是不推荐的，因为漩涡攻击利用它。</span><br><span class="line"></span><br><span class="line">是否启用压缩？[是/否]：n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">是否要自定义加密设置？</span><br><span class="line"></span><br><span class="line">除非您知道自己在做什么，否则应该坚持使用脚本提供的默认参数。</span><br><span class="line"></span><br><span class="line">请注意，无论您选择什么，脚本中显示的所有选项都是安全的。（与OpenVPN的默认设置不同）</span><br><span class="line"></span><br><span class="line">看到了吗https://github.com/angristan/openvpn安装安全性-和加密来了解更多。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">自定义加密设置？[是/否]：n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">好吧，这就是我所需要的。我们准备好设置您的OpenVPN服务器了。</span><br><span class="line"></span><br><span class="line">您将能够在安装结束时生成客户端。</span><br><span class="line"></span><br><span class="line">按任意键继续。。。</span><br><span class="line"></span><br><span class="line">已加载内：FastTestMirror、产品id、禁用搜索的回购、subscription manager</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">此系统未向授权服务器注册。您可以使用订阅管理器进行注册。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">从缓存主机文件加载镜像速度</span><br><span class="line"></span><br><span class="line">*底座：centos.usonyx.net网站</span><br><span class="line"></span><br><span class="line">*埃佩尔：我的镜子。千兆位.com网站</span><br><span class="line"></span><br><span class="line">*附加服务：centos.usonyx.net网站</span><br><span class="line"></span><br><span class="line">*更新：centos.usonyx.net网站</span><br><span class="line"></span><br><span class="line">正在解决依赖关系</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">--&gt; </span><span class="language-bash">正在检查事务</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">---&gt;</span><span class="language-bash">软-释放.noarch.0.7-12将被升级</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">---&gt;</span><span class="language-bash">软-释放.noarch.0.7-13将被更</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">--&gt; </span><span class="language-bash">解决依赖关系完成</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">依赖关系解决</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">==================================================================================================================================================================================================================</span><br><span class="line"></span><br><span class="line">项目包</span><br><span class="line"></span><br><span class="line">==================================================================================================================================================================================================================</span><br><span class="line"></span><br><span class="line">正在更新:</span><br><span class="line"></span><br><span class="line">epel发布noarch 7-13 epel 15 k</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">事务概要</span><br><span class="line"></span><br><span class="line">==================================================================================================================================================================================================================</span><br><span class="line"></span><br><span class="line">升级1软</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">总下载量：15 k</span><br><span class="line"></span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/openvpn-server@server.service to /etc/systemd/system/openvpn-server@.service.</span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/iptables-openvpn.service to /etc/systemd/system/iptables-openvpn.service.</span><br><span class="line"></span><br><span class="line">Tell me a name for the client.</span><br><span class="line">The name must consist of alphanumeric character. It may also include an underscore or a dash.</span><br><span class="line">Client name: qqq</span><br><span class="line"></span><br><span class="line">Do you want to protect the configuration file with a password?</span><br><span class="line">(e.g. encrypt the private key with a password)</span><br><span class="line">   1) Add a passwordless client</span><br><span class="line">   2) Use a password for the client</span><br><span class="line">Select an option [1-2]: 1</span><br><span class="line"></span><br><span class="line">Note: using Easy-RSA configuration from: /etc/openvpn/easy-rsa/vars</span><br><span class="line">Using SSL: openssl OpenSSL 1.0.2k-fips  26 Jan 2017</span><br><span class="line">Generating a 256 bit EC private key</span><br><span class="line">writing new private key to &#x27;/etc/openvpn/easy-rsa/pki/easy-rsa-1189.xDRljc/tmp.YZio3L&#x27;</span><br><span class="line">-----</span><br><span class="line">Using configuration from /etc/openvpn/easy-rsa/pki/easy-rsa-1189.xDRljc/tmp.nnabLW</span><br><span class="line">Check that the request matches the signature</span><br><span class="line">Signature ok</span><br><span class="line">The Subject&#x27;s Distinguished Name is as follows</span><br><span class="line">commonName            :ASN.1 12:&#x27;qqq&#x27;</span><br><span class="line">Certificate is to be certified until Mar 10 11:03:31 2023 GMT (825 days)</span><br><span class="line"></span><br><span class="line">Write out database with 1 new entries</span><br><span class="line">Data Base Updated</span><br><span class="line"></span><br><span class="line">Client qqq added.</span><br><span class="line"></span><br><span class="line">The configuration file has been written to /root/qqq.ovpn.</span><br><span class="line">Download the .ovpn file and import it in your OpenVPN client.</span><br></pre></td></tr></table></figure><p>查看状态与端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl status openvpn-server@server</span><br><span class="line">ss -anpt | grep 1194</span><br></pre></td></tr></table></figure><p>下载对应操作系统的OpenVPN客户端把/root/qqq.ovpn导入进去,点击连接即可</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> LINUX </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Openvpn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7操作系统搭建Snipe-IT资产管理系统</title>
      <link href="/2020/11/27/%E6%95%99%E7%A8%8B/Snipe-IT%E8%B5%84%E4%BA%A7%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E6%90%AD%E5%BB%BA/"/>
      <url>/2020/11/27/%E6%95%99%E7%A8%8B/Snipe-IT%E8%B5%84%E4%BA%A7%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h1><p> Snipe-IT 是一个免费的开源IT资产管理web应用程序。是一款基于Laravel5.4的免费的开源IT资产管理系统。Snipe-IT用于IT资产管理，IT部门可通过它能够跟踪谁拥有哪些笔记本电脑，何时购买、包含哪些软件许可证和可用的附件等。</p><p> 主要的功能特性：可托管在云主机、强大的REST API、快速更新、保证APP和Platform的安全性、一键备份、LDAP登录/用户同步。</p><h1 id="二、环境准备"><a href="#二、环境准备" class="headerlink" title="二、环境准备"></a>二、环境准备</h1><p> 此时安装使用的系统如下：</p><p> 1、操作系统：</p><p> Centos7.6： CentOS Linux release 7.6.1810 (Core) </p><p> 2、Apache</p><p>此系统搭建使用的是 Apache2.4.6</p><p> 3、PHP</p><p>此系统搭建使用的是 PHP7.2</p><p> 4、数据库</p><p>此系统搭建使用的数据库版本是：Mariadb5.5.60</p><h1 id="三、安装前准备"><a href="#三、安装前准备" class="headerlink" title="三、安装前准备"></a>三、安装前准备</h1><p> 1、系统更新，在此用的系统是最小化安装的Centos7.6版本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install epel-release</span><br><span class="line">yum update -y</span><br></pre></td></tr></table></figure><p> 2、使用yum安装Apache 2.4.6</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install -y httpd httpd-devel</span><br><span class="line"></span><br><span class="line">httpd -v</span><br></pre></td></tr></table></figure><p> 3、使用yum安装Mariadb 数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y mariadb mariadb-server</span><br></pre></td></tr></table></figure><p> 4、源码安装PHP、配置Apache支持</p><p>安装PHP所需要的依赖环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y make gcc wget openssl readline-devel openssl-devel libxslt-devel gmp-devel bzip2-devel freetype-devel libjpeg-devel php-mcrypt libmcrypt libmcrypt-devel autoconf freetype gd jpegsrc libmcrypt libpng libpng-devel libjpeg libxml2 libxml2-devel zlib curl curl-devel</span><br></pre></td></tr></table></figure><p> 下载PHP安装包，并解压：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /home</span><br><span class="line">wget http://cn2.php.net/get/php-7.2.3.tar.gz/from/this/mirror</span><br><span class="line">tar zxvf mirror</span><br></pre></td></tr></table></figure><p> 对PHP7.2.3 进行源码编译安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd php-7.2.3</span><br><span class="line">ls</span><br></pre></td></tr></table></figure><p>进行检查配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/local/php7.2.3 --with-config-file-path=/etc --enable-fpm --enable-inline-optimization --disable-debug --disable-rpath --enable-shared --enable-soap --with-apxs2=/usr/sbin/apxs --with-libxml-dir --with-xmlrpc --with-openssl --with-mcrypt --with-mhash --with-pcre-regex --with-sqlite3 --with-zlib --enable-bcmath --with-iconv --with-bz2 --enable-calendar --with-curl --with-cdb --enable-dom --enable-exif --enable-fileinfo --enable-filter --with-pcre-dir --enable-ftp --with-gd --with-openssl-dir --with-jpeg-dir --with-png-dir --with-zlib-dir --with-freetype-dir --enable-gd-native-ttf --enable-gd-jis-conv --with-gettext --with-gmp --with-mhash --enable-json --enable-mbstring --enable-mbregex --enable-mbregex-backtrack --with-libmbfl --with-onig --enable-pdo --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --with-zlib-dir --with-pdo-sqlite --with-readline --enable-session --enable-shmop --enable-simplexml --enable-sockets --enable-sysvmsg --enable-sysvsem --enable-sysvshm --enable-wddx --with-libxml-dir --with-xsl --enable-zip --enable-mysqlnd-compression-support --with-pear --enable-opcache</span><br></pre></td></tr></table></figure><p>（PS：此操作步骤大概检查一分钟左右，只要不出错，就一直执行，直到出现下面界面：）</p><p><img src="image-20201127161620736.png" alt="php"><br>以上检查没有错误之后，下面就开始进行安装和编译了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>(PS:此过程大概会持续三到五分钟左右，根据自己的设备性能决定，只要不报错，就等待自行安装，直至出现下面的界面：）</p><p><img src="image-20201127161718632.png" alt="php"><br> 等待以上的安装完成后，下面需要配置php的环境变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure><p>在该文件的最下面添加以下的信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PATH=$PATH:/usr/local/php7.2.3/bin</span><br><span class="line">export PATH</span><br></pre></td></tr></table></figure><p><img src="image-20201127161806079.png" alt=""><br>使其环境变量生效： </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p>配置php-fpm,完成以下的操作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> cd /home/php-7.2.3</span><br><span class="line"></span><br><span class="line">cp -f php.ini-production /etc/php.ini</span><br><span class="line"></span><br><span class="line">cp /usr/local/php7.2.3/etc/php-fpm.conf.default /usr/local/php7.2.3/etc/php-fpm.conf</span><br><span class="line"></span><br><span class="line">cp /usr/local/php7.2.3/etc/php-fpm.d/www.conf.default /usr/local/php7.2.3/etc/php-fpm.d/www.conf</span><br><span class="line"></span><br><span class="line">cp sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm</span><br><span class="line"></span><br><span class="line">chmod +x /etc/init.d/php-fpm</span><br></pre></td></tr></table></figure><p>启动 php-fpm</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service php-fpm start</span><br></pre></td></tr></table></figure><p>查看开启状态：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof -i:9000</span><br></pre></td></tr></table></figure><p>(PS:此次未安装lsof，可使用yum先安装lsof）</p><p>修改httpd.conf文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/httpd/conf/httpd.conf</span><br></pre></td></tr></table></figure><p>需要修改的信息如下：</p><p>（1）在AddType application*后面加如下一行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AddType application/x-httpd-php .php .phtml</span><br></pre></td></tr></table></figure><p>（2）在DirectoryIndex index.html加上index.php</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DirectoryIndex index.php index.html</span><br></pre></td></tr></table></figure><p>（3）确保httd.conf文件中包含以下字段，如不包含则加入此字段 （已存在，不存在需要加上）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LoadModule php7_module /usr/lib64/httpd/modules/libphp7.so</span><br></pre></td></tr></table></figure><p>重启 httpd服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service httpd restart</span><br></pre></td></tr></table></figure><p>检验httpd的PHP支持和版本信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;&lt;?php phpinfo(); ?&gt;&quot; &gt;&gt; /var/www/html/index.php</span><br></pre></td></tr></table></figure><p>重启服务和查看httpd状态：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart httpd</span><br><span class="line"></span><br><span class="line">systemctl status httpd</span><br></pre></td></tr></table></figure><p>浏览器输入服务器地址，检验PHP是否安装成功：</p><p>（PS：操作此步骤之前，需要关闭服务器的防火墙，或者添加一下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. firewall-cmd --permanent --zone=**public** --**add**-port=80/tcp</span><br><span class="line"></span><br><span class="line">2. systemctl restart firewalld.service）否则浏览器不能正常显示。</span><br></pre></td></tr></table></figure><h1 id="四、安装Snipe-IT"><a href="#四、安装Snipe-IT" class="headerlink" title="四、安装Snipe-IT"></a>四、安装Snipe-IT</h1><p> 1、初始化并创建snipeit数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service mariadb start  # 启动maraidb服务</span><br><span class="line"></span><br><span class="line">mysql_secure_installation  #初始化数据库服务</span><br></pre></td></tr></table></figure><p><img src="image-20201127162523301.png" alt=""><br>登陆数据库，创建对应用户及对应的数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line"></span><br><span class="line">mysql&gt; create database snipeit;</span><br><span class="line"></span><br><span class="line">mysql&gt; grant all on snipeit.* to &#x27;snipeit&#x27;@&#x27;%&#x27; identified by &#x27;snipeIT_3069&#x27;;</span><br><span class="line"></span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line"></span><br><span class="line">mysql&gt; exit</span><br></pre></td></tr></table></figure><p> 2、安装composer</p><p>什么是composer：</p><p>Composer 是由 Jordi Boggiano 和 Nils Aderman 创造的一个命令行工具，它的使命就是帮你为项目自动安装所依赖的开发包。Composer 中的很多理念都借鉴自 npm 和 Bundler，如果你对这两个工具有所了解的话，就会在 composer 中发现他们的身影。Composer 包含了一个依赖解析器，用来处理开发包之间复杂的依赖关系；另外，它还包含了下载器、安装器等有趣的东西。</p><p>下载并安装compose：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> cd</span><br><span class="line"></span><br><span class="line">curl -sS https://getcomposer.org/installer | php</span><br><span class="line"></span><br><span class="line">mv /root/composer.phar /usr/bin/composer</span><br></pre></td></tr></table></figure><p> 3、安装snipeit</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> cd /var/www</span><br><span class="line"></span><br><span class="line">yum install -y git</span><br><span class="line"></span><br><span class="line">git clone https://github.com/snipe/snipe-it snipe-it</span><br></pre></td></tr></table></figure><p>编辑配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cd /var/www/snipe-it</span><br><span class="line"></span><br><span class="line">sudo cp .env.example .env</span><br><span class="line"></span><br><span class="line">vim .env</span><br><span class="line">cd /var/www</span><br><span class="line"></span><br><span class="line">yum install -y git</span><br><span class="line"></span><br><span class="line">git clone https://github.com/snipe/snipe-it snipe-it</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">APP_URL=192.168.201.102 #填入地址</span><br><span class="line">APP_TIMEZONE=&#x27;Asia/Shanghai&#x27; #填入国家地址</span><br><span class="line">APP_LOCALE=zh-CN</span><br><span class="line"></span><br><span class="line">DB_DATABASE=snipeit #数据库名称</span><br><span class="line">DB_USERNAME=snipeit #数据库用户名</span><br><span class="line">DB_PASSWORD=324215 #数据库密码</span><br></pre></td></tr></table></figure><p>其中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">调试的时候请更改为<span class="literal">true</span></span></span><br><span class="line">APP_DEBUG=false</span><br></pre></td></tr></table></figure><p><img src="image-20201127162709089.png" alt=""><br>更改目录权限：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">nginx 的话请改为 自定义的用户  默认为 nginx</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">chown</span> -R nginx:nginx storage public/uploads</span></span><br><span class="line">chown -R apache:apache storage public/uploads</span><br><span class="line">chmod -R 755 storage</span><br><span class="line">chmod -R 755 public/uploads</span><br></pre></td></tr></table></figure><p>使用composer安装PHP依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer install --no-dev --prefer-source</span><br></pre></td></tr></table></figure><p>（PS：正在安装中，此步骤安装时间会较长，请耐心等待。。。）</p><p>（中间可能会出现这样的一个错误，先不用理会，等待继续安装）</p><p>（PS：此过程安装了大概两个小时，终于安装成功了。出现以上界面）</p><p>如果安装时间过长，可以修改源之后重新安装尝试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer config -g repo.packagist composer [https://packagist.phpcomposer.com](https://packagist.phpcomposer.com/)</span><br></pre></td></tr></table></figure><p>生成 app_key</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan key:generate</span><br></pre></td></tr></table></figure><p><img src="image-20201127163349501.png" alt=""><br> 4、修改Apache配置文件，创建虚拟主机</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/httpd/conf.d/snipeit.example.com.conf</span><br></pre></td></tr></table></figure><p>具体配置信息如下： </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> &lt;VirtualHost *:80&gt;</span><br><span class="line"></span><br><span class="line"> ServerName snipeit.example.com</span><br><span class="line"></span><br><span class="line"> DocumentRoot /var/www/snipe-it/public</span><br><span class="line"></span><br><span class="line"> &lt;Directory /var/www/snipe-it/public&gt;</span><br><span class="line"></span><br><span class="line"> Options Indexes FollowSymLinks MultiViews</span><br><span class="line"></span><br><span class="line"> AllowOverride All</span><br><span class="line"></span><br><span class="line"> Order allow,deny</span><br><span class="line"></span><br><span class="line"> allow from all</span><br><span class="line"></span><br><span class="line"> &lt;/Directory&gt;</span><br><span class="line"></span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure><p>重启Apache 服务并查看Apache状态：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart httpd</span><br><span class="line"></span><br><span class="line">systemctl enable httpd</span><br><span class="line"></span><br><span class="line">systemctl status httpd</span><br></pre></td></tr></table></figure><p>目前，Snipe-IT已经安装完成，就下来需要进行查错和安装前配置检查</p><p>四、排除及遇到的问题</p><p> 1、关闭系统的selinux：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/selinux </span><br></pre></td></tr></table></figure><p><img src="image-20201127163412793.png" alt=""><br> 2、安装前检查报错</p><p>浏览器输入服务器IP地址：</p><p><img src="image-20201127163431565.png" alt=""><br> 3、创建用户， 处理错误：</p><p><img src="image-20201127163444382.png" alt=""><br>出现以上的错误，应该是数据库的问题，修改 .env 文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /var/www/snipe-it</span><br><span class="line"></span><br><span class="line">vim .env</span><br></pre></td></tr></table></figure><p><img src="image-20201127163457337.png" alt=""><br>此篇文章的环境，数据库和服务器是安装再同一台服务器上，修改DB_HOST=172.31.14.167(服务器地址）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart mariadb # 重启maraidb服务</span><br><span class="line"></span><br><span class="line">systemctl enable mariadb</span><br><span class="line"></span><br><span class="line">systemctl status mariadb</span><br></pre></td></tr></table></figure><p> 4、继续检查错误和创建用户</p><p> 5、填写用户信息：</p><p><img src="image-20201127163534752.png" alt=""><br> 五、界面展示：</p><p><img src="image-20201127163629393.png" alt=""><br>  1、关闭调试模式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /var/www/snipe-it</span><br><span class="line"></span><br><span class="line">vim .env</span><br></pre></td></tr></table></figure><p><img src="image-20201127163606827.png" alt=""><br> 2、重启httpd服务</p><p>systemctl restart httpd</p><p> 3、浏览器重新打开服务器地址： </p><p><img src="image-20201127163638939.png" alt=""><br> 以上步骤已经将snipe-IT系统安装完成，已经能正常的显示为中文版本。</p><blockquote><p>原文链接: <a href="https://blog.51cto.com/5001660/2435211">https://blog.51cto.com/5001660/2435211</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> LINUX </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Snipe-IT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python虚拟环境venv模块</title>
      <link href="/2020/11/23/Python/%E6%A8%A1%E5%9D%97/Python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83venv%E6%A8%A1%E5%9D%97/"/>
      <url>/2020/11/23/Python/%E6%A8%A1%E5%9D%97/Python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83venv%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文链接： <a href="https://blog.csdn.net/qq_39241986/article/details/106654549">Python 虚拟环境 看这一篇就够了</a></p></blockquote><h1 id="虚拟环境概述"><a href="#虚拟环境概述" class="headerlink" title="虚拟环境概述"></a>虚拟环境概述</h1><p>Python应用程序通常会使用不在标准库内的软件包和模块。应用程序有时需要特定版本的库，修复特定的错误，或者可以使用库的过时版本的接口编写应用程序。</p><p>这说明一个Python安装可能无法满足每个应用程序的要求。例如：应用程序A需要特定模块的1.0版本但应用程序B需要2.0版本，则需求存在冲突，安装版本1.0或2.0将导致某一个应用程序无法运行。</p><p>这个问题的解决方案是创建一个虚拟环境，一个目录树，其中安装有特定Python版本，以及其他包。</p><p>不同的应用将可以使用不同的虚拟环境。就可以解决需求相冲突的例子。</p><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>下面是一些基本概念：</p><ul><li><a href="https://www.pypa.io/en/latest/">PyPA</a>：指 Python Packaging Authority，一个维护 Python 打包相关项目的小组，相关项目具体见 <a href="https://github.com/pypa">https://github.com/pypa</a>。</li><li><a href="https://pip.pypa.io/en/stable/">pip</a>：Python 包安装器。</li><li><a href="https://virtualenv.pypa.io/en/stable/">virtualenv</a>：Python 虚拟环境管理工具。</li><li><a href="https://docs.python.org/3/library/venv.html">venv</a>：Python 标准库内置的虚拟环境管理工具，Python 3.3 加入，Python 3.5 开始作为管理虚拟环境的推荐工具，用法类似 virtualenv。如果你使用 Python 3，推荐使用 venv 来替代 virtualenv。</li></ul><h1 id="python-包管理器"><a href="#python-包管理器" class="headerlink" title="python 包管理器"></a>python 包管理器</h1><p>软件包源中的软件包数量巨大，版本多样，所以需要借助于软件源管理工具，例如 pip、conda、Pipenv、Poetry 等</p><ul><li>pip 是最常用的包管理工具，通过 <code>pip install &lt;packagename&gt;</code> 命令格式来安装软件包，使用的是 pypi 软件包源</li><li>conda 多用作科学计算领域的包管理工具，功能丰富且强大，使用的软件包源是 Anaconda repository 和 Anaconda Cloud，conda 不仅支持 Python 软件包，还可以安装 C、C++ 、R 以及其他语言的二定制软件包。除了软件包管理外，还能提供相互隔离的软件环境。</li><li>Pipenv 是 Kenneth Reitz 在2017年1月发布的Python依赖管理工具，现在由PyPA维护。Pipenv 会自动帮你管理虚拟环境和依赖文件，并且提供了一系列命令和选项来帮助你实现各种依赖和环境管理相关的操作</li><li>Poetry 和 Pipenv 类似，是一个 Python 虚拟环境和依赖管理工具，另外它还提供了包管理功能，比如打包和发布。你可以把它看做是 Pipenv 和 Flit 这些工具的超集。它可以让你用 Poetry 来同时管理 Python 库和 Python 程序</li></ul><p>很多包管理工具不仅提供了基本的包管理功能，还提供了虚拟环境构建，程序管理的等功能</p><h1 id="virtualenv-工具"><a href="#virtualenv-工具" class="headerlink" title="virtualenv 工具"></a>virtualenv 工具</h1><p>在 python3.3 之前，只能通过 virtualenv 创建虚拟环境，首先需要安装 virtualenv</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install virtualenv</span><br></pre></td></tr></table></figure><p>安装完后，在当前目录下创建一个名为 myvenv 的虚拟环境:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virtualenv --no-site-packages myvenv</span><br></pre></td></tr></table></figure><p>参数 <code>--no-site-packages</code> 的意思是创建虚拟环境时，不复制主环境中安装的第三方包，也就是创建一个 “干净的” 虚拟环境</p><p>virtualenv 还有很多参数，用于不同的使用场景，例如:</p><ul><li>-p: 用于指定 Python 解析器，就是安装好的 Python 应用程序，默认为当前环境中的 Python</li><li>—no-pip：不需要安装 pip，默认为安装</li><li>—clear：如果创建虚拟环境的目录已经有了其他虚拟环境，清楚重建</li></ul><div class="table-container"><table><thead><tr><th>命令</th><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>workon</td><td></td><td>列出当前系统中所有的虚拟环境</td></tr><tr><td>workon &lt;虚拟环境名称&gt;</td><td></td><td>进入执行名称的虚拟环境中</td></tr><tr><td>mkvrualenv &lt;虚拟环境名称&gt;</td><td>-p指定python解析器版</td><td></td></tr><tr><td>deactivate</td><td></td><td>在虚拟环境内部退出环境</td></tr><tr><td>pip freeze</td><td></td><td>列出当前环境下开发者使用pp安装的包列表,作用类似于。pip list,但是比pip list好用</td></tr><tr><td>pip freeze &gt;requriments.txt</td><td>requriments.txt是瞎写</td><td>备份虚拟环境中的所有依赖包列表</td></tr><tr><td>pip install r ./requriments.txt</td><td></td><td>还原备份的虚拟环境包列表</td></tr><tr><td>rmvirtualenv &lt;虚拟环境名称&gt;</td><td></td><td>删除指定名称的虚拟环境[慎更使用,删除前建议备份]</td></tr></tbody></table></div><h1 id="venv-模块"><a href="#venv-模块" class="headerlink" title="venv 模块"></a>venv 模块</h1><p>Python3.3 之后，可以用模块 venv 代替 virtualenv 工具，好处是不用单独安装，3.3 及之后的版本，都可以通过安装好的 Python 来创建虚拟环境:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m venv myvenv</span><br></pre></td></tr></table></figure><p>可以在当前目录创建一个名为 myvenv 的虚拟环境</p><p>venv 有些参数，不过相比 virtualenv 少了些，这里简单介绍几个：</p><ul><li>—without-pip: 不需要安装 pip，默认为安装</li><li>—clear：如果创建虚拟环境的目录已经有了其他虚拟环境，清楚重建</li></ul><p>因为 venv 是依附于一个 Python 解析器创建的，所以不需要指定 Python 解释器版本</p><h2 id="激活"><a href="#激活" class="headerlink" title="激活"></a>激活</h2><p>虚拟环境创建好后，需要激活才能在当前命令行中使用，可以理解成将当前命令行环境中 PATH 变量的值替换掉</p><p>通过 virtualenv 和 模块 venv 创建的虚拟环境，激活方式是一样的，即运行激活脚本</p><ul><li><p>Windows 系统中，激活脚本路径是 <code>&lt;myvenv&gt;\Scripts\activate.bat</code>，如果是 powershell 命令行，脚本换成 <code>Activate.ps1</code> , 注意将 <code>&lt;myvenv&gt;</code> 换成你自己的虚拟环境目录</p></li><li><p>Linux 系统中，激活脚本路径是 <code>&lt;myvenv&gt;/bin/activate</code>，默认脚本没有执行权限，要么设置脚本为可执行，要么用 <code>source</code> 命令执行，例如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">source</span> myvenv/bin/activate</span><br></pre></td></tr></table></figure></li></ul><p>激活后，可以在命令行中看到虚拟环境标记，如上图</p><p>打印 PATH，命令如下：</p><p>Linux 下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>Windows 下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> %PATH%</span><br></pre></td></tr></table></figure><p>可以看到创建的虚拟环境脚本目录被加载了最前面</p><h2 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h2><p>退出虚拟环境很简单，只需要执行 <code>deactivate</code> 命令就行，这个命令也在虚拟环境的脚本目录下，因为激活时，将脚本目录设置到 PATH 中了，所以可以直接使用</p><p>退出虚拟环境相当于将 PATH 恢复成原来的</p><h1 id="与开发工具配合"><a href="#与开发工具配合" class="headerlink" title="与开发工具配合"></a>与开发工具配合</h1><p>虽然通过激活脚本，很容易切换到虚拟环境，但是在实际开发中，还是不够方便，而且现在很多开发工具，特别是提供 Python 解析环境的开发工具，都可以和虚拟环境配合，在开发过程中几乎无感，对开发工作是很大的帮助</p><h2 id="Visual-Studio-Code"><a href="#Visual-Studio-Code" class="headerlink" title="Visual Studio Code"></a>Visual Studio Code</h2><p>VS Code 是个后起之秀，功能强大且具有丰富的插件资源，无疑是这两年发展最快的综合开发工具。现在的版本配置 Python 虚拟环境很简单，只需要选择一个 Python 解释器就好了</p><p>同时按下 Ctrl+Shift+P, 在弹出的命令窗口中输入 “解析器”，然后在下拉列表中选择 “Python:选择解析器”，这里会缓存一些已经创建好的解析器，如果没有想要的，可以选择 “Enter interpreter path” 来选择解析器路径，即已经创建好的虚拟环境脚本文件夹中的 Python 程序，就可以创建一个新的解析器</p><p><img src="E:\hexo\source\_posts\Python\模块\Python虚拟环境venv模块\format.png" alt="img"></p><p>选择 Python 解析器</p><p>如果编辑的是 Python 代码文件，在状态栏中也可以选择和切换解释器，更为方便</p><p><img src="E:\hexo\source\_posts\Python\模块\Python虚拟环境venv模块\qwe.png" alt="img"></p><p>选择 Python 解析器</p><h2 id="Pycharm"><a href="#Pycharm" class="headerlink" title="Pycharm"></a>Pycharm</h2><p>Pycharm 应该是功能最好的 Python 开发工具，转为 Python 开发而生，除了基本的开发功能外，还提供项目创建、打包、测试等丰富功能，有很大的市场占有率</p><p>创建项目时，在项目创建对话框中，可以创建或者选择已经已有的解析器</p><p><img src="E:\hexo\source\_posts\Python\模块\Python虚拟环境venv模块\formatQQ.png" alt="img"></p><p>选择 Python 解析器</p><p>选择创建新的解析器时，需要选择创建虚拟环境的工具，如 virtualenv；指定虚拟环境的目录；选择 Python 基础解析器，同 virtualenv 工具的 -p 参数的效果；以及是否要继承基础解析器的<a href="https://so.csdn.net/so/search?from=pc_blog_highlight&amp;q=第三方库">第三方库</a> 和 是否将这个虚拟环境作为默认环境，即创建其他项目时默认选择</p><p>如果选择已存在的解析器，和 VS Code 差不多，可以选择已经缓存的或者指定解析器的路径</p><h2 id="部署虚拟环境"><a href="#部署虚拟环境" class="headerlink" title="部署虚拟环境"></a>部署虚拟环境</h2><p>之所以在开发时选择虚拟环境，除了避免库之间的冲突，还有重要的原因是方便部署，因为虚拟环境是独立的，仅包含了项目相关的依赖库，所以部署的效率更高，风险更小</p><p>一般部署流程是：</p><ol><li>开发完成后，使用 <code>pip freeze &gt; requirements.txt</code> 命令将项目的库依赖导出，作为代码的一部分</li><li>将代码上传到服务器</li><li>在服务器上创建一个虚拟环境</li><li>激活虚拟环境，执行 <code>pip install -r requirements.txt</code>，安装项目依赖</li></ol><p>怎么运行项目，需要看项目的具体情况</p><ul><li>Web 项目 Web 项目一般使用 Django、Flask 的 Web 开发的提供 Web 服务的项目，部署时需要一个 Web 容器，作为程序的运行环境，容器的配置中都有一个虚拟环境的设置，其实是指定 <a href="https://so.csdn.net/so/search?from=pc_blog_highlight&amp;q=Python">Python</a> 解析器的路径，将其设置为虚拟环境的目录或者 Python 解析器就可以了，启动时就用使用虚拟环境，并与其他环境隔离。例如 uWSGI 配置文件中 home 参数是用来指定解析器的。</li><li>服务类项目 服务类项目就是需要以服务的形式长时间运行的，例如之前介绍的 公交闹钟，或者一些定时爬虫之类的，对于 Linux 而言，当前主流的服务方式是 Systemd，是一种比 init 更先进的服务管理工具，在服务脚本中， 设置 ExecStart 执行命令为全路径的虚拟环境的 Python 解析器，服务启动时，使用独立的虚拟环境了。Windows 服务，对于达成 EXE 包的，不需要配置虚拟环境，因为打包时已经考虑了环境问题了，如果是脚本运行的话，需要指定全路径的 Python 解析器</li><li>单次运行项目 对于一些测试或者实验性质的项目，大多数情况下手动执行，只要在激活的虚拟环境下，或者用特定的 Python 解析器运行就好了，和在开发过程中运行区别不大</li></ul><h2 id="其他虚拟环境管理工具"><a href="#其他虚拟环境管理工具" class="headerlink" title="其他虚拟环境管理工具"></a>其他虚拟环境管理工具</h2><ul><li>virtualenvwrapper：是对 virtualenv 的一个封装，还有针对 vim 用户和 emacs 用户的 扩展，能支持 bash/ksh/zsh</li><li>virtualenvwrapper-win：针对 Windows batch shell 的 virtualenvwrapper</li><li>pyenv：用来解决这类问题。它可以安装、卸载、编译、管理多个 python 版本，并随时将其中一个设置为工作环境</li><li>pyenv-win：针对 Windows 的 pyenv</li></ul><p>有兴趣的话可以试用一下</p><h2 id="从其他工具迁移回来"><a href="#从其他工具迁移回来" class="headerlink" title="从其他工具迁移回来"></a>从其他工具迁移回来</h2><p>如果你想从 Pipenv 迁移回来，方法很简单，只需要生成一个 requirements.txt 文件即可。使用下面的命令生成一般依赖列表：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv lock -r</span><br></pre></td></tr></table></figure><p>使用下面的命令输出开发依赖列表：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv lock -r --dev</span><br></pre></td></tr></table></figure><p>然后手动把两个命令的输出保存为 requirements.txt 和 requirements-dev.txt。</p><p>从 Poetry、Conda 等其他工具迁移回来可以使用 <a href="https://link.zhihu.com/?target=https%3A//github.com/bndr/pipreqs">pipreqs</a> 来生成 requirements.txt，它会基于项目代码的导入语句来生成依赖列表。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>今天主要了解了 Python 虚拟环境的相关概念和工具，并简单描述了实际工作中的一些使用方式，以便能在开发过程中使用。限于篇幅，没法就更多的内容详细展开，需要在实践中多试多用，Just DO It！</p><h1 id="Anaconda"><a href="#Anaconda" class="headerlink" title="Anaconda"></a>Anaconda</h1><p>比如有两个项目，里边的模块版本基本一致，生成两套环境有点冗余，Anaconda就解决了这一问题</p><p>也是一个虚拟环境管理工具，anaconda在virtualenv 的基础上，提取了公共代码保存到一个公共目录，独立代码才会分离开来。</p><p>更多内容参考：<a href="https://www.zhihu.com/question/58033789">知乎</a>，<a href="https://blog.csdn.net/ITLearnHall/article/details/81708148/">CSDN</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前Anaconda的系统配置信息</span></span><br><span class="line">conda info</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出当前系统中所有虚拟环境，环境列表左边*号表示当前所在环境</span></span><br><span class="line">conda env list# 也可以 conda info -e</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建虚拟环境</span></span><br><span class="line">-n &lt;虚拟环境名称&gt;  或者 --name &lt;虚拟环境名称&gt;</span><br><span class="line">conda create -n &lt;虚拟环境名称&gt; python=&lt;python版本号&gt; &lt;包名1&gt;=&lt;版本号&gt; &lt;包名&gt; ... &lt;包名n&gt;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">eg:</span></span><br><span class="line">conda create -n python27 python=2.7</span><br><span class="line">conda create -n python36 python=3.6 pymongo</span><br><span class="line">conda create -n mofang python=3.8 flask celery</span><br><span class="line">conda create -n renran python=3.6 django=3.2.10 pymysql</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">克隆虚拟环境</span></span><br><span class="line">conda create -n &lt;新的虚拟环境名称&gt;  --clone &lt;旧的虚拟环境名称&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入/切换 到指定名称的虚拟环境，如何不带任何参数，则默认回到全局环境base中。</span></span><br><span class="line">conda activate &lt;虚拟环境名称&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">推出当前虚拟环境</span></span><br><span class="line">conda deactivate</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">给指定的虚拟环境安装/更新一个或多个指定包</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">当然也可以进入虚拟环境以后，通过pip install &lt;包名&gt; 来完成工作</span></span><br><span class="line">conda install -n &lt;虚拟环境名称&gt; &lt;包名1&gt;==&lt;版本号&gt; &lt;包名2&gt; ... &lt;包名n&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">给指定虚拟环境卸载一个或多个指定包</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">当然也可以进入虚拟环境以后，通过pip uninstall &lt;包名&gt; 来完成工作</span></span><br><span class="line">conda remove -n &lt;虚拟环境名称&gt; &lt;包名1&gt;==&lt;版本号&gt; &lt;包名2&gt; ... &lt;包名n&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除指定虚拟环境</span></span><br><span class="line">conda remove -n &lt;虚拟环境名称&gt; --all</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">导出当前虚拟环境的Anaconda包信息到环境配置文件environment.yaml中</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">当然也可以用pip freeze &gt; requirments.txtrequirments.txt 安装到新的虚拟环境</span></span><br><span class="line">conda env export &gt; environment.yaml</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">根据环境配置文件environment.yaml的包信息来创建新的虚拟环境</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">当然也可以用pip install -r requirments.txt 安装到新的虚拟环境</span></span><br><span class="line">conda env create -f environment.yaml</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在指定目录下创建虚拟环境</span></span><br><span class="line">conda create --prefix D:\django_test2  python=3.8</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者 conda create -p D:\django_test2  python=3.8</span></span><br><span class="line">conda activate  D:\django_test2 #切换并激活</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看conda版本</span></span><br><span class="line">conda -V</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新Anaconda的版本，这里可以执行conda_update，系统会自动提示完整并正确的命令</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>报错原因：默认从国外镜像源下载，而从国外下载速度极慢，导致报错<br>解决办法：使用清华镜像，下面是添加清华镜像至Anaconda仓库的方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 报错超时</span><br><span class="line">Collecting package metadata (current_repodata.json): failed</span><br><span class="line"></span><br><span class="line">CondaHTTPError: HTTP 000 CONNECTION FAILED for url &lt;https://repo.anaconda.com/pkgs/main/win-64/current_repodata.json&gt;</span><br><span class="line">Elapsed: -</span><br><span class="line"></span><br><span class="line">An HTTP error occurred when trying to retrieve this URL.</span><br><span class="line">HTTP errors are often intermittent, and a simple retry will get you on your way.</span><br><span class="line"></span><br><span class="line">If your current network has https://www.anaconda.com blocked, please file</span><br><span class="line">a support request with your network engineering team.</span><br><span class="line"></span><br><span class="line">&#x27;https://repo.anaconda.com/pkgs/main/win-64&#x27;+</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 在自己的用户目录下`eg：C:\Users\User\.condarc`，修改配置为清华源并保存</span><br><span class="line">channels:</span><br><span class="line">  - defaults</span><br><span class="line">show_channel_urls: true</span><br><span class="line">channel_alias: http://mirrors.tuna.tsinghua.edu.cn/anaconda</span><br><span class="line">default_channels:</span><br><span class="line">  - http://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">  - http://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free</span><br><span class="line">  - http://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r</span><br><span class="line">  - http://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/pro</span><br><span class="line">  - http://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2</span><br><span class="line">custom_channels:</span><br><span class="line">  conda-forge: http://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  msys2: http://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  bioconda: http://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  menpo: http://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  pytorch: http://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  simpleitk: http://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 模块 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Anaconda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Snipe-IT资产管理系统帮助文档</title>
      <link href="/2020/10/09/%E6%95%99%E7%A8%8B/Snipe-IT%E8%B5%84%E4%BA%A7%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3/"/>
      <url>/2020/10/09/%E6%95%99%E7%A8%8B/Snipe-IT%E8%B5%84%E4%BA%A7%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="资产标签"><a href="#资产标签" class="headerlink" title="资产标签"></a>资产标签</h1><p>资产标签是系统中资产的唯一标识符。<strong>每个</strong><a href="https://`资产管理系统`.readme.io/docs/asset-labels">标签</a><strong>必须唯一</strong>，并且通常与<a href="https://`资产管理系统`.readme.io/docs/asset-labels">资产标签</a>一起使用。它们标识每个唯一的硬件，以便您知道它是哪个特定设备。</p><p>对于不需要资产标签的用户，通常将每个设备的唯一序列号用作资产标签，或者您可以在<strong>管理&gt;设置中</strong>打开自动递增资产标签，这将在您生成资产时自动为您生成唯一资产标签。您创建新资产。</p><h2 id="签入-签出"><a href="#签入-签出" class="headerlink" title="签入/签出"></a>签入/签出</h2><p>签入和签出是<code>资产管理系统</code>中的两个主要概念。签出资产，许可证或附件时，就是将其标记为他人拥有。这意味着在随后将它们再次签入之前，无法将它们签出给其他人。这可以防止“双重预订”资产，在这种资产中，一项资产已被承诺或分配给多个人。</p><p>当员工离开公司时，或者资产，许可证或附件无法正常运行时，您将其重新签入。重新签入表明它已归您所有，或者有可能需要维修。您可以根据资产的状况决定要分配的状态。</p><h2 id="状态标签"><a href="#状态标签" class="headerlink" title="状态标签"></a>状态标签</h2><p>状态标签用于描述资产的状态。您可以根据需要添加任意数量的状态标签。每个状态标签将具有以下四个特征之一，这些特征描述具有该状态标签的资产状态：</p><div class="table-container"><table><thead><tr><th style="text-align:left">状态标签类型</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">不可部署</td><td style="text-align:left">这些资产不能分配给任何人。</td></tr><tr><td style="text-align:left">可部署</td><td style="text-align:left">这些资产可以分配给人员</td></tr><tr><td style="text-align:left">已封存</td><td style="text-align:left">这些资产无法分配给人员，只会显示在“存档”视图中</td></tr><tr><td style="text-align:left">待定</td><td style="text-align:left">这些资产尚未分配给任何人。</td></tr></tbody></table></div><p>使用状态标签，但您认为合适。您可以只保留我们为您设置的入门标签，也可以充实一组详细的状态，以确保您的团队始终准确了解每种资产的状况。</p><p>如果您设置好状态标签，它们将非常有用。状态标签是一个名为“ Awaiting Re-Imaging”的待处理标签，它告诉您的团队该项目无法部署，因为它仍处于重新成像阶段且尚未准备就绪。准备就绪后，您的团队可以将状态更新为“准备部署”，然后将其添加到可用的可部署资源池中。</p><p><strong>一旦将属于“可部署”状态的资产分配给用户，则该资产将呈现“已部署”的元状态。</strong></p><h2 id="列选择"><a href="#列选择" class="headerlink" title="列选择"></a>列选择</h2><p>在<code>资产管理系统</code>的大多数基于表的界面中，您可以选择显示或隐藏特定的列，以便您不太在意的列不会占用屏幕空间，而您关心的列大约很容易看到。</p><p>要使用此功能，只需单击表界面右上角看起来像拆分窗格窗口的图标。选中和取消选中列名旁边的复选标记将相应地显示和隐藏列。</p><p><img src="47345f3-Screen_Shot_2018-03-07_at_2.02.02_PM.png" alt=""></p><h1 id="管理员设定"><a href="#管理员设定" class="headerlink" title="管理员设定"></a>管理员设定</h1><p>您的管理员设置仅对超级管理员可用，它们可以控制诸如商标，颜色，徽标，警报阈值，密码安全性等设置。</p><p>要访问管理员设置，请点击右上角导航栏中的齿轮图标。</p><h1 id="资产模型"><a href="#资产模型" class="headerlink" title="资产模型"></a>资产模型</h1><p>每个资产都需要一个资产模型，因此接下来进行设置将有助于您开始添加资产。资产模型可以是笔记本电脑或台式机的品牌和型号（例如，Apple 13” Retina）。创建新资产时，将选择最合适的资产模型。</p><p>资产模型之所以重要，是因为它们具有资产所继承的某些属性，例如折旧类型，寿命终止以及是否在资产上显示MAC地址字段。</p><p>可以将单个资产标记为可请求，也可以将资产模型标记为可请求，这使<code>资产管理系统</code>中的用户可以请求特定资产或与他们所需的资产模型匹配的任何资产。</p><h1 id="分类目录"><a href="#分类目录" class="headerlink" title="分类目录"></a>分类目录</h1><p>资产和附件都使用类别。类别描述资产或附件的一般类型，例如“无线键盘”，“笔记本电脑”等。</p><p>类别很重要，因为它们包含资产和属于它们的附件所继承的属性，例如<strong>是否已将项目签出给终端用户</strong>，<strong>是否向最终用户发送电子邮件</strong>，<strong>是否要求用户单击链接证明他们已经收到资产或附件</strong>，以及<strong>是否应该向用户发送电子邮件EULA</strong>。</p><p>每个资产和附件都必须属于一个类别，因此您需要在添加资产之前进行设置。</p><p>要开始创建新的齿轮，请单击屏幕左侧的齿轮图标：</p><p><img src="b5cb66d-SIT-Settings-menu.png" alt=""><br>单击齿轮图标以打开设置，然后单击类别以进入主要的类别部分：</p><p><img src="9792a70-SIT-Settings-catag.png" alt=""><br>然后创建新的类别，在创建资产时需要选择该类别。</p><p><img src="20a4298-Screen_Shot_2018-06-21_at_6.32.03_AM.png" alt=""><br>另外，如果您通过CSV导入，则可以即时创建类别。</p><h1 id="管理用户"><a href="#管理用户" class="headerlink" title="管理用户"></a>管理用户</h1><p>要在您的<code>资产管理系统</code>系统中管理用户，只需单击“人”链接。我们建议使用权限组（在“管理”&gt;“组”中）来处理用户权限，这样，可以轻松地将添加到该行下的所有其他细化权限应用于所有适当的用户，而无需一个个地对其进行编辑。</p><p>对于许多组织来说，常见的设置是让少数几个Superadmin或Admin用户进行组织的签入和签出，并且所有其他用户的创建没有任何特殊权限。没有任何管理权限创建的用户将只能查看签出给他们的项目或他们所请求的项目。</p><h1 id="管理资产"><a href="#管理资产" class="headerlink" title="管理资产"></a>管理资产</h1><h2 id="自定义字段"><a href="#自定义字段" class="headerlink" title="自定义字段"></a>自定义字段</h2><p>通过自定义字段，您可以跟踪有关默认资产属性未涵盖的资产的其他信息。</p><p>请查看下面的简短视频教程，以获取完整的演练：</p><iframe class="embedly-embed" src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FAmKc0GuQbAU%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DAmKc0GuQbAU&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FAmKc0GuQbAU%2Fhqdefault.jpg&amp;key=f2aa6fc3595946d0afc3d76cbbd25dc3&amp;type=text%2Fhtml&amp;schema=youtube" width="640" height="480" scrolling="no" frameborder="0" allow="autoplay; fullscreen" allowfullscreen="true" style="box-sizing: border-box; flex: 1 1 0%; margin: -15px; border-radius: 0px !important;"></iframe><p>将自定义字段集视为自定义字段的集合。您可以有一个仅包含一个自定义字段或多个自定义字段的自定义字段集。字段集的想法是将常用字段分组在一起，这样您就不必在资产模型中一个接一个地添加字段。</p><p><img src="6297ad0-Screen_Shot_2018-08-18_at_1.01.21_AM.png" alt=""><br>自定义字段集在资产模型级别分配。因此，例如，如果您将移动电话作为资产进行跟踪，则可以为“ IMEI”，“ SIM”，“电话号码”等创建自定义字段。</p><p><img src="32o7huQSZWYKUIQFfgdV_sim.png" alt=""><br>新的自定义字段</p><p>然后，您需要将所有与手机相关的字段添加到新的“手机”自定义字段集中，并将其分配给您的手机资产模型之一。</p><p><img src="l5XhzgB5TEmX6jL8kEGk_mobile-phones.png" alt=""><br>手机领域</p><p>将字段添加到字段集中时，可以选择是否需要该字段，字段应以什么顺序显示，然后从选择框中选择要添加的字段集。</p><p><img src="KIFpR0QZTYiQYDYLdtFf_add-to-fieldset.png" alt=""><br>然后，对于您创建的属于该资产模型的任何手机资产，自定义字段属性将自动出现。</p><p>要逐步将其分解：</p><ul><li>在自定义字段集中创建所需的新自定义字段。</li><li>创建新的自定义字段集，并添加刚创建的自定义字段。</li><li>转到管理&gt;资产模型，然后编辑资产模型，选择刚创建的自定义字段集。</li></ul><p>您可以先创建字段，也可以先创建字段集，但是请确保将新字段添加到您的字段集中，然后将该字段集与资产模型相关联以在资产表单上查看这些新字段。</p><p>一旦您的资产模型具有与之关联的自定义字段集，您的新值将显示在资产视图和编辑页面上以及主资产列表中。您将可以在这些字段中进行搜索/排序（以及在表视图中显示/隐藏它们），就像在其他内置字段中一样。</p><h2 id="自定义字段验证"><a href="#自定义字段验证" class="headerlink" title="自定义字段验证"></a>自定义字段验证</h2><p>我们为您创建的自定义字段上的基本输入验证提供了支持。创建字段时，您可以选择在管理员添加或编辑资产时应在其中输入新字段的文本输入。您有几个预定义的选项：<code>Format</code></p><div class="table-container"><table><thead><tr><th style="text-align:left">格式</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>ANY</code></td><td style="text-align:left">没有输入验证。任何文字都是可以接受的。</td></tr><tr><td style="text-align:left"><code>ALPHA</code></td><td style="text-align:left">验证中的字段必须完全是字母字符。</td></tr><tr><td style="text-align:left"><code>ALPHA-DASH</code></td><td style="text-align:left">验证中的字段可能包含字母数字字符以及破折号和下划线。</td></tr><tr><td style="text-align:left"><code>NUMERIC</code></td><td style="text-align:left">验证下的字段必须为数字。</td></tr><tr><td style="text-align:left"><code>ALPHA-NUMERIC</code></td><td style="text-align:left">验证中的字段必须完全是字母数字字符。</td></tr><tr><td style="text-align:left"><code>EMAIL</code></td><td style="text-align:left">验证下的字段必须格式化为电子邮件地址。</td></tr><tr><td style="text-align:left"><code>DATE</code></td><td style="text-align:left">根据PHP函数，验证中的字段必须为有效日期。<code>strtotime</code></td></tr><tr><td style="text-align:left"><code>URL</code></td><td style="text-align:left">验证下的字段必须是有效的URL。</td></tr><tr><td style="text-align:left"><code>IP</code></td><td style="text-align:left">验证下的字段必须是IP地址。</td></tr><tr><td style="text-align:left"><code>IPV4</code></td><td style="text-align:left">验证中的字段必须是IPv4地址。</td></tr><tr><td style="text-align:left"><code>IPV6</code></td><td style="text-align:left">验证中的字段必须是IPv6地址。</td></tr><tr><td style="text-align:left"><code>MAC</code></td><td style="text-align:left">验证中的字段必须是有效的MAC地址。</td></tr><tr><td style="text-align:left"><code>BOOLEAN</code></td><td style="text-align:left">验证中的字段必须能够转换为布尔值。接受的输入为true，false，1、0，“ 1”和“ 0”。</td></tr><tr><td style="text-align:left"><code>CUSTOM</code></td><td style="text-align:left">该字段允许您使用正则表达式进行验证。它应以-开头，例如，要验证自定义字段值包含有效的IMEI（15个数字），请使用。<code>regex:``regex:/^[0-9]&#123;15&#125;$/</code></td></tr></tbody></table></div><h2 id="通用自定义字段正则表达式"><a href="#通用自定义字段正则表达式" class="headerlink" title="通用自定义字段正则表达式"></a>通用自定义字段正则表达式</h2><p>多个Mac地址： <code>regex:/^([0-9a-fA-F]&#123;2&#125;[:-])&#123;5&#125;[0-9a-fA-F]&#123;2&#125;|([0-9a-fA-F]&#123;2&#125;[:-])&#123;5&#125;[0-9a-fA-F]&#123;2&#125;(,([0-9a-fA-F]&#123;2&#125;[:-])&#123;5&#125;[0-9a-fA-F]&#123;2&#125;)*/</code></p><h2 id="资产验收"><a href="#资产验收" class="headerlink" title="资产验收"></a>资产验收</h2><p>如果资产所属的资产模型属于要求接受资产的类别的一部分，则会向用户发送一封电子邮件，提示他们登录并单击链接以确认他们已收到设备。</p><h2 id="物理签名"><a href="#物理签名" class="headerlink" title="物理签名"></a>物理签名</h2><p>从版本3.6.0开始，您可以要求资产带有资产接受/拒绝的物理签名。启用此功能后，系统将在屏幕上提示用户，提示他们可以在任何启用触摸的设备上用鼠标或手指签名自己的名字。</p><p>要启用此功能，只需在管理&gt;设置中将其打开即可。</p><p><img src="817bbb3-Screen_Shot_2016-11-02_at_3.53.36_AM.png" alt=""></p><blockquote><h3 id="🚧重要"><a href="#🚧重要" class="headerlink" title="🚧重要"></a>🚧重要</h3><p>请记住，您必须在类别级别启用接受要求，以便用户实际接收要求他们接受资产的电子邮件。这为更广泛的资产类型提供了更详细的接受选项。</p></blockquote><h2 id="查看签名"><a href="#查看签名" class="headerlink" title="查看签名"></a>查看签名</h2><p>要查看验收签名，只需转到资产的“历史记录”标签。（您可能需要使用列选择器显示该列。）</p><p><img src="ed65438-Screen_Shot_2018-03-07_at_2.02.02_PM.png" alt=""><br>一旦可见，资产历史记录选项卡将显示已签名接受资产的所有用户的签名。</p><p><img src="e7f5c31-Screen_Shot_2018-03-07_at_2.08.10_PM.png" alt=""><br>单击签名将显示较大的版本。</p><p><img src="af03209-Screen_Shot_2018-03-07_at_2.02.27_PM.png" alt=""><br>签名文件存储在中。<code>storage/private_uploads/signatures</code></p><h2 id="可请求资产"><a href="#可请求资产" class="headerlink" title="可请求资产"></a>可请求资产</h2><p><code>资产管理系统</code>具有允许用户轻松请求资产的功能。</p><p>可以将单个资产标记为可请求，也可以将资产模型标记为可请求，这使<code>资产管理系统</code>中的用户可以请求特定资产或与他们所需的资产模型匹配的任何资产。</p><p>您可以通过在“资产”部分的sidenav中选择“请求的资产”选项来管理用户请求的资产。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> LINUX </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Snipe-IT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 判断日期是星期几</title>
      <link href="/2020/09/16/Python/%E5%A5%87%E9%97%BB%E6%9D%82%E8%B0%88/python-%E5%88%A4%E6%96%AD%E6%97%A5%E6%9C%9F%E6%98%AF%E6%98%9F%E6%9C%9F%E5%87%A0/"/>
      <url>/2020/09/16/Python/%E5%A5%87%E9%97%BB%E6%9D%82%E8%B0%88/python-%E5%88%A4%E6%96%AD%E6%97%A5%E6%9C%9F%E6%98%AF%E6%98%9F%E6%9C%9F%E5%87%A0/</url>
      
        <content type="html"><![CDATA[<p>首先要</p><blockquote><p>import time</p><p>import datetime</p></blockquote><p>将日期格式转换一下</p><blockquote><p>dayTime=（’2018-01-14 12:00:00’）</p><p>whatday= datetime.datetime.strptime(dayTime,’%Y-%m-%d %H:%M:%S’).strftime(“%w”)</p></blockquote><p>也可直接输入时间</p><blockquote><p>whatday=datetime.datetime(2018,1,14).strftime(“%w”)</p></blockquote><p>下面是几种可用的格式：</p><blockquote><p>%a 星期几的简写 Weekday name, abbr.</p><p>%A 星期几的全称 Weekday name, full</p><p>%b 月分的简写 Month name, abbr.</p><p>%B 月份的全称 Month name, full</p><p>%c 标准的日期的时间串 Complete date andtime representation</p><p>%d 十进制表示的每月的第几天 Day of the month</p><p>%H 24小时制的小时 Hour (24-hour clock)</p><p>%I 12小时制的小时 Hour (12-hour clock)</p><p>%j 十进制表示的每年的第几天 Day of the year</p><p>%m 十进制表示的月份 Month number</p><p>%M 十时制表示的分钟数 Minute number</p><p>%S 十进制的秒数 Second number</p><p>%U 第年的第几周，把星期日做为第一天（值从0到53）Week number (Sunday first weekday)</p><p>%w 十进制表示的星期几（值从0到6，星期天为0）weekday number</p><p>%W 每年的第几周，把星期一做为第一天（值从0到53） Week number (Monday first weekday)</p><p>%x 标准的日期串 Complete date representation (e.g. 13/01/08)</p><p>%X 标准的时间串 Complete time representation (e.g. 17:02:10)</p><p>%y 不带世纪的十进制年份（值从0到99）Year number within century</p><p>%Y 带世纪部分的十制年份 Year number</p><p>%z，%Z 时区名称，如果不能得到时区名称则返回空字符。Name of time zone</p><p>%% 百分号</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> time </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基金</title>
      <link href="/2020/07/06/%E5%9F%BA%E9%87%91/"/>
      <url>/2020/07/06/%E5%9F%BA%E9%87%91/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="c4015f3718ebce894c151c991f63975db9f4c45f5711c850113e7d530702a200">bf079e01f8347d45e7dd35fa6a7eb85071428df3f480f3dd350b90a31c2da66d317a3517a47da183cb72594872f80d3e3d2d7561dd877b4106cfcceee547061f57d755c124be0f1042d20c193a892c04a5dfdf3ecc3d02d6c2611c5a9eff7428cc6d65014421109b13a9fa534c27d48bc544650bff016549ea995605ed7940f2d405633b71b21106415da86d3b1d2c07349a5eb5d0d401f73ec25bf398cfeedf26cf5a30b76f70d2ac2d6235f910b592e4287672306cd40a4cf875093f89889412bdddfb7b79ba99393500ce6dec62f9fe9ccede1a2facb8f69cac817e9aee2d72bd36c23239f50d374b6ce2122ae9e2c4481d963f6d96afa5ce35455ed6edbf08a5e9399165e51dc53144a18375529b5414d70f1656dd00d7237de95756b28a4fe2cad18c3e4f50bd5a38ed11596be92d8fd5600bd486bf9a119110249cdf77fd4c462e33735d87db671ef8e83cbb2e72f2e27f2dcaa8ff47ee619f4f2c11100bcc405721299c3f60f7bcb4d2489dc2f4674e9d089abcb10e15cf779a31bbddb5d261af4d2a401ba1048bd3fe6d5690c81fc870569642bf90d6e280d69a8dbcad9708bc447dbf0d0f646b3145e8b6e67c8e0f4c118cd13228eaf793fc0df8e6f8f0be16b83c991c139120d19b7a15355273fc0db4fdfc53a9b06992bcdd767c4fb8dcaea978cef171b4210da00f75095cc946d82beb219b82ccebcbe1c9056b25b6c0dd0fff0f23f7b1009b875fbeff4396cb55757c53faec9435ec1c86fdcdb124995bf90ae1bbecd06612c366c6e30b398db858bdb96f3fd7bfa371d2a4c612980b38d62ccea67e12e0ced0f46eb4e4a6d6833a3d92941d80f44392e6fd0a8aa393f0ed517a2ace1666aa608e27110a46d09510e882e4f9dfcfb9b523fb98d56197db11a66f6eaf1b33c19a6b7a0efed70ccc436bb2e76cb448765f75936152141f190b1c407b733d3d1cd25cacb3c1be3af7d0f37e5b6f8a87584b773becdc08adeb0aec72a0e708decb745e38f854d77f35f40ae19121e74569d4771f7111b29bd912393291f756d05d602b4a19f4def1f7ae47ea3fe52f75924a1dcdacca678aa895fdf8667c9b21a04107cfd5c4043904118cf11c46b8e51f8e2a6b766daf02c3d700da17e34bc7fed854ffb7a60096e31153593563bff02f76045d517d43a26adbd79f62a07d79b069b46ba6d2889c295230b2e8647731bd3c48f793d75b10a926c471e0ce9890673ebac686d186c7ee03fb3fec76ee0cc6477508eabff7e06414188e622b019ecb2d75a52777e1f901e6a497ff1a4290f458acd16f5cef4d395047412fb910a34d2a4cb7bd08dc747829886b3e7f7a669efc3d9b91928fe9516dd1cf7a3e400c8c8471722cbb10b14029d75f2515872be00923685e902bdebb1b58f33db58743ede0ac09c738bd5ee8b229d67d09cde33a5e532b273affd26cea0f35a743113e6964ab6f74074149b068d7b3cc982425fa2ab20499024c8ea7ba0afc31907f685df030d25cb7f30a2775c747e9ad052a5e946fcadceb1272553ff08a248aea737851c02d4ebeab9d1483cdb3cfcb634bf04ca2a789efed55a42e60c3fef1df23c262ed026695a07428490cf62698c8cf0348518310135eabebeb97fa00e858e0f7748c94edd54deecf575da8525c1fd0ba5b624c71e6b5c26f6f164fbd8a9d3d85498532caca81818430635aedb954dcc59fb0c6e21ea4160427bb3512679f1496e5687bf99c6d227088e01e07d9aa6ccdefaa4730d8f2041c4f04e5a9833f7681d0316a008b2f79ecb51c5418001f66dc0d28f020d5e50bfb1804186d7919cadabd88ffbc4f768d698e3a4a409ca347426b906255f6e1402dbcaba41d28cc428d9fc88480d056fe30fbafb7b38dc9c8250ea279df15cce375011e5377cd7eabcd48b7fa6e30bbd2214aef733c09e469bfaa0955dc3f55689dfc0c0df4bb015b82e2fc2b0a949d7b0450a8a45404d67fc831428436674c2f8471dd65bd3cac7002567e3d36ce9628d9c9c5e707c982ffe8c60e0059a06d0bc0dd04296c43cdedfce5d2e88811823b654db9091b25201121c54918c1a7a16e013c6874c39298da989358f48984e149b43d266f5903197bbfd9b87dcd0fba36dd60a30ae11f79afc2852d963508c7ee91a91b0a1c38848f1f9f803cdb1a0fd173302b3491107070f4c3415b4e</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 基金 </tag>
            
            <tag> passwd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用openpyxl读写Excel文件</title>
      <link href="/2020/06/20/Python/%E5%A5%87%E9%97%BB%E6%9D%82%E8%B0%88/%E7%94%A8openpyxl%E8%AF%BB%E5%86%99Excel%E6%96%87%E4%BB%B6/"/>
      <url>/2020/06/20/Python/%E5%A5%87%E9%97%BB%E6%9D%82%E8%B0%88/%E7%94%A8openpyxl%E8%AF%BB%E5%86%99Excel%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="概念介绍"><a href="#概念介绍" class="headerlink" title="概念介绍"></a>概念介绍</h2><p>打开一个Excel文件的时候，首先我们会看到底部有“Sheet1”或“工作簿1”的文字，可见一个Excel文件是由一个或多个工作簿组成的。</p><p>每个工作簿的工作区，横向坐标是以字母为编号的，从A到Z;纵向是以数字为编号的，从1开始，一直往增大方向编号。由数字和字母为横纵坐标构成的每个小框叫做单元格，这是Excel的基本单位。字母和数字确定后，对应的单元格就唯一确定了；而单元格已知后，它对应的字母和数字也就确定了。</p><p>因此我们可以这样总结：</p><p>一个Excel文件由一或多个Sheet组成，而一个Sheet由字母和数字唯一表示的单元格们组成，这是一个三级的结构。下图表示一个名字为<code>data.xlsx</code>的Excel文件的3级层级结构。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">data.xlsx</span><br><span class="line">├── Sheet1</span><br><span class="line">│   ├── A1</span><br><span class="line">│   ├── A2</span><br><span class="line">│   ├── B1</span><br><span class="line">│   └── B2</span><br><span class="line">├── Sheet2</span><br><span class="line">│   ├── A1</span><br><span class="line">│   ├── A2</span><br><span class="line">│   ├── B1</span><br><span class="line">│   └── B2</span><br><span class="line">└── Sheet3</span><br><span class="line">    ├── A1</span><br><span class="line">    ├── A2</span><br><span class="line">    ├── B1</span><br><span class="line">    └── B2</span><br></pre></td></tr></table></figure><p>明白了这个结构，openpyxl的设计理念就很好理解了。</p><p>在opnepyxl里面，一个Excel文件对应着一个<code>Workbook</code>对象， 一个Sheet对应着一个<code>Worksheet</code>对象，而一个单元格对应着一个<code>Cell</code>对象，下面是一个最简单的例子，执行示例之前请使用<code>pip install --user openpyxl</code>安装openpyxl包。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># load_workbook用于从一个xlsx文件读入数据</span></span><br><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> load_workbook</span><br><span class="line">wb = load_workbook(<span class="string">r&#x27;D:\data.xlsx&#x27;</span>) <span class="comment"># wb是data.xlsx对应的Workbook对象</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(wb))  <span class="comment"># &lt;class &#x27;openpyxl.workbook.workbook.Workbook&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">ws1 = wb[<span class="string">&#x27;Sheet1&#x27;</span>]  <span class="comment"># ws1是Sheet1对应的WorkSheet对象</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(ws1)) <span class="comment"># &lt;class &#x27;openpyxl.worksheet.worksheet.Worksheet&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">cell1 = ws1[<span class="string">&#x27;A1&#x27;</span>]  <span class="comment"># cell1是Sheet1中第一个单元格对应的Cell对象</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(cell1)) <span class="comment"># &lt;class &#x27;openpyxl.cell.cell.Cell&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(cell1.value) <span class="comment"># 使用.value参数来获取Cell对象对应的值</span></span><br><span class="line"></span><br><span class="line">cell1.value = <span class="number">666</span>  <span class="comment"># 使用.value参数来对单元格赋值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(cell1.value) <span class="comment"># 666</span></span><br></pre></td></tr></table></figure><p>使用起来是不是很简单？</p><h2 id="工作簿"><a href="#工作簿" class="headerlink" title="工作簿"></a>工作簿</h2><p>无需在文件系统上创建文件即可开始使用openpyxl。只需导入<code>Workbook</code>课程并开始工作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> openpyxl <span class="keyword">import</span> Workbook</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>wb = Workbook()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(wb)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;openpyxl.workbook.workbook.Workbook&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><ul><li>一个工作簿(Workbook)在创建的同时至少也新建了一张工作表(worksheet)，您可以使用<code>Workbook.active</code>属性来获取它;</li><li>可以通过openpyxl.Workbook.active()调用得到正在运行的工作表<br>注意：</li><li>该函数调用工作表的索引(self._sheets.index(value)),默认是0，除非你修改了这个值，否则你使用该函数一直是在对第一张工作表进行操作；</li><li>绑定active事件，事件触发再执行,不是直接调用active()</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ws = wb.active</span><br><span class="line"><span class="built_in">print</span>(ws)   <span class="comment"># &lt;Worksheet &quot;Sheet&quot;&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建新的工作簿"><a href="#创建新的工作簿" class="headerlink" title="创建新的工作簿"></a>创建新的工作簿</h3><p>您可以使用以下<code>Workbook.create_sheet()</code>方法创建新的工作表：，默认标题按照序列依次命名，默认插在末尾，0既是第一位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wb.create_sheet()</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">wb.create_sheet(<span class="string">&#x27;111&#x27;</span>)</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">wb.create_sheet(<span class="string">&#x27;111&#x27;</span>,<span class="number">0</span>)</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">ws3 = wb.create_sheet(<span class="string">&quot;111&quot;</span>, -<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="查看已存在的工作簿"><a href="#查看已存在的工作簿" class="headerlink" title="查看已存在的工作簿"></a>查看已存在的工作簿</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(wb.sheetnames)    <span class="comment"># [&#x27;111&#x27;, &#x27;new1&#x27;]</span></span><br><span class="line"><span class="comment"># or</span></span><br><span class="line"><span class="built_in">print</span>(wb.get_sheet_names())     <span class="comment"># [&#x27;111&#x27;, &#x27;new1&#x27;]</span></span><br><span class="line"><span class="comment">#or</span></span><br><span class="line"><span class="keyword">for</span> sheet <span class="keyword">in</span> wb:</span><br><span class="line">    <span class="built_in">print</span>(sheet.title)</span><br></pre></td></tr></table></figure><h3 id="修改工作簿的名称，颜色"><a href="#修改工作簿的名称，颜色" class="headerlink" title="修改工作簿的名称，颜色"></a>修改工作簿的名称，颜色</h3><p>通过<code>Worksheet.title</code>属性更改此名称</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ws.title=<span class="string">&quot;new1&quot;</span></span><br><span class="line"><span class="built_in">print</span>(ws)   <span class="comment"># &lt;Worksheet &quot;new1&quot;&gt;</span></span><br></pre></td></tr></table></figure><p>默认情况下，包含该标题的选项卡的背景颜色为白色。您可以更改此属性<code>RRGGBB</code>，为<code>Worksheet.sheet_properties.tabColor</code>属性提供颜色代码 ：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ws.sheet_properties.tabColor = <span class="string">&quot;1072BA&quot;</span></span><br></pre></td></tr></table></figure><p>给工作表命名后，就可以将其作为工作簿的键：</p><p>一旦你获取工作表的名字，你可以通过workbook的key或者<code>openpyxl.workbook.Workbook.get_sheet_by_name()</code>方法得到该工作表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ws = wb[<span class="string">&quot;new1&quot;</span>]  <span class="comment"># 如果输入的不存在则报错找不到</span></span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">ws = wb.get_sheet_by_name(<span class="string">&quot;new1&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ws)<span class="comment"># &lt;Worksheet &quot;new1&quot;&gt;</span></span><br></pre></td></tr></table></figure><h3 id="副本"><a href="#副本" class="headerlink" title="副本"></a>副本</h3><p>您可以<strong>在单个工作簿中</strong>创建工作表的副本：</p><p><code>Workbook.copy_worksheet()</code> 方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">source = wb.active <span class="comment"># 获取当前单元格</span></span><br><span class="line">target = wb.copy_worksheet(source)  <span class="comment"># 创建副本</span></span><br></pre></td></tr></table></figure><div class="note warning flat"><p>仅复制单元格（包括值，样式，超链接和注释）和某些工作表属性（包括尺寸，格式和属性）。不复制所有其他工作簿/工作表属性-例如图像，图表。</p><p>您也<strong>不能</strong>在工作簿之间复制工作表。如果工作簿以只读或仅写 模式打开，则不能复制工作表。</p></div><h3 id="保存工作簿"><a href="#保存工作簿" class="headerlink" title="保存工作簿"></a>保存工作簿</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wb.save(<span class="string">r&#x27;D:\date.xlsx&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h2><h3 id="访问一个单元格"><a href="#访问一个单元格" class="headerlink" title="访问一个单元格"></a>访问一个单元格</h3><p>单元格可以直接作为工作表的键进行访问：</p><p>将返回在A1处的单元格，如果不存在将在A1新建一个。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=ws[<span class="string">&#x27;A1&#x27;</span>]</span><br></pre></td></tr></table></figure><p>可以直接分配值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ws[<span class="string">&quot;A1&quot;</span>]=a</span><br></pre></td></tr></table></figure><p>还有<code>Worksheet.cell()</code>方法，这样可以使用行和列表示法访问单元格：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过cell赋值</span></span><br><span class="line">ws.cell(<span class="string">&#x27;A1&#x27;</span>)</span><br><span class="line"><span class="comment"># or </span></span><br><span class="line">ws.cell(row=<span class="number">1</span>,column=<span class="number">1</span>,<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">ws.cell(<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;age&#x27;</span>)</span><br></pre></td></tr></table></figure><div class="note warning flat"><p>在内存中创建工作表时，它不包含任何单元格。它们是在首次访问时创建的。</p></div><div class="note danger flat"><p>由于此功能，即使您未为它们分配值，也可以滚动浏览而不是直接访问它们将在内存中全部创建它们。</p><p>就像是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">101</span>):</span><br><span class="line">   <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">101</span>):</span><br><span class="line">       ws.cell(row=x, column=y)</span><br></pre></td></tr></table></figure><p>将在内存中创建<code>100x100</code>的单元，一无所有。</p></div><h3 id="访问多个单元格"><a href="#访问多个单元格" class="headerlink" title="访问多个单元格"></a>访问多个单元格</h3><p>可以使用切片访问单元格范围：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cell_range = ws[<span class="string">&#x27;A1&#x27;</span>:<span class="string">&#x27;C2&#x27;</span>]</span><br><span class="line"><span class="comment"># 行或列的范围可以类似地获得：</span></span><br><span class="line">colC = ws[<span class="string">&#x27;C&#x27;</span>]</span><br><span class="line">col_range = ws[<span class="string">&#x27;C:D&#x27;</span>]</span><br><span class="line">row10 = ws[<span class="number">10</span>]</span><br><span class="line">row_range = ws[<span class="number">5</span>:<span class="number">10</span>]</span><br></pre></td></tr></table></figure><p>您也可以使用以下<code>Worksheet.iter_rows()</code>方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> row <span class="keyword">in</span> ws.iter_rows(min_row=<span class="number">1</span>, max_col=<span class="number">3</span>, max_row=<span class="number">2</span>):</span><br><span class="line"><span class="meta">... </span>   <span class="keyword">for</span> cell <span class="keyword">in</span> row:</span><br><span class="line"><span class="meta">... </span>       <span class="built_in">print</span>(cell)</span><br><span class="line">&lt;Cell Sheet1.A1&gt;</span><br><span class="line">&lt;Cell Sheet1.B1&gt;</span><br><span class="line">&lt;Cell Sheet1.C1&gt;</span><br><span class="line">&lt;Cell Sheet1.A2&gt;</span><br><span class="line">&lt;Cell Sheet1.B2&gt;</span><br><span class="line">&lt;Cell Sheet1.C2&gt;</span><br></pre></td></tr></table></figure><p>同样，该<code>Worksheet.iter_cols()</code>方法将返回列：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> col <span class="keyword">in</span> ws.iter_cols(min_row=<span class="number">1</span>, max_col=<span class="number">3</span>, max_row=<span class="number">2</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">for</span> cell <span class="keyword">in</span> col:</span><br><span class="line"><span class="meta">... </span>        <span class="built_in">print</span>(cell)</span><br><span class="line">&lt;Cell Sheet1.A1&gt;</span><br><span class="line">&lt;Cell Sheet1.A2&gt;</span><br><span class="line">&lt;Cell Sheet1.B1&gt;</span><br><span class="line">&lt;Cell Sheet1.B2&gt;</span><br><span class="line">&lt;Cell Sheet1.C1&gt;</span><br><span class="line">&lt;Cell Sheet1.C2&gt;</span><br></pre></td></tr></table></figure><p>如果需要遍历文件的所有行或列，则可以使用 <code>Worksheet.rows</code>属性：</p><p>如果需要遍历文件的所有行或列，则可以使用 <code>Worksheet.rows</code>属性：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ws = wb.active</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ws[<span class="string">&#x27;C9&#x27;</span>] = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">tuple</span>(ws.rows)</span><br><span class="line">((&lt;Cell Sheet.A1&gt;, &lt;Cell Sheet.B1&gt;, &lt;Cell Sheet.C1&gt;),</span><br><span class="line">(&lt;Cell Sheet.A2&gt;, &lt;Cell Sheet.B2&gt;, &lt;Cell Sheet.C2&gt;),</span><br><span class="line">(&lt;Cell Sheet.A3&gt;, &lt;Cell Sheet.B3&gt;, &lt;Cell Sheet.C3&gt;),</span><br><span class="line">(&lt;Cell Sheet.A4&gt;, &lt;Cell Sheet.B4&gt;, &lt;Cell Sheet.C4&gt;),</span><br><span class="line">(&lt;Cell Sheet.A5&gt;, &lt;Cell Sheet.B5&gt;, &lt;Cell Sheet.C5&gt;),</span><br><span class="line">(&lt;Cell Sheet.A6&gt;, &lt;Cell Sheet.B6&gt;, &lt;Cell Sheet.C6&gt;),</span><br><span class="line">(&lt;Cell Sheet.A7&gt;, &lt;Cell Sheet.B7&gt;, &lt;Cell Sheet.C7&gt;),</span><br><span class="line">(&lt;Cell Sheet.A8&gt;, &lt;Cell Sheet.B8&gt;, &lt;Cell Sheet.C8&gt;),</span><br><span class="line">(&lt;Cell Sheet.A9&gt;, &lt;Cell Sheet.B9&gt;, &lt;Cell Sheet.C9&gt;))</span><br></pre></td></tr></table></figure><p>或<code>Worksheet.columns</code>属性：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">tuple</span>(ws.columns)</span><br><span class="line">((&lt;Cell Sheet.A1&gt;,</span><br><span class="line">&lt;Cell Sheet.A2&gt;,</span><br><span class="line">&lt;Cell Sheet.A3&gt;,</span><br><span class="line">&lt;Cell Sheet.A4&gt;,</span><br><span class="line">&lt;Cell Sheet.A5&gt;,</span><br><span class="line">&lt;Cell Sheet.A6&gt;,</span><br><span class="line">...</span><br><span class="line">&lt;Cell Sheet.B7&gt;,</span><br><span class="line">&lt;Cell Sheet.B8&gt;,</span><br><span class="line">&lt;Cell Sheet.B9&gt;),</span><br><span class="line">(&lt;Cell Sheet.C1&gt;,</span><br><span class="line">&lt;Cell Sheet.C2&gt;,</span><br><span class="line">&lt;Cell Sheet.C3&gt;,</span><br><span class="line">&lt;Cell Sheet.C4&gt;,</span><br><span class="line">&lt;Cell Sheet.C5&gt;,</span><br><span class="line">&lt;Cell Sheet.C6&gt;,</span><br><span class="line">&lt;Cell Sheet.C7&gt;,</span><br><span class="line">&lt;Cell Sheet.C8&gt;,</span><br><span class="line">&lt;Cell Sheet.C9&gt;))</span><br></pre></td></tr></table></figure><div class="note danger flat"><p>出于性能原因，该<code>Worksheet.iter_cols()</code>和<code>Worksheet.columns</code>方法在只读模式下不可用。</p></div><h3 id="获取最大行或最大列"><a href="#获取最大行或最大列" class="headerlink" title="获取最大行或最大列"></a>获取最大行或最大列</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获得最大列和最大行</span></span><br><span class="line"><span class="built_in">print</span>(sheet.max_row)</span><br><span class="line"><span class="built_in">print</span>(sheet.max_column)</span><br></pre></td></tr></table></figure><h3 id="仅值"><a href="#仅值" class="headerlink" title="仅值"></a>仅值</h3><p>如果只需要工作表中的值，则可以使用该<code>Worksheet.values</code>属性。这将遍历工作表中的所有行，但仅返回单元格值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> ws.values:</span><br><span class="line">   <span class="keyword">for</span> value <span class="keyword">in</span> row:</span><br><span class="line">     <span class="built_in">print</span>(value)</span><br><span class="line"><span class="comment"># value取值</span></span><br><span class="line"><span class="built_in">print</span>(ws[<span class="string">&#x27;A1&#x27;</span>].value)</span><br></pre></td></tr></table></figure><p><code>Worksheet.iter_rows()</code>和<code>Worksheet.iter_cols()</code>都可以使用values_only参数来返回单元格的值:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一行到第二行 第二列到第三列 范围内的值</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> ws.iter_rows(min_row=<span class="number">1</span>,min_col=<span class="number">2</span>,max_col=<span class="number">3</span>,max_row=<span class="number">2</span>,values_only=<span class="literal">True</span>):</span><br><span class="line">    <span class="built_in">print</span>(row)</span><br></pre></td></tr></table></figure><h3 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ws[<span class="string">&#x27;A1&#x27;</span>].value=<span class="string">&quot;111&quot;</span></span><br><span class="line"><span class="built_in">print</span>(ws[<span class="string">&#x27;A1&#x27;</span>].value)  <span class="comment"># 111</span></span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">ws[<span class="string">&#x27;A2&#x27;</span>]=<span class="string">&#x27;ppppp&#x27;</span></span><br><span class="line"><span class="comment"># 保存到文件</span></span><br><span class="line"><span class="comment"># 此操作将覆盖现有文件，而不会发出警告。</span></span><br><span class="line">wb.save(<span class="string">r&#x27;D:\date.xlsx&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="Saving-as-a-stream"><a href="#Saving-as-a-stream" class="headerlink" title="Saving as a stream"></a>Saving as a stream</h3><p>如果要将文件保存到流中，例如在使用Web应用程序（例如Pyramid，Flask或Django）时，只需提供以下命令即可 <code>NamedTemporaryFile()</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> tempfile <span class="keyword">import</span> NamedTemporaryFile</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> openpyxl <span class="keyword">import</span> Workbook</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>wb = Workbook()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> NamedTemporaryFile() <span class="keyword">as</span> tmp:</span><br><span class="line">        wb.save(tmp.name)</span><br><span class="line">        tmp.seek(<span class="number">0</span>)</span><br><span class="line">        stream = tmp.read()</span><br></pre></td></tr></table></figure><p>您可以指定属性template = True，以将工作簿另存为模板：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>wb = load_workbook(<span class="string">&#x27;document.xlsx&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>wb.template = <span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>wb.save(<span class="string">&#x27;document_template.xltx&#x27;</span>)</span><br></pre></td></tr></table></figure><p>或将此属性设置为False（默认），以另存为文档：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>wb = load_workbook(<span class="string">&#x27;document_template.xltx&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>wb.template = <span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>wb.save(<span class="string">&#x27;document.xlsx&#x27;</span>, as_template=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><div class="note danger flat"><p>警告</p><p>您应该监视数据属性和文档扩展名以将文档保存在文档模板中，反之亦然，否则结果表引擎将无法打开文档。</p></div><h2 id="列宽行高"><a href="#列宽行高" class="headerlink" title="列宽行高"></a>列宽行高</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ws.column_dimensions[<span class="string">&#x27;H&#x27;</span>].width = <span class="number">88.0</span></span><br><span class="line">ws.row_dimensions[<span class="string">&#x27;1&#x27;</span>].width = <span class="number">88.0</span></span><br></pre></td></tr></table></figure><h2 id="从文件加载"><a href="#从文件加载" class="headerlink" title="从文件加载"></a>从文件加载</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> load_workbook</span><br><span class="line">wb=load_workbook(<span class="string">r&#x27;E:\qwe.xlsx&#x27;</span>)</span><br><span class="line">ws=wb.active</span><br><span class="line"><span class="built_in">print</span>(ws)<span class="comment"># &lt;Worksheet &quot;Sheet1&quot;&gt;</span></span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="使用数字公式"><a href="#使用数字公式" class="headerlink" title="使用数字公式"></a>使用数字公式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> datetime</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> openpyxl <span class="keyword">import</span> Workbook</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>wb = Workbook()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ws = wb.active</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># set date using a Python datetime</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ws[<span class="string">&#x27;A1&#x27;</span>] = datetime.datetime(<span class="number">2010</span>, <span class="number">7</span>, <span class="number">21</span>)</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ws[<span class="string">&#x27;A1&#x27;</span>].number_format</span><br><span class="line"><span class="string">&#x27;yyyy-mm-dd h:mm:ss&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="使用公式"><a href="#使用公式" class="headerlink" title="使用公式"></a>使用公式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> openpyxl <span class="keyword">import</span> Workbook</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>wb = Workbook()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ws = wb.active</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># add a simple formula</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ws[<span class="string">&quot;A1&quot;</span>] = <span class="string">&quot;=SUM(1, 1)&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>wb.save(<span class="string">&quot;formula.xlsx&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="合并-取消合并单元格"><a href="#合并-取消合并单元格" class="headerlink" title="合并/取消合并单元格"></a>合并/取消合并单元格</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> openpyxl.workbook <span class="keyword">import</span> Workbook</span><br><span class="line"></span><br><span class="line">wb = Workbook()</span><br><span class="line">ws = wb.active</span><br><span class="line"><span class="comment"># merge_cells合并； unmerge_cells取消；</span></span><br><span class="line">ws.merge_cells (<span class="string">&#x27;A2:D2&#x27;</span>)</span><br><span class="line">ws.unmerge_cells(<span class="string">&#x27;A2:D2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># or equivalently</span></span><br><span class="line">ws.merge_cells(start_row=<span class="number">2</span>, start_column=<span class="number">1</span>, end_row=<span class="number">4</span>, end_column=<span class="number">4</span>)</span><br><span class="line">ws.unmerge_cells(start_row=<span class="number">2</span>, start_column=<span class="number">1</span>, end_row=<span class="number">4</span>, end_column=<span class="number">4</span>)</span><br></pre></td></tr></table></figure><h3 id="插入图像"><a href="#插入图像" class="headerlink" title="插入图像"></a>插入图像</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用Image创建</span></span><br><span class="line">img = Image(<span class="string">&#x27;logo.png&#x27;</span>)</span><br><span class="line"><span class="comment"># add to worksheet and anchor next to cells</span></span><br><span class="line">ws.add_image(img, <span class="string">&#x27;A1&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="将数据以行的形式添加到工作薄中"><a href="#将数据以行的形式添加到工作薄中" class="headerlink" title="将数据以行的形式添加到工作薄中"></a>将数据以行的形式添加到工作薄中</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将数据以行的形式添加到工作薄中</span></span><br><span class="line">data = [</span><br><span class="line">    [<span class="string">&#x27;Mike&#x27;</span>, <span class="string">&#x27;18&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;Jack&#x27;</span>, <span class="string">&#x27;18&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;Jerry&#x27;</span>, <span class="string">&#x27;18&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;Jacky&#x27;</span>, <span class="string">&#x27;18&#x27;</span>],</span><br><span class="line">    ]</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> data:</span><br><span class="line">    ws.append(row)</span><br></pre></td></tr></table></figure><h2 id="插入和删除行和列，移动单元格的范围"><a href="#插入和删除行和列，移动单元格的范围" class="headerlink" title="插入和删除行和列，移动单元格的范围"></a>插入和删除行和列，移动单元格的范围</h2><h3 id="插入行和列"><a href="#插入行和列" class="headerlink" title="插入行和列"></a>插入行和列</h3><p>您可以使用相关的工作表方法插入行或列：</p><blockquote><ul><li><a href="https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.worksheet.html#openpyxl.worksheet.worksheet.Worksheet.insert_rows"><code>openpyxl.worksheet.worksheet.Worksheet.insert_rows()</code></a></li><li><a href="https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.worksheet.html#openpyxl.worksheet.worksheet.Worksheet.insert_cols"><code>openpyxl.worksheet.worksheet.Worksheet.insert_cols()</code></a></li><li><a href="https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.worksheet.html#openpyxl.worksheet.worksheet.Worksheet.delete_rows"><code>openpyxl.worksheet.worksheet.Worksheet.delete_rows()</code></a></li><li><a href="https://openpyxl.readthedocs.io/en/stable/api/openpyxl.worksheet.worksheet.html#openpyxl.worksheet.worksheet.Worksheet.delete_cols"><code>openpyxl.worksheet.worksheet.Worksheet.delete_cols()</code></a></li></ul></blockquote><p>默认值为一行或一列。例如，在第7行（在现有第7行之前）插入一行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ws.insert_rows(<span class="number">7</span>)</span><br></pre></td></tr></table></figure><h3 id="删除行和列"><a href="#删除行和列" class="headerlink" title="删除行和列"></a>删除行和列</h3><p>删除列<code>F:H</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ws.delete_cols(<span class="number">6</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><h3 id="单元格移动范围"><a href="#单元格移动范围" class="headerlink" title="单元格移动范围"></a>单元格移动范围</h3><p>您还可以在工作表中移动单元格区域：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ws.move_range(<span class="string">&quot;D4:F10&quot;</span>, rows=-<span class="number">1</span>, cols=<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>这会将范围内的单元格<code>D4:F10</code>向上移动一列，向右移动两列。单元将覆盖任何现有单元。</p><p>如果单元格包含公式，则可以让openpyxl为您翻译这些公式，但是由于并非总是您想要的，因此默认情况下将其禁用。同样，仅单元格中的公式将被翻译。其他单元格或已定义名称对单元格的引用将不会更新；您可以使用 <a href="https://openpyxl.readthedocs.io/en/stable/formula.html">解析公式</a>转换器执行此操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ws.move_range(<span class="string">&quot;G4:H10&quot;</span>, rows=<span class="number">1</span>, cols=<span class="number">1</span>, translate=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>这会将公式中的相对引用在范围内移动一行一列。</p><h2 id="Excel样式"><a href="#Excel样式" class="headerlink" title="Excel样式"></a>Excel样式</h2><p>样式可以应用于以下方面：</p><blockquote><ul><li>用于设置字体大小，颜色，下划线等的字体</li><li>填充以设置图案或颜色渐变</li><li>边框在单元格上设置边框</li><li>详细样式查看<a href="https://openpyxl.readthedocs.io/en/stable/styles.html#colours">官网样式文档</a></li></ul></blockquote><h3 id="单元格样式"><a href="#单元格样式" class="headerlink" title="单元格样式"></a>单元格样式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> openpyxl.styles <span class="keyword">import</span> colors</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> openpyxl.styles <span class="keyword">import</span> Font, Color</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> openpyxl <span class="keyword">import</span> Workbook</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>wb = Workbook()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ws = wb.active</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a1 = ws[<span class="string">&#x27;A1&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d4 = ws[<span class="string">&#x27;D4&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ft = Font(color=<span class="string">&quot;FF0000&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a1.font = ft</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d4.font = ft</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a1.font.italic = <span class="literal">True</span> <span class="comment"># is not allowed # doctest: +SKIP</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># If you want to change the color of a Font, you need to reassign it::</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a1.font = Font(color=<span class="string">&quot;FF0000&quot;</span>, italic=<span class="literal">True</span>) <span class="comment"># the change only affects A1</span></span><br></pre></td></tr></table></figure><h3 id="复制样式"><a href="#复制样式" class="headerlink" title="复制样式"></a>复制样式</h3><p>样式也可以复制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> openpyxl.styles <span class="keyword">import</span> Font</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> copy <span class="keyword">import</span> copy</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ft1 = Font(name=<span class="string">&#x27;Arial&#x27;</span>, size=<span class="number">14</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ft2 = copy(ft1)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ft2.name = <span class="string">&quot;Tahoma&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ft1.name</span><br><span class="line"><span class="string">&#x27;Arial&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ft2.name</span><br><span class="line"><span class="string">&#x27;Tahoma&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ft2.size <span class="comment"># copied from the</span></span><br><span class="line"><span class="number">14.0</span></span><br></pre></td></tr></table></figure><h3 id="应用样式"><a href="#应用样式" class="headerlink" title="应用样式"></a>应用样式</h3><p>样式直接应用于单元格</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> openpyxl.workbook <span class="keyword">import</span> Workbook</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> openpyxl.styles <span class="keyword">import</span> Font, Fill</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>wb = Workbook()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ws = wb.active</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = ws[<span class="string">&#x27;A1&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.font = Font(size=<span class="number">12</span>)</span><br></pre></td></tr></table></figure><p>样式也可以应用于列和行，但是请注意，这仅适用于关闭文件后在Excel中创建的单元格。如果要将样式应用于整个行和列，则必须自己将样式应用于每个单元格。这是文件格式的限制：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>col = ws.column_dimensions[<span class="string">&#x27;A&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>col.font = Font(bold=<span class="literal">True</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>row = ws.row_dimensions[<span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>row.font = Font(underline=<span class="string">&quot;single&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="命名样式"><a href="#命名样式" class="headerlink" title="命名样式"></a>命名样式</h3><p>官网给的教程不生效，这是自己搜索出来的简便写法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> openpyxl.styles <span class="keyword">import</span> Font</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">myStyle = Font(bold=<span class="literal">True</span>,size=<span class="number">12</span>,color=<span class="string">&#x27;00800000&#x27;</span>)  <span class="comment"># 加粗，字体，字体颜色</span></span><br></pre></td></tr></table></figure><h3 id="应用样式-1"><a href="#应用样式-1" class="headerlink" title="应用样式"></a>应用样式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ws[<span class="string">&#x27;A1&#x27;</span>].font = mystyle</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给A1,B1,C1,A3,B3....添加定义好的myStyle样式</span></span><br><span class="line"><span class="comment"># eg: leibie_hangList = [1,3,7,8,11,66,88]</span></span><br><span class="line"><span class="keyword">for</span> hang_digit <span class="keyword">in</span> leibie_hangList:</span><br><span class="line">    <span class="keyword">for</span> abc <span class="keyword">in</span> [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>]:</span><br><span class="line">        ws[<span class="string">&#x27;&#123;&#125;&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(abc,hang_digit)].font = myStyle</span><br></pre></td></tr></table></figure><h2 id="设置单元格颜色"><a href="#设置单元格颜色" class="headerlink" title="设置单元格颜色"></a>设置单元格颜色</h2><p>介绍之前，我们在写代码时，要先导入openpyxl，并创建一个新sheet。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> openpyxl.styles <span class="keyword">import</span> PatternFill</span><br><span class="line"></span><br><span class="line">workbook = openpyxl.Workbook()</span><br><span class="line">sheet = workbook.create_sheet(index=<span class="number">0</span>, title=<span class="string">&quot;Report&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="方法一：使用fgColor填充指定单元格前景色"><a href="#方法一：使用fgColor填充指定单元格前景色" class="headerlink" title="方法一：使用fgColor填充指定单元格前景色"></a>方法一：使用<code>fgColor</code>填充指定单元格前景色</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sheet.append([<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>])</span><br><span class="line">sheet.append([<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;F&#x27;</span>])</span><br><span class="line">orange_fill = PatternFill(fill_type=<span class="string">&#x27;solid&#x27;</span>, fgColor=<span class="string">&quot;FFC125&quot;</span>)</span><br><span class="line">sheet.cell(row=<span class="number">1</span>, column=<span class="number">1</span>).fill = orange_fill</span><br></pre></td></tr></table></figure><p>注意：fill_type为填充类型，如果不写的话，则没有效果。</p><p><img src="_1" alt=""></p><h3 id="方法二：使用start-color和end-color填充指定单元格颜色"><a href="#方法二：使用start-color和end-color填充指定单元格颜色" class="headerlink" title="方法二：使用start_color和end_color填充指定单元格颜色"></a>方法二：使用<code>start_color和end_color</code>填充指定单元格颜色</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sheet.append([<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>])</span><br><span class="line">sheet.append([<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;F&#x27;</span>])</span><br><span class="line"></span><br><span class="line">green_fill = PatternFill(start_color=<span class="string">&quot;AACF91&quot;</span>, end_color=<span class="string">&quot;AACF91&quot;</span>, fill_type=<span class="string">&quot;solid&quot;</span>)</span><br><span class="line">sheet.cell(row=<span class="number">1</span>, column=<span class="number">2</span>).fill = green_fill</span><br></pre></td></tr></table></figure><p>注意：end_color可以省略，如果start_color和end_color的值不一致，则显示start_color指定颜色</p><p><img src="_2" alt=""></p><h3 id="方法三：使用bgcolor填充指定单元格背景色"><a href="#方法三：使用bgcolor填充指定单元格背景色" class="headerlink" title="方法三：使用bgcolor填充指定单元格背景色"></a>方法三：使用bgcolor填充指定单元格背景色</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sheet.append([<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>])</span><br><span class="line">sheet.append([<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;F&#x27;</span>])</span><br><span class="line"></span><br><span class="line">green_fill = PatternFill(bgColor=<span class="string">&quot;AACF91&quot;</span>, fill_type=<span class="string">&quot;solid&quot;</span>)</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">green_fill = PatternFill(<span class="string">&quot;solid&quot;</span>, fgColor=<span class="string">&quot;1874CD&quot;</span>)</span><br><span class="line"></span><br><span class="line">sheet.cell(row=<span class="number">1</span>, column=<span class="number">2</span>).fill = green_fill</span><br></pre></td></tr></table></figure><p>注意：不管bgColor赋什么值，背景色都为黑色。如果bgColor和fgColor同时设定，那么显示fgColor指定的颜色</p><p><img src="_3" alt=""></p><h3 id="方法四：填充指定列或行的背景色、"><a href="#方法四：填充指定列或行的背景色、" class="headerlink" title="方法四：填充指定列或行的背景色、"></a>方法四：填充指定列或行的背景色、</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">green_fill = PatternFill(fill_type=<span class="string">&quot;solid&quot;</span>, fgColor=<span class="string">&quot;AACF91&quot;</span>)</span><br><span class="line">sheet.column_dimensions[<span class="string">&#x27;A&#x27;</span>].fill = green_fill<span class="comment"># 填充指定列的背景色</span></span><br><span class="line">sheet.row_dimensions[<span class="number">1</span>].fill = green_fill<span class="comment"># 填充指定行的背景色</span></span><br></pre></td></tr></table></figure><p>注意：sheet.column_dimensions是打开sheet的所有列的集合，使用sheet中的列名来访问，比如A、B、C…</p><p>注意：sheet.column_dimensions是打开sheet的所有行的集合，使用sheet中的行号来访问，指定0行的话，不报错，但是没有任何效果</p><h2 id="RGB颜色值"><a href="#RGB颜色值" class="headerlink" title="RGB颜色值"></a>RGB颜色值</h2><p><a href="https://openpyxl.readthedocs.io/en/stable/styles.html">https://openpyxl.readthedocs.io/en/stable/styles.html</a></p><h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><blockquote><p>先总结到这里了，其他请参考：<a href="https://openpyxl.readthedocs.io/en/stable/index.html">官方文档</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 模块 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql关于InnoDB表误删除掉.frm文件无法删除也无法创建的情况</title>
      <link href="/2020/06/15/database/Mysql%E5%85%B3%E4%BA%8EInnoDB%E8%A1%A8%E8%AF%AF%E5%88%A0%E9%99%A4%E6%8E%89-frm%E6%96%87%E4%BB%B6%E6%97%A0%E6%B3%95%E5%88%A0%E9%99%A4%E4%B9%9F%E6%97%A0%E6%B3%95%E5%88%9B%E5%BB%BA%E7%9A%84%E6%83%85%E5%86%B5/"/>
      <url>/2020/06/15/database/Mysql%E5%85%B3%E4%BA%8EInnoDB%E8%A1%A8%E8%AF%AF%E5%88%A0%E9%99%A4%E6%8E%89-frm%E6%96%87%E4%BB%B6%E6%97%A0%E6%B3%95%E5%88%A0%E9%99%A4%E4%B9%9F%E6%97%A0%E6%B3%95%E5%88%9B%E5%BB%BA%E7%9A%84%E6%83%85%E5%86%B5/</url>
      
        <content type="html"><![CDATA[<p>无意间进入了<code>/data/mysql/$(database_name)/</code> 下，误删了<code>$(table_name).frm</code>，之后drop 或者 create都报错，直接创建也会提示此表已经存在，是删也删不掉，建也建不了，网上查了下说是因为表在 innodb 内部数据字典中已存在，没有相对应的 .frm 文件,在 innodb 的数据文件中就形成了一个孤表(orphaned table)。</p><p>ERROR 如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[Err] 1005 - Can&#x27;t create table</span><br><span class="line">or</span><br><span class="line">Table already exist</span><br></pre></td></tr></table></figure><p>   经查询在下面的文章中找到了答案：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">table test/parent already exists in innodb internal data dictionary.</span><br><span class="line">have you deleted the .frm file and not used drop table?</span><br><span class="line">have you used drop database for innodb tables in mysql version &lt;= 3.23.43?</span><br><span class="line">see the restrictions section of the innodb manual.</span><br><span class="line">you can drop the orphaned table inside innodb creating an innodb table with the same name in another database and moving the .frm file to the current database.</span><br><span class="line">then mysql thinks the table exists, and drop table will innodb: succeed.</span><br></pre></td></tr></table></figure><p>意思就是说：你可以通过在另外一个数据库中创建一个相同名字的innodb表，并把.frm拷贝到这个数据库目录下，数据库就会认为这个表存在，再执行drop table就可以删除掉了。</p><p>操作如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 在其他数据库创建一个相同命明的表名，内部结构随意，我只创建了一个 id 类型</span><br><span class="line"># 复制上一步生成的.frm 到你之前误删除的的目录下</span><br><span class="line"># chown mysql:mysql 你复制过来的******.frm</span><br><span class="line"># 以上三部修复完成</span><br></pre></td></tr></table></figure><p>写的很清楚了，还不会。。。</p>]]></content>
      
      
      <categories>
          
          <category> database </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> frm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos6.8安装图解详细教程</title>
      <link href="/2020/06/11/%E8%AE%A1%E7%AE%97%E6%9C%BA/Centos%E5%AE%89%E8%A3%85%E5%9B%BE%E8%A7%A3%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/"/>
      <url>/2020/06/11/%E8%AE%A1%E7%AE%97%E6%9C%BA/Centos%E5%AE%89%E8%A3%85%E5%9B%BE%E8%A7%A3%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文出自：<a href="https://www.osyunwei.com/archives/9505.html">https://www.osyunwei.com/archives/9505.html</a></p></blockquote><p>操作系统：CentOS 6.8 64位</p><p>IP地址：192.168.21.129</p><p>网关：192.168.21.2</p><p>DNS：8.8.8.8 8.8.4.4</p><h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>CentOS 6.8系统镜像有32位和64位两个版本，并且还有专门针对服务器优化过的minimal版本</p><p>生产服务器如果是大内存（4G以上内存），建议安装CentOS-6.8-x86_64-minimal.iso版本</p><h2 id="附：CentOS-6-8下载地址"><a href="#附：CentOS-6-8下载地址" class="headerlink" title="附：CentOS 6.8下载地址"></a>附：CentOS 6.8下载地址</h2><p>32位minimal版本：</p><p><a href="http://mirrors.aliyun.com/centos/6.8/isos/i386/CentOS-6.8-i386-minimal.iso">http://mirrors.aliyun.com/centos/6.8/isos/i386/CentOS-6.8-i386-minimal.iso</a></p><p>64位minimal.版本：</p><p><a href="http://mirrors.aliyun.com/centos/6.8/isos/x86_64/CentOS-6.8-x86_64-minimal.iso">http://mirrors.aliyun.com/centos/6.8/isos/x86_64/CentOS-6.8-x86_64-minimal.iso</a></p><p>1、安装CentOS 6.8系统的计算机内存必须等于或者大于628M（最小内存628M），才能启用图形安装模式；</p><p>2、CentOS 6.8的系统安装方式分为：图形安装模式和文本安装模式；</p><p>3、CentOS 6.8文本安装模式不支持自定义分区，建议使用图形安装模式安装；</p><p>5、CentOS 6.8系统运行方式分为：带图形界面、可以用鼠标操作的图形化方式和不带图形界面、直接用命令行操作的文本方式（CentOS minimal版本默认是以文本方式运行，在系统安装的过程中没有系统运行方式的自定义选项）；</p><h2 id="一、安装CentOS-6-8"><a href="#一、安装CentOS-6-8" class="headerlink" title="一、安装CentOS 6.8"></a>一、安装CentOS 6.8</h2><p>用光盘成功引导系统，会出现下面的界面</p><p><img src="3257.jpg" alt="img">##  界面说明： </p><p>Install or upgrade an existing system #安装或升级现有的系统</p><p>install system with basic video driver #安装过程中采用基本的显卡驱动</p><p>Rescue installed system #进入系统修复模式</p><p>Boot from local drive #退出安装从硬盘启动</p><p>Memory test #内存检测</p><p>这里选择第一项，安装或升级现有的系统，回车。</p><p>出现是否对CD媒体进行测试的提问，这里选择“Skip”跳过测试。</p><p><img src="3258.jpg" alt="img">出现下面的界面</p><p><img src="3259.jpg" alt="img">系统运维 www.osyunwei.com 温馨提醒：qihang01原创内容©版权所有,转载请注明出处及原文链接</p><p>Next</p><p><img src="3260.jpg" alt="img">选择语言为：English（English） #生产服务器建议安装英文版本</p><p>Next</p><p><img src="3261.jpg" alt="img">键盘选择为：U.S.English</p><p>Next</p><p><img src="3262.jpg" alt="img">选择第一项，基本存储设备</p><p>Next</p><p><img src="3263.jpg" alt="img">选择第一项：Yes，忽略所有数据</p><p>Next</p><p><img src="3264.jpg" alt="img">系统运维 www.osyunwei.com 温馨提醒：qihang01原创内容©版权所有,转载请注明出处及原文链接</p><p>设置主机名，这里默认即可，安装完成之后再修改</p><p>Next</p><p><img src="3265.jpg" alt="img">时区选择：Asia/Shanghai</p><p>“System clock user UTC”  #取消前面打勾，不使用UTC时间</p><p><img src="3266.jpg" alt="img">设置root密码</p><p>Next</p><p><img src="3267.jpg" alt="img">注意：如果你使用的密码过于简单，系统会自动提示：您的密码不够安全，过于简单化/系统化</p><p>这里选择“Use Anyway” 无论如何都使用</p><h2 id="生产环境必须设置强壮复杂的密码"><a href="#生产环境必须设置强壮复杂的密码" class="headerlink" title="生产环境必须设置强壮复杂的密码"></a>生产环境必须设置强壮复杂的密码</h2><p>Next</p><p><img src="3268.jpg" alt="img">选择最后一项，Create Custom Layout 创建自定义分区</p><p>Next</p><p><img src="3269.jpg" alt="img">可以看到硬盘的容量，我这里显示的是5G，现在自定义分区。</p><p>注意：分区之前，自己先要规划好，怎么分区</p><p>我这里的分区如下：</p><p>硬盘总共5G</p><p>swap  #1024M，一般设置为内存2倍</p><p>/  #剩余所有空间</p><h2 id="特别说明："><a href="#特别说明：" class="headerlink" title="特别说明："></a>特别说明：</h2><p>用于正式生产的服务器，切记必须把数据盘单独分区，防止系统出问题时，保证数据的完整性。比如可以再划分一个</p><p>/data专门用来存放数据。</p><p><img src="3270.jpg" alt="img">选中空闲分区Free，点创建Create</p><p>选择标准分区Standard Partition，点创建Create</p><p><img src="3271.jpg" alt="img">文件系统类型：swap</p><p>大小Size：1024</p><p>其他选项默认即可</p><p>确定 OK</p><p><img src="3272.jpg" alt="img">继续选中空闲分区Free，点创建Create</p><p><img src="3273.jpg" alt="img">选择标准分区Standard Partition，点创建Create</p><p><img src="3274.jpg" alt="img">挂载点：/</p><p>文件系统类型：ext4</p><p>选中“使用全部可用空间”</p><p>其他选项默认即可</p><p>确定 OK</p><p><img src="3275.jpg" alt="img">创建好分区之后，如上图所示，然后点Next</p><p><img src="3276.jpg" alt="img">点“Format”格式化</p><p><img src="3277.jpg" alt="img">选择“Write changes to disk”将修改写入磁盘</p><p><img src="3278.jpg" alt="img">默认</p><p>Next</p><p><img src="3279.jpg" alt="img">开始安装</p><p><img src="3280.jpg" alt="img"><img src="3281.jpg" alt="img">安装完成</p><p>点“Reboot”重新引导，系统自动重启</p><p><img src="3282.jpg" alt="img">系统安装完成</p><h2 id="二、设置IP地址、网关、DNS"><a href="#二、设置IP地址、网关、DNS" class="headerlink" title="二、设置IP地址、网关、DNS"></a>二、设置IP地址、网关、DNS</h2><h2 id="说明：CentOS-6-8默认安装好之后是没有自动开启网络连接的！"><a href="#说明：CentOS-6-8默认安装好之后是没有自动开启网络连接的！" class="headerlink" title="说明：CentOS 6.8默认安装好之后是没有自动开启网络连接的！"></a>说明：CentOS 6.8默认安装好之后是没有自动开启网络连接的！</h2><p>输入账号root</p><p>再输入安装过程中设置的密码，登录到系统</p><p>vi /etc/sysconfig/network-scripts/ifcfg-eth0  #编辑配置文件,添加修改以下内容</p><p>BOOTPROTO=static  #启用静态IP地址</p><p>ONBOOT=yes #开启自动启用网络连接</p><p>IPADDR=192.168.21.129 #设置IP地址</p><p>NETMASK=255.255.255.0 #设置子网掩码</p><p>GATEWAY=192.168.21.2  #设置网关</p><p>DNS1=8.8.8.8 #设置主DNS</p><p>DNS2=8.8.4.4 #设置备DNS</p><p>IPV6INIT=no #禁止IPV6</p><p>:wq! #保存退出</p><p>service ip6tables stop  #停止IPV6服务</p><p>chkconfig ip6tables off #禁止IPV6开机启动</p><p>service yum-updatesd stop  #关闭系统自动更新</p><p>chkconfig yum-updatesd off #禁止开启启动</p><p>service network restart  #重启网络连接</p><p>ifconfig #查看IP地址</p><h2 id="三、设置主机名"><a href="#三、设置主机名" class="headerlink" title="三、设置主机名"></a>三、设置主机名</h2><p>约定：</p><p>主机名命名规范：业务.机房.主备.域名</p><p>这里设置主机名为：bbs.hz.m.osyunwei.com</p><p>1、hostname “bbs.hz.m.osyunwei.com”</p><h1 id="设置主机名为bbs-hz-m-osyunwei-com"><a href="#设置主机名为bbs-hz-m-osyunwei-com" class="headerlink" title="设置主机名为bbs.hz.m.osyunwei.com"></a>设置主机名为bbs.hz.m.osyunwei.com</h1><p>2、vi /etc/sysconfig/network #编辑配置文件</p><p>HOSTNAME= bbs.hz.m.osyunwei.com</p><h1 id="修改localhost-localdomain为bbs-hz-m-osyunwei-com"><a href="#修改localhost-localdomain为bbs-hz-m-osyunwei-com" class="headerlink" title="修改localhost.localdomain为bbs.hz.m.osyunwei.com"></a>修改localhost.localdomain为bbs.hz.m.osyunwei.com</h1><p>:wq! #保存退出</p><p>3、vi /etc/hosts #编辑配置文件</p><p>127.0.0.1 bbs.hz.m.osyunwei.com localhost</p><h1 id="修改localhost-localdomain为bbs-hz-m-osyunwei-com-1"><a href="#修改localhost-localdomain为bbs-hz-m-osyunwei-com-1" class="headerlink" title="修改localhost.localdomain为bbs.hz.m.osyunwei.com"></a>修改localhost.localdomain为bbs.hz.m.osyunwei.com</h1><p>:wq! #保存退出</p><p>shutdown -r now #重启系统</p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端之BOM和DOM</title>
      <link href="/2020/04/02/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E4%B9%8BBOM%E5%92%8CDOM/"/>
      <url>/2020/04/02/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E4%B9%8BBOM%E5%92%8CDOM/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BOM和DOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端之JavaScript</title>
      <link href="/2020/04/02/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E4%B9%8BJavaScript/"/>
      <url>/2020/04/02/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E4%B9%8BJavaScript/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript基础"><a href="#JavaScript基础" class="headerlink" title="JavaScript基础"></a>JavaScript基础</h1><h2 id="1、JavaScript是什么"><a href="#1、JavaScript是什么" class="headerlink" title="1、JavaScript是什么"></a>1、JavaScript是什么</h2><p>JavaScript（下文我们会用简称JS来代替）是脚本编程语言，JS语言开发的文件是以.js为后缀，通过在html文件中引入该js文件来控制html代码的交互功能以及前台数据处理的业务逻辑（js语言代码也可以直接写在html文件中），采用的<a href="https://baike.baidu.com/item/ECMAScript/1889420?fr=aladdin">ECMAScript</a>语法，属于编程语言。</p><p>ECMAScript目前普遍使用的存在ES5与ES6两个版本，我们也会基于这两个版本来介绍JS这么应用的学习</p><h2 id="2、JavaScript如何学习"><a href="#2、JavaScript如何学习" class="headerlink" title="2、JavaScript如何学习"></a>2、JavaScript如何学习</h2><p>学习方向：从JS代码书写位置、JS基础语法、JS选择器和JS页面操作四部分进行学习</p><p>学习目的：完成页面标签与用户的人机交互及前台数据处理的业务逻辑</p><h2 id="3、JS代码书写位置"><a href="#3、JS代码书写位置" class="headerlink" title="3、JS代码书写位置"></a>3、JS代码书写位置</h2><p>JS属于脚本(可以以代码片段的方式内嵌到其他语言中)编程语言，可以内嵌到html代码中，但是可以根据实际情况书写在不同的位置，放在不同位置有不同的专业叫法，可以分为行间式、内联式和外联式三种。</p><h3 id="3-1-行间式"><a href="#3-1-行间式" class="headerlink" title="3-1 行间式"></a>3-1 行间式</h3><p>JS代码书写在标签的事件全局属性中，采用的是JS编程语言的语法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 关键代码 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 给div标签添加点击事件的交互逻辑：弹出文本提示框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;点击我完成页面交互&#x27;)&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-内联式"><a href="#3-2-内联式" class="headerlink" title="3-2 内联式"></a>3-2 内联式</h3><p>JS代码书写在script标签中，script标签可以出现在页面中的任意位置，建议放在body标签的最后(html代码是自上而下进行解析加载，放在body标签的最下方，会保证页面所有标签都加载完毕，html再去加载js文件，那么js脚步文件就会更好的控制页面标签的人机交互了)，采用的是JS编程语言的语法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 关键代码 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 页面被加载打开时，就会触发事件的交互逻辑：弹出文本提示框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- body标签中的所有子标签位置 --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- script标签出现在body标签的最下方 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="string">&#x27;该页面被加载！&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-3-外联式"><a href="#3-3-外联式" class="headerlink" title="3-3 外联式"></a>3-3 外联式</h3><p>JS代码书在外部js文件中，在html页面中用script标签引入js文件（建议在body标签最下方引入，理由同上）</p><ul><li>js文件夹下的my.js</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(&#x27;外联式js文件弹出框&#x27;)</span><br></pre></td></tr></table></figure><ul><li>根目录下的first.html</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 关键代码 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 页面被加载打开时，就会触发事件的交互逻辑：弹出文本提示框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- body标签中的所有子标签位置 --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- script标签出现在body标签的最下方 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/my.js&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/* 不要在此写JS代码，原因是用来引入外部js文件的script标签，标签内部书写的JS代码不在起作用 */</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>根目录下的second.html</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 关键代码 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 页面被加载打开时，就会触发事件的交互逻辑：弹出文本提示框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- body标签中的所有子标签位置 --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- script标签出现在body标签的最下方 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/my.js&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/* 不要在此写JS代码，原因是用来引入外部js文件的script标签，标签内部书写的JS代码不在起作用 */</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4、总结"><a href="#4、总结" class="headerlink" title="4、总结"></a>4、总结</h2><p>行间式控制交互最直接，但是交互逻辑多了直接导致页面可读性变差，且交互逻辑相同的标签样式也需要各自设置，复用性差，不建议使用；</p><p>内联式可以同时为多个标签提供交互逻辑（课程后面会详细介绍），学习阶段代码量不大的情况下，也不需要分文件处理的，这时候建议使用内联式；</p><p>外联式是分文件管理不同的页面存在的相同与不同的数据处理的业务逻辑与人机交互，可以极大提高开发效率，项目开发时一定要采用外联式来处理JS代码。</p><p>通过上面的介绍，大家很清楚JS是一门脚本编程语言，那么我们一定先要了解一下这门编程语言的基础语法，才可以慢慢的展开学。</p><h1 id="JavaScript基础数据类型"><a href="#JavaScript基础数据类型" class="headerlink" title="JavaScript基础数据类型"></a>JavaScript基础数据类型</h1><h2 id="1、变量的定义"><a href="#1、变量的定义" class="headerlink" title="1、变量的定义"></a>1、变量的定义</h2><p>JS中定义变量，不同于Python，我们需要像Python定义函数那样，也需要用特定的关键词来定义变量：</p><p>ES5语法，我们采用var关键词定义变量，并且没有常量的概念</p><p>ES6语法，我们采用let关键词定义变量，用const关键词定义常量</p><p>注：我们不需要像Python那样切换解释器版本来区别到底该书写什么版本语法的代码，在一个JS文件中我们可以同时书写两种语法的JS代码，浏览器都可以自动帮我们解析并运行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5定义变量：var是关键词、num是变量名、=为赋值符、10为变量值、;为JS语言语句的结束标识符</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6定义变量</span></span><br><span class="line"><span class="keyword">let</span> count = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.14</span>;</span><br></pre></td></tr></table></figure><h2 id="2、变量的命名规范"><a href="#2、变量的命名规范" class="headerlink" title="2、变量的命名规范"></a>2、变量的命名规范</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. 由字母，数字，_，$组成，不能以数字开头（可以包含中文字符）</span></span><br><span class="line"><span class="comment">2. 区分大小写</span></span><br><span class="line"><span class="comment">3. 不能出现关键字及保留字</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>abstract</td><td>arguments</td><td>boolean</td><td>break</td><td>byte</td></tr><tr><td>case</td><td>catch</td><td>char</td><td>class*</td><td>const</td></tr><tr><td>continue</td><td>debugger</td><td>default</td><td>delete</td><td>do</td></tr><tr><td>double</td><td>else</td><td>enum*</td><td>eval</td><td>export*</td></tr><tr><td>extends*</td><td>false</td><td>final</td><td>finally</td><td>float</td></tr><tr><td>for</td><td>function</td><td>goto</td><td>if</td><td>implements</td></tr><tr><td>import*</td><td>in</td><td>instanceof</td><td>int</td><td>interface</td></tr><tr><td>let</td><td>long</td><td>native</td><td>new</td><td>null</td></tr><tr><td>package</td><td>private</td><td>protected</td><td>public</td><td>return</td></tr><tr><td>short</td><td>static</td><td>super*</td><td>switch</td><td>synchronized</td></tr><tr><td>this</td><td>throw</td><td>throws</td><td>transient</td><td>true</td></tr><tr><td>try</td><td>typeof</td><td>var</td><td>void</td><td>volatile</td></tr><tr><td>while</td><td>with</td><td>yield</td><td></td></tr></tbody></table></div><h2 id="3、基本数据类型"><a href="#3、基本数据类型" class="headerlink" title="3、基本数据类型"></a>3、基本数据类型</h2><p>JS语言中基本数据类型分值类型与引用类型两部分。</p><h3 id="3-1-值类型"><a href="#3-1-值类型" class="headerlink" title="3-1 值类型"></a>3-1 值类型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数字类型：number</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.14</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">typeof</span>(num), num);  <span class="comment">// 结果：number  10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串类型：string</span></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="string">&quot;双引号可以表示字符串&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> s2 = <span class="string">&#x27;单引号可以表示字符串&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">typeof</span>(s1), s1);  <span class="comment">// 结果：string  双引号可以表示字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 布尔类型：boolean</span></span><br><span class="line"><span class="keyword">var</span> b1 = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> b2 = <span class="literal">false</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">typeof</span>(b1), b1);  <span class="comment">// 结果：boolean true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 未定义类型：undefined</span></span><br><span class="line"><span class="keyword">var</span> u1;</span><br><span class="line"><span class="keyword">var</span> u2 = <span class="literal">undefined</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">typeof</span>(u1), u1);  <span class="comment">// 结果：undefined  undefined</span></span><br></pre></td></tr></table></figure><h3 id="3-2-引用类型"><a href="#3-2-引用类型" class="headerlink" title="3-2 引用类型"></a>3-2 引用类型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数类型：function</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> fn2 = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">typeof</span>(fn1), fn1);  <span class="comment">// 结果：function  ƒ fn1() &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象类型：object</span></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">typeof</span>(obj1), obj1);  <span class="comment">// 结果：function  &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Array对象类型：</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">typeof</span>(arr1), arr1);  <span class="comment">// 结果：object  (5) [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><h2 id="4、运算符"><a href="#4、运算符" class="headerlink" title="4、运算符"></a>4、运算符</h2><h3 id="4-1-算数运算符"><a href="#4-1-算数运算符" class="headerlink" title="4-1 算数运算符"></a>4-1 算数运算符</h3><p>前提：n = 5</p><div class="table-container"><table><thead><tr><th>运算符</th><th>描述</th><th>例子</th><th>x结果</th><th>n结果</th></tr></thead><tbody><tr><td>+</td><td>加法</td><td>x=n+2</td><td>7</td><td>5</td></tr><tr><td>-</td><td>减法</td><td>x=n-2</td><td>3</td><td>5</td></tr><tr><td>*</td><td>乘法</td><td>x=n*2</td><td>10</td><td>5</td></tr><tr><td>/</td><td>除法</td><td>x=n/2</td><td>2.5</td><td>5</td></tr><tr><td>%</td><td>取模(余数)</td><td>x=n/2</td><td>1</td><td>5</td></tr><tr><td>++</td><td>自增</td><td>x=++n</td><td>6</td><td>6</td></tr><tr><td>x=n++</td><td>5</td><td>6</td><td></td><td></td></tr><tr><td>—</td><td>自减</td><td>x=—n</td><td>4</td><td>4</td></tr><tr><td>x=n—</td><td>5</td><td>4</td><td></td></tr></tbody></table></div><h3 id="4-2-赋值运算符"><a href="#4-2-赋值运算符" class="headerlink" title="4-2 赋值运算符"></a>4-2 赋值运算符</h3><p>前提：x=5，y=5</p><div class="table-container"><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">例子</th><th>等同于</th><th>运算结果</th></tr></thead><tbody><tr><td style="text-align:left">=</td><td style="text-align:left">x=y</td><td></td><td>5</td></tr><tr><td style="text-align:left">+=</td><td style="text-align:left">x+=y</td><td>x=x+y</td><td>10</td></tr><tr><td style="text-align:left">-=</td><td style="text-align:left">x-=y</td><td>x=x-y</td><td>0</td></tr><tr><td style="text-align:left">*=</td><td style="text-align:left">x*=y</td><td>x=x*y</td><td>25</td></tr><tr><td style="text-align:left">/=</td><td style="text-align:left">x/=y</td><td>x=x/y</td><td>1</td></tr><tr><td style="text-align:left">%=</td><td style="text-align:left">x%=y</td><td>x=x%y</td><td>0</td></tr></tbody></table></div><h3 id="4-3-比较运算符"><a href="#4-3-比较运算符" class="headerlink" title="4-3 比较运算符"></a>4-3 比较运算符</h3><p>前提：x=5</p><div class="table-container"><table><thead><tr><th>运算符</th><th>描述</th><th>比较</th><th>结果</th></tr></thead><tbody><tr><td>==</td><td>等于</td><td>x==”5”</td><td>true</td></tr><tr><td>===</td><td>绝对等于</td><td>x===”5”</td><td>false</td></tr><tr><td>!=</td><td>不等于</td><td>x!=”5”</td><td>fales</td></tr><tr><td>!==</td><td>不绝对等于</td><td>x!==”5”</td><td>true</td></tr><tr><td>&gt;</td><td>大于</td><td>x&gt;5</td><td>false</td></tr><tr><td>&lt;</td><td>小于</td><td>x&lt;5</td><td>false</td></tr><tr><td>&gt;=</td><td>大于等于</td><td>x&gt;=5</td><td>true</td></tr><tr><td>&lt;=</td><td>小于等于</td><td>x&lt;=5</td><td>true</td></tr></tbody></table></div><h3 id="4-4-逻辑运算符"><a href="#4-4-逻辑运算符" class="headerlink" title="4-4 逻辑运算符"></a>4-4 逻辑运算符</h3><p>前提：n=5</p><div class="table-container"><table><thead><tr><th>运算符</th><th>描述</th><th>例子</th><th>结果</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>与</td><td>x=n&gt;10&amp;&amp;++n</td><td>x=false,n=5（短路）</td></tr><tr><td>\</td><td>\</td><td></td><td>或</td><td>x=n&lt;10\</td><td>\</td><td>n—</td><td>x=true,n=5（短路）</td></tr><tr><td>!</td><td>非</td><td>x=!n</td><td>x=false,x=5</td></tr></tbody></table></div><h3 id="4-5-三目运算符"><a href="#4-5-三目运算符" class="headerlink" title="4-5 三目运算符"></a>4-5 三目运算符</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 结果 = 条件表达式 ? 结果1 : 结果2;</span></span><br><span class="line"><span class="comment">// 语法规则：条件表达式成立，将结果1赋值给结果，反正赋值结果2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 案例：</span></span><br><span class="line"><span class="keyword">var</span> weather = <span class="title function_">prompt</span>(<span class="string">&quot;天气(晴|雨)&quot;</span>);  <span class="comment">// 文本输入弹出框</span></span><br><span class="line"><span class="keyword">var</span> res = weather == <span class="string">&#x27;晴&#x27;</span> ? <span class="string">&quot;今天天气挺好&quot;</span> : <span class="string">&quot;请假回家收衣服&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);  <span class="comment">// 今天天气挺好</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery快速入门</title>
      <link href="/2020/04/02/%E5%89%8D%E7%AB%AF/jQuery%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
      <url>/2020/04/02/%E5%89%8D%E7%AB%AF/jQuery%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端之CSS</title>
      <link href="/2020/04/02/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E4%B9%8BCSS/"/>
      <url>/2020/04/02/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E4%B9%8BCSS/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS-介绍"><a href="#CSS-介绍" class="headerlink" title="CSS 介绍"></a>CSS 介绍</h1><p>CSS（<strong>C</strong>ascading <strong>S</strong>tyle <strong>S</strong>heet，层叠样式表)定义<strong>如何显示</strong>HTML元素。</p><p>当浏览器读到一个样式表，它就会按照这个样式表来对文档进行格式化（渲染）。</p><h1 id="CSS语法"><a href="#CSS语法" class="headerlink" title="CSS语法"></a>CSS语法</h1><h2 id="CSS-实例"><a href="#CSS-实例" class="headerlink" title="CSS 实例"></a>CSS 实例</h2><p>每个CSS样式由两个组成部分：选择器和声明。声明又包括属性和属性值。每个声明之后用分号结束。</p><p><img src="867021-20171215115756808-909989248.png" alt="css"></p><h2 id="CSS注释"><a href="#CSS注释" class="headerlink" title="CSS注释"></a>CSS注释</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*这是注释*/</span></span><br></pre></td></tr></table></figure><h1 id="CSS的几种引入方式"><a href="#CSS的几种引入方式" class="headerlink" title="CSS的几种引入方式"></a>CSS的几种引入方式</h1><h2 id="行内样式"><a href="#行内样式" class="headerlink" title="行内样式"></a>行内样式</h2><p>行内式是在标记的style属性中设定CSS样式。不推荐大规模使用。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">p</span> style=&quot;<span class="attribute">color</span>: red<span class="string">&quot;&gt;Hello world.&lt;/p&gt;</span></span><br></pre></td></tr></table></figure><h2 id="内部样式"><a href="#内部样式" class="headerlink" title="内部样式"></a>内部样式</h2><p>嵌入式是将CSS样式集中写在网页的<head></head>标签对的<style></style>标签对中。格式如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">html</span> lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-<span class="number">8</span>&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; <span class="attribute">content</span>=&quot;<span class="attribute">width</span>=device-<span class="attribute">width</span>, initial-scale=<span class="number">1.0</span>&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        <span class="selector-tag">p</span>&#123;</span><br><span class="line">            <span class="attribute">background-color</span>: darkcyan;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span>&gt;adasdada&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">html</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="外部样式"><a href="#外部样式" class="headerlink" title="外部样式"></a>外部样式</h2><p>外部样式就是将css写在一个单独的文件中，然后在页面进行引入即可。推荐使用此方式。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">html</span> lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-<span class="number">8</span>&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; <span class="attribute">content</span>=&quot;<span class="attribute">width</span>=device-<span class="attribute">width</span>, initial-scale=<span class="number">1.0</span>&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;mystyle<span class="selector-class">.css</span>&quot; type=&quot;test/css&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span>&gt;adasdada&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">html</span>&gt;</span><br></pre></td></tr></table></figure><h1 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h1><h2 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h2><h3 id="元素选择器"><a href="#元素选择器" class="headerlink" title="元素选择器"></a>元素选择器</h3><p>最常见的 CSS 选择器是元素选择器。换句话说，文档的元素就是最基本的选择器。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;<span class="attribute">color</span>: red;&#125;</span><br></pre></td></tr></table></figure><h3 id="选择器分组"><a href="#选择器分组" class="headerlink" title="选择器分组"></a>选择器分组</h3><p>假设希望 h2 元素和p    段落都有灰色。为达到这个目的，最容易的做法是使用以下声明：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h2</span>, <span class="selector-tag">p</span> &#123;<span class="attribute">color</span>:gray;&#125;</span><br><span class="line"><span class="comment">/* 等同于 */</span></span><br><span class="line"><span class="selector-tag">h2</span> &#123;<span class="attribute">color</span>:gray;&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;<span class="attribute">color</span>:gray;&#125;</span><br></pre></td></tr></table></figure><h3 id="ID选择器"><a href="#ID选择器" class="headerlink" title="ID选择器"></a>ID选择器</h3><p>在某些方面，ID 选择器类似于类选择器，不过也有一些重要差别。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#i1</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: royalblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h3><p>注意：</p><p>样式类名不要用数字开头（有的浏览器不认）。</p><p>标签中的class属性如果有多个，要用空格分隔。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 类选择器 */</span></span><br><span class="line"><span class="selector-class">.c1</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">35px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.c1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: sandybrown;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通用选择器"><a href="#通用选择器" class="headerlink" title="通用选择器"></a>通用选择器</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 通用选择器 */</span></span><br><span class="line"><span class="comment">/* *指所有 */</span></span><br><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">color</span>: slateblue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="基本选择器代码展示"><a href="#基本选择器代码展示" class="headerlink" title="基本选择器代码展示"></a>基本选择器代码展示</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;meta http-equiv=&quot;refresh&quot; content=&quot;11;URL=https://www.baidu.com&quot;&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywirds&quot;</span> <span class="attr">content</span>=<span class="string">&quot;meta 总结  133&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 元素选择器 */</span></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">p</span> &#123;<span class="attribute">color</span>: red;&#125;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* ID选择器 */</span></span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#i1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: royalblue;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 类选择器 */</span></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.c1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">35px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">p</span><span class="selector-class">.c1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: sandybrown;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 通用选择器 */</span></span></span><br><span class="line"><span class="language-css">      <span class="comment">/* *指所有 */</span></span></span><br><span class="line"><span class="language-css">      * &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: slateblue;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>初识HTML<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- id --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;user&quot;</span> <span class="attr">id</span>=<span class="string">&quot;i1&quot;</span>&gt;</span>时间：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 元素 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 段落标签 吾问无为谓<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 类选择器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;c1&quot;</span>&gt;</span>段落标签 大大所大多撒大所<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;memo&quot;</span> <span class="attr">id</span>=<span class="string">&quot;memo&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span> <span class="attr">class</span>=<span class="string">&quot;c1&quot;</span>&gt;</span></span><br><span class="line">  默认内容</span><br><span class="line">  默认内容</span><br><span class="line">  默认内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="组合选择器"><a href="#组合选择器" class="headerlink" title="组合选择器"></a>组合选择器</h2><h3 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h3><p>我们可以定义后代选择器来创建一些规则，使这些规则在某些文档结构中起作用，而在另外一些结构中不起作用。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 后代选择器 */</span></span><br><span class="line"><span class="comment">/* h1内部的em标签设置字体颜色 */</span></span><br><span class="line"><span class="selector-tag">h1</span> <span class="selector-tag">em</span>&#123;<span class="attribute">color</span>: red;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 后代选择器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is a <span class="tag">&lt;<span class="name">em</span>&gt;</span>important<span class="tag">&lt;/<span class="name">em</span>&gt;</span> heading<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>This is a <span class="tag">&lt;<span class="name">em</span>&gt;</span>important<span class="tag">&lt;/<span class="name">em</span>&gt;</span> paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="子元素选择器"><a href="#子元素选择器" class="headerlink" title="子元素选择器"></a>子元素选择器</h3><p>如果您不希望选择任意的后代元素，而是希望缩小范围，只选择某个元素的子元素，请使用子元素选择器（Child selector）。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>&gt;<span class="selector-tag">strong</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 子元素选择器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is <span class="tag">&lt;<span class="name">strong</span>&gt;</span>very<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> <span class="tag">&lt;<span class="name">strong</span>&gt;</span>very<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> important.<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is <span class="tag">&lt;<span class="name">em</span>&gt;</span>really <span class="tag">&lt;<span class="name">strong</span>&gt;</span>very<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span> important.<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="相邻选择器"><a href="#相邻选择器" class="headerlink" title="相邻选择器"></a>相邻选择器</h3><p>如果需要选择紧接在另一个元素后的元素，而且二者有相同的父元素，可以使用相邻兄弟选择器（Adjacent sibling selector）。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> + <span class="selector-tag">p</span> &#123;<span class="attribute">margin-top</span>:<span class="number">50px</span>;&#125;</span><br></pre></td></tr></table></figure><h3 id="弟弟选择器"><a href="#弟弟选择器" class="headerlink" title="弟弟选择器"></a>弟弟选择器</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 弟弟选择器 只能向下选 */</span></span><br><span class="line"><span class="selector-id">#li</span> ~ <span class="selector-tag">p</span> &#123;<span class="attribute">border</span>: <span class="number">2px</span> solid <span class="built_in">rgb</span>(<span class="number">172</span>, <span class="number">11</span>, <span class="number">46</span>);&#125;</span><br></pre></td></tr></table></figure><h3 id="组合选择器代码展示"><a href="#组合选择器代码展示" class="headerlink" title="组合选择器代码展示"></a>组合选择器代码展示</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;meta http-equiv=&quot;refresh&quot; content=&quot;11;URL=https://www.baidu.com&quot;&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywirds&quot;</span> <span class="attr">content</span>=<span class="string">&quot;meta 总结  133&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 后代选择器 */</span></span></span><br><span class="line"><span class="language-css">      <span class="comment">/* h1内部的em标签设置字体颜色 */</span></span></span><br><span class="line"><span class="language-css">      <span class="comment">/* h1 em &#123;color: red;&#125; */</span></span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 儿子选择器 */</span></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">h1</span>&gt;<span class="selector-tag">strong</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 相邻兄弟选择器 */</span></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">h1</span> + <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 弟弟选择器 */</span></span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#li</span> ~ <span class="selector-tag">p</span> &#123;<span class="attribute">border</span>: <span class="number">2px</span> solid <span class="built_in">rgb</span>(<span class="number">172</span>, <span class="number">11</span>, <span class="number">46</span>);&#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>初识HTML<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 后代选择器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is a <span class="tag">&lt;<span class="name">em</span>&gt;</span>important<span class="tag">&lt;/<span class="name">em</span>&gt;</span> heading<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is a <span class="tag">&lt;<span class="name">em</span>&gt;</span>important<span class="tag">&lt;/<span class="name">em</span>&gt;</span> paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 子元素选择器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is <span class="tag">&lt;<span class="name">strong</span>&gt;</span>very<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> <span class="tag">&lt;<span class="name">strong</span>&gt;</span>very<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> important.<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is <span class="tag">&lt;<span class="name">em</span>&gt;</span>really <span class="tag">&lt;<span class="name">strong</span>&gt;</span>very<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span> important.<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 相邻兄弟选择器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is 相邻兄弟选择器.<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is 相邻兄弟选择器.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is 相邻兄弟选择器.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is 相邻兄弟选择器.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 弟弟选择器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;li&quot;</span>&gt;</span>弟弟选择器<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>弟弟选择器<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>弟弟选择器<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2><p><strong>属性选择器可以根据元素的属性及属性值来选择元素。</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;meta http-equiv=&quot;refresh&quot; content=&quot;11;URL=https://www.baidu.com&quot;&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywirds&quot;</span> <span class="attr">content</span>=<span class="string">&quot;meta 总结  133&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 如果您希望把包含标题（title）的所有元素变为红色，可以写作： */</span></span></span><br><span class="line"><span class="language-css">      *<span class="selector-attr">[title]</span> &#123;<span class="attribute">color</span>: red;&#125;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 可以只对有 href 属性的锚（a 元素）应用样式： */</span></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">a</span><span class="selector-attr">[href]</span> &#123;<span class="attribute">color</span>:red;&#125;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 还可以根据多个属性进行选择，只需将属性选择器链接在一起即可 */</span></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">a</span><span class="selector-attr">[href]</span><span class="selector-attr">[title]</span> &#123;<span class="attribute">color</span>:red;&#125;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/*用于选取带有指定属性和值的元素。*/</span></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">h2</span><span class="selector-attr">[title=<span class="string">&quot;Hello&quot;</span>]</span> &#123;<span class="attribute">color</span>: royalblue;&#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>初识HTML<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>可以应用样式：<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">title</span>=<span class="string">&quot;Hello world&quot;</span>&gt;</span>Hello world<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">title</span>=<span class="string">&quot;Wang&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://wangjieyu.cn&quot;</span>&gt;</span>Wang<span class="tag">&lt;/<span class="name">a</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">title</span>=<span class="string">&quot;Hello&quot;</span>&gt;</span>Hello world<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="hide-block"><button type="button" class="hide-button" style="">不怎么常用的属性选择器    </button><div class="hide-content"><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*找到所有title属性以hello开头的元素*/</span></span><br><span class="line"><span class="selector-attr">[title^=<span class="string">&quot;hello&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*找到所有title属性以hello结尾的元素*/</span></span><br><span class="line"><span class="selector-attr">[title$=<span class="string">&quot;hello&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*找到所有title属性中包含（字符串包含）hello的元素*/</span></span><br><span class="line"><span class="selector-attr">[title*=<span class="string">&quot;hello&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*找到所有title属性(有多个值或值以空格分割)中有一个值为hello的元素：*/</span></span><br><span class="line"><span class="selector-attr">[title~=<span class="string">&quot;hello&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h2><h3 id="没有访问的超链接a标签样式："><a href="#没有访问的超链接a标签样式：" class="headerlink" title="没有访问的超链接a标签样式："></a>没有访问的超链接a标签样式：</h3><p>格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a:link &#123;</span><br><span class="line"></span><br><span class="line"> color: blue;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="访问过的超链接a标签样式："><a href="#访问过的超链接a标签样式：" class="headerlink" title="访问过的超链接a标签样式："></a>访问过的超链接a标签样式：</h3><p>格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a:visited &#123;</span><br><span class="line"></span><br><span class="line"> color: gray;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="鼠标悬浮在元素上应用样式："><a href="#鼠标悬浮在元素上应用样式：" class="headerlink" title="鼠标悬浮在元素上应用样式："></a>鼠标悬浮在元素上应用样式：</h3><p>格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a:hover &#123;</span><br><span class="line"></span><br><span class="line"> background-color: #eee; </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="鼠标点击瞬间的样式："><a href="#鼠标点击瞬间的样式：" class="headerlink" title="鼠标点击瞬间的样式："></a>鼠标点击瞬间的样式：</h3><p>格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a:active &#123;</span><br><span class="line"></span><br><span class="line"> color: green;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="input输入框获取焦点时样式："><a href="#input输入框获取焦点时样式：" class="headerlink" title="input输入框获取焦点时样式："></a>input输入框获取焦点时样式：</h3><p>格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">input:focus &#123;</span><br><span class="line"></span><br><span class="line"> outline: none;</span><br><span class="line"></span><br><span class="line"> background-color: #eee;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h2><h3 id="first-letter：杂志类文章首字母样式调整"><a href="#first-letter：杂志类文章首字母样式调整" class="headerlink" title="first-letter：杂志类文章首字母样式调整"></a>first-letter：杂志类文章首字母样式调整</h3><p>格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">p:first-letter &#123;</span><br><span class="line"></span><br><span class="line"> font-size: 48px;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="before"><a href="#before" class="headerlink" title="before"></a>before</h3><p>用于在元素的内容前面插入新内容。</p><p>格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">p:before &#123;</span><br><span class="line"></span><br><span class="line"> content: &quot;*&quot;;</span><br><span class="line"></span><br><span class="line"> color: red;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在所有p标签的内容前面加上一个红色的*。</p><h3 id="after"><a href="#after" class="headerlink" title="after"></a>after</h3><p>用于在元素的内容后面插入新内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">p:after &#123;</span><br><span class="line"></span><br><span class="line"> content: &quot;?&quot;;</span><br><span class="line"></span><br><span class="line"> color: red;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在所有p标签的内容后面加上一个蓝色的?。</p><h2 id="CSS三大特性"><a href="#CSS三大特性" class="headerlink" title="CSS三大特性"></a>CSS三大特性</h2><h3 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h3><p>给某一个元素设置一些属性，该元素的后代也可以使用，这个我们就称之为继承性</p><p>注意点：</p><blockquote><p>1、只有以color、font-、text-、line-开头的属性才可以继承</p><p>2、a标签的文字颜色和下划线是不能继承别人的</p><p>3、h标签的文字大小是不能继承别人的，会变大，但是会在原来字体大小的基础上变大</p><p>ps:打开浏览器审查元素可以看到一些inherited from。。。的属性</p><p>应用场景：</p><p>通常基于继承性统一设置网页的文字颜色，字体，文字大小等样式</p></blockquote><h3 id="层叠性"><a href="#层叠性" class="headerlink" title="层叠性"></a>层叠性</h3><p>CSS全称：Cascading StyleSheet层叠样式表，层叠性指的就是CSS处理冲突的一种能力，即如果有多个选择器选中了同一个标签那么会有覆盖效果</p><p>注意点:</p><p>1 层叠性只有在多个选择器选中了同一个标签，然后设置了相同的属性，</p><p>才会发生层叠性</p><p>2通过谷歌浏览器可以查看到，一些属性被划掉了</p><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><p>定义：当多个选择器选中同一个标签，并且给同一个标签设置相同的属性时，如何层叠就由优先级来确定。</p><p>l <strong>大前提：直接选中的优先级大于间接选中(即继承而来的)</strong></p><p>以下为直接选中<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"> &lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line"></span><br><span class="line"> \<span class="selector-id">#id1</span> &#123;</span><br><span class="line"></span><br><span class="line"> <span class="attribute">color</span>: red;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="selector-class">.ppp</span> &#123;</span><br><span class="line"></span><br><span class="line"> <span class="attribute">color</span>: green;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="selector-tag">p</span> &#123;</span><br><span class="line"></span><br><span class="line"> <span class="attribute">color</span>: blue;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> &lt;/style&gt;</span><br><span class="line"></span><br><span class="line">以下为间接选中</span><br><span class="line"></span><br><span class="line"> &lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line"></span><br><span class="line"> <span class="selector-tag">ul</span> &#123;</span><br><span class="line"></span><br><span class="line"> <span class="attribute">color</span>: yellow;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> &lt;/style&gt;</span><br><span class="line"></span><br><span class="line"> &lt;<span class="selector-tag">ul</span>&gt;</span><br><span class="line"></span><br><span class="line"> &lt;<span class="selector-tag">li</span>&gt;</span><br><span class="line"></span><br><span class="line"> &lt;<span class="selector-tag">p</span> id=&quot;id1&quot; class=&quot;ppp&quot;&gt;我是<span class="selector-tag">span</span>&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line"></span><br><span class="line"> &lt;/<span class="selector-tag">li</span>&gt;</span><br><span class="line"></span><br><span class="line"> &lt;/<span class="selector-tag">ul</span>&gt;</span><br></pre></td></tr></table></figure></p><p>l <strong>如果都是间接选中，那么谁离目标标签比较近，就选中谁</strong></p><p>l <strong>如果都是直接选中，并且都是同类型的选择器，那么就是谁写的在后面就选中谁</strong></p><p>l <strong>如果都是直接选中，并且是不同类型的选择器，那么就会按照选择器的优先级来层叠</strong></p><p>id &gt; 类 &gt; 标签 &gt; 通配符(也算直接选中) &gt; 继承 &gt; 浏览器默认（即没有设置任何属性）</p><h3 id="优先级之！important"><a href="#优先级之！important" class="headerlink" title="优先级之！important"></a>优先级之！important</h3><p>作用：还有一种!import方式来强制指定的属性的优先级提升为最高，但是不推荐使用。因为大量使用!import的代码是无法维护的。</p><p>#2、注意点：</p><p> 1、!important只能用于直接选中，不能用于间接选中</p><p> 2、!important只能用于提升被指定的属性的优先级，其他属性的优先级不会被提升</p><p> 3、!important必须写在属性值分号的前面</p><h3 id="优先级之权重计算"><a href="#优先级之权重计算" class="headerlink" title="优先级之权重计算"></a>优先级之权重计算</h3><p>如果都是直接选中，并且混杂了一系列其他的选择器一起使用时，则需要通过计算机权重来判定优先级</p><p>计算方式</p><p>1 id数多的优先级高</p><p>2 id数相同，则判定类数多的优先级高</p><p>3 id数、class数均相同，则判定标签数多的优先级高</p><p>4若id数、class数、标签数均相同，则无需继续往下计算了，谁写在后面谁的优先级高</p><h3 id="CSS属性设置"><a href="#CSS属性设置" class="headerlink" title="CSS属性设置"></a>CSS属性设置</h3><h3 id="字体属性"><a href="#字体属性" class="headerlink" title="字体属性"></a>字体属性</h3><h4 id="font-weight：文字粗细"><a href="#font-weight：文字粗细" class="headerlink" title="font-weight：文字粗细"></a>font-weight：文字粗细</h4><p>normal 默认值，标准粗细</p><p>bord 粗体</p><p>border 更粗</p><p>lighter  更细</p><p>100~900 设置具体粗细，400等同于normal，而700等同于bold</p><p>inherit 继承父元素字体的粗细值</p><h4 id="font-style：文字风格"><a href="#font-style：文字风格" class="headerlink" title="font-style：文字风格"></a>font-style：文字风格</h4><p> normal 正常，默认就是正常的</p><p> italic 倾斜 </p><h4 id="font-size：文字大小"><a href="#font-size：文字大小" class="headerlink" title="font-size：文字大小"></a>font-size：文字大小</h4><p>fs：一般是12px或13px或14px</p><p>注意：</p><p>1、通过font-size设置文字大小一定要带单位，即一定要写px</p><p>2、如果设置成inherit表示继承父元素的字体大小值。</p><h4 id="font-family：文字字体"><a href="#font-family：文字字体" class="headerlink" title="font-family：文字字体"></a>font-family：文字字体</h4><p>font-family: “Microsoft Yahei”, “微软雅黑”, “Arial”, sans-serif</p><p>常见字体：</p><p>serif 衬线字体</p><p>sans-serif 非衬线字体</p><p>中文：宋体，微软雅黑，黑体</p><p>注意：</p><p> 1、设置的字体必须是用户电脑里已经安装的字体，浏览器会使用它可识别的第一个值。</p><p> 2、如果取值为中文，需要用单或双引号扩起来</p><h3 id="文字属性简写"><a href="#文字属性简写" class="headerlink" title="文字属性简写"></a>文字属性简写</h3><p>/<em>font-weight: bolder;</em>/</p><p>/<em>font-style: italic;</em>/</p><p>/<em>font-size: 50px;</em>/</p><p>/<em>font-family: ‘serif’,’微软雅黑’;</em>/</p><p>简写为</p><p>font: bolder italic 50px ‘serif’,’微软雅黑’; </p><h4 id="color：文字颜色"><a href="#color：文字颜色" class="headerlink" title="color：文字颜色"></a>color：文字颜色</h4><p>取值 格式 描述</p><p>英文单词</p><p>color：red;</p><p>大多数颜色都有对应的英文单词描述，但英文单词终究有其局限性:无法表示所有颜色</p><p>rgb color：rgb(255,0,0) </p><p>什么是三原色？</p><p>red，green，blue</p><p>什么是像素px？</p><p>对于光学显示器，一整个屏幕是有一个个点组成，每一个点称为一个像素</p><p>点，每个像素点都是由一个三元色的发光元件组成，该元件可以发出三种颜</p><p>色，red，green，blue。</p><p>发光元件协调三种颜色发光的明亮度可以调节出其他颜色</p><p>格式：rgb(255,0,0);</p><p>参数1控制红色显示的亮度</p><p>参数2控制绿色显示的亮度</p><p>参数3控制蓝色色显示的亮度</p><p>数字的范围0-255，0代表不发光，255代表发光，值越大越亮</p><p>红色：rgb(255,0,0)</p><p>绿色：rgb(0,255,0)</p><p>蓝色：rgb(0,0,255)</p><p>黑色：rgb(0,0,0) # 所有都不亮</p><p>白色：rgb(255,255,255) # 所有都最亮</p><p>灰色：只要让红色/绿色/蓝色的值都一样就是灰色，而且三个值越小，越偏</p><p>黑色，越大越偏白色</p><p>rgba color：rgba(255,0,0,0.1); </p><p>rgba到css3中才推出，比起rgb多了一个a，a代表透明度</p><p>a取值0-1，取值越小，越透明</p><p>十六进制 color: #FF0000; </p><p>#FFEE00 其中FF代表R，EE代表G，00代表B</p><p>只要十六进制的颜色每两位都是一样的，那么就可以简写为一个，</p><p>例如#F00 等同于#FF0000</p><h3 id="文本属性"><a href="#文本属性" class="headerlink" title="文本属性"></a>文本属性</h3><h4 id="text-align：规定元素中的文本的水平对齐方式。"><a href="#text-align：规定元素中的文本的水平对齐方式。" class="headerlink" title="text-align：规定元素中的文本的水平对齐方式。"></a>text-align：规定元素中的文本的水平对齐方式。</h4><p>值 描述</p><p>left 左边对齐 默认值</p><p>right 右对齐</p><p>center 居中对齐</p><p>justify 两端对齐</p><h4 id="text-decoration：文本装饰"><a href="#text-decoration：文本装饰" class="headerlink" title="text-decoration：文本装饰"></a>text-decoration：文本装饰</h4><p>值 描述</p><p>none 默认。定义标准的文本，通常用来去掉a标签的下划线</p><p>underline 定义文本下的一条线。</p><p>overline 定义文本上的一条线。</p><p>line-through 定义穿过文本下的一条线。</p><p>inherit 继承父元素的text-decoration属性的值。</p><h4 id="text-indent：首行缩进"><a href="#text-indent：首行缩进" class="headerlink" title="text-indent：首行缩进"></a>text-indent：首行缩进</h4><p>#将段落的第一行缩进 32像素,16px;=1em;</p><p>p {</p><p> text-indent: 32px;</p><p>}</p><h4 id="line-height：行高"><a href="#line-height：行高" class="headerlink" title="line-height：行高"></a>line-height：行高</h4><h3 id="背景属性"><a href="#背景属性" class="headerlink" title="背景属性"></a>背景属性</h3><p>注意：没有宽高的标签，即便设置背景也无法显示</p><p>background-color </p><p>设置标签的背景颜色的</p><p>background-color: red;</p><p>background-color: rgb(0,255,0);</p><p>background-color: rgba(0,255,0,0.1);</p><p>background-color: #00ffff;</p><p>background-image </p><p>设置标签的背景图片</p><p>background-image: url(“images/2.jpg”);</p><p>background-image: url(“图片网址”);</p><p>注意：如果图片的大小没有标签的大小大，那么会自动在水平和锤子方向平铺和填充</p><p>background-size </p><p>设置标签的背景图片的宽、高</p><p> background-size: 300px 300px;</p><p> background-size: 100% 100%;</p><p>background-repeat </p><p>设置标签的背景图片的平铺方式</p><p>background-repeat: repeat; #默认值，在垂直和水平方向都重复</p><p>background-repeat: no-repeat; #不重复，背景图片将仅显示一次</p><p>background-repeat: repeat-x; #背景图片将在水平方向平铺</p><p>background-repeat: repeat-y; #背景图片将在垂直方向平铺</p><p>应用：可以在服务端将一个大图片截成小图片，然后在客户端基于平铺属性将小图重复</p><p>这样用户就以为是一张大图，如此，既节省了流量提升了速度，又不影响用户访问</p><p>例如很多网站的导航条都是用这种手法制作的</p><p>background-attachment </p><p>设置标签的背景图片在标签中固定或随着页面滚动而滚动</p><p>background-attachment: scroll; #默认值，背景图片会随着滚动条的滚动而滚动</p><p>background-attachment: fixed; #不会随着滚动条的滚动而滚动</p><p>background-position </p><p>图片默认都是在盒子的左上角，</p><p>background-position：属性，就是专门用于控制背景图片的位置</p><p>background-position：水平方向的值，垂直方向的值</p><p>1、具体的方位名词</p><p> 水平方向：left，center，right</p><p> 垂直方向：top，center，bottom</p><p> 如果只设置了一个关键词，那么第二个值就是”center”。</p><p>2、百分比</p><p>　　第一个值是水平位置，第二个值是垂直位置。</p><p>　　左上角是 0% 0%。右下角是 100% 100%。</p><p>　　如果只设置了一个值，另一个值就是50%。</p><p>3、具体的像素（一定要加px单位）</p><p> 例如：30px，50px等等</p><p>　　第一个值是水平位置，第二个值是垂直位置。</p><p>　　左上角是 0 0。单位是像素 (0px 0px) 或任何其他的 CSS 单位。</p><p>　　如果只设置了一个值，另一个值就是50%。</p><p> 可以混合使用%和position值。</p><p>inherit </p><p>设置从父元素继承background属性值</p><p>以上背景属性的值均可以设置为inherit，代表从父元素继承background属性</p><h2 id="分组和嵌套-pass"><a href="#分组和嵌套-pass" class="headerlink" title="分组和嵌套 pass"></a>分组和嵌套 pass</h2><h2 id="CSS网页布局"><a href="#CSS网页布局" class="headerlink" title="CSS网页布局"></a>CSS网页布局</h2><h3 id="网页布局简介"><a href="#网页布局简介" class="headerlink" title="网页布局简介"></a>网页布局简介</h3><p>布局可以理解为排版，我们所熟知的文本编辑类工具都有自己的排版方式，比如word，nodpad++等等。</p><p>而网页的布局方式指的就是浏览器这款工具是如何对网页中的元素进行排版的。</p><p>网页布局一般有三种常用的排版方式：标准流，浮动流和定位流。</p><h3 id="标准流"><a href="#标准流" class="headerlink" title="标准流"></a>标准流</h3><h4 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h4><p>所有HTML元素可以看作盒子，在CSS中，”box model”这一术语是用来设计和布局时使用。</p><p>CSS盒模型本质上是一个盒子，封装周围的HTML元素，它包括：边距，边框，填充，和实际内容。</p><p>盒模型允许我们在其它元素和周围元素边框之间的空间放置元素。</p><p><img src="5b73f51e00015f7907740523.jpg" alt="盒子模型"></p><p>Margin(外边距) 清除边框外的区域，外边距是透明的。</p><p>Border(边框) 围绕在内边距和内容外的边框。</p><p>Padding(内边距) 清除内容周围的区域，内边距是透明的。</p><p>Content(内容) 盒子的内容，显示文本和图像。</p><h4 id="块级元素和内联元素-行内元素"><a href="#块级元素和内联元素-行内元素" class="headerlink" title="块级元素和内联元素(行内元素)"></a>块级元素和内联元素(行内元素)</h4><p>块级元素</p><p>总是在新行上开始，占据一整行； </p><p>高度，行高以及外边距和内边距都可控制； </p><p>宽度缺省是它的容器的100%，除非设定一个宽度 </p><p>它可以容纳内联元素和其他块元素。 </p><p>内联元素</p><p>和其他元素都在一行上； </p><p>高，行高及外边距和内边距部分可改变； </p><p>宽度只与内容有关； </p><p>行内元素只能容纳文本或者其他行内元素。 </p><p>外边界只能对左右起作用，内边距都起作用 </p><p>块级元素和内联元素的转换</p><p>display: block | inline | inline-block</p><h4 id="标准文档流"><a href="#标准文档流" class="headerlink" title="标准文档流"></a>标准文档流</h4><p>1 行内元素不占据单独的空间，依附于块级元素，行内元素没有自己的区域。它同样是DOM树中的一个节点，在这一点上行内元素和块级元素是没有区别的。</p><p>2 块级元素总是以块的形式表现出来，并且跟同级的兄弟块依次竖直排列，左右自动伸展，直到包含它的元素的边界，在水平方向不能并排。</p><h3 id="浮动流"><a href="#浮动流" class="headerlink" title="浮动流"></a>浮动流</h3><h4 id="什么是浮动流"><a href="#什么是浮动流" class="headerlink" title="什么是浮动流"></a>什么是浮动流</h4><p>l CSS的Float(浮动)，元素可以围绕其他元素向左或向右被推动</p><p>l 设置浮动，脱离普通文档流</p><p>l 浮动元素都会变为块级元素</p><p>l 如果不设置宽度，会尽可能的窄</p><p>l 浮动元素之后的元素将围绕它 浮动元素之前的元素将不会受到影响。</p><h4 id="怎么设置浮动？"><a href="#怎么设置浮动？" class="headerlink" title="怎么设置浮动？"></a>怎么设置浮动？</h4><p>.item {</p><p> float:left</p><p>}</p><p>.item {</p><p> float:right</p><p>}</p><p>/<em>float 属性的默认值是 none 表示没有浮动</em>/</p><h4 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h4><p>浮动框旁边的行框被缩短，从而给浮动框留出空间，行框围绕浮动框。</p><p>因此，创建浮动框可以使文本围绕图像：</p><p>要想阻止行框围绕浮动框，需要对该框应用 clear 属性。clear 属性的值可以是 left、right、both 或 none，它表示框的哪些边不应该挨着浮动框。</p><p>clear: both</p><p>clear: left</p><p>clear: right</p><h3 id="定位流"><a href="#定位流" class="headerlink" title="定位流"></a>定位流</h3><h4 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h4><p>l 使用相对定位的盒子,会相对于它原来的位置,通过偏移指定的距离,到达新的位置.</p><p>l 使用相对定位的盒子,仍在标准流中,它对父块好兄弟盒子没有任何影响。</p><p>.box {</p><p> position: relative;</p><p> top: 10px;</p><p> left: 20px;</p><p>}</p><h4 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h4><p>l 使用绝对定位的盒子以它”最近”的一个”已经定位”的”祖先元素”为基准进行偏移. 如果没有已经定位的”祖先元素”, 那么会以浏览器窗口为基准进行定位</p><p>l 绝对定位的框从标准流中脱离,这意味着它们对其后的兄弟盒子的定位没有影响,其他的盒子就好像这个盒子不存在一样</p><p>.box {</p><p> position: absolute;</p><p> top: 10px;</p><p> left: 20px</p><p>}</p><h4 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h4><p>以浏览器窗口为基准</p><p>窗口滚动时,依然保持位置不变</p><p>.box {</p><p> position: fixed;</p><p> top: 10px;</p><p> left: 20px;</p><p>}</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pycharm 使用总结</title>
      <link href="/2020/04/02/%E6%95%99%E7%A8%8B/Pycharm-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
      <url>/2020/04/02/%E6%95%99%E7%A8%8B/Pycharm-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Pycharm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pycharm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Visual Studio Code 使用总结</title>
      <link href="/2020/04/02/%E6%95%99%E7%A8%8B/Visual-Studio-Code-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
      <url>/2020/04/02/%E6%95%99%E7%A8%8B/Visual-Studio-Code-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>VSCode 具有很高的定制化能力和可扩展性，以下这些是比较流行的一些插件：</p><h2 id="前端编写必备插件"><a href="#前端编写必备插件" class="headerlink" title="前端编写必备插件"></a>前端编写必备插件</h2><p>HTML Snippets  # html代码Tab 和 简写如 <code>div.</code></p><p>HTML CSS Support   # css 代码Tab填补</p><p>Auto Rename Tag   #  修改头部标签尾部标签自动修改</p><p>jQuery Code Snippets</p><p>open in browser</p><p>Debugger for Chrome</p><h2 id="路径智能跟踪"><a href="#路径智能跟踪" class="headerlink" title="路径智能跟踪"></a>路径智能跟踪</h2><p>Path Intellisense</p><h2 id="多台电脑同步配置"><a href="#多台电脑同步配置" class="headerlink" title="多台电脑同步配置"></a>多台电脑同步配置</h2><p>Settings Sync</p><p>一台电脑配置好之后，其它的几台电脑都不用配置。新机器登录一下就搞定了。再也不用折腾环境了，</p><p>使用GitHub Gist同步多台计算机上的设置，代码段，主题，文件图标，启动，键绑定，工作区和扩展。</p><h2 id="Debugger-for-Chrome"><a href="#Debugger-for-Chrome" class="headerlink" title="Debugger for Chrome"></a>Debugger for Chrome</h2><p>Debugger for Chrome</p><p>从VS Code调试在Google Chrome中运行的JavaScript代码。</p><p>用于在Google Chrome浏览器或支持Chrome DevTools协议的其他目标中调试JavaScript代码的VS Code扩展。</p><h2 id="格式化代码工具"><a href="#格式化代码工具" class="headerlink" title="格式化代码工具"></a>格式化代码工具</h2><p>beautify</p><p>格式化代码工具</p><p>美化javascript，JSON，CSS，Sass，和HTML在Visual Studio代码。</p><h2 id="自动完成html-头部和尾部标签闭合"><a href="#自动完成html-头部和尾部标签闭合" class="headerlink" title="自动完成html 头部和尾部标签闭合"></a>自动完成html 头部和尾部标签闭合</h2><p>Atuo Rename Tag</p><p>修改 html 标签，自动帮你完成头部和尾部闭合标签的同步修改</p><h2 id="中文（简体）语言包"><a href="#中文（简体）语言包" class="headerlink" title="中文（简体）语言包"></a>中文（简体）语言包</h2><p>中文（简体）语言包</p><p>Chinese (Simplified) Language Pack for Visual Studio Code</p><p>将界面转换为中文，对英语不好的人，非常友好。</p><h2 id="代码拼写检查器"><a href="#代码拼写检查器" class="headerlink" title="代码拼写检查器"></a>代码拼写检查器</h2><p>Code Spell Checker</p><p>代码拼写检查器</p><p>一个与camelCase代码配合良好的基本拼写检查程序。</p><p>此拼写检查程序的目标是帮助捕获常见的拼写错误，同时保持误报数量较低。</p><h2 id="插件推荐"><a href="#插件推荐" class="headerlink" title="插件推荐"></a>插件推荐</h2><p><a href="https://marketplace.visualstudio.com/items?itemName=mkaufman.HTMLHint">HTMLHint</a></p><p>为HTML文件提供静态代码拼写检查</p><p><a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode">Prettier - Code formatter</a></p><p>代码格式化插件</p><p><a href="https://marketplace.visualstudio.com/items?itemName=xabikos.JavaScriptSnippets">JavaScript (ES6) code snippets</a></p><p>此插件为Web开发提供了大量的代码片段，大大提升了前端开发的效率   </p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> VSCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VSCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP 调用sudo无效</title>
      <link href="/2020/04/02/error/PHP-%E8%B0%83%E7%94%A8sudo%E6%97%A0%E6%95%88/"/>
      <url>/2020/04/02/error/PHP-%E8%B0%83%E7%94%A8sudo%E6%97%A0%E6%95%88/</url>
      
        <content type="html"><![CDATA[<h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><p>键入命令visudo,打开sudoers文件，编辑该文件注释掉Defaults requiretty一行，<br>并在<code>root    ALL=(ALL)       ALL</code>末尾追加<code>apache        ALL=(ALL)       NOPASSWD: ALL</code>然后重启PHP即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root    ALL=(ALL)       ALL</span><br><span class="line">apache        ALL=(ALL)       NOPASSWD: ALL</span><br></pre></td></tr></table></figure><h2 id="加权限"><a href="#加权限" class="headerlink" title="加权限"></a>加权限</h2><p>如有php调用脚本（如：shell），须得给脚本授权，如：chmod 755 restart.sh</p><h2 id="visudo"><a href="#visudo" class="headerlink" title="visudo"></a>visudo</h2><p>遇到<code>visudo：/etc/sudoers 忙，请稍后重试</code>这种问题，直接把visudo进程kill掉就好了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@37wan ~]# ps aux | grep visudo</span><br><span class="line">root      7405  0.0  0.0 103212  1032 pts/0    S+   03:22   0:00 visudo</span><br><span class="line">root      8390  0.0  0.0 103340   860 pts/1    S+   03:29   0:00 grep visudo</span><br><span class="line">[root@37wan ~]# kill 7405</span><br><span class="line">[root@37wan ~]# ps aux | grep visudo</span><br><span class="line">root      8416  0.0  0.0 103340   856 pts/1    S+   03:29   0:00 grep visudo</span><br></pre></td></tr></table></figure><h2 id="代码分享"><a href="#代码分享" class="headerlink" title="代码分享"></a>代码分享</h2><div class="hide-block"><button type="button" class="hide-button" style="">分享给大家php调时间重启页面    </button><div class="hide-content"><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">        &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt; </span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h3 align=<span class="string">&quot;middle&quot;</span>&gt;光明世纪&lt;/h3&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;div align=<span class="string">&quot;middle&quot;</span>&gt;</span><br><span class="line">&lt;p&gt;服务器当前时间&lt;/p&gt;</span><br><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">date_default_timezone_set</span>(<span class="string">&quot;Asia/Shanghai&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">date</span>(<span class="string">&quot;Y-m-d H:i&quot;</span>,<span class="title function_ invoke__">time</span>()); <span class="meta">?&gt;</span></span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;p&gt;回调时间需重启服务器&lt;/p&gt;</span><br><span class="line">&lt;p&gt;修改完时间F5刷新，看时间是否已修改&lt;/p&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">Date: &lt;input type=<span class="string">&quot;date&quot;</span> name=<span class="string">&quot;date&quot;</span> value=<span class="string">&quot;&lt;?php echo date(&quot;</span>Y-m-d<span class="string">&quot;,time()); ?&gt;&quot;</span> /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">Time: &lt;input type=<span class="string">&quot;time&quot;</span> name=<span class="string">&quot;time&quot;</span> value=<span class="string">&quot;&lt;?php echo date(&quot;</span>H:i<span class="string">&quot;,time()); ?&gt;&quot;</span>/&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;input  type=<span class="string">&quot;submit&quot;</span> name=<span class="string">&quot;sub1&quot;</span> value=<span class="string">&quot;更改时间&quot;</span> /&gt;</span><br><span class="line">&lt;input  type=<span class="string">&quot;submit&quot;</span> name=<span class="string">&quot;sub2&quot;</span> value=<span class="string">&quot;重启android测试服&quot;</span> /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;sub1&#x27;</span>]))</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="variable">$date</span>=<span class="variable">$_POST</span>[<span class="string">&quot;date&quot;</span>];</span><br><span class="line">                <span class="variable">$time</span>=<span class="variable">$_POST</span>[<span class="string">&quot;time&quot;</span>];</span><br><span class="line">                <span class="title function_ invoke__">exec</span>(<span class="string">&quot;(sudo /bin/date -s <span class="subst">$date</span> &gt;/dev/null &amp;)&quot;</span>);</span><br><span class="line">                <span class="title function_ invoke__">exec</span>(<span class="string">&quot;(sleep 1;sudo /bin/date -s <span class="subst">$time</span> &gt;/dev/null &amp;)&quot;</span>);</span><br><span class="line">                <span class="keyword">echo</span>  <span class="string">&quot;时间修改 。。。【OK】&quot;</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;sub2&#x27;</span>]))</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="variable">$output</span>=<span class="title function_ invoke__">shell_exec</span>(<span class="string">&quot;(sudo /data/scripts/restart1.sh &gt;/dev/null &amp;)&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;测试服已经重启，请稍后登陆&quot;</span>.<span class="variable">$output</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;sub3&#x27;</span>]))</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="variable">$output</span>=<span class="title function_ invoke__">shell_exec</span>(<span class="string">&quot;(sudo /data/scripts/restart2.sh &gt;/dev/null &amp;)&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;测试服已经重启，请稍后登陆&quot;</span>.<span class="variable">$output</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">#        $date=$_POST[&quot;date&quot;];</span></span><br><span class="line"><span class="comment">#        $time=$_POST[&quot;time&quot;];</span></span><br><span class="line"><span class="comment">#        exec(&quot;sudo /bin/date -s $date&quot;);</span></span><br><span class="line"><span class="comment">##        exec(&quot;sudo /bin/date -s $time&quot;,$str);</span></span><br><span class="line"><span class="comment">#        echo var_dump($str);</span></span><br><span class="line"><span class="comment">#        exec(&quot;sudo /data/scripts/restart.sh&quot;,$str);</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div></div>]]></content>
      
      
      <categories>
          
          <category> Errors </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows-10大内存优化(关闭内存压缩功能)</title>
      <link href="/2020/03/31/%E8%AE%A1%E7%AE%97%E6%9C%BA/Windows-10%E5%A4%A7%E5%86%85%E5%AD%98%E4%BC%98%E5%8C%96(%E5%85%B3%E9%97%AD%E5%86%85%E5%AD%98%E5%8E%8B%E7%BC%A9%E5%8A%9F%E8%83%BD)/"/>
      <url>/2020/03/31/%E8%AE%A1%E7%AE%97%E6%9C%BA/Windows-10%E5%A4%A7%E5%86%85%E5%AD%98%E4%BC%98%E5%8C%96(%E5%85%B3%E9%97%AD%E5%86%85%E5%AD%98%E5%8E%8B%E7%BC%A9%E5%8A%9F%E8%83%BD)/</url>
      
        <content type="html"><![CDATA[<p>爱机 win10 专业版 16G内存，M.2接口类型的固态硬盘 系统确实流畅；但内存发现怎么也用不完一根8G，是不是有点浪费？</p><p>突然有一次看到任务管理器的内存选项有个内存压缩，这是什么鬼？ 我内存不要压缩啊！怎么办呢？</p><p><img src="neicun.png" alt="内存"></p><p>Windows 10新增了内存压缩功能，对于内存较小的PC来说有很大的价值，但换来的却是消耗了较高的处理器资源；</p><p>那如果我们升级了内存之后，为节约处理器资源，是否可以关闭这项功能呢？</p><p>所以我赶紧搜索了下相关文章，找到了解决办法</p><h1 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PS C:\WINDOWS\system32&gt; get-mmagent</span><br><span class="line"></span><br><span class="line">ApplicationLaunchPrefetching : True</span><br><span class="line">ApplicationPreLaunch         : True</span><br><span class="line">MaxOperationAPIFiles         : 256</span><br><span class="line">MemoryCompression            : True</span><br><span class="line">OperationAPI                 : True</span><br><span class="line">PageCombining                : True</span><br><span class="line">PSComputerName               :</span><br></pre></td></tr></table></figure><h1 id="关闭内存压缩"><a href="#关闭内存压缩" class="headerlink" title="关闭内存压缩"></a>关闭内存压缩</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PS C:\WINDOWS\system32&gt; disable-mmagent -mc</span><br><span class="line"></span><br><span class="line">PS C:\WINDOWS\system32&gt; get-mmagent</span><br><span class="line"></span><br><span class="line">ApplicationLaunchPrefetching : True</span><br><span class="line">ApplicationPreLaunch         : True</span><br><span class="line">MaxOperationAPIFiles         : 256</span><br><span class="line">MemoryCompression            : False</span><br><span class="line">OperationAPI                 : True</span><br><span class="line">PageCombining                : True</span><br><span class="line">PSComputerName               :</span><br></pre></td></tr></table></figure><h1 id="开启内存压缩"><a href="#开启内存压缩" class="headerlink" title="开启内存压缩"></a>开启内存压缩</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">enable-mmagent -mc</span><br></pre></td></tr></table></figure><blockquote><p>原文链接：<a href="https://blog.csdn.net/lpw_cn/article/details/104170453">https://blog.csdn.net/lpw_cn/article/details/104170453</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>标签外挂Note、tag-hide、mermaid</title>
      <link href="/2020/03/30/%E6%95%99%E7%A8%8B/Hexo%E6%A0%87%E7%AD%BE%E5%A4%96%E6%8C%82Note%E3%80%81tag-hide%E3%80%81mermaid/"/>
      <url>/2020/03/30/%E6%95%99%E7%A8%8B/Hexo%E6%A0%87%E7%AD%BE%E5%A4%96%E6%8C%82Note%E3%80%81tag-hide%E3%80%81mermaid/</url>
      
        <content type="html"><![CDATA[<h1 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h1><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note [class] [no-icon] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">[class]   : default | primary | success | info | warning | danger.</span><br><span class="line">[no-icon] : Disable icon in note.</span><br><span class="line"></span><br><span class="line">All parameters are optional.</span><br></pre></td></tr></table></figure><h2 id="例如"><a href="#例如" class="headerlink" title="例如"></a>例如</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note default %&#125;</span><br><span class="line">default 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary no-icon %&#125;</span><br><span class="line">primary 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success %&#125;</span><br><span class="line">success 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info %&#125;</span><br><span class="line">info 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning %&#125;</span><br><span class="line">warning 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger %&#125;</span><br><span class="line">danger 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note default flat"><p>default 提示块标签</p></div><div class="note primary no-icon flat"><p>primary 提示块标签；no-icon 不显示icon</p></div><div class="note success flat"><p>success 提示块标签</p></div><div class="note info flat"><p>info 提示块标签</p></div><div class="note warning flat"><p>warning 提示块标签</p></div><div class="note danger flat"><p>danger 提示块标签</p></div><h1 id="tag-hide"><a href="#tag-hide" class="headerlink" title="tag-hide"></a>tag-hide</h1><p>如果你想把一些文字、内容隐藏起来，并提供按钮让用户点击显示。可以使用这个标签外挂。</p><p>写法：</p><p>inline 在文本里面添加按钮隐藏内容，只限文字</p><p>( content 不能包含当引号，可用 &apos;)</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideInline content,display,bg,color %&#125;</span><br></pre></td></tr></table></figure><ul><li>content: 文本内容</li><li>display: 按钮显示的文字 (可选)</li><li>bg: 按钮的背景颜色 (可选)</li><li>color: 按钮文字的颜色 (可选)</li></ul><p><code>block</code> 独立的 block 隐藏内容，可以隐藏很多内容，包括图片，代码块等等</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideBlock display,bg,color %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><h2 id="hideInline"><a href="#hideInline" class="headerlink" title="hideInline"></a>hideInline</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">哪个英文字母最酷？ &#123;% hideInline 因为西装裤(C装酷),查看答案,#FF7242,#fff %&#125;</span><br><span class="line"></span><br><span class="line">门里站着一个人? &#123;% hideInline 闪 %&#125;</span><br></pre></td></tr></table></figure><p><img src="hexo-theme-butterfly-docs-tag-hide-inline.gif" alt="hide-inline.gif"></p><h2 id="hideBlock"><a href="#hideBlock" class="headerlink" title="hideBlock"></a>hideBlock</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideBlock 查看答案 %&#125;</span><br><span class="line">&#123;% gallery %&#125;</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg</span>)</span><br><span class="line">&#123;% endgallery %&#125;</span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><p><img src="hexo-theme-butterfly-tag-hide-block.gif" alt="hide-block.gif"></p><h1 id="mermaid"><a href="#mermaid" class="headerlink" title="mermaid"></a>mermaid</h1><p>使用 mermaid 标签可以绘製 Flowchart（流程图）、Sequence diagram（时序图 ）、Class Diagram（类别图）、State Diagram（状态图）、Gantt（甘特图）和 Pie Chart（圆形图），具体可以查看 <a href="https://mermaid-js.github.io/mermaid/#/">mermaid 文档</a></p><h2 id="写法"><a href="#写法" class="headerlink" title="写法"></a>写法</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% mermaid %&#125;</span><br><span class="line">内容</span><br><span class="line">&#123;% endmermaid %&#125;</span><br></pre></td></tr></table></figure><h2 id="例如-1"><a href="#例如-1" class="headerlink" title="例如"></a>例如</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% mermaid %&#125;</span><br><span class="line">pie</span><br><span class="line"><span class="code">    title Key elements in Product X</span></span><br><span class="line"><span class="code">    &quot;Calcium&quot; : 42.96</span></span><br><span class="line"><span class="code">    &quot;Potassium&quot; : 50.05</span></span><br><span class="line"><span class="code">    &quot;Magnesium&quot; : 10.01</span></span><br><span class="line"><span class="code">    &quot;Iron&quot; :  5</span></span><br><span class="line"><span class="code">&#123;% endmermaid %&#125;</span></span><br></pre></td></tr></table></figure><p><img src="hexo-theme-butterfly-docs-mermaid.png" alt="mermaid.png"></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 标签外挂 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端之HTML</title>
      <link href="/2020/03/20/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E4%B9%8Bhtml/"/>
      <url>/2020/03/20/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E4%B9%8Bhtml/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML-介绍"><a href="#HTML-介绍" class="headerlink" title="HTML 介绍"></a>HTML 介绍</h1><h2 id="Web-服务本质"><a href="#Web-服务本质" class="headerlink" title="Web 服务本质"></a>Web 服务本质</h2><p>浏览器发送请求到服务器 ——&gt;通过Http协议——&gt;服务器接受请求——&gt;服务器处理请求并回应——&gt;服务器把请求的html文件发送给浏览器——&gt;浏览器接收并显示渲染后的页面</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  sequenceDiagram    participant C as 客户端    participant S as 服务端    C-&gt;&gt;S: 通过Http协议请求    S-&gt;&gt;C: 处理请求返回结果    Note right of C: 浏览器接收结果    Note right of C: 打开读取渲染完后反馈给显示器  </pre></div><h1 id="url-是什么"><a href="#url-是什么" class="headerlink" title="url 是什么"></a>url 是什么</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">什么是URL？</span><br><span class="line">URL是统一资源定位器(Uniform Resource Locator)的缩写，也被称为网页地址，是因特网上标准的资源的地址。</span><br><span class="line">URL举例</span><br><span class="line">http://www.sohu.com/stu/intro.html</span><br><span class="line">http://222.172.123.33/stu/intro.html</span><br><span class="line"></span><br><span class="line">URL地址由4部分组成</span><br><span class="line">第1部分：为协议：http://、ftp://等 </span><br><span class="line">第2部分：为站点地址：可以是域名或IP地址</span><br><span class="line">第3部分：为页面在站点中的目录：stu</span><br><span class="line">第4部分：为页面名称，例如 index.html</span><br><span class="line">各部分之间用“/”符号隔开。</span><br></pre></td></tr></table></figure><h2 id="HTML-是什么？"><a href="#HTML-是什么？" class="headerlink" title="HTML 是什么？"></a>HTML 是什么？</h2><ul><li>超文本标记语言（Hypertext Markup Language, HTML）是一种用于创建网页的标记语言。</li><li>本质上是浏览器可识别的规则，我们按照规则写网页，浏览器根据规则渲染我们的网页。对于不同的浏览器，对同一个标签可能会有不同的解释。（兼容性问题）</li><li>网页文件的扩展名：.html或.htm</li></ul><h2 id="HTML-不是什么？"><a href="#HTML-不是什么？" class="headerlink" title="HTML 不是什么？"></a>HTML 不是什么？</h2><p>HTML是一种标记语言（markup language），它不是一种编程语言。</p><p>HTML使用标签来描述网页。</p><p><img src="867021-20171206155335159-1559665689.png" alt="对比"></p><h2 id="HTML-文档结构"><a href="#HTML-文档结构" class="headerlink" title="HTML 文档结构"></a>HTML 文档结构</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>初识HTML<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello word<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li><p><code>&lt;!DOCTYPE html&gt;</code> 声明为HTML5文档。</p></li><li><p><code>&lt;html&gt;、&lt;/html&gt;</code>是文档的开始标记和结束的标记。是HTML页面的根元素，在它们之间是文档的头部（<code>head</code>）和主体（<code>body</code>）。</p></li><li><p><code>&lt;head&gt;、&lt;/head&gt;</code>定义了HTML文档的开头部分。它们之间的内容不会在浏览器的文档窗口显示。包含了文档的元（<code>meta</code>）数据。</p></li><li><p><code>&lt;title&gt;、&lt;/title&gt;</code>定义了网页标题，在浏览器标题栏显示。</p></li><li><p><code>&lt;body&gt;、&lt;/body&gt;</code>之间的文本是可见的网页主体内容。</p></li></ol><p><strong>注意：</strong>对于中文网页需要使用  <code>&lt;meta charset=&quot;utf-8&quot;&gt;</code> 声明编码，否则会出现乱码。有些浏览器会设置 GBK 为默认编码，则你需要设置为<code>&lt;meta charset=&quot;gbk&quot;&gt;</code></p><h2 id="HTML-标签格式"><a href="#HTML-标签格式" class="headerlink" title="HTML 标签格式"></a>HTML 标签格式</h2><ul><li>HTML 标签是有尖括号包围的关键字，如<code>&lt;html&gt;, &lt;div&gt;</code>等</li><li>HTML 标签通常是成对出现的，比如：<code>&lt;div&gt; &lt;/div&gt;</code>，第一个标签是开始，第二个标签是结束，结束的标签会有斜线</li><li>也有一部分标签是单独呈现的，比如：<code>&lt;br/&gt;  &lt;hr/&gt; &lt;img src=&quot;\imgs\1.png&quot;/&gt;</code>等</li><li>标签里面可以有若干属性，也可以不带属性</li></ul><p><strong>标签的语法</strong></p><ul><li>&lt;标签名 属性1=“属性值1” 属性2=“属性值2”……&gt;内容部分&lt;/标签名&gt;</li><li>&lt;标签名 属性1=“属性值1” 属性2=“属性值2”…… /&gt;</li></ul><p><strong>几个很重要的属性：</strong></p><ul><li>id：定义标签的唯一ID，HTML文档树中唯一</li><li>class：为html元素定义一个或多个类名（classname）(CSS样式类名)</li><li>style：规定元素的行内样式（CSS样式）</li></ul><h2 id="HTML-注释"><a href="#HTML-注释" class="headerlink" title="HTML 注释"></a>HTML 注释</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--注释内容--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    这里都可一是</span></span><br><span class="line"><span class="comment">    ·注释·</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h2 id="lt-DOCTYPE-gt-标签"><a href="#lt-DOCTYPE-gt-标签" class="headerlink" title="&lt;!DOCTYPE&gt; 标签"></a>&lt;!DOCTYPE&gt; 标签</h2><p><code>&lt;!DOCTYPE&gt;</code>声明必须是HTML文档的第一行，位于<code>&lt;html&gt;</code>标签之前；</p><p><code>&lt;!DOCTYPE&gt;</code>声明不是HTML标签；它是指示 <code>WEB</code> 浏览器关于页面使用哪个 HTML 版本编写的页面；</p><h1 id="HTML-常用标签"><a href="#HTML-常用标签" class="headerlink" title="HTML 常用标签"></a>HTML 常用标签</h1><h2 id="head-内部常用标签"><a href="#head-内部常用标签" class="headerlink" title="head 内部常用标签"></a>head 内部常用标签</h2><div class="table-container"><table><thead><tr><th>标签</th><th>意义</th></tr></thead><tbody><tr><td><code>&lt;title&gt;&lt;/title&gt;</code></td><td>定义网页标题</td></tr><tr><td><code>&lt;style&gt;&lt;/style&gt;</code></td><td>定义内部样式表</td></tr><tr><td><code>&lt;script&gt;&lt;/script&gt;</code></td><td>定义JS代码或引入外部JS文件</td></tr><tr><td><code>&lt;link/&gt;</code></td><td>引入外部样式表文件</td></tr><tr><td><code>&lt;meta/&gt;</code></td><td>定义网页原信息</td></tr></tbody></table></div><h3 id="meta-标签"><a href="#meta-标签" class="headerlink" title="meta 标签"></a>meta 标签</h3><p>meta 标签介绍：</p><ul><li><code>&lt;meta&gt;</code>元素可提供有关页面的元信息（meta-information）,针对搜索引擎和更新频度的描述和关键词。</li><li><code>&lt;meta&gt;</code>标签位于文档的头部，不包含任何内容。</li><li><code>&lt;meta&gt;</code>提供的信息是用户不可见的。</li></ul><p>meta标签的组成：meta标签共有两个属性，它们分别是http-equiv属性和name 属性，不同的属性又有不同的参数值，这些不同的参数值就实现了不同的网页功能。 </p><p>1.http-equiv属性：相当于http的文件头作用，它可以向浏览器传回一些有用的信息，以帮助正确地显示网页内容，与之对应的属性值为content，content中的内容其实就是各个参数的变量值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--2秒后跳转到对应的网址，注意引号--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;refresh&quot;</span> <span class="attr">content</span>=<span class="string">&quot;2;URL=https://www.baidu.com&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--指定文档的编码类型--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;content-Type&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;UTF8&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--告诉IE以最高级模式渲染文档--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;x-ua-compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.name属性: 主要用于描述网页，与之对应的属性值为content，content中的内容主要是便于搜索引擎机器人查找信息和分类信息用的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;meta总结,html meta,meta属性,meta跳转&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;Python学院&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="body-内常用标签"><a href="#body-内常用标签" class="headerlink" title="body 内常用标签"></a>body 内常用标签</h2><h3 id="基本标签（块级标签和内联标签）"><a href="#基本标签（块级标签和内联标签）" class="headerlink" title="基本标签（块级标签和内联标签）"></a>基本标签（块级标签和内联标签）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>加粗<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span>斜体<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">u</span>&gt;</span>下划线<span class="tag">&lt;/<span class="name">u</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">s</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">s</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>标题3<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>标题4<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>标题5<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>标题6<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--换行--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--水平线--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果图：</p><p><img src="image-20200320174156677.png" alt="效果图"></p><h3 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h3><div class="table-container"><table><thead><tr><th>内容</th><th>对应代码</th></tr></thead><tbody><tr><td>空格</td><td><code>&amp;nbsp;</code></td></tr><tr><td>&gt;</td><td><code>&amp;gt;</code></td></tr><tr><td>&lt;</td><td><code>&amp;lt;</code></td></tr><tr><td>&amp;</td><td><code>&amp;amp;</code></td></tr><tr><td>¥</td><td><code>&amp;yen;</code></td></tr><tr><td>版权</td><td><code>&amp;copy;</code></td></tr><tr><td>注册</td><td><code>&amp;reg;</code></td></tr></tbody></table></div><h3 id="div标签和span标签"><a href="#div标签和span标签" class="headerlink" title="div标签和span标签"></a>div标签和span标签</h3><p>div标签用来定义一个块级元素，并无实际的意义。主要通过CSS样式为其赋予不同的表现。<br>span标签用来定义内联(行内)元素，并无实际的意义。主要通过CSS样式为其赋予不同的表现。</p><p>块级元素与行内元素的区别：<br>所谓块元素，是以另起一行开始渲染的元素，行内元素则不需另起一行。如果单独在网页中插入这两个元素，不会对页面产生任何的影响。<br>这两个元素是专门为定义CSS样式而生的。</p><p><strong>注意：</strong></p><p>关于标签嵌套：通常块级元素可以包含内联元素或某些块级元素，但内联元素不能包含块级元素，它只能包含其它内联元素。</p><p><strong>p标签不能包含块级标签，p标签也不能包含p标签。</strong></p><h2 id="img-标签"><a href="#img-标签" class="headerlink" title="img 标签"></a>img 标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;图片的路径&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;图片未加载成功时的提示&quot;</span> <span class="attr">title</span>=<span class="string">&quot;鼠标悬浮时提示信息&quot;</span> <span class="attr">width</span>=<span class="string">&quot;宽px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;高px(宽高两个属性只用一个会自动等比缩放)&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="a-标签"><a href="#a-标签" class="headerlink" title="a 标签"></a>a 标签</h2><p>超链接标签</p><p>所谓的超链接是指从一个网页指向一个目标的连接关系，这个目标可以是另一个网页，也可以是相同网页上的不同位置，还可以是一个图片，一个电子邮件地址，一个文件，甚至是一个应用程序。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> &gt;</span>点我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#url 是什么&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_self&quot;</span> &gt;</span>url 是什么<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="#url 是什么" target="_self" >url 是什么</a></p><p>href属性指定目标网页地址。该地址可以有几种类型：</p><ul><li>绝对URL - 指向另一个站点（比如 href=”<a href="http://www.jd.com）">http://www.jd.com）</a></li><li>相对URL - 指当前站点中确切的路径（href=”index.htm”）</li><li>锚URL - 指向页面中的锚（href=”#top”）</li></ul><p>target：</p><ul><li>_blank表示在新标签页中打开目标网页</li><li>_self表示在当前标签页中打开目标网页</li></ul><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ol><li>无序列表</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">type</span>=<span class="string">&#x27;disc&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>第一项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>第二项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>type属性：</p><ul><li>disc（实心圆点，默认值）</li><li>circle（空心圆圈）</li><li>square（实心方块）</li><li>none（无样式）</li></ul><p>2.有序列表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span>=<span class="string">&quot;1&quot;</span> <span class="attr">start</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>第一项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>第二项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><p>type属性：</p><ul><li>1 数字列表，默认值</li><li>A 大写字母</li><li>a 小写字母</li><li>Ⅰ大写罗马</li><li>ⅰ小写罗马</li></ul><p>3.标题列表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>标题1<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>内容1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>标题2<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>内容1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>内容2<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>表格是一个二维数据空间，一个表格由若干行组成，一个行又有若干单元格组成，单元格里可以包含文字、列表、图案、表单、数字符号、预置文本和其它的表格等内容。<br>表格最重要的目的是显示表格类数据。表格类数据是指最适合组织为表格格式（即按行和列组织）的数据。</p><h3 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h3><p><code>&lt;table&gt;</code> 标签定义 HTML 表格。</p><p>简单的 HTML 表格由 table 元素以及一个或多个 tr、th 或 td 元素组成。</p><p><code>tr</code>元素定义表格行，<code>th</code> 元素定义表头，<code>td</code> 元素定义表格单元。</p><p>更复杂的 HTML 表格也可能包括 caption、col、colgroup、thead、tfoot 以及 tbody 元素。</p><p>表格的基本结构：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;2&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>爱好<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>wenzhou<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>杠仔<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>Yuan<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>看他<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 结果：</p>  <table border="2" cellpadding="100">    <thead>    <tr>      <th>序号</th>      <th>姓名</th>      <th>爱好</th>    </tr>    </thead>    <tbody>    <tr>      <td rowspan="2">1</td>      <td>wenzhou</td>      <td>杠仔</td>    </tr>    <tr>      <td>Yuan</td>      <td>看他</td>    </tr>    </tbody>  </table><p>属性:</p><ul><li>border: 表格边框.</li><li>cellpadding: 内边距</li><li>cellspacing: 外边距.</li><li>width: 像素 百分比.（最好通过css来设置长宽）</li><li>rowspan: 单元格竖跨多少行</li><li>colspan: 单元格横跨多少列（即合并单元格）</li></ul><h2 id="form"><a href="#form" class="headerlink" title="form"></a>form</h2><p><strong>功能：</strong></p><p>表单用于向服务器传输数据，从而实现用户与Web服务器的交互</p><p>表单能够包含input系列标签，比如文本字段、复选框、单选框、提交按钮等等。</p><p>表单还可以包含textarea、select、fieldset和 label标签。</p><p><strong>表单属性：</strong></p><div class="table-container"><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>accept-charset</td><td>规定在被提交表单中使用的字符集（默认：页面字符集）。</td></tr><tr><td>action</td><td>规定向何处提交表单的地址（URL）（提交页面）。</td></tr><tr><td>autocomplete</td><td>规定浏览器应该自动完成表单（默认：开启）。</td></tr><tr><td>enctype</td><td>规定被提交数据的编码（默认：url-encoded）。</td></tr><tr><td>method</td><td>规定在提交表单时所用的 HTTP 方法（默认：GET）。</td></tr><tr><td>name</td><td>规定识别表单的名称（对于 DOM 使用：document.forms.name）。</td></tr><tr><td>novalidate</td><td>规定浏览器不验证表单。</td></tr><tr><td>target</td><td>规定 action 属性中地址的目标（默认：_self）。</td></tr></tbody></table></div><p><strong>表单元素</strong></p><p>基本概念：<br>HTML表单是HTML元素中较为复杂的部分，表单往往和脚本、动态页面、数据处理等功能相结合，因此它是制作动态网站很重要的内容。<br>表单一般用来收集用户的输入信息<br>表单工作原理：<br>访问者在浏览有表单的网页时，可填写必需的信息，然后按某个按钮提交。这些信息通过Internet传送到服务器上。<br>服务器上专门的程序对这些数据进行处理，如果有错误会返回错误信息，并要求纠正错误。当数据完整无误后，服务器反馈一个输入完成的信息。</p><div class="hide-block"><button type="button" class="hide-button" style="">点击查看—— Django接收上传文件代码    </button><div class="hide-content"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;request.GET:&quot;</span>, request.GET)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;request.POST:&quot;</span>, request.POST)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.FILES:</span><br><span class="line">        filename = request.FILES[<span class="string">&quot;file&quot;</span>].name</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> chunk <span class="keyword">in</span> request.FILES[<span class="string">&#x27;file&#x27;</span>].chunks():</span><br><span class="line">                f.write(chunk)</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;上传成功&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;收到了！&quot;</span>)</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^upload/&#x27;</span>, upload),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></div></div><h2 id="input"><a href="#input" class="headerlink" title="input"></a>input</h2><p><code>&lt;input&gt;</code>元素会根据不同的 type 属性，变化为多种形态。</p><div class="table-container"><table><thead><tr><th>type属性值</th><th>表现形式</th><th>对应代码</th></tr></thead><tbody><tr><td>text</td><td>单行输入文本</td><td><code>&lt;input type=text&quot; /&gt;</code></td></tr><tr><td>password</td><td>密码输入框</td><td><code>&lt;input type=&quot;password&quot; /&gt;</code></td></tr><tr><td>date</td><td>日期输入框</td><td><code>&lt;input type=&quot;date&quot; /&gt;</code></td></tr><tr><td>checkbox</td><td>复选框</td><td><code>&lt;input type=&quot;checkbox&quot; checked=&quot;checked&quot; /&gt;</code></td></tr><tr><td>radio</td><td>单选框</td><td><code>&lt;input type=&quot;radio&quot; /&gt;</code></td></tr><tr><td>submit</td><td>提交按钮</td><td><code>&lt;input type=&quot;submit&quot; value=&quot;提交&quot; /&gt;</code></td></tr><tr><td>reset</td><td>重置按钮</td><td><code>&lt;input type=&quot;reset&quot; value=&quot;重置&quot; /&gt;</code></td></tr><tr><td>button</td><td>普通按钮</td><td><code>&lt;input type=&quot;button&quot; value=&quot;普通按钮&quot; /&gt;</code></td></tr><tr><td>hidden</td><td>隐藏输入框</td><td><code>&lt;input type=&quot;hidden&quot; /&gt;</code></td></tr><tr><td>file</td><td>文本选择框</td><td><code>&lt;input type=&quot;file&quot; /&gt;</code></td></tr></tbody></table></div><p>属性说明:</p><ul><li>name：表单提交时的“键”，注意和id的区别</li><li>value：表单提交时对应项的值<ul><li>type=”button”, “reset”, “submit”时，为按钮上显示的文本年内容</li><li>type=”text”,”password”,”hidden”时，为输入框的初始值</li><li>type=”checkbox”, “radio”, “file”，为输入相关联的值</li></ul></li><li>checked：radio和checkbox默认被选中的项</li><li>readonly：text和password设置只读</li><li>disabled：所有input均适用 eg:disabled=”disabled” 禁止输入</li></ul><h2 id="select标签"><a href="#select标签" class="headerlink" title="select标签"></a>select标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;city&quot;</span> <span class="attr">id</span>=<span class="string">&quot;city&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span>=<span class="string">&quot;selected&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span> <span class="attr">disabled</span>=<span class="string">&quot;disabled&quot;</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;4&quot;</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><form action="" method="post">  <select name="city" id="city">    <option value="1">北京</option>    <option selected="selected" value="2">上海</option>    <option value="3" disabled="disabled">广州</option>    <option value="4">深圳</option>  </select></form><p>HTML中的属性</p><div class="table-container"><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">值</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/att_select_autofocus.asp">autofocus</a></td><td style="text-align:left">autofocus</td><td style="text-align:left">规定在页面加载后文本区域自动获得焦点。</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/att_select_disabled.asp">disabled</a></td><td style="text-align:left">disabled</td><td style="text-align:left">规定禁用该下拉列表。</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/att_select_form.asp">form</a></td><td style="text-align:left"><em>form_id</em></td><td style="text-align:left">规定文本区域所属的一个或多个表单。</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/att_select_multiple.asp">multiple</a></td><td style="text-align:left">multiple</td><td style="text-align:left">规定可选择多个选项。</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/att_select_name.asp">name</a></td><td style="text-align:left"><em>name</em></td><td style="text-align:left">规定下拉列表的名称。</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/att_select_required.asp">required</a></td><td style="text-align:left">required</td><td style="text-align:left">规定文本区域是必填的。</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/att_select_size.asp">size</a></td><td style="text-align:left"><em>number</em></td><td style="text-align:left">规定下拉列表中可见选项的数目。</td></tr></tbody></table></div><p>属性说明：</p><ul><li>multiple：布尔属性，设置后为多选，否则默认单选 <code>&lt;select multiple=&quot;multiple&quot; size=&quot;2&quot;&gt;</code></li><li>disabled：禁用 </li><li>selected：默认选中该项</li><li>value：定义提交时的选项值</li></ul><h2 id="label-标签"><a href="#label-标签" class="headerlink" title="label 标签"></a>label 标签</h2><p>定义：<code>&lt;label&gt;</code> 标签为 input 元素定义标注（标记）。<br>说明：</p><ol><li>label 元素不会向用户呈现任何特殊效果。</li><li><code>&lt;label&gt;</code> 标签的 for 属性值应当与相关元素的 id 属性值相同。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><form action="">  <label for="username">用户名</label>  <input type="text" id="username" name="username"></form><h2 id="textarea多行文本"><a href="#textarea多行文本" class="headerlink" title="textarea多行文本"></a>textarea多行文本</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;memo&quot;</span> <span class="attr">id</span>=<span class="string">&quot;memo&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span>&gt;</span></span><br><span class="line">  默认内容</span><br><span class="line">  默认内容</span><br><span class="line">  默认内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><textarea name="memo" id="memo" cols="30" rows="10">  默认内容  默认内容  默认内容</textarea><p>属性说明：</p><ul><li>name：名称</li><li>rows：行数</li><li>cols：列数</li><li>disabled：禁用</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python格式化字符串的4中方式</title>
      <link href="/2020/03/20/Python/%E5%A5%87%E9%97%BB%E6%9D%82%E8%B0%88/Python%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%844%E4%B8%AD%E6%96%B9%E5%BC%8F/"/>
      <url>/2020/03/20/Python/%E5%A5%87%E9%97%BB%E6%9D%82%E8%B0%88/Python%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%844%E4%B8%AD%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="一：-号"><a href="#一：-号" class="headerlink" title="一：%号"></a><strong>一：%号</strong></h2><p>​    %号格式化字符串的方式从Python诞生之初就已经存在，时至今日，python官方也并未弃用%号，但也并不推荐这种格式化方式。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 1、格式的字符串（即%s）与被格式化的字符串（即传入的值）必须按照位置一一对应</span><br><span class="line"># ps：当需格式化的字符串过多时，位置极容易搞混</span><br><span class="line">print(&#x27;%s asked %s to do something&#x27; % (&#x27;allen&#x27;, &#x27;lili&#x27;))  # allen asked lili to do something</span><br><span class="line">print(&#x27;%s asked %s to do something&#x27; % (&#x27;lili&#x27;, &#x27;allen&#x27;))  # lili asked allen to do something</span><br><span class="line"></span><br><span class="line"># 2、可以通过字典方式格式化，打破了位置带来的限制与困扰</span><br><span class="line">print(&#x27;我的名字是 %(name)s, 我的年龄是 %(age)s.&#x27; % &#123;&#x27;name&#x27;: &#x27;allen&#x27;, &#x27;age&#x27;: 18&#125;)</span><br><span class="line"></span><br><span class="line">kwargs=&#123;&#x27;name&#x27;: &#x27;allen&#x27;, &#x27;age&#x27;: 18&#125;</span><br><span class="line">print(&#x27;我的名字是 %(name)s, 我的年龄是 %(age)s.&#x27; % kwargs)</span><br></pre></td></tr></table></figure><h2 id="二：str-format"><a href="#二：str-format" class="headerlink" title="二：str.format"></a><strong>二：str.format</strong></h2><p>​    该<code>format</code>方法是在Python 2.6中引入的，是字符串类型的内置方法。因为str.format的方式在性能和使用的灵活性上都比%号更胜一筹，所以推荐使用</p><p><em>2.1 使用位置参数</em></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 按照位置一一对应</span><br><span class="line">print(&#x27;&#123;&#125; asked &#123;&#125; to do something&#x27;.format(&#x27;allen&#x27;, &#x27;lili&#x27;))  # allen asked lili to do something</span><br><span class="line">print(&#x27;&#123;&#125; asked &#123;&#125; to do something&#x27;.format(&#x27;lili&#x27;, &#x27;allen&#x27;))  # lili asked allen to do something</span><br></pre></td></tr></table></figure><p><em>2.2 使用索引</em></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 使用索引取对应位置的值</span><br><span class="line">print(&#x27;&#123;0&#125;&#123;0&#125;&#123;1&#125;&#123;0&#125;&#x27;.format(&#x27;x&#x27;,&#x27;y&#x27;)) # xxyx</span><br></pre></td></tr></table></figure><p><em>2.3 使用关键字参数or字典</em></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 可以通过关键字or字典方式的方式格式化，打破了位置带来的限制与困扰</span><br><span class="line">print(&#x27;我的名字是 &#123;name&#125;, 我的年龄是 &#123;age&#125;.&#x27;.format(age=18, name=&#x27;allen&#x27;))</span><br><span class="line"></span><br><span class="line">kwargs = &#123;&#x27;name&#x27;: &#x27;allen&#x27;, &#x27;age&#x27;: 18&#125;</span><br><span class="line">print(&#x27;我的名字是 &#123;name&#125;, 我的年龄是 &#123;age&#125;.&#x27;.format(**kwargs)) # 使用**进行解包操作</span><br></pre></td></tr></table></figure><p><em>2.4 填充与格式化</em></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 先取到值,然后在冒号后设定填充格式：[填充字符][对齐方式][宽度]</span><br><span class="line"></span><br><span class="line"># *&lt;10：左对齐，总共10个字符，不够的用*号填充</span><br><span class="line">print(&#x27;&#123;0:*&lt;10&#125;&#x27;.format(&#x27;开始执行&#x27;)) # 开始执行******</span><br><span class="line"></span><br><span class="line"># *&gt;10：右对齐，总共10个字符，不够的用*号填充</span><br><span class="line">print(&#x27;&#123;0:*&gt;10&#125;&#x27;.format(&#x27;开始执行&#x27;)) # ******开始执行</span><br><span class="line"></span><br><span class="line"># *^10：居中显示，总共10个字符，不够的用*号填充</span><br><span class="line">print(&#x27;&#123;0:*^10&#125;&#x27;.format(&#x27;开始执行&#x27;)) # ***开始执行***</span><br></pre></td></tr></table></figure><p><em>2.5 精度与进制</em></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">print(&#x27;&#123;salary:.3f&#125;&#x27;.format(salary=1232132.12351))  #精确到小数点后3位，四舍五入，结果为：1232132.124</span><br><span class="line">print(&#x27;&#123;0:b&#125;&#x27;.format(123))  # 转成二进制，结果为：1111011</span><br><span class="line">print(&#x27;&#123;0:o&#125;&#x27;.format(9))  # 转成八进制，结果为：11</span><br><span class="line">print(&#x27;&#123;0:x&#125;&#x27;.format(15))  # 转成十六进制，结果为：f</span><br><span class="line">print(&#x27;&#123;0:,&#125;&#x27;.format(99812939393931))  # 千分位格式化，结果为：99,812,939,393,931</span><br></pre></td></tr></table></figure><h2 id="三：f-Strings"><a href="#三：f-Strings" class="headerlink" title="三：f-Strings"></a><strong>三：f-Strings</strong></h2><p>str.format() 比 %格式化高级了一些，但是它还是有自己的缺陷。当需要传入的字符串过多时，仍然会显得非常冗长。与在Python 3.6中引入 了f-strings，不仅比str.format更简洁，性能上也更胜一筹</p><p>​    f<code>-</code>string是以f或F开头的字符串， 核心在于字符串中符号{}的使用</p><p><em>3.1 {}中可以是变量名</em></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name = &#x27;allen&#x27;</span><br><span class="line">age = 18</span><br><span class="line">print(f&#x27;&#123;name&#125; &#123;age&#125;&#x27;)  # allen 18</span><br><span class="line">print(F&#x27;&#123;age&#125; &#123;name&#125;&#x27;)  # 18 allen</span><br></pre></td></tr></table></figure><p><em>3.2 {}中可以是表达式</em></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 可以在&#123;&#125;中放置任意合法的Python表达式，会在运行时计算</span><br><span class="line"># 比如：数学表达式</span><br><span class="line">print(f&#x27;&#123;3*3/2&#125;&#x27;) # 4.5</span><br><span class="line"></span><br><span class="line"># 比如：函数的调用</span><br><span class="line">def foo(n):</span><br><span class="line">    print(&#x27;foo say hello&#x27;)</span><br><span class="line">    return n</span><br><span class="line"></span><br><span class="line">print(f&#x27;&#123;foo(10)&#125;&#x27;) # 会调用foo(10),然后打印其返回值</span><br><span class="line"></span><br><span class="line"># 比如：调用对象的方法</span><br><span class="line">name=&#x27;allen&#x27;</span><br><span class="line">print(f&#x27;&#123;name.lower()&#125;&#x27;) # allen</span><br></pre></td></tr></table></figure><p><em>3.3 在类中的使用</em></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; class Person(object):</span><br><span class="line">...     def __init__(self, name, age):</span><br><span class="line">...         self.name = name</span><br><span class="line">...         self.age = age</span><br><span class="line">...     def __str__(self):</span><br><span class="line">...         return f&#x27;&#123;self.name&#125;:&#123;self.age&#125;&#x27;</span><br><span class="line">...     def __repr__(self):</span><br><span class="line">...         return f&#x27;===&gt;&#123;self.name&#125;:&#123;self.age&#125;&lt;===&#x27;</span><br><span class="line">... </span><br><span class="line">&gt;&gt;&gt; </span><br><span class="line">&gt;&gt;&gt; obj=Person(&#x27;allen&#x27;,18)</span><br><span class="line">&gt;&gt;&gt; print(obj) # 触发__str__</span><br><span class="line">allen:18</span><br><span class="line">&gt;&gt;&gt; obj        # 触发__repr__</span><br><span class="line">===&gt;allen:18&lt;===</span><br><span class="line">&gt;&gt;&gt; </span><br><span class="line">&gt;&gt;&gt; </span><br><span class="line">&gt;&gt;&gt; </span><br><span class="line">&gt;&gt;&gt; # 在f-Strings中的使用</span><br><span class="line">&gt;&gt;&gt; f&#x27;&#123;obj&#125;&#x27;   # 触发__str__</span><br><span class="line">&#x27;allen:18&#x27;</span><br><span class="line">&gt;&gt;&gt; f&#x27;&#123;obj!r&#125;&#x27; # 触发__repr__</span><br><span class="line">&#x27;===&gt;allen:18&lt;===&#x27;  </span><br></pre></td></tr></table></figure><p><em>3.3 多行f-Stings</em></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># 当格式化字符串过长时，如下列表info</span><br><span class="line">name = &#x27;allen&#x27;</span><br><span class="line">age = 18</span><br><span class="line">gender = &#x27;male&#x27;</span><br><span class="line">hobbie1=&#x27;play&#x27;</span><br><span class="line">hobbie2=&#x27;music&#x27;</span><br><span class="line">hobbie3=&#x27;read&#x27;</span><br><span class="line">info = [f&#x27;名字：&#123;name&#125;年龄：&#123;age&#125;性别：&#123;gender&#125;&#x27;,f&#x27;第一个爱好：&#123;hobbie1&#125;第二个爱好：&#123;hobbie2&#125;第三个爱好：&#123;hobbie3&#125;&#x27;] </span><br><span class="line"></span><br><span class="line"># 我们可以回车分隔到多行，注意每行前都有一个f</span><br><span class="line">info = [</span><br><span class="line">    # 第一个元素</span><br><span class="line">    f&#x27;名字：&#123;name&#125;&#x27;</span><br><span class="line">    f&#x27;年龄：&#123;age&#125;&#x27;</span><br><span class="line">    f&#x27;性别：&#123;gender&#125;&#x27;,</span><br><span class="line"></span><br><span class="line">    # 第二个元素</span><br><span class="line">    f&#x27;第一个爱好：&#123;hobbie1&#125;&#x27;</span><br><span class="line">    f&#x27;第二个爱好：&#123;hobbie2&#125;&#x27;</span><br><span class="line">    f&#x27;第三个爱好：&#123;hobbie3&#125;&#x27;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">print(info)</span><br><span class="line"># [&#x27;名字：allen年龄：18性别：male&#x27;, &#x27;第一个爱好：play第二个爱好：music第三个爱好：read&#x27;]</span><br></pre></td></tr></table></figure><p><em>3.4 引号的嵌套</em></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 当字符串嵌套发送冲突时，与正常的字符串处理方式是一样的</span><br><span class="line"># 1、外层为单引号，内层嵌套也为单引号，并且想要输入的内容也为单引号，那么外层需要改用双引号</span><br><span class="line">print(&quot;my name is &#x27;allen&#x27;&quot;)</span><br><span class="line"></span><br><span class="line"># 2、外层为单引号，内层嵌套也为单引号，并且想要输入的内容也为单引号，需要用到转义</span><br><span class="line">print(&#x27;my name is \&#x27;allen\&#x27;&#x27;)</span><br></pre></td></tr></table></figure><p><em>3.5注意</em></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#1、反斜杠可以用来进行字符转义，但不能用在&#123;&#125;的表达式中</span><br><span class="line">f&#x27;&#123;1\2&#125;&#x27; # 语法错误</span><br><span class="line"></span><br><span class="line">#2、注释#号也不能出现在&#123;&#125;的表达式中</span><br><span class="line">f&#x27;&#123;x#&#125;&#x27; # 语法错误</span><br></pre></td></tr></table></figure><p><em>3.6 括号的处理</em></p><p>基于3.5我们得知，不能在{}内出现反斜杠\，所以，当我们的输出的结果中需要包含{}时，下面的做法就是错误的</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(f&#x27;\&#123;天王盖地虎\&#125;&#x27;)</span><br></pre></td></tr></table></figure><p>类似于输出%号的做法</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print(&#x27;%s%%&#x27; %30)</span><br><span class="line">30%</span><br></pre></td></tr></table></figure><p>若想输出{},那么需要在原有的基础上再套一层，如下</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(f&#x27;&#123;&#123;天王盖地虎&#125;&#125;&#x27;) # &#123;天王盖地虎&#125;</span><br><span class="line"></span><br><span class="line">print(f&#x27;&#123;&#123;&#123;&#123;天王盖地虎&#125;&#125;&#125;&#125;&#x27;) # &#123;&#123;天王盖地虎&#125;&#125;</span><br></pre></td></tr></table></figure><p>性能对比=&gt;f_Stings性能最高</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">from timeit import timeit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def test_s():</span><br><span class="line">    name = &#x27;allen&#x27;</span><br><span class="line">    age = 18</span><br><span class="line">    return &#x27;%s:%s.&#x27; % (name, age)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def test_format():</span><br><span class="line">    name = &#x27;allen&#x27;</span><br><span class="line">    age = 18</span><br><span class="line">    return &#x27;&#123;&#125;:&#123;&#125;.&#x27;.format(name, age)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def test_f_strings():</span><br><span class="line">    name = &#x27;allen&#x27;</span><br><span class="line">    age = 18</span><br><span class="line">    return f&#x27;&#123;name&#125;:&#123;age&#125;.&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">res1 = timeit(test_s, number=1000000)</span><br><span class="line">res2 = timeit(test_format, number=1000000)</span><br><span class="line">res3 = timeit(test_f_strings, number=1000000)</span><br><span class="line">print(res1) # 0.3709844550030539</span><br><span class="line">print(res2) # 0.47834375899401493</span><br><span class="line">print(res3) # 0.3111891380031011, 最快</span><br></pre></td></tr></table></figure><h2 id="四：标准库模板"><a href="#四：标准库模板" class="headerlink" title="四：标准库模板"></a>四：标准库模板</h2><p>​    从Python 2.4起，Python标准库string引入了Template也可以用来格式化字符串，所以说，与前三种方式的一个显著区别就是：Template并属于python语言的核心语法特征，使用方式如下</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from string import Template</span><br><span class="line"></span><br><span class="line">name=&#x27;allen&#x27;</span><br><span class="line">t = Template(&#x27;Hello $name!&#x27;)</span><br><span class="line">res=t.substitute(name=name)</span><br><span class="line"></span><br><span class="line">print(res)  # Hello allen!</span><br></pre></td></tr></table></figure><p>另外一个不同的地方是这个模板字符串不支持类似str.format那样的进制转换，需要我们自己处理</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from string import Template</span><br><span class="line"></span><br><span class="line">name=&#x27;allen&#x27;</span><br><span class="line">templ_string = &#x27;Hello $name, there is a $error error!!!&#x27;</span><br><span class="line">res=Template(templ_string).substitute(name=name, error=hex(12345))</span><br><span class="line"></span><br><span class="line">print(res) # Hello allen, there is a 0x3039 error!!!</span><br></pre></td></tr></table></figure><p>使用模板字符串Template的最佳的时机就是当你的程序需要处理由用户提供的输入内容时。模板字符串是最保险的选择，因为可以降低复杂性。</p><p>其他一些复杂的字符串格式化技巧的可能会给你的程序带来安全漏洞</p><h2 id="五：总结四种方式的应用场景"><a href="#五：总结四种方式的应用场景" class="headerlink" title="五：总结四种方式的应用场景"></a><strong>五：总结四种方式的应用场景</strong></h2><p>1、如果格式化的字符串是由用户输入的，那么基于安全性考虑，推荐使用Template</p><p>2、如果使用的python3.6+版本的解释器，推荐使用f-Stings</p><p>3、如果要兼容python2.x版本的python解释器，推荐使用str.format</p><p>4、如果不是测试的代码，不推荐使用%</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 奇闻杂谈 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>理财</title>
      <link href="/2020/03/09/%E7%90%86%E8%B4%A2/"/>
      <url>/2020/03/09/%E7%90%86%E8%B4%A2/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="5c21dd26f05cfd9ba68f0fa82f0466f9fccde8837ffa9d8b69067690f4fa49d3">bf079e01f8347d45e7dd35fa6a7eb8509ad9877fcd915ca18b6198d60c969809a82f5ff432d10e564e1eecc1ba0f0d8e910bd932f3f79ec340b34efad09d8ff65e8e768a0215d8e186d48b5283cee9b14295d45b2be50f85e73b314ac484815fe1853fb38bd0b9c96d1e6aec214f2c78a1ab5619b62994121bae4c25ae92e6f211588d5adf898dc51c509b7bc55be83651f07f8bf246566774cf70f8d9b142ab093004b39628668d32ecb56bd0c5cb88e8a95804f15c8ce1202addd2996fc137ed5535ff3bcb6e06588b0250b6d8d3b0afe668d0ccefd91ab990dc15229c7f05e758e449c3918db4d2186563e621009bb7929d2e57a93a5ff0a4ce42dea91e27a3a38b0cd6b9810dfd17e0a63baac629ac0009c1d18d5613e0e6d31954a58a05f1407d95504487719e67d6d65d10704c95456d968c231d48981b1187c6d4490ef4ed07e8d2765bc89fe0fdfb15168f12cd1ab6187a43895a893059c9fd578cdf88a265645e4af2a69d475364c72639fb1a7564720e674ec41202bdfc3c2d1c53dff7a043d29e79327169a849c5d4be2c29ee62d571125470745119b8a0f0f6b0d168a55766ea4065fe643d23c2b8e058b58d30653dbebe93bdf367ed80f02d60aa9864a9cb324b2120169e1f4ed108b320542dab3af0168130da3383ae3a980c6fdafc9123c41e394e05a009e963957f25d5afe9c82ad9177462079662099506f51e938a939c908c8ad0123a1fc32a0c40f45f7522416412e5a1d9fa61194013e93011861b57e88e397f892bbcffeb43d455a9391d88e7a48dbc2e21cd82b85ca2d66fe561eb4697e2a0b5e806cc75dd99d5dc74e25de819d97ca776ebc90db0cf16d3c42562f879bf1f0618590ceb2cc9248060dc3b652a385300a1d7efde5a3fd207f72937c81fe97474d141a0b037f1db42ab6045b3bfbfceaaa89af216a49836f2ca42b6d6d207a3bd09b4d0cc29b168975a0551ab9dd54bc03c657b3ea743860bfce5d90373184242b356bbc2457fd6af26ba5aa617a044edb41a585323be6d23944ed18690ab6720e98346910b57a15d5bd2b5b3c7ab5dacff3e3e258bdbd3b182bca2466ab9cd7d95fcf14e60ae57f15f500302e4e4dc5d730a7c986a203be1041678840eeabdd68a65e56c6ba658e0ba7340feddd47223012b13ee9eceba0900c53e377f4fea8fa8d12924a389922eb52e03bd2203a5b8dea0bb049452a261a42f4ad8380faeda08a7ba6ef4ad0f748b58083771ffb8ce70629975173ed8c88fd5db9079dde288b86ff43835e2c96d1055fba620d87d9ca3ca41a5ea4ca7f195d1b9351d4d24a0a7f02e20368cec3d38076cbfcc84343e60eb1b9fb0503fec0712d0ee8f1143604285f32a50920786bb27c7a6c42e6e058b926f467def63572055b0e8a481a2275a6aea2e03dc7d974f61b8bb06a0b3aa8d1e5e8b34291dfccc030e27b2036eeadad575f979b6021d12cb7e7dd8e66b7898be61daf25789359f0146841ae10f6f2cdf9907c496487d3f2d4e33b78217882ff62d0b105c4bd3481e1506ea1a22cbacc5c2162ebe0febd5c168817733f66c55ab8da3a89625961b5174b5b8574d8fc163d6f41cb3290568c0893285808735ae2ed1d690895d3d0c47eb5a010d49aa735afeb80f74950b5723aad2e0b2242db6420df4c448a96eb348fecfff68deaec0cf9a68694af5318e5e9d3e4b77d252c090393ff96cfa073aa14fa4a05a2bd01c52176c5833aab45875032d3847144260a91019618387a5ba5d0af5c6db1734b14f17a052f1b2f1df65e0784ea6ca7e08687967c2d7eee727d9a32a78875a9ff674e774d015bcd8154666249d122f2125e4c6dcc544f12cad19e8494474e705708259daa6aa542a69bce1689b2719b0ef4fc01b394357b7674fab9a02d23b8cc6680d718022119d02139db815f125156ca0b7b7468473a6b07205bb6bbbc222f57d6cfdcfd19a30183a0ef2659fc745ba94301b84dba9883f6902d2b7748aae0e4ab82ae745a46a6ff0c763d45f952e357823112e15b63bc526e7e9c50450d8ca8f4baa9d42fed70a6d0799117ce8c2f463d07f2f83caecc3d7232da1ed81ca31cd94c68d4bc17d278651ef5005bcb7401872b54a963f8a462d76d6a401dfef297453f69a44b9ee246fbb4c0e0cbc1478ebfecaa3ac59dd6659873d2e810139e8d8bc2c2b897e74c89c860d64ce7e61cec19481e4ceac60a92a5665ecadf8cd671cf34155fff06e494f6b177d77462a181d26269810c48273355e2d30b204b5a6b41fccc83b7195f8427150bd7fdf1be3b86f91b1a1d22879226b69b9747c8206fabd074339595367f690919ec0a6ca711929ce61169ddf48393b05be80968ef761dd1bb293718063eba2c25454c1c2f7762d12eda32fa3b0be3184c2f2c1cd82b6ab1af1e5f283d5ac411dbe03c3855248c06b511cbba067206b81f414b785cba235e8618b0a17af219c4645aa369989a851301879fe2093051821fcf4e436bd45cbc893977cdb1ae55eb3a867ba10761188e9fdf15c89631b8b221ebec0cfe6646382e9f4437f1b0358b316c5c2a85efee623f74680fed7bd0004f6dff89b540d9f452c9fde908bb2b69375ccbeed6df9a2e512bc2f358f6911b010f78b31255d22bd5e42e3545104a22901dfa04d59de1bb2d38b03e58c5c77577e4ca446fe1c8110b77e962d54992f01019346bfc5e537c23c63e8156dbc47323f736d29c3ac7fe6f2cae359a41b859fbf678251ba7a9aac7dddff593663bba368fd8ce80f66947b3d4becc481ea135b0a926e93a07a5553d019e290459c051ee216b3e65f16139997402cbdb90dfda7d07928f6ae8c59025917f827137803e4c27b2402b8dc428d55d9fde72c25906ac67eea6223fa8949405d53dc37007cd1015d3b6613655774a49ceae25b1d1b050690cb0a4412475895fc9d71ee0b11d49976253320663944bc5d7619bc47dc57149a49ab9b315d12acb209b6cf2f782d06fd059c417e2fb9f356d8001e46b6bc0d634d34c672c2ccdad67bad56cd4312e66a4a6ec4280325247be788fc8ac2b4deb45fe249797953424743161d9d06836fa502ed198bcad8251352f245d2d17d39308abe13a20e64c8a8484c8d45761174fdc52c93a6a1e8a996f6856ba0b2728c3b9c98dfa9dc2911955e640b30d42e6739ccf1123ec5f1dd65c1304df26503a745ffc4936a6382f1ee1bc80c9f23b82d32dc91c7ccb3135f7c9343958efba15b1d2d23f7d878fbf7ba353d2acc8f130c0b54025fcb43edb47dfab5b4c0302d6d5a459666634659c8c94ae5c3813a3d66c35ef2d56ca1c87875b7721c0131b28abf6f411e60eb810a6670e79756334e55df19797bd3f5e0cc136caef06c6bdf3d8d1e9053f434e8be954f18e2b9dbc2fdeeb81ed999b391cd00362e615718a28c44ff531b6cb41e3f9c2467294dab804fcbaf761bdfd3150636ff512ee6a96dd3cd6d9822ac7c4d43259fc6417294c3f3718a1d502ba35d5c860bfed2ef57679003c8f752ee46d47609593facb98fd307354a52212cba2e39bb14569ac38bf74a40744f10c593f98b6b280bdc782b393d3dac3e02004e6aaefd4616dc7f3ab46753639e79a7525121b8600fffbdaec9be1c643245fd4bded2b1923027b630a223d9c53b82837beb978c0dfb2cdaa8649f1955ae92cb1d18c61f1d2014c183be8d80864243176eeabf11ef2f1e72b1a3123189c5d04a563a3168556b242b3f4f386cf46b21191e9db9c94d1dff3938c2b4eefc5a5fe4e8f507883b1b0fbc93640ff8750950b958045db60adc52bcaf4dee9a670189a7600c35dc7fea0f82b62bbea48bb91b062aeba339389df4a8b13710b6f5472207aec12af5a380537f60a9927d1dd901fdcd0c7dd8909f15c892de6574ae866f6a0d17b07e50779760282f7301c51ce76a26d115983efe3332ffd224967914b9dcfbb42000a2c88162a444b7d4147cd4aff0bbbcdbb39af16074da8a52c66e307acc72c4a58ead82b0a8ad7c1a108adce875681d4fd8351207e1b2d0d80ae20139c218fd0723aa70e55e9dc042cdd14138ecb48dfbc2ead71d04947ed0e9e318bfd3c20f93ca11244765b09f2e5862b26a5ecf8d8e948bf57cc17d1be7bfbb11f343ebdcc7444404939831611fa781cfc102d0e9ca18a06145d78acb13134680b8a0dde5f74da3dcf161f3c32e7456750a5067bb68046057dd5474fb54f01ec062a8f9329f87dba4c4b441f1a0c052bfb9f1cf33397492554f3c2bb08119d3e2e2c842d6bd8b9de33c53feca3ffe0ee9f2b51581d1c2a13f599715f9001b7412bb5fadc01564b1a110eb86b21280df7745e609b1261ca0fbd2c6662791f12271521c538841a037abfc233984cf35344f36bea718042e367b49791472deb0b2c19c743fd71118f56e30a8daa4197840301734ef9e862511b8ca74e4d02b945ed8ae4b07ef35e7cd35b79bd37794a3e6b8656c0775fd7bb0d5a004061862d991f53e70615d86e66cf194487495ba72a9dd3afefbec78d7f9109569eae4891508fefb8c9e1dc20e4b5eddd72ae0efe8aa8f56c5adcceb747e7ec1db0aa4e651a49ce7bf5880dd0d424697554fa2fad7be4609e1f4a52882bf7d0068a492f51aae0f6fea203fafe61c4c1d3c25c1953e5e1b3660391c99376865d618b3a6049266361a5218e4846c75bb24ee9ebd188fdb9ad39085b5f45db9dedc6ec544371360c7489950bfd7638ee54812027df9e45b43f5efd7b4</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> passwd </tag>
            
            <tag> 理财 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>史上最简洁的Office 2019 for Mac 安装方法</title>
      <link href="/2020/02/05/%E8%AE%A1%E7%AE%97%E6%9C%BA/Office%202019%20for%20mac%E5%AE%89%E8%A3%85/"/>
      <url>/2020/02/05/%E8%AE%A1%E7%AE%97%E6%9C%BA/Office%202019%20for%20mac%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p><strong>1.下载微软官方Office 2019 for Mac 64位：</strong>大小：1.7G</p><p><a href="https://link.zhihu.com/?target=https%3A//officecdn-microsoft-com.akamaized.net/pr/C1297A47-86C4-4C1F-97FA-950631F94777/MacAutoupdate/Microsoft_Office_16.30.19101301_Installer.pkg">官方软件下载地址</a> </p><p><strong>2.按照提示安装Office 2019 for Mac</strong></p><p><strong>3.下载Microsoft_Office_2019_VL_Serializer安装器：</strong></p><p>百度网盘下载地址<br>链接: <a href="https://pan.baidu.com/s/1vivX0x87pv8MXicFFHkblQ">https://pan.baidu.com/s/1vivX0x87pv8MXicFFHkblQ</a> 提取码: gf46</p><p><strong>4.按照提示安装。</strong></p><p><strong>5.安装文件后，打开Office 2019检查是否成功！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> office </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac问题总结</title>
      <link href="/2020/02/05/%E8%AE%A1%E7%AE%97%E6%9C%BA/Mac%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
      <url>/2020/02/05/%E8%AE%A1%E7%AE%97%E6%9C%BA/Mac%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="MAC唤醒后没声音的解决方法"><a href="#MAC唤醒后没声音的解决方法" class="headerlink" title="MAC唤醒后没声音的解决方法"></a>MAC唤醒后没声音的解决方法</h1><p>打开终端，输入以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo kextunload /System/Library/Extensions/AppleHDA.kext</span><br><span class="line">sudo kextload /System/Library/Extensions/AppleHDA.kext</span><br></pre></td></tr></table></figure><p>这个方法是<strong>重新加载音频驱动</strong>。</p><p>脚本</p><p><code>vim rstart_mac.sh</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;重新加载mac音频驱动&quot;</span><br><span class="line">sudo kextunload /System/Library/Extensions/AppleHDA.kext</span><br><span class="line">sudo kextload /System/Library/Extensions/AppleHDA.kext</span><br></pre></td></tr></table></figure><h1 id="MacBook-Pro-的-touchbar-音量和亮度调节消失是怎么回事"><a href="#MacBook-Pro-的-touchbar-音量和亮度调节消失是怎么回事" class="headerlink" title="MacBook Pro 的 touchbar 音量和亮度调节消失是怎么回事?"></a>MacBook Pro 的 touchbar 音量和亮度调节消失是怎么回事?</h1><blockquote><p>自己最后结决后,都会骂自己一句傻逼的事情,😂</p></blockquote><p>评查经常用的音量和亮度消失的模块之找回来的解决办法,网上找了不知多少篇文章,有说的是开机优化了,有的让重启touch进程等等</p><p>最后是怎么解决呢?</p><p>偏好设置—&gt;触控栏显示—&gt;App控制—&gt;显示功能栏</p><p>再见!</p><h1 id="Mac-删除launchpad残留图标"><a href="#Mac-删除launchpad残留图标" class="headerlink" title="Mac 删除launchpad残留图标"></a>Mac 删除launchpad残留图标</h1><h5 id="mac中不在appstore上下载的应用经常在删除后它的图标还残留在launchpad中，并且长按长按快捷键control-option-command图标也不会出现删除符号。下面解决这个问题。"><a href="#mac中不在appstore上下载的应用经常在删除后它的图标还残留在launchpad中，并且长按长按快捷键control-option-command图标也不会出现删除符号。下面解决这个问题。" class="headerlink" title="mac中不在appstore上下载的应用经常在删除后它的图标还残留在launchpad中，并且长按长按快捷键control+option+command图标也不会出现删除符号。下面解决这个问题。"></a>mac中不在appstore上下载的应用经常在删除后它的图标还残留在launchpad中，并且长按长按快捷键control+option+command图标也不会出现删除符号。下面解决这个问题。</h5><h2 id="先找出所有图标全称："><a href="#先找出所有图标全称：" class="headerlink" title="先找出所有图标全称："></a>先找出所有图标全称：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlite3 $(sudo find /private/var/folders -name com.apple.dock.launchpad)/db/db &quot;select * from apps;&quot;</span><br></pre></td></tr></table></figure><p>然后删除：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlite3 $(sudo find /private/var/folders -name com.apple.dock.launchpad)/db/db &quot; FROM apps WHERE title=&#x27;XXXXXXXXXX&#x27;;&quot; &amp;&amp; killall Dock</span><br></pre></td></tr></table></figure></p><p>详细复杂理论步骤请参考:<a href="https://www.jianshu.com/p/683af03b3861">https://www.jianshu.com/p/683af03b3861</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 音频 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pycharm 打不开如何解决</title>
      <link href="/2020/01/30/%E6%95%99%E7%A8%8B/Pycharm-%E6%89%93%E4%B8%8D%E5%BC%80%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3/"/>
      <url>/2020/01/30/%E6%95%99%E7%A8%8B/Pycharm-%E6%89%93%E4%B8%8D%E5%BC%80%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<ol><li><p><code>cd /Applications/PyCharm.app/Contents/MacOS</code></p></li><li><p><code>./pycharm</code></p></li></ol><p>1/2步骤可查看具体错误</p><p>一般解决方法：</p><ol><li><p><code>cd /Users/iss/Library/Preferences/PyCharm2019.1/</code></p></li><li><p><code>rm -f pycharm.vmoptions</code></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Pycharm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pycharm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Iterm2保持连接</title>
      <link href="/2020/01/29/%E6%95%99%E7%A8%8B/iterm2%E4%BF%9D%E6%8C%81%E8%BF%9E%E6%8E%A5/"/>
      <url>/2020/01/29/%E6%95%99%E7%A8%8B/iterm2%E4%BF%9D%E6%8C%81%E8%BF%9E%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<p>使用linux进行命令行操作时，一不留神SSH就断开了连接，耐性极好的我也忍受不了时间的流失</p><h1 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h1><p>在iTerm2的Perferences&gt;Profiles&gt;session中设置找到选项</p><p>☑️When idle, send ASCII code 0 every 60 seconds</p><p>ASCII和时间间隔可自定义</p><p>查阅资料表示：</p><p>通过这个配置，可以达到保持连接的目的，但同时也带来一些副作用，比如：</p><pre><code>一些命令行输出中会有不期待出现的字符；或者，VI / Vim 中会插入一些不想要的内容</code></pre><p> 可通过第二种去设置</p><p><code>profiles -&gt; sessions -&gt; 勾选 When idel, send ASCII code就可以了</code></p><p>  When idle, send ASCII code 0 every 60 seconds【空闲时，每60秒发送一次ASCII代码】</p><p>  经设置尝试，SSH保持连接无断开，可用！</p><h1 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h1><p>修改配置文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/ssh/ssh_config</span><br></pre></td></tr></table></figure><p>在文件末尾添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TCPKeepAlive yes</span><br><span class="line">ServerAliveInterval 300</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Iterm2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Iterm2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac通过终端登陆服务器报LC_CTYPE: cannot change locale (UTF-8): No such file or directory</title>
      <link href="/2020/01/15/error/mac%E9%80%9A%E8%BF%87%E7%BB%88%E7%AB%AF%E7%99%BB%E9%99%86%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8A%A5LC-CTYPE-cannot-change-locale-UTF-8-No-such-file-or-directory/"/>
      <url>/2020/01/15/error/mac%E9%80%9A%E8%BF%87%E7%BB%88%E7%AB%AF%E7%99%BB%E9%99%86%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8A%A5LC-CTYPE-cannot-change-locale-UTF-8-No-such-file-or-directory/</url>
      
        <content type="html"><![CDATA[<p>通过OS X ssh Terminal应用程序连接到任何远程Linux / Unix / BSD服务器或计算机时，出现以下错误：</p><blockquote><p><em>ssh user@server1.cyberciti.biz</em><br>上次登录时间：2014年3月26日星期三，1.2.3.4起<br>-bash：警告：setlocale：LC_CTYPE：无法更改语言环境（UTF-8）：无此类文件或目录</p></blockquote><p>如何解决此错误?</p><p>[donotprint] [/ donotprint]此警告或错误是OpenSSH服务器和OS X ssh终端客户端问题的一部分。可以使用多种方法进行修复。</p><h2 id="了解LC-环境变量"><a href="#了解LC-环境变量" class="headerlink" title="了解LC_ *环境变量"></a>了解LC_ *环境变量</h2><p>在远程服务器上键入以下命令以显示Glibc支持的所有语言环境：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ locale -a</span><br></pre></td></tr></table></figure><p>接下来，键入以下命令以在本地系统（基于OSX / Unix / Linux的桌面）上显示设置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">printenv echo  “ $ LC_CTYPE ”</span><br></pre></td></tr></table></figure><p>样本输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UTF-8</span><br></pre></td></tr></table></figure><p>上面的命令显示国家和语言名称，以及语言环境使用的字符编码。您的本地ssh客户端正在将您的LC<em> *环境变量发送到远程sshd服务器。换句话说，SSH还将尝试在删除服务器上设置您在本地OSX系统上设置的每个LC</em> *变量。这是此问题的示例：</p><p><img src="1.webp" alt="web"><br>图01：警告setlocale lc_ctype无法更改语言环境（utf-8）</p><h2 id="修复LC-CTYPE：在Linux-OS-X上无法更改语言环境（UTF-8）错误"><a href="#修复LC-CTYPE：在Linux-OS-X上无法更改语言环境（UTF-8）错误" class="headerlink" title="修复LC_CTYPE：在Linux / OS X上无法更改语言环境（UTF-8）错误"></a>修复LC_CTYPE：在Linux / OS X上无法更改语言环境（UTF-8）错误</h2><p>可以如下修复。</p><h3 id="方法1：如果您在OS-X上使用终端应用程序"><a href="#方法1：如果您在OS-X上使用终端应用程序" class="headerlink" title="方法1：如果您在OS X上使用终端应用程序"></a>方法1：如果您在OS X上使用终端应用程序</h3><p>如果您使用的是“终端”应用，请点击</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">终端 &gt; 首选项 &gt;选择终端类型，例如基本（默认）&gt; 高级选项卡</span><br></pre></td></tr></table></figure><p>确保未选中“在启动时设置区域设置环境变量”，如下所示：</p><p><img src="2.webp" alt="web"><br>图02：通过取消选中“在启动时设置区域设置环境变量”复选框来修复OS X终端</p><p>这是MacOS X v10.11.6的另一个屏幕截图：</p><p><img src="3.webp" alt="web"><br>图03：在OS X EI Caption上取消选中“在启动时设置区域设置环境变量”复选框</p><p>您必须关闭所有ssh会话并重新启动终端应用程序。</p><h3 id="方法2：阻止OpenSSH客户端在OS-X-Linux-Unix桌面上发送LC-变量"><a href="#方法2：阻止OpenSSH客户端在OS-X-Linux-Unix桌面上发送LC-变量" class="headerlink" title="方法2：阻止OpenSSH客户端在OS X / Linux / Unix桌面上发送LC_ *变量"></a>方法2：阻止OpenSSH客户端在OS X / Linux / Unix桌面上发送LC_ *变量</h3><p>编辑/ etc / ssh / ssh_config或/ etc / ssh_config文件，输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vi〜/ .ssh / config</span><br></pre></td></tr></table></figure><p>删除或注释掉，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#SendEnv LANG LC_ *</span><br></pre></td></tr></table></figure><p>保存并关闭文件。</p><h3 id="方法3：在远程服务器上安装所需的语言环境"><a href="#方法3：在远程服务器上安装所需的语言环境" class="headerlink" title="方法3：在远程服务器上安装所需的语言环境"></a>方法3：在远程服务器上安装所需的语言环境</h3><p>最后，您可以使用localedef命令安装所需的语言环境，或考虑在语言环境/远程系统中选择其他语言环境，来解决此问题：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">＃localedef -i zh_CN -f UTF-8 zh_CN.UTF-8</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Errors </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Iterm2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac Iterm2神器</title>
      <link href="/2020/01/15/%E6%95%99%E7%A8%8B/Mac-Iterm2%E7%A5%9E%E5%99%A8/"/>
      <url>/2020/01/15/%E6%95%99%E7%A8%8B/Mac-Iterm2%E7%A5%9E%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>mac 目前最好用的终端神器没有之一</p><p><img src="iterm2.png" alt="iterm2"></p><h1 id="安装iTerm2"><a href="#安装iTerm2" class="headerlink" title="安装iTerm2"></a>安装iTerm2</h1><p>下载地址：<a href="https://www.iterm2.com/downloads.html">https://www.iterm2.com/downlo…</a></p><p>也可以通过Homebrew来安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew cask install iterm2</span><br></pre></td></tr></table></figure><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="配置ITerm为默认终端"><a href="#配置ITerm为默认终端" class="headerlink" title="配置ITerm为默认终端"></a>配置ITerm为默认终端</h2><p><img src="image-20200115005500428.png" alt="img"></p><h2 id="配置iTerm2主题"><a href="#配置iTerm2主题" class="headerlink" title="配置iTerm2主题"></a>配置iTerm2主题</h2><blockquote><p>最新版的ITerm2 默认Solarized Dark 可以直接选择</p></blockquote><p>iTerm2 最常用的主题是 Solarized Dark theme</p><p>下载地址：<a href="http://ethanschoonover.com/solarized">http://ethanschoonover.com/so…</a></p><p>下载的是压缩文件，解压后，打开iTerm2，按<code>Command+,</code>键，打开Preferences配置页面，然后Profiles -&gt; Colors -&gt; Color</p><p>Presets -&gt; Import，选择刚解压的压缩文件<code>solarized-&gt;iterm2-colors-solarized-&gt;Solarized Dark.itermcolors</code>文件，导</p><p>入成功，最后选择Solarized Dark 主题，就可以了。<br><img src="bVbg0WT.png" alt="img"></p><h2 id="配置-Oh-My-Zsh"><a href="#配置-Oh-My-Zsh" class="headerlink" title="配置 Oh My Zsh"></a>配置 Oh My Zsh</h2><p>Oh My Zsh 是对主题的进一步扩展，地址：<a href="https://github.com/robbyrussell/oh-my-zsh">https://github.com/robbyrusse…</a></p><p>一键安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</span><br></pre></td></tr></table></figure><p>安装好之后，需要把 Zsh 设置为当前用户的默认 Shell（这样新建标签的时候才会使用 Zsh）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ chsh -s /bin/zsh</span><br></pre></td></tr></table></figure><p>然后，我们编辑<code>vim ~/.zshrc</code>文件，将主题配置修改为<code>ZSH_THEME=&quot;agnoster&quot;</code></p><p><img src="bVbg0XG.png" alt="img"><br><code>agnoster</code>是比较常用的 zsh 主题之一，你可以挑选你喜欢的主题，zsh 主题列表：<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/themes">https://github.com/robbyrusse…</a><br>配置后，效果如下：</p><p><img src="bVbg0X3" alt="img"></p><h2 id="配置-Meslo-字体"><a href="#配置-Meslo-字体" class="headerlink" title="配置 Meslo 字体"></a>配置 Meslo 字体</h2><p>使用上面的主题，需要 Meslo 字体支持，要不然会出现乱码的情况，字体下载地址：<code>Meslo LG M Regular for Powerline.ttf</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/powerline/fonts/master/Meslo%20Slashed/Meslo%20LG%20M%20Regular%20for%20Powerline.ttf</span><br></pre></td></tr></table></figure><p><img src="ziti.png" alt=""></p><p>下载好之后，直接在 Mac OS 中安装即可。</p><p>然后打开 iTerm2，按<code>Command + ,</code>键，打开 Preferences 配置界面，然后<code>Profiles -&gt; Text -&gt; Font -&gt; Chanage Font</code>，选择</p><p><code>Meslo LG M Regular for Powerline</code> 字体</p><p><img src="bVbg0ZC.png" alt="img"></p><h2 id="自动提示填充"><a href="#自动提示填充" class="headerlink" title="自动提示填充"></a>自动提示填充</h2><p>这个功能非常的实用，可以提高我们的开发效率</p><p>先克隆<code>zsh-autosuggestions</code>项目，到指定目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/zsh-users/zsh-autosuggestions ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure><p>然后编辑<code>vim ~/.zshrc</code>文件，找到<code>plugins</code>配置，增加<code>zsh-autosuggestions</code>插件。</p><p><img src="bVbg00r.png" alt="img"></p><h2 id="语法高亮"><a href="#语法高亮" class="headerlink" title="语法高亮"></a>语法高亮</h2><ol><li>使用homebrew安装<a href="https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/INSTALL.md">zsh-syntax-highlighting</a> 插件。</li></ol><blockquote><p>git clone <a href="https://github.com/zsh-users/zsh-syntax-highlighting.git">https://github.com/zsh-users/zsh-syntax-highlighting.git</a> ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting</p></blockquote><ol><li>vim ~/.zshrc配置文件，插入一行，保存退出。</li></ol><blockquote><p>plugins=( … zsh-syntax-highlighting)</p></blockquote><ol><li>输入命令。</li></ol><blockquote><p>source ~/.zshrc</p></blockquote><p>PS：安装homebrew包管理工具：</p><blockquote><p>/usr/bin/ruby -e “$(curl -fsSL <a href="https://raw.githubusercontent.com/Homebrew/install/master/install">https://raw.githubusercontent.com/Homebrew/install/master/install</a>)”</p></blockquote><h2 id="给ITerm中Vim配色"><a href="#给ITerm中Vim配色" class="headerlink" title="给ITerm中Vim配色"></a>给ITerm中Vim配色</h2><p>Vim 的配色最好和终端的配色保持一致，不然在 Terminal/iTerm2 里使用命令行 Vim 会很别扭。</p><p>首先下载solarized（上述已经下载过了，进入下载解压后的目录），上文有下载方法和地址。执行以下命令</p><blockquote><p>$ cd solarized</p><p>$ cd vim-colors-solarized/colors</p><p>$ mkdir -p ~/.vim/colors </p><p> $ cp solarized.vim ~/.vim/colors/</p><p>$ vi ~/.vimrc</p><p>加入下面三行设置即可</p><p>syntax enable</p><p>set background=dark</p><p>colorscheme solarized</p></blockquote><h2 id="给ITerm2中ls配色"><a href="#给ITerm2中ls配色" class="headerlink" title="给ITerm2中ls配色"></a>给ITerm2中ls配色</h2><p>1.下载安装 coreutils</p><blockquote><p> brew install coreutils</p></blockquote><p>2.创建颜色配置文件</p><blockquote><p>gdircolors —print-database &gt; ~/.dir_colors</p></blockquote><p>3.启用颜色配置文件</p><blockquote><p>sudo vim ~/.zshrc</p></blockquote><p>添加如下即可——忽略以下</p><blockquote><h5 id="if-brew-list-grep-coreutils-gt-dev-null-then-PATH-”-brew-—prefix-coreutils-libexec-gnubin-PATH”-alias-ls-’ls-F-—show-control-chars-—color-auto’-eval-gdircolors-b-HOME-dir-colors-fi"><a href="#if-brew-list-grep-coreutils-gt-dev-null-then-PATH-”-brew-—prefix-coreutils-libexec-gnubin-PATH”-alias-ls-’ls-F-—show-control-chars-—color-auto’-eval-gdircolors-b-HOME-dir-colors-fi" class="headerlink" title="if brew list | grep coreutils &gt; /dev/null ; then  PATH=”$(brew —prefix coreutils)/libexec/gnubin:$PATH”  alias ls=’ls -F —show-control-chars —color=auto’  eval gdircolors -b $HOME/.dir_colors fi"></a>if brew list | grep coreutils &gt; /dev/null ; then  PATH=”$(brew —prefix coreutils)/libexec/gnubin:$PATH”  alias ls=’ls -F —show-control-chars —color=auto’  eval <code>gdircolors -b $HOME/.dir_colors</code> fi</h5></blockquote><p>最后，希望本文对这方面需求的小伙伴，启到帮助的作用！</p><p>可用到的参考链接：</p><p><a href="https://link.jianshu.com/?t=https%3A%2F%2Fgithub.com%2Fpowerline%2Ffonts">fonts</a></p><p><a href="https://link.jianshu.com/?t=https%3A%2F%2Fgithub.com%2Frobbyrussell%2Foh-my-zsh">oh—my-zsh</a></p><p><a href="https://www.jianshu.com/p/18772092ee6b">brew 安装及卸载</a></p><p><a href="https://www.jianshu.com/p/bea091f8448d">Mac下Ruby版本管理工具RVM的配置和安装</a></p><p><a href="https://link.jianshu.com/?t=http%3A%2F%2Fwww.cnblogs.com%2Fweixuqin%2Fp%2F7029177.html">Mac下终端配置（item2 + oh-my-zsh + solarized配色方案）</a></p><p><a href="https://link.jianshu.com/?t=http%3A%2F%2Fgaoryrt.com%2F2015%2F09-28-%E5%BC%80%E5%A7%8Bzsh-vim%2F">开始zsh+vim+iTerm</a></p><p><a href="https://link.jianshu.com/?t=http%3A%2F%2Fwww.cnblogs.com%2Fcocoajin%2Fp%2F3729436.html">mac 终端 使用 gnu coreutils 工具 ls 颜色显示</a></p><p><a href="https://link.jianshu.com?t=https%3A%2F%2Fwww.cnblogs.com%2Fgslyyq%2Fp%2F5251331.html">Mac vim iterm2配色方案</a></p><h1 id="iTerm2-快捷命令"><a href="#iTerm2-快捷命令" class="headerlink" title="iTerm2 快捷命令"></a>iTerm2 快捷命令</h1><div class="table-container"><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>command + t</td><td>新建标签</td></tr><tr><td>command + w</td><td>关闭标签</td></tr><tr><td>command + 数字 command + 左右方向键</td><td>切换标签</td></tr><tr><td>command + enter</td><td>切换全屏</td></tr><tr><td>command + f</td><td>查找</td></tr><tr><td>command + d</td><td>垂直分屏</td></tr><tr><td>command + shift + d</td><td>水平分屏</td></tr><tr><td>command + option + 方向键 command + [ 或 command + ]</td><td>切换屏幕</td></tr><tr><td>command + ;</td><td>查看历史命令</td></tr><tr><td>command + shift + h</td><td>查看剪贴板历史</td></tr><tr><td>ctrl + u</td><td>清除当前行</td></tr><tr><td>ctrl + l</td><td>清屏</td></tr><tr><td>ctrl + a</td><td>到行首</td></tr><tr><td>ctrl + e</td><td>到行尾</td></tr><tr><td>ctrl + f/b</td><td>前进后退</td></tr><tr><td>ctrl + p</td><td>上一条命令</td></tr><tr><td>ctrl + r</td><td>搜索命令历史</td></tr></tbody></table></div><h1 id="快捷登陆服务器"><a href="#快捷登陆服务器" class="headerlink" title="快捷登陆服务器"></a>快捷登陆服务器</h1><p><img src="image-20200115011149136.png" alt="img"><br>点击这个或者配置快捷键快速连接</p><p><img src="image-20200115011346241.png" alt="img"></p><p>最后不想一点击Iterm2就登陆到服务器上,之前默认的不要动还继续默认就行了</p><p>带星星的Profile Name就是默认的,修改回最初的配置.</p><h1 id="Iterm2关闭警告声音"><a href="#Iterm2关闭警告声音" class="headerlink" title="Iterm2关闭警告声音"></a>Iterm2关闭警告声音</h1><p>选中Preferences -&gt; Profiles -&gt; Terminal -&gt; silence bell</p><p><img src="shengyin.png" alt="img"></p><h1 id="oh-my-zsh-异常提示"><a href="#oh-my-zsh-异常提示" class="headerlink" title="[oh-my-zsh]异常提示"></a>[oh-my-zsh]异常提示</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[oh-my-zsh] Insecure completion-dependent directories detected:</span><br><span class="line">drwxrwxrwx  3 polaris  admin   96 12 11 10:41 /usr/local/share/zsh</span><br><span class="line">drwxrwxrwx  6 polaris  admin  192 12 11 11:19 /usr/local/share/zsh/site-functions</span><br><span class="line"></span><br><span class="line">[oh-my-zsh] For safety, we will not load completions from these directories until</span><br><span class="line">[oh-my-zsh] you fix their permissions and ownership and restart zsh.</span><br><span class="line">[oh-my-zsh] See the above list for directories with group or other writability.</span><br><span class="line"></span><br><span class="line">[oh-my-zsh] To fix your permissions you can do so by disabling</span><br><span class="line">[oh-my-zsh] the write permission of &quot;group&quot; and &quot;others&quot; and making sure that the</span><br><span class="line">[oh-my-zsh] owner of these directories is either root or your current user.</span><br><span class="line">[oh-my-zsh] The following command may help:</span><br><span class="line">[oh-my-zsh]     compaudit | xargs chmod g-w,o-w</span><br><span class="line"></span><br><span class="line">[oh-my-zsh] If the above didn&#x27;t help or you want to skip the verification of</span><br><span class="line">[oh-my-zsh] insecure directories you can set the variable ZSH_DISABLE_COMPFIX to</span><br><span class="line">[oh-my-zsh] &quot;true&quot; before oh-my-zsh is sourced in your zshrc file.</span><br></pre></td></tr></table></figure><p>解决方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vi .zshrc</span><br><span class="line"></span><br><span class="line">==在顶部加入==</span><br><span class="line">ZSH_DISABLE_COMPFIX=true</span><br><span class="line"></span><br><span class="line">source .zshrc</span><br></pre></td></tr></table></figure><h1 id="公平地讲，zsh-user"><a href="#公平地讲，zsh-user" class="headerlink" title="公平地讲，zsh-user"></a>公平地讲，<a href="https://github.com/zsh-users">zsh-user</a></h1><p>对于每个插件都有正确的安装说明，具体取决于操作系统…</p><ul><li><a href="https://github.com/zsh-users/zsh-syntax-highlighting">https://github.com/zsh-users/zsh-syntax-highlighting</a> - <a href="https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/INSTALL.md">install.md</a></li><li><a href="https://github.com/zsh-users/zsh-completions">https://github.com/zsh-users/zsh-completions</a> - <a href="https://github.com/zsh-users/zsh-completions/blob/master/README.md">readme.md</a></li><li><a href="https://github.com/zsh-users/zsh-autosuggestions">https://github.com/zsh-users/zsh-autosuggestions</a> - <a href="https://github.com/zsh-users/zsh-autosuggestions/blob/master/INSTALL.md">install.md</a></li><li><a href="https://github.com/zsh-users/zsh-history-substring-search">https://github.com/zsh-users/zsh-history-substring-search</a> - <a href="https://github.com/zsh-users/zsh-history-substring-search/blob/master/README.md">readme.md</a></li></ul><h1 id="Alfred-Snippets文字扩展"><a href="#Alfred-Snippets文字扩展" class="headerlink" title="# Alfred Snippets文字扩展"></a># Alfred Snippets文字扩展</h1><blockquote><p>参考：<a href="https://www.jianshu.com/p/afa018018598">https://www.jianshu.com/p/afa018018598</a></p><p>扩展包：<a href="https://www.alfredapp.com/extras/snippets/">https://www.alfredapp.com/extras/snippets/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Iterm2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Iterm2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pymysql一直报1064语法错误之execute问题</title>
      <link href="/2020/01/08/error/pymysql%E4%B8%80%E7%9B%B4%E6%8A%A51064%E8%AF%AD%E6%B3%95%E9%94%99%E8%AF%AF%E4%B9%8Bexecute%E9%97%AE%E9%A2%98/"/>
      <url>/2020/01/08/error/pymysql%E4%B8%80%E7%9B%B4%E6%8A%A51064%E8%AF%AD%E6%B3%95%E9%94%99%E8%AF%AF%E4%B9%8Bexecute%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>在使用<code>pymysql</code>时一开始报<code>127.0.0.1 password:YES</code>随即改为<code>host=&#39;localhost&#39;</code>，还是报<code>127.0.0.1 password:YES</code>一查mysql.user表里是没有root用户没有给127.0.0.1地址授权,localhost是有授权的,所以授权下就好了</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 这是创建用户有则无需添加</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;127.0.0.1&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;password&#x27;</span>;</span><br><span class="line"># 授权</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALTER</span>,<span class="keyword">DELETE</span>,INDEX,<span class="keyword">INSERT</span>,<span class="keyword">SELECT</span>,<span class="keyword">UPDATE</span> <span class="keyword">ON</span> allen.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;127.0.0.1&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;password&#x27;</span>;</span><br></pre></td></tr></table></figure><p>随即就有爆出</p><p><code>pymysql.err.ProgrammingError: (1064, &quot;You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version...........</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># execute会对%s进行处理不要加引号</span></span><br><span class="line">sql=<span class="string">&quot;select db,ip from %s where pingtai=%s and zone_id=%s&quot;</span></span><br><span class="line"><span class="comment"># execute 可以防止sql注入，会把后面的参数处理后传递给%s</span></span><br><span class="line">cursor.execute(sql,[game,pingtai,zone])</span><br></pre></td></tr></table></figure><p>随之困扰的问题就来了一直语法错误，怎么看怎么没问题啊，看<code>execute</code>的    源代码，<code>execute</code>会把[]里边的每个参数都加上引号，可是mysql的表是不能加引号的啊，只能修改成：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sql=<span class="string">&quot;select db,ip from %s where pingtai=&#x27;%s&#x27; and zone_id=&#x27;%s&#x27;&quot;</span> %(game,pingtai,zone)</span><br><span class="line">cursor.execute(sql)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Errors </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python统计列表中的重复项出现的次数的方法</title>
      <link href="/2020/01/08/Python/%E5%A5%87%E9%97%BB%E6%9D%82%E8%B0%88/Python%E7%BB%9F%E8%AE%A1%E5%88%97%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>/2020/01/08/Python/%E5%A5%87%E9%97%BB%E6%9D%82%E8%B0%88/Python%E7%BB%9F%E8%AE%A1%E5%88%97%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>对一个列表，比如[1,2,2,2,2,3,3,3,4,4,4,4]，现在我们需要统计这个列表里的重复项，并且重复了几次也要统计出来</p><h2 id="方法1："><a href="#方法1：" class="headerlink" title="方法1："></a>方法1：</h2><p>利用<code>集合</code>没有重复元素的特性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mylist = [1,2,2,2,2,3,3,3,4,4,4,4]</span><br><span class="line">myset = set(mylist)  #myset是集合，里面的内容是mylist里面的无重复项</span><br><span class="line">for item in myset:</span><br><span class="line">  print(&quot;the %d has found %d&quot; %(item,mylist.count(item)))</span><br></pre></td></tr></table></figure><h2 id="方法2："><a href="#方法2：" class="headerlink" title="方法2："></a>方法2：</h2><p>利用<code>字典</code>的特性来实现。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List=[1,2,2,2,2,3,3,3,4,4,4,4]</span><br><span class="line">a = &#123;&#125;</span><br><span class="line">for i in List:</span><br><span class="line">  if List.count(i)&gt;1:</span><br><span class="line">    a[i] = List.count(i)</span><br><span class="line">print (a)</span><br></pre></td></tr></table></figure><h2 id="方法3："><a href="#方法3：" class="headerlink" title="方法3："></a>方法3：</h2><p>利用现成<code>collections</code>的<code>Counter</code>模块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from collections import Counter</span><br><span class="line">&gt;&gt;&gt; Counter([1,2,2,2,2,3,3,3,4,4,4,4])</span><br><span class="line">Counter(&#123;1: 5, 2: 3, 3: 2&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 奇闻杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 去重 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ORM框架SQLAlchemy</title>
      <link href="/2020/01/07/Python/%E6%A8%A1%E5%9D%97/ORM%E6%A1%86%E6%9E%B6SQLAlchemy/"/>
      <url>/2020/01/07/Python/%E6%A8%A1%E5%9D%97/ORM%E6%A1%86%E6%9E%B6SQLAlchemy/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>SQLAlchemy是用Python编程语言开发的一个开源项目。它提供了SQL工具包和ORM（对象关系映射）工具，使用MIT许可证发行。</p><p>SQLAlchemy采用简单的Python语言，提供高效和高性能的数据库访问，实现了完整的企业级持久模型。它的理念是，SQL数据库的量级和性能比对象集合重要，而对象集合的抽象又重要于表和行。</p><p>orm英文全称object relational  mapping,就是对象映射关系程序，简单来说我们类似python这种面向对象的程序来说一切皆对象，但是我们使用的数据库却都是关系型的，为了保证一致的使用习惯，通过orm将编程语言的对象模型和数据库的关系模型建立映射关系，这样我们在使用编程语言对数据库进行操作的时候可以直接使用编程语言的对象模型进行操作就可以了，而不用直接使用sql语言。</p><p><img src="1.png" alt="img"></p><blockquote><p><strong>orm的优点：</strong></p><ol><li>隐藏了数据访问细节，“封闭”的通用数据库交互，ORM的核心。他使得我们的通用数据库交互变得简单易行，并且完全不用考虑该死的SQL语句。快速开发，由此而来。</li><li>ORM使我们构造固化数据结构变得简单易行。</li></ol><p><strong>缺点：</strong></p><ol><li>无可避免的，自动化意味着映射和关联管理，代价是牺牲性能（早期，这是所有不喜欢ORM人的共同点）。现在的各种ORM框架都在尝试使用各种方法来减轻这块（LazyLoad，Cache），效果还是很显著的。</li></ol></blockquote><p><img src="2.png" alt="img"></p><p>Dialect用于和数据API进行交流，根据配置文件的不同调用不同的数据库API，从而实现对数据库的操作，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">MySQL-Python</span><br><span class="line">  ``mysql+mysqldb:``//``&lt;user&gt;:&lt;password&gt;@&lt;host&gt;[:&lt;port&gt;]/&lt;dbname&gt;</span><br><span class="line"> </span><br><span class="line">pymysql</span><br><span class="line">  ``mysql+pymysql:``//``&lt;username&gt;:&lt;password&gt;@&lt;host&gt;/&lt;dbname&gt;[?&lt;options&gt;]</span><br><span class="line"> </span><br><span class="line">MySQL-Connector</span><br><span class="line">  ``mysql+mysqlconnector:``//``&lt;user&gt;:&lt;password&gt;@&lt;host&gt;[:&lt;port&gt;]/&lt;dbname&gt;</span><br><span class="line"> </span><br><span class="line">cx_Oracle</span><br><span class="line">  ``oracle+cx_oracle:``//user``:pass@host:port``/dbname``[?key=value&amp;key=value...]</span><br><span class="line"> </span><br><span class="line">更多详见：http:``//docs``.sqlalchemy.org``/en/latest/dialects/index``.html</span><br></pre></td></tr></table></figure><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>安装sqlalchemy</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip3 install sqlalchemy</span><br><span class="line">pip3 install pymysql</span><br></pre></td></tr></table></figure><p>本文使用MySQL作为数据库，使用pymysql作为驱动，因此需要安装pymysql</p><p>在连接数据库前，需要使用到一些配置信息，然后把它们组合成满足以下条件的字符串：</p><h1 id="链接数据库"><a href="#链接数据库" class="headerlink" title="链接数据库"></a>链接数据库</h1><h2 id="配置信息"><a href="#配置信息" class="headerlink" title="配置信息"></a>配置信息</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dialect+driver://username:password@host:port/database</span><br></pre></td></tr></table></figure><ul><li>dialect：数据库，如：sqlite、mysql、oracle等</li><li>driver：数据库驱动，用于连接数据库的，本文使用pymysql</li><li>username：用户名</li><li>password：密码</li><li>host：IP地址</li><li>port：端口</li><li>database：数据库</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">HOST = <span class="string">&#x27;localhost&#x27;</span></span><br><span class="line">PORT = <span class="number">3306</span></span><br><span class="line">USERNAME = <span class="string">&#x27;root&#x27;</span></span><br><span class="line">PASSWORD = <span class="string">&#x27;123456&#x27;</span></span><br><span class="line">DB = <span class="string">&#x27;myclass&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># dialect + driver://username:passwor@host:port/database</span></span><br><span class="line">DB_URI = <span class="string">f&#x27;mysql+pymysql://<span class="subst">&#123;USERNAME&#125;</span>:<span class="subst">&#123;PASSWORD&#125;</span>@<span class="subst">&#123;HOST&#125;</span>:<span class="subst">&#123;PORT&#125;</span>/<span class="subst">&#123;DB&#125;</span>&#x27;</span></span><br></pre></td></tr></table></figure><p>建议将配置信息放到你的配置文件中，如config.py</p><h2 id="创建引擎并连接数据库"><a href="#创建引擎并连接数据库" class="headerlink" title="创建引擎并连接数据库"></a>创建引擎并连接数据库</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> DB_URI</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">engine = create_engine(DB_URI)  <span class="comment"># 创建引擎</span></span><br><span class="line">conn = engine.connect()  <span class="comment"># 连接</span></span><br><span class="line">result = conn.execute(<span class="string">&#x27;SELECT 1&#x27;</span>)  <span class="comment"># 执行SQL</span></span><br><span class="line"><span class="built_in">print</span>(result.fetchone())  </span><br><span class="line">conn.close()  <span class="comment"># 关闭连接</span></span><br></pre></td></tr></table></figure><h2 id="创建ORM模型并映射到数据库中"><a href="#创建ORM模型并映射到数据库中" class="headerlink" title="创建ORM模型并映射到数据库中"></a>创建ORM模型并映射到数据库中</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine, Column, Integer, String</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> DB_URI</span><br><span class="line"></span><br><span class="line">engine = create_engine(DB_URI)</span><br><span class="line">Base = declarative_base(engine)  <span class="comment"># SQLORM基类</span></span><br><span class="line">session = sessionmaker(engine)()  <span class="comment"># 构建session对象</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;student&#x27;</span>  <span class="comment"># 表名</span></span><br><span class="line">    <span class="built_in">id</span> = Column(Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    name = Column(String(<span class="number">50</span>))</span><br><span class="line">    age = Column(Integer)</span><br><span class="line">    sex = Column(String(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;student&#x27;</span>  <span class="comment"># 表名</span></span><br><span class="line">    <span class="built_in">id</span> = Column(Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    name = Column(String(<span class="number">50</span>))</span><br><span class="line">    age = Column(Integer)</span><br><span class="line">    sex = Column(String(<span class="number">10</span>))</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">School</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;School&#x27;</span>  <span class="comment"># 表名</span></span><br><span class="line">    <span class="built_in">id</span> = Column(Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    name=Column(String(<span class="number">50</span>),nullable=<span class="literal">False</span>,index=<span class="literal">True</span>)</span><br><span class="line">school_name=Column(String(<span class="number">50</span>))</span><br><span class="line">    age = Column(Integer)</span><br><span class="line"></span><br><span class="line">Base.metadata.create_all()  <span class="comment"># 将模型映射到数据库中</span></span><br></pre></td></tr></table></figure><p>执行上面代码，将会在数据库中生成对应的映射表student。</p><h1 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h1><p>创建表后，接下来我们要添加数据，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">student = Student(name=<span class="string">&#x27;Tony&#x27;</span>, age=<span class="number">18</span>, sex=<span class="string">&#x27;male&#x27;</span>)  <span class="comment"># 创建一个student对象</span></span><br><span class="line">session.add(student)  <span class="comment"># 添加到session</span></span><br><span class="line">session.commit()  <span class="comment"># 提交到数据库</span></span><br></pre></td></tr></table></figure><p>也可以批量添加数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">session.add_all([</span><br><span class="line">    Student(name=<span class="string">&#x27;Jane&#x27;</span>, age=<span class="number">16</span>, sex=<span class="string">&#x27;female&#x27;</span>),</span><br><span class="line">    Student(name=<span class="string">&#x27;Ben&#x27;</span>, age=<span class="number">20</span>, sex=<span class="string">&#x27;male&#x27;</span>)</span><br><span class="line">])</span><br><span class="line">session.commit()</span><br></pre></td></tr></table></figure><h1 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h1><p>sqlalchemy提供了query()方法来查询数据</p><p><strong>获取所有数据</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">item_list = session.query(Student).<span class="built_in">all</span>()</span><br><span class="line"><span class="built_in">print</span>(item_list)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> item_list:</span><br><span class="line">    <span class="built_in">print</span>(item.name, item.age)</span><br></pre></td></tr></table></figure><p>执行结果如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[&lt;mymodel.Student <span class="built_in">object</span> at <span class="number">0x000002A0E6A38088</span>&gt;, &lt;mymodel.Student <span class="built_in">object</span> at <span class="number">0x000002A0E6A38208</span>&gt;, &lt;mymodel.Student <span class="built_in">object</span> at <span class="number">0x000002A0E6A38288</span>&gt;]</span><br><span class="line">Tony <span class="number">18</span></span><br><span class="line">Jane <span class="number">16</span></span><br><span class="line">Ben <span class="number">20</span></span><br></pre></td></tr></table></figure><p>查询得到的item_list是一个包含多个Student对象的列表</p><p><strong>指定查询列</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">item_list = session.query(Student.name).<span class="built_in">all</span>()</span><br><span class="line"><span class="built_in">print</span>(item_list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [(&#x27;Tony&#x27;,), (&#x27;Jane&#x27;,), (&#x27;Ben&#x27;,)]</span></span><br></pre></td></tr></table></figure><p><strong>获取返回数据的第一行</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">item = session.query(Student.name).first()</span><br><span class="line"><span class="built_in">print</span>(item)  </span><br><span class="line"></span><br><span class="line"><span class="comment"># (&#x27;Tony&#x27;,)</span></span><br></pre></td></tr></table></figure><p><strong>使用filter()方法进行筛选过滤</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">item_list = session.query(Student.name).<span class="built_in">filter</span>(Student.age &gt;= <span class="number">18</span>).<span class="built_in">all</span>()</span><br><span class="line"><span class="built_in">print</span>(item_list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [(&#x27;Tony&#x27;,), (&#x27;Ben&#x27;,)]</span></span><br></pre></td></tr></table></figure><p><strong>使用order_by()进行排序</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">item_list = session.query(Student.name, Student.age).order_by(Student.age.desc()).<span class="built_in">all</span>() <span class="comment"># desc()表示倒序</span></span><br><span class="line"><span class="built_in">print</span>(item_list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [(&#x27;Ben&#x27;, 20), (&#x27;Tony&#x27;, 18), (&#x27;Jane&#x27;, 16)]</span></span><br></pre></td></tr></table></figure><p><strong>多个查询条件（and和or）</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认为and, 在filter()中用,分隔多个条件表示and</span></span><br><span class="line">item_list = session.query(Student.name, Student.age, Student.sex).<span class="built_in">filter</span>(</span><br><span class="line">    Student.age &gt;= <span class="number">10</span>, Student.sex == <span class="string">&#x27;female&#x27;</span></span><br><span class="line">).<span class="built_in">all</span>()</span><br><span class="line"><span class="built_in">print</span>(item_list)  <span class="comment"># [(&#x27;Jane&#x27;, 16, &#x27;female&#x27;)]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> or_</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用or_连接多个条件</span></span><br><span class="line">item_list = session.query(Student.name, Student.age, Student.sex).<span class="built_in">filter</span>(</span><br><span class="line">    or_(Student.age &gt;= <span class="number">20</span>, Student.sex == <span class="string">&#x27;female&#x27;</span>)</span><br><span class="line">).<span class="built_in">all</span>()</span><br><span class="line"><span class="built_in">print</span>(item_list)  <span class="comment"># [(&#x27;Jane&#x27;, 16, &#x27;female&#x27;), (&#x27;Ben&#x27;, 20, &#x27;male&#x27;)]</span></span><br></pre></td></tr></table></figure><p><strong>equal/like/in</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 等于</span></span><br><span class="line">item_list = session.query(Student.name, Student.age, Student.sex).<span class="built_in">filter</span>(</span><br><span class="line">    Student.age == <span class="number">18</span></span><br><span class="line">).<span class="built_in">all</span>()</span><br><span class="line"><span class="built_in">print</span>(item_list)  <span class="comment"># [(&#x27;Tony&#x27;, 18, &#x27;male&#x27;)]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不等于</span></span><br><span class="line">item_list = session.query(Student.name, Student.age, Student.sex).<span class="built_in">filter</span>(</span><br><span class="line">    Student.age != <span class="number">18</span></span><br><span class="line">).<span class="built_in">all</span>()</span><br><span class="line"><span class="built_in">print</span>(item_list)  <span class="comment"># [(&#x27;Jane&#x27;, 16, &#x27;female&#x27;), (&#x27;Ben&#x27;, 20, &#x27;male&#x27;)]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># like</span></span><br><span class="line">item_list = session.query(Student.name, Student.age, Student.sex).<span class="built_in">filter</span>(</span><br><span class="line">    Student.name.like(<span class="string">&#x27;%To%&#x27;</span>)</span><br><span class="line">).<span class="built_in">all</span>()</span><br><span class="line"><span class="built_in">print</span>(item_list)  <span class="comment"># [(&#x27;Tony&#x27;, 18, &#x27;male&#x27;)]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># in</span></span><br><span class="line">item_list = session.query(Student.name, Student.age, Student.sex).<span class="built_in">filter</span>(</span><br><span class="line">    Student.age.in_([<span class="number">16</span>, <span class="number">20</span>])</span><br><span class="line">).<span class="built_in">all</span>()</span><br><span class="line"><span class="built_in">print</span>(item_list) <span class="comment"># [(&#x27;Jane&#x27;, 16, &#x27;female&#x27;), (&#x27;Ben&#x27;, 20, &#x27;male&#x27;)]</span></span><br></pre></td></tr></table></figure><p><strong>count计算个数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">count = session.query(Student).count()</span><br><span class="line"><span class="built_in">print</span>(count)  <span class="comment"># 3</span></span><br></pre></td></tr></table></figure><p><strong>切片</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">item_list = session.query(Student.name).<span class="built_in">all</span>()[:<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(item_list)  <span class="comment"># [(&#x27;Tony&#x27;,), (&#x27;Jane&#x27;,)]</span></span><br></pre></td></tr></table></figure><p><strong>分组</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy.sql <span class="keyword">import</span> func</span><br><span class="line">res=session.query(Student.age).group_by(Student.age).<span class="built_in">all</span>()</span><br><span class="line">res=session.query(</span><br><span class="line">    func.<span class="built_in">max</span>(Student.age),</span><br><span class="line">    func.<span class="built_in">min</span>(Student.age),</span><br><span class="line">    func.<span class="built_in">sum</span>(Student.age),</span><br><span class="line">    func.avg(Student.age),</span><br><span class="line">    func.count(Student.age),</span><br><span class="line">).group_by(Student.age).<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">res=session.query(</span><br><span class="line">    Student.age,</span><br><span class="line">    func.count(<span class="number">1</span>),</span><br><span class="line">).group_by(Student.age).having(func.count(<span class="number">1</span>) &gt; <span class="number">2</span>).<span class="built_in">all</span>()</span><br></pre></td></tr></table></figure><p>连表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">res=session.query(School,Student).<span class="built_in">all</span>() <span class="comment">#select * from School,Student;</span></span><br><span class="line"><span class="comment">#where条件</span></span><br><span class="line">res=session.query(School,Student).<span class="built_in">filter</span>(School.age==Student.age).<span class="built_in">all</span>()</span><br><span class="line"><span class="comment"># for row in res:</span></span><br><span class="line"><span class="comment">#     School_tb=row[0]</span></span><br><span class="line"><span class="comment">#     Student_tb=row[1]</span></span><br><span class="line"><span class="comment">#     print(School_tb.id,School_tb.name,Student_tb.id,Student_tb.name)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#内连接</span></span><br><span class="line">res=session.query(Student).join(School)</span><br><span class="line"><span class="comment">#join默认为内连接,SQLAlchemy会自动帮我们通过foreign key字段去找关联关系</span></span><br><span class="line"><span class="comment">#但是上述查询的结果均为Student表的字段,这样链表还有毛线意义,于是我们修改为</span></span><br><span class="line">res=session.query(Student.<span class="built_in">id</span>,Student.name,School.name).join(School).<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">#左连接:isouter=True</span></span><br><span class="line">res=session.query(Student.<span class="built_in">id</span>,Student.name,School.dname).join(School,isouter=<span class="literal">True</span>).<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">#右连接:同左连接,只是把两个表的位置换一下</span></span><br></pre></td></tr></table></figure><p>组合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#七、组合</span></span><br><span class="line">q1=session.query(Emp.<span class="built_in">id</span>,Emp.ename).<span class="built_in">filter</span>(Emp.<span class="built_in">id</span> &gt; <span class="number">0</span>,Emp.<span class="built_in">id</span> &lt; <span class="number">5</span>)</span><br><span class="line">q2=session.query(Emp.<span class="built_in">id</span>,Emp.ename).<span class="built_in">filter</span>(</span><br><span class="line">    or_(</span><br><span class="line">        Emp.ename.like(<span class="string">&#x27;%海%&#x27;</span>),</span><br><span class="line">        Emp.ename.like(<span class="string">&#x27;%昊%&#x27;</span>),</span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line">res1=q1.union(q2) <span class="comment">#组合+去重</span></span><br><span class="line">res2=q1.union_all(q2) <span class="comment">#组合,不去重</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>([i.ename <span class="keyword">for</span> i <span class="keyword">in</span> q1.<span class="built_in">all</span>()]) <span class="comment">#[&#x27;林海峰&#x27;, &#x27;李杰&#x27;, &#x27;武配齐&#x27;, &#x27;元昊&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>([i.ename <span class="keyword">for</span> i <span class="keyword">in</span> q2.<span class="built_in">all</span>()]) <span class="comment">#[&#x27;林海峰&#x27;, &#x27;元昊&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>([i.ename <span class="keyword">for</span> i <span class="keyword">in</span> res1.<span class="built_in">all</span>()]) <span class="comment">#[&#x27;林海峰&#x27;, &#x27;李杰&#x27;, &#x27;武配齐&#x27;, &#x27;元昊&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>([i.ename <span class="keyword">for</span> i <span class="keyword">in</span> res2.<span class="built_in">all</span>()]) <span class="comment">#[&#x27;林海峰&#x27;, &#x27;李杰&#x27;, &#x27;武配齐&#x27;, &#x27;元昊&#x27;, &#x27;元昊&#x27;, &#x27;林海峰&#x27;]</span></span><br></pre></td></tr></table></figure><h1 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h1><p>修改数据可以使用update()方法，update完成后记得执行session.commit()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改Tony的age为22</span></span><br><span class="line">session.query(Student).<span class="built_in">filter</span>(Student.name == <span class="string">&#x27;Tony&#x27;</span>).update(&#123;<span class="string">&#x27;age&#x27;</span>: <span class="number">22</span>&#125;)</span><br><span class="line">session.commit()</span><br><span class="line"></span><br><span class="line">item = session.query(Student.name, Student.age).<span class="built_in">filter</span>(Student.name == <span class="string">&#x27;Tony&#x27;</span>).first()</span><br><span class="line"><span class="built_in">print</span>(item) </span><br></pre></td></tr></table></figure><p>执行结果如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">&#x27;Tony&#x27;</span>, <span class="number">22</span>)</span><br></pre></td></tr></table></figure><h1 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h1><p>删除数据使用delete()方法，同样也需要执行session.commit()提交事务</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除名称为Ben的数据</span></span><br><span class="line">session.query(Student).<span class="built_in">filter</span>(Student.name == <span class="string">&#x27;Ben&#x27;</span>).delete()</span><br><span class="line">session.commit()</span><br><span class="line"></span><br><span class="line">item_list = session.query(Student.name, Student.age).<span class="built_in">all</span>()</span><br><span class="line"><span class="built_in">print</span>(item_list)</span><br></pre></td></tr></table></figure><p>执行结果如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[(<span class="string">&#x27;Tony&#x27;</span>, <span class="number">22</span>), (<span class="string">&#x27;Jane&#x27;</span>, <span class="number">16</span>)]</span><br></pre></td></tr></table></figure><blockquote><p>原文出自：<a href="https://www.cnblogs.com/blueberry-mint/p/14277882.html">蓝莓薄荷</a><br>有少些补充</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 模块 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQLAlchemy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>subprocess模块</title>
      <link href="/2020/01/07/Python/%E6%A8%A1%E5%9D%97/subprocess%E6%A8%A1%E5%9D%97/"/>
      <url>/2020/01/07/Python/%E6%A8%A1%E5%9D%97/subprocess%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><p>subprocess模块可以生成新的进程，连接到它们的input/output/error管道，同时获取它们的返回码。</p><h2 id="二、基本操作方法"><a href="#二、基本操作方法" class="headerlink" title="二、基本操作方法"></a>二、基本操作方法</h2><ol><li>subprocess的run、call、check_call、check_output函数</li></ol><ul><li>subprocess.run(args[, stdout, stderr, shell …])：执行args命令，返回值为CompletedProcess类；<br> 若未指定stdout，则命令执行后的结果输出到屏幕上，函数返回值CompletedProcess中包含有args和returncode；<br> 若指定有stdout，则命令执行后的结果输出到stdout中，函数返回值CompletedProcess中包含有args、returncode和stdout；<br> 若执行成功，则returncode为0；若执行失败，则returncode为1；<br> 若想获取args命令执行后的输出结果，命令为：output = subprocess.run(args, stdout=subprocess.PIPE).stdout</li><li>subprocess.call(args[, stdout, …])：执行args命令，返回值为命令执行状态码；<br> 若未指定stdout，则命令执行后的结果输出到屏幕；<br> 若指定stdout，则命令执行后的结果输出到stdout；<br> 若执行成功，则函数返回值为0；若执行失败，则函数返回值为1；<br> （类似os.system）</li><li>subprocess.check_call(args[, stdout, …])：执行args命令，返回值为命令执行状态码；<br> 若未指定stdout，则命令执行后的结果输出到屏幕；<br> 若指定stdout，则命令执行后的结果输出到stdout；<br> 若执行成功，则函数返回值为0；若执行失败，抛出异常；<br> （类似subprocess.run(args, check=True)）</li><li>subprocess.check_output(args[, stderr, …])：执行args命令，返回值为命令执行的输出结果；<br> 若执行成功，则函数返回值为命令输出结果；若执行失败，则抛出异常；<br> （类似subprocess.run(args, check=True, stdout=subprocess.PIPE).stdout）</li></ul><blockquote><p>（1） args：启动进程的参数，默认为字符串序列（列表或元组），也可为字符串（设为字符串时一般需将shell参数赋值为True）；</p><p> （2） shell：shell为True，表示args命令通过shell执行，则可访问shell的特性；</p><p>（3） check：check为True时，表示执行命令的进程以非0状态码退出时会抛出；subprocess.CalledProcessError异常；check为False时，状态码为非0退出时不会抛出异常；</p><p>（4） stdout、stdin、stderr：分别表示程序标准标输出、输入、错误信息；<br> run函数返回值为CompletedProcess类，若需获取执行结果，可通过获取返回值的stdout和stderr来捕获；<br> check_output函数若需捕获错误信息，可通过stderr=subprocess.STDOUT来获取；</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># subprocess.run使用</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">subprocess_run</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;**** subprocess.run ****&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;----------&quot;</span>)</span><br><span class="line">    result1 = subprocess.run([<span class="string">&quot;adb&quot;</span>, <span class="string">&quot;devices&quot;</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;result1:&quot;</span>, result1)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;----------&quot;</span>)</span><br><span class="line">    result2 = subprocess.run(<span class="string">&quot;adb devices&quot;</span>, shell=<span class="literal">True</span>, check=<span class="literal">True</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;result2:&quot;</span>, result2)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;----------&quot;</span>)</span><br><span class="line">    result3 = subprocess.run([<span class="string">&quot;adb&quot;</span>, <span class="string">&quot;devices&quot;</span>], stdout=subprocess.PIPE)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;result3:&quot;</span>, result3)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(result3))</span><br><span class="line">subprocess_run()</span><br><span class="line"><span class="string">&quot;&quot;&quot;结果</span></span><br><span class="line"><span class="string">**** subprocess.run ****</span></span><br><span class="line"><span class="string">----------</span></span><br><span class="line"><span class="string">List of devices attached</span></span><br><span class="line"><span class="string">338b123f0504    device</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">result1: CompletedProcess(args=[&#x27;adb&#x27;, &#x27;devices&#x27;], returncode=0)</span></span><br><span class="line"><span class="string">----------</span></span><br><span class="line"><span class="string">List of devices attached</span></span><br><span class="line"><span class="string">338b123f0504    device</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">result2: CompletedProcess(args=&#x27;adb devices&#x27;, returncode=0)</span></span><br><span class="line"><span class="string">----------</span></span><br><span class="line"><span class="string">result3: CompletedProcess(args=[&#x27;adb&#x27;, &#x27;devices&#x27;], returncode=0, stdout=b&#x27;List of devices attached \r\n338b123f0504\tdevice\r\n\r\n&#x27;)</span></span><br><span class="line"><span class="string">&lt;class &#x27;subprocess.CompletedProcess&#x27;&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># subprocess.call使用</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">subprocess_call</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;**** subprocess.call ****&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;----------&quot;</span>)</span><br><span class="line">    result1 = subprocess.call([<span class="string">&quot;adb&quot;</span>, <span class="string">&quot;devices&quot;</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;result1:&quot;</span>, result1)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;----------&quot;</span>)</span><br><span class="line">    result2 = subprocess.call([<span class="string">&quot;adb&quot;</span>, <span class="string">&quot;devices&quot;</span>], stdout=subprocess.PIPE)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;result2:&quot;</span>, result2)</span><br><span class="line">subprocess_call()</span><br><span class="line"><span class="string">&quot;&quot;&quot;结果</span></span><br><span class="line"><span class="string">**** subprocess.call ****</span></span><br><span class="line"><span class="string">----------</span></span><br><span class="line"><span class="string">List of devices attached</span></span><br><span class="line"><span class="string">338b123f0504    device</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">result1: 0</span></span><br><span class="line"><span class="string">----------</span></span><br><span class="line"><span class="string">result2: 0</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># subprocess.check_call</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">subprocess_check_call</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;**** subprocess.check_call ****&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;----------&quot;</span>)</span><br><span class="line">    result1 = subprocess.check_call([<span class="string">&quot;adb&quot;</span>, <span class="string">&quot;devices&quot;</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;result1:&quot;</span>, result1)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;----------&quot;</span>)</span><br><span class="line">    result2 = subprocess.check_call([<span class="string">&quot;adb&quot;</span>, <span class="string">&quot;devices&quot;</span>], stdout=subprocess.PIPE)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;result2:&quot;</span>, result2)</span><br><span class="line">subprocess_check_call()</span><br><span class="line"><span class="string">&quot;&quot;&quot;结果</span></span><br><span class="line"><span class="string">**** subprocess.check_call ****</span></span><br><span class="line"><span class="string">----------</span></span><br><span class="line"><span class="string">List of devices attached</span></span><br><span class="line"><span class="string">338b123f0504    device</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">result1: 0</span></span><br><span class="line"><span class="string">----------</span></span><br><span class="line"><span class="string">result2: 0</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># subprocess.check_output</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">subprocess_check_output</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;**** subprocess.check_output ****&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;----------&quot;</span>)</span><br><span class="line">    result1 = subprocess.check_output([<span class="string">&quot;adb&quot;</span>, <span class="string">&quot;devices&quot;</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;result1:&quot;</span>, result1)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;----------&quot;</span>)</span><br><span class="line">    result2 = subprocess.run([<span class="string">&quot;adb&quot;</span>, <span class="string">&quot;devices&quot;</span>], stdout=subprocess.PIPE).stdout</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;result2:&quot;</span>, result2)</span><br><span class="line">subprocess_check_output()</span><br><span class="line"><span class="string">&quot;&quot;&quot;结果</span></span><br><span class="line"><span class="string">**** subprocess.check_output ****</span></span><br><span class="line"><span class="string">----------</span></span><br><span class="line"><span class="string">result1: b&#x27;List of devices attached \r\n338b123f0504\tdevice\r\n\r\n&#x27;</span></span><br><span class="line"><span class="string">----------</span></span><br><span class="line"><span class="string">result2: b&#x27;List of devices attached \r\n338b123f0504\tdevice\r\n\r\n&#x27;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><ol><li>subprocess的getoutput、getstatusoutput函数</li></ol><ul><li>subprocess.getoutput(cmd)：执行cmd命令，返回值为命令执行的输出结果（字符串类型）；<br> 注：执行失败，不会抛出异常（类似os.popen(cmd).read()）；</li><li>subprocess.getstatusoutput(cmd)：执行cmd命令，返回值为元组类型(命令执行状态, 命令执行的输出结果)；<br> 元组中命令执行状态为0，表示执行成功；命令执行状态为1，表示执行失败；</li></ul><blockquote><p>cmd：参数，字符串类型；</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># subprocess.getoutput或getstatusoutput使用</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">subprocess_get_output</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;**** subprocess.getoutput ****&quot;</span>)</span><br><span class="line">    result1 = subprocess.getoutput(<span class="string">&quot;adb devices&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;result1:&quot;</span>, result1)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(result1))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;**** subprocess.getstatusoutput ****&quot;</span>)</span><br><span class="line">    result2 = subprocess.getstatusoutput(<span class="string">&quot;adb devices&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;result2:&quot;</span>, result2)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(result2))</span><br><span class="line">subprocess_get_output()</span><br><span class="line"><span class="string">&quot;&quot;&quot;结果</span></span><br><span class="line"><span class="string">**** subprocess.getoutput ****</span></span><br><span class="line"><span class="string">result1: List of devices attached</span></span><br><span class="line"><span class="string">338b123f0504    device</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="string">**** subprocess.getstatusoutput ****</span></span><br><span class="line"><span class="string">result2: (0, &#x27;List of devices attached \n338b123f0504\tdevice\n&#x27;)</span></span><br><span class="line"><span class="string">&lt;class &#x27;tuple&#x27;&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="三、-subprocess-Popen类"><a href="#三、-subprocess-Popen类" class="headerlink" title="三、 subprocess.Popen类"></a>三、 subprocess.Popen类</h2><ol><li>介绍</li></ol><p>subprocess.Popen类用于在一个新进程中执行一个子程序，上述subprocess函数均是基于subprocess.Popen类；</p><p>2.操作</p><ul><li>subprocess.Popen(args[, bufsize, stdin, stdout, stderr, …])：Popen类的构造函数，返回结果为subprocess.Popen对象；</li></ul><blockquote><ul><li>args：需要执行的系统命令，可为字符串序列（列表或元组，shell为默认值False即可，建议为序列），也可为字符串（使用字符串时，需将shell赋值为True）；</li><li>shell：默认为False，若args为序列时，shell=False；若args为字符串时，shell=True，表示通过shell执行命令；</li><li>stdout、stdin、stderr：分别表示子程序标准输出、标准输入、标准错误，可为subprocess.PIPE、一个有效的文件描述符、文件对象或None。<br> 若为subprocess.PIPE：代表打开通向标准流的管道，创建一个新的管道；<br> 若为None：表示没有任何重定向，子进程会继承父进程；<br> stderr也可为subprocess.STDOUT：表示将子程序的标准错误输出重定向到了标准输出</li><li>bufsize：指定缓冲策略，0表示不缓冲，1表示行缓冲，其它整数表示缓冲区大小，负数表示使用系统默认值0；</li><li>cwd：默认值为None；若非None，则表示将会在执行这个子进程之前改变当前工作目录；</li><li>env：用于指定子进程的环境变量。若env为None，那么子进程的环境变量将从父进程中继承；若env非None，则表示子程序的环境变量由env值来设置，它的值必须是一个映射对象。</li><li>universal_newlines： 不同系统的换行符不同。若True，则该文件对象的stdin，stdout和stderr将会以文本流方式打开；否则以二进制流方式打开。</li></ul></blockquote><p>（1）subprocess.Popen对象常用方法（如PopenObject为subprocess.Popen对象）</p><ul><li>PopenObject.poll() ：用于检查命令是否已经执行结束，若结束返回状态码；若未结束返回None；</li><li>PopenObject.wait([timeout, endtime])：等待子进程结束，并返回状态码；若超过timeout(s)进程仍未结束，则抛出异常；</li><li>PopenObject.send_signal(signal)：发送信号signal给子进程；</li><li>PopenObject.terminate()：停止子进程；</li><li>PopenObject.kill()：杀死子进程；</li><li>PopenObject.communicate([input, timeout])：与进程进行交互（如发送数据到stdin、读取stdout和stderr数据），它会阻塞父进程，直到子进程完成；<br> input：表示将发送到子进程的字符串数据，默认为None；<br> timeout：超时判断，若超过timeout秒后仍未结束则抛出TimeoutExpired异常；<br> communicate返回值：一个元组(stdout_data, stderr_data)</li></ul><p>（2）subprocess.Popen对象的文本或字节流控制</p><ul><li>PopenObject.stdin：<br> 若PopenObject中stdin为PIPE，则返回一个可写流对象；若encoding或errors参数被指定或universal_newlines参数为True，则此流是一个文件流，否则为字节流。<br> 若PopenObject中stdin不是PIPE，则属性为None。<br> <strong>stdin输入流非None，可执行写操作即PopenObject.stdin.write(s)</strong></li><li>PopenObject.stdout：<br> 若PopenObject中stdout为PIPE，则返回一个可读流对象；若encoding或errors参数被指定或universal_newlines参数为True，则此流是一个文件流，否则为字节流。<br> 若PopenObject中stdout不是PIPE，则属性为None。<br> <strong>stdout输出流非None，可执行读操作即PopenObject.stdout.read()或.readlines()</strong></li><li>PopenObject.stderr：<br> 若PopenObject中stderr为PIPE，则返回一个可读流对象；若encoding或errors参数被指定或universal_newlines参数为True，则此流是一个文件流，否则为字节流。<br> 若PopenObject中stderr不是PIPE，则属性为None。<br> <strong>stderr错误流非None，可执行读操作即PopenObject.stderr.read()或.readlines()</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">subprocess_Popen1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;***通过communicate函数分别输出PopenObject对象的输出流和错误流***&quot;</span>)</span><br><span class="line">    args = [[<span class="string">&quot;adb&quot;</span>, <span class="string">&quot;devices&quot;</span>], [<span class="string">&quot;adb&quot;</span>, <span class="string">&quot;devices11&quot;</span>]]</span><br><span class="line">    <span class="keyword">for</span> arg <span class="keyword">in</span> args:</span><br><span class="line">        popen_object = subprocess.Popen(arg, stdout=subprocess.PIPE, stderr=subprocess.PIPE)</span><br><span class="line">        object_stdout, object_stderr = popen_object.communicate()</span><br><span class="line">        output = &#123;<span class="string">&quot;popen_object&quot;</span>: popen_object,</span><br><span class="line">                  <span class="string">&quot;object_stdout&quot;</span>: object_stdout,</span><br><span class="line">                  <span class="string">&quot;object_stderr&quot;</span>: object_stderr&#125;</span><br><span class="line">        <span class="built_in">print</span>(output)</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &#123;&#x27;popen_object&#x27;: &lt;subprocess.Popen object at 0x0000000002212400&gt;, &#x27;object_stdout&#x27;: b&#x27;List of devices attached \r\n106D111805005938\tdevice\r\n\r\n&#x27;, &#x27;object_stderr&#x27;: b&#x27;&#x27;&#125;</span></span><br><span class="line"><span class="string">    &#123;&#x27;popen_object&#x27;: &lt;subprocess.Popen object at 0x0000000002577C18&gt;, &#x27;object_stdout&#x27;: b&#x27;&#x27;, &#x27;object_stderr&#x27;: b&#x27;Android Debug Bridge version 1.0.31\r\n\r\n -a .....&#125;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;***通过stdout和stderr方法输出PopenObject对象输出流和错误流***&quot;</span>)</span><br><span class="line">    p0 = subprocess.Popen([<span class="string">&quot;adb&quot;</span>, <span class="string">&quot;devices&quot;</span>], stdout=subprocess.PIPE, stderr=subprocess.PIPE)</span><br><span class="line">    object_stdout = p0.stdout.read()</span><br><span class="line">    p0.stdout.close()</span><br><span class="line">    object_stderr = p0.stderr.read()</span><br><span class="line">    p0.stderr.close()</span><br><span class="line">    <span class="built_in">print</span>(object_stdout)        <span class="comment"># 结果：b&#x27;List of devices attached \r\n338b123f0504\tdevice\r\n\r\n&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(object_stderr)        <span class="comment"># 结果：b&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;***Popen对象stdin写入功能：使用stdout和stderr输出&quot;</span>)</span><br><span class="line">    args = [<span class="string">&quot;python&quot;</span>, <span class="string">&quot;python1&quot;</span>]</span><br><span class="line">    <span class="keyword">for</span> arg <span class="keyword">in</span> args:</span><br><span class="line">        p4 = subprocess.Popen([arg], shell=<span class="literal">True</span>, stdout=subprocess.PIPE,</span><br><span class="line">                              stdin=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=<span class="literal">True</span>)</span><br><span class="line">        p4.stdin.write(<span class="string">&quot;print(&#x27;hello&#x27;)&quot;</span>)</span><br><span class="line">        p4.stdin.close()</span><br><span class="line">        out = p4.stdout.read()</span><br><span class="line">        p4.stdout.close()</span><br><span class="line">        err = p4.stderr.read()</span><br><span class="line">        p4.stderr.close()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;out：%s err：%s&quot;</span> % (out, err))</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    ***Popen对象stdin写入功能</span></span><br><span class="line"><span class="string">    out：hello</span></span><br><span class="line"><span class="string">    err：</span></span><br><span class="line"><span class="string">    out： err：&#x27;python1&#x27; 不是内部或外部命令，也不是可运行的程序或批处理文件。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;***Popen对象stdin写入功能：使用communicate输出&quot;</span>)</span><br><span class="line">    p4 = subprocess.Popen([<span class="string">&quot;python&quot;</span>], stdout=subprocess.PIPE,</span><br><span class="line">                          stdin=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=<span class="literal">True</span>)</span><br><span class="line">    p4.stdin.write(<span class="string">&quot;print(&#x27;hello&#x27;)&quot;</span>)</span><br><span class="line">    output = p4.communicate()</span><br><span class="line">    <span class="built_in">print</span>(output)       <span class="comment"># 结果：(&#x27;hello\n&#x27;, &#x27;&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;***不含encoding参数***&quot;</span>)</span><br><span class="line">    p1 = subprocess.Popen(<span class="string">&quot;adb devices&quot;</span>, shell=<span class="literal">True</span>, stdout=subprocess.PIPE)</span><br><span class="line">    out1 = p1.stdout.readlines()</span><br><span class="line">    <span class="built_in">print</span>(out1)         <span class="comment"># 结果: [b&#x27;List of devices attached \r\n&#x27;, b&#x27;106D111805005938\tdevice\r\n&#x27;, b&#x27;\r\n&#x27;]</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;***含encoding参数***&quot;</span>)</span><br><span class="line">    p2 = subprocess.Popen(<span class="string">&quot;adb devices&quot;</span>, shell=<span class="literal">True</span>, stdout=subprocess.PIPE, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    out2 = p2.stdout.readlines()</span><br><span class="line">    <span class="built_in">print</span>(out2)         <span class="comment"># 结果: [&#x27;List of devices attached \n&#x27;, &#x27;106D111805005938\tdevice\n&#x27;, &#x27;\n&#x27;]</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;***Popen对象检查命令是否结束，等待进程结束&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(p2.poll())    <span class="comment"># 结果: None</span></span><br><span class="line">    <span class="built_in">print</span>(p2.wait())    <span class="comment"># 结果: 0</span></span><br><span class="line">    <span class="built_in">print</span>(p2.poll())    <span class="comment"># 结果: 0</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;***Popen对象communicate函数，它会阻塞父进程直至子进程完成&quot;</span>)</span><br><span class="line">    p3 = subprocess.Popen(<span class="string">&quot;adb devices&quot;</span>, shell=<span class="literal">True</span>, stdout=subprocess.PIPE)</span><br><span class="line">    out = p3.communicate()[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">print</span>(out)          <span class="comment"># 结果：b&#x27;List of devices attached \r\n338b123f0504\tdevice\r\n\r\n&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(p3.poll())    <span class="comment"># 结果：0</span></span><br><span class="line">subprocess_Popen1()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">subprocess_Popen2</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    1. 通过管道功能，实现adb shell ps | findstr top功能</span></span><br><span class="line"><span class="string">    2. 直接为args赋值为一个字符串，实现adb shell ps | findstr top功能</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;***通过管道方式***&quot;</span>)</span><br><span class="line">    p1 = subprocess.Popen([<span class="string">&quot;adb&quot;</span>, <span class="string">&quot;shell&quot;</span>, <span class="string">&quot;ps&quot;</span>], stdout=subprocess.PIPE)</span><br><span class="line">    p2 = subprocess.Popen([<span class="string">&quot;findstr&quot;</span>, <span class="string">&quot;top&quot;</span>], stdin=p1.stdout, stdout=subprocess.PIPE, stderr=subprocess.PIPE)</span><br><span class="line">    out, err = p2.communicate()</span><br><span class="line">    <span class="built_in">print</span>(out, err)         <span class="comment"># 结果：b&#x27;shell     8508  8504  2600   1044  c004e5f8 b6f40938 S top\r\r\n&#x27; b&#x27;&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;***通过传一个字符串方式***&quot;</span>)</span><br><span class="line">    p3 = subprocess.Popen(<span class="string">&quot;adb shell ps | findstr top&quot;</span>, shell=<span class="literal">True</span>, stdout=subprocess.PIPE, stderr=subprocess.PIPE)</span><br><span class="line">    out, err = p3.communicate()</span><br><span class="line">    <span class="built_in">print</span>(out, err)         <span class="comment"># 结果：b&#x27;shell     8508  8504  2600   1044  c004e5f8 b6f40938 S top\r\r\n&#x27; b&#x27;&#x27;</span></span><br><span class="line">subprocess_Popen2()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 模块 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> subprocess </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序员们，再不行动就来不及了！</title>
      <link href="/2020/01/07/book/%E7%A8%8B%E5%BA%8F%E5%91%98%E4%BB%AC%EF%BC%8C%E5%86%8D%E4%B8%8D%E8%A1%8C%E5%8A%A8%E5%B0%B1%E6%9D%A5%E4%B8%8D%E5%8F%8A%E4%BA%86%EF%BC%81/"/>
      <url>/2020/01/07/book/%E7%A8%8B%E5%BA%8F%E5%91%98%E4%BB%AC%EF%BC%8C%E5%86%8D%E4%B8%8D%E8%A1%8C%E5%8A%A8%E5%B0%B1%E6%9D%A5%E4%B8%8D%E5%8F%8A%E4%BA%86%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<p>　　再不行动就来不及了！</p><p>　　今天这篇文章，不是技术，不是鸡汤，而是一篇对未来畅想的好（shui）文。</p><p>　　记得之前在群里聊天的时候，曾经有群友问LZ，“群主，你怎么最近不在群里聊技术，也不写技术文章了？”</p><p>　　群主当时的回答是，“以前我的目标是让大家技术都尽可能牛逼，现在我的目标是让大家生活都尽可能安居。”</p><p>　　诚然，由于年纪越来越大，工作时间越来越长的原因，LZ最近对于技术文章不太感冒。太简单的东西没有耐心去写（比如手把手教你搭建SSM这类文章），太深奥的文章，由于最近技术上感觉没有质的突破，LZ又不敢妄言。</p><p>　　但是不得不说，随着年纪变大，生活上的压力越来越大，LZ越来越觉得，帮助大家安居，比帮助大家提高技术更为重要。</p><p>　　因为技术这东西，要想提高的话，说来说去，其实就是理论、实践加总结。</p><p>　　理论的话，可以看书，可以从网络上获取信息。实践的话，则一般是在工作当中，或者自己平日里写写开源项目。至于总结，最好的办法，自然是写博客。</p><p>　　掌握这三个步骤，几乎任何东西，你都可以按部就班的学会，只要你愿意付出时间和精力。</p><p>　　但是，安居这件事，就不是技术这么简单了，也不是光靠努力就可以的，它除了要靠自己的实力以外，更多的是需要对未来的预测，以及必要时候的果断。</p><p><img src="558323-20170314004418510-1242908456.jpg" alt="风景"></p><h1 id="漫谈安居"><a href="#漫谈安居" class="headerlink" title="漫谈安居"></a>漫谈安居</h1><p>　　既然要谈谈安居，那么首先就要说一下什么叫做安居。</p><p>　　在LZ看来，只要在自己工作的城市里，有房有车有户口，又有老婆和孩子，就算是在一个城市安居了。</p><p>　　这件事情对于二代来说，其实并不算太难。因此，如果你是这类二代同学的话，那么基本上就可以点击右上角的叉叉图标了。（PS：MAC操作系统在左上角）</p><p>　　不过，LZ相信，绝大多数程序员们，都不是什么二代。LZ在现实当中也从未见过二代程序员，只记得在网上看过一个程序员二代奋斗的故事。</p><p>　　故事讲的是一个奋斗青年，不顾家人的反对，之人一身来到北京打拼，最终在北京买房成功的经历。</p><p>　　刚开始的时候，青年又是住地下室，又是去餐厅当服务员，又是去工地上搬砖，可谓是吃尽了苦楚，最后机缘巧合之下，才走上了程序员的道路。</p><p>　　当了程序员之后，这个小伙儿不畏艰苦，经常加班到深夜，对工作可谓是兢兢业业。这才在第五年的时候，用他自己辛苦攒下的五万块钱，外加父母赞助的四百九十五万，在北京买了一套房。</p><p>　　这是一个激励人心的故事！</p><p>　　咳咳……</p><p>　　不得不说，这个故事实际是具有讽刺意义的，但事实却偏偏就是如此。在一线城市，以程序员的工资，想要靠自己努力买套房，几乎是难如登天。</p><p>　　当初LZ在北京，刚开始租房的时候，LZ也了解过自己租住小区的房价，当时大约是2W5一平。当时LZ想着，要是自己买个80平的，大约需要200W，那么首付就是60W。</p><p>　　按照LZ当时存钱的速度，LZ觉得差不多有个五六年就能够存够了。</p><p>　　谁曾想，只过去两年，当时那个小区的房价已经涨到了4W，这么算下来，80平就需要320W，首付就是96W。</p><p>　　这下LZ懵逼了，照这速度，要想存够一个首付，不知道要存到猴年马月了。</p><p>　　随着年纪越来越大，LZ也结婚成家了，LZ不得不考虑留在北京的可能性，也要为老婆和孩子的将来做打算。</p><p>　　当时摆在LZ面前的只有两条路，第一条是在北京租一辈子房子，第二条是卷铺盖回家。</p><p>　　对于第一条，LZ实在有些接受不了。就如同很多人一样，虽然嘴上说着租一辈子房子挺好，想住哪就住哪。但其实，只有长期租过房子，和各种奇葩房东打过交道的人才知道，租房子这事，真的是一件极其闹心的事。</p><p>　　更何况，就算你不在意租房，你愿意你的孩子也跟着你来回搬家吗？</p><p>　　就算你运气非常好，遇到了一个非常好的房东，也租到了一个相对比较稳定，比较长期的住所。</p><p>　　然而，租来的房子，是永远也无法给你归属感的。况且，老婆愿意跟着你漂是一回事，但作为一个男人，你必须要想着给愿意跟着你漂泊的女人一个家。</p><p>　　因此，这第一条路，LZ是万万不愿意走的。</p><p>　　那么第二条路呢？</p><p>　　回家，看似安逸舒适，但其实当你拿惯了动辄上万，甚至几万的工资，你是很难再适应家里那个薪资水平的。当然了，这里主要指的是老家是四线，甚至是县城或者农村的同学。</p><p>　　很多人会说，回家也不一定就工资低啊，做个小生意比你当程序员挣得多多了。</p><p>　　诚然，LZ不否认有那么一批人，在家里做生意并不比在大城市挣得少。但是请面对现实，那毕竟是少数人，对比两个地方的收入水平，拿个体比是没有意义的。</p><p>　　就像你要比两个班的学习成绩，你肯定是拿两个班的平均分来比，而不是两个班里各找一个人，然后把他俩的成绩对比，这样是毫无意义的。同理，专科生是不是一定比本科生差，研究生是不是一定比本科生强这类的无聊问题，也是基本一样的道理。</p><p>　　最后一点，要谈谈理想了，回家固然安逸，但至少对于LZ来说，LZ自认多少还是有点追求的，因此，如果不是真的走投无路了，LZ是万万不愿意回家的。</p><p>　　两条路LZ都不愿意走，有没有第三条路可以走？</p><p>　　其实在很早之前，LZ就写过一篇《一个最新发现，原来程序员的最终归宿在这里。》，这里面就多少讲了一些今天的内容。</p><p>　　但是，那时候LZ还没有真正走上这条路，并不知道未来的一切，到底和自己想象的是否一样。</p><p>　　如今，时隔一年过去了，LZ已经基本摸清了这条路，这才想着把这条路分享给更多的程序员，让绝大多数程序员得以安居。</p><p>　　这条路就是，一线城市奋斗攒钱，二线城市安居乐业。</p><p><img src="558323-20170314224848526-737709466.jpg" alt="风景"></p><h1 id="来不及"><a href="#来不及" class="headerlink" title="来不及"></a>来不及</h1><p>　　未来的路该怎么走，LZ已经说过了，那么接下来说说为何“来不及”。</p><p>　　关注房价的同学应该知道，不少二线城市的房价，在去年刚刚经历过一阵疯长。这其中，LZ感触最深的就是杭州和郑州，杭州是因为LZ身处其中，而郑州是因为那毕竟是LZ老家的省会。</p><p>　　这种疯长到底有多疯狂？</p><p>　　就拿杭州来说，当时只用了两个月的时间，房价几乎全部涨了1W到1W5之间，也就是说，如果你要买一个80平的房子，你需要多拿80W到120W，这还是不算利息的情况下多出来的数字。</p><p>　　LZ虽然不是什么房产专业人士，也不是什么经济学家，但LZ作为一个普通老百姓，对房价还是有着自己的思考的。</p><p>　　LZ个人觉得，房价这东西，如果不是发生战争的话，几乎是不可能降下来的，原因主要有以下三点。</p><p>　　第一点是，房价的下降，对于开发商没有一丁点好处，房价不像双11促销的商品，价格越降别人越抢，而是价格越低越没人敢买。因此，房价下降，对于开发商来说，是完全毫无益处的一件事。</p><p>　　第二点是，地价在那摆着呢，成本在那摆着呢，能便宜到哪去呢。</p><p>　　第三点是，人口是在不断上涨的，但是地球就这么大，地方就这么大，这也是最根本的原因。</p><p>　　当然了，LZ还是那句话，房价这东西，各路专家都说不准，LZ也不敢说自己说的就是对的。</p><p>　　但是，就LZ在北京的亲身经历来讲，LZ觉得房价这东西，在未来很长一段时间内都是不可能降的，尤其是一线二线这类城市。</p><p>　　那么问题就来了，一线已经买不起了，二线是不是很快也买不起了？</p><p>　　LZ觉得，答案是肯定的。</p><p>　　一线城市的房价，几乎不会再疯长了，而是会一直稳步上升。但是，二线城市的房价，恐怕就没有这么温和了。</p><p>　　就拿杭州和郑州来说吧，去年短短的几个月，基本都完成了翻倍甚至更高比例的增长。虽然最近已经稳定下来了，但LZ觉得，这些二线城市，就是几年前的北京，房价会在你不知不觉间，就让你高不可攀。</p><p>　　所以，LZ个人认为，在现在这个时候，程序员们应该早为自己的未来做打算。</p><p>　　不说别的，就说LZ自己吧，如果当初在北京的时候LZ就意识到这一点，那现在LZ在杭州说不定已经几套房了。</p><p>　　当然了，有些同学可能会说，那是你知道杭州房价涨了你才这么说，你这是事后诸葛亮罢了。</p><p>　　诚然，现在说这个是有点事后诸葛亮的嫌疑，但LZ觉得，现在说这个依然不晚，因为杭州、郑州等二线城市的房价，还没有到程序员买不起的地步，大家都还有反悔的余地。</p><p>　　如果真到了有一天，这些城市变成了“北上深”，那个时候，你就只能回三线、四线，甚至是县城和农村了。</p><p>　　所以，在二线城市还未对你完全关闭大门的时候，LZ觉得，程序员们应该早早为自己几年后埋下伏笔了。</p><p><img src="timg.jpg" alt="风景"></p><h1 id="伏笔"><a href="#伏笔" class="headerlink" title="伏笔"></a>伏笔</h1><p>　　关于伏笔到底该如何埋，LZ简单总结了下，觉得有以下几点，可以跟大家分享一下。</p><p>　　<strong>1、一定要注意存钱。</strong></p><p>　　一个很现实的例子是，当初LZ的群里有一个小伙伴儿，工作年限和LZ差不多，俩人的工资也基本一直不相上下，但是，四年之后，LZ只存了30W+，而这个小伙伴儿存了50W+。诚然，这个小伙伴儿可能牺牲了一部分的生活质量，但这最终的结果就是，这个小伙儿在北京买了房子，而LZ只能退居二线。</p><p>　　<strong>2、根据自己存钱的速度，以及家里的经济情况，尽早定好自己的目标城市。</strong></p><p>　　如果情况允许你把目标定在一线，那自然是最好。如若不然，那么就目前来看，比较适合程序员的二线城市，还有杭州、成都、武汉、西安、南京这几个城市。当然了，其它的一些省会二线城市也不是完全不行，这就看你的实际情况而定了。但如果可以的话，LZ还是比较建议，尽可能留在一些IT较为发达的城市。</p><p>　　<strong>3、根据自己锁定的目标城市，了解这个城市的房价、购房以及落户政策等，并定好自己的目标公司。</strong></p><p>　　城市既然定好了，那就要提前了解下这个城市的一些政策信息。而且，除此之外，你还要对这个城市的IT公司有一定了解，找一个最适合你的第一站。就比如杭州这个城市，阿里、网易这些都是你比较不错的第一站。</p><p>　　<strong>4、根据自己锁定的目标公司，完善自己的技术和能力体系。</strong></p><p>　　这个LZ就不多说了吧，既然你都定好了你的目标公司，那你就没事多关注下这个公司的招聘信息，看看这个公司都更青睐于哪个技术方向，从而让自己朝这方面努力。具体该如何努力，上面已经说过了，理论、实践加总结。</p><p>　　<strong>5、只要目标城市定好了，哪怕你人还在一线，只要条件允许的情况下，房子越早买越好。</strong></p><p>　　越早买越好这件事，LZ要说一个前提，那就是这个房子是你的刚需房。刚需房这种东西，早买是绝对不会亏的，只会让你少花钱。就算到时候房价真的降了，因为你是用来自住，也亏不到哪去。简单地说，这是一笔几乎不会亏本的买卖。</p><p><img src="timg1.jpg" alt="风景"></p><h1 id="答疑"><a href="#答疑" class="headerlink" title="答疑"></a>答疑</h1><p>　　虽然这篇文章还没发出去，但LZ也可以预见到大家的一些问题，因此就索性在这里提前回答了，毕竟LZ一直都没有回评论的习惯，实在是太懒。</p><p>　　<strong>一问，“LZ啊，我这人没啥追求，在一线挣点钱回家觉得挺好的，我是不是不用考虑你说的这些？”</strong></p><p>　　LZ不否认，每个人都有自己不同的追求，回家安逸生活不失为一种不错的生活方式。</p><p>　　但LZ只能客观的告诉你，回家意味着你可能会失去你技术发挥的余地，也会让你的孩子前往一线二线更加困难。</p><p>　　LZ觉得，一个家庭的财富，其实是代代积累出来的，你选择了回家安逸，那你的孩子如果想去一线二线打拼，就要付出更多的努力。你可以说“儿孙自有儿孙福”，但LZ个人觉得，如果可以，给孩子一个更高的起点，应该所有的父母都不会拒绝。</p><p>　　另外，就如刚才LZ所说，财富是慢慢积累起来的，同样的两个人，一个人最终留在了一二线，假设他的年薪是30W，而你选择了回家，你的年薪可能变成了5W。第一年，你们的财富差了25W，等到30年以后，你们的财富差距可能就是750W，考虑到涨薪和你们各自房价上涨的速度，甚至可能更多。</p><p>　　如果你可以接受这种差距，那你回家未尝不可。总而言之，自己选择的路，考虑好就行，在不触犯法律和道德的情况下，任何选择都没有绝对的对和错。</p><p>　　当然了，你可以说，你回家做个小生意照样年入30W，甚至更高，但是，这样的话，LZ只能对你说，“我特么竟无言以对。”</p><p>　　</p><p>　　<strong>二问，“LZ啊，你说的简单，我钱没有那么多啊，靠自己慢慢攒，就算是二线买房也难啊！”</strong></p><p>　　关于这个问题，LZ觉得在这篇文章《2016——注定不平凡的一年》里面，你可以找到答案，那里讲述了LZ空手捞套房的故事。</p><p>　　而且，买房这件事，最切忌的就是犹犹豫豫，出手一定要果断。如果当初在北京的时候，LZ不是一直犹豫不定的话，说不定现在LZ就不用离开帝都了。而且，就算是真的离开帝都，那LZ把房子卖掉，也可以带着一笔巨款来杭州。</p><p>　　况且，就算你的钱不够，现在银行很多都有较低利息的短期贷款，也是可以帮上忙的。虽然这样会让你背上一些贷款，但LZ觉得，贷款这事儿其实蛮好的，它其实是在强迫你存钱，强迫你积累你的财富。</p><p>　　就拿LZ来说，自从背上了贷款，LZ存钱的速度，连LZ自己都害怕。</p><p>　　当然了，凡事要适可而止，如果你明知以自己的能力还不上，那肯定还是要及时停止。</p><p>　　</p><p>　　<strong>三问，“LZ啊，我现在才刚刚工作，考虑这个是不是早了点？”</strong></p><p>　　关于这个问题，LZ其实只想反问回去，“为什么会觉得早？”</p><p>　　就拿你毕业找工作来说，你觉得是你毕业了再准备好，还是你提前在大二、大三，甚至大一就开始准备好？</p><p>　　这个问题的答案显而易见，LZ觉得不需要过多解释，尽早准备绝对没有坏处。</p><p>　　当然了，还是那句话，凡事要适可而止，虽然LZ建议你及早准备，但你也不要给自己过大的压力。</p><p>　　毕竟，年轻就是本钱！</p><p>　　</p><p>　　<strong>四问，“LZ啊，有的二线现在已经限购了，必须要交够XX年社保什么的才能买房，那就算我钱够了，岂不是也要先离开一线，到那里呆个一两年才能买？”</strong></p><p>　　关于这个问题，其实LZ只能说无可奈何，政策这事儿是大家左右不了的，只能去适应政策。</p><p>　　其实，正是前段时间看到了杭州出台的新政策，LZ才想起来写这篇文章，同时，也是LZ为何说“再不行动就来不及了”的原因。</p><p>　　记得去年三月份LZ来杭州的时候，杭州的购房政策还是全款买房送户口（对买的房子有一些区域限制，但无伤大雅）。</p><p>　　但是没过多久，杭州就取消了这个政策。不仅如此，杭州近期还实行了更严格的限购政策，即需要三年内连续缴纳两年社保，才能具备购房资格。</p><p>　　看到这个政策的时候，LZ有种时间错乱的感觉，就像是又回到了北京一样，因为杭州现在走的路，不就是之前北京走过的路吗？</p><p>　　或许若干年后，杭州也变成了现在的北京，五年社保才能买房，五年社保才能摇号，房价也慢慢上天了，到那时候，你再做任何准备，或许都已经晚了。</p><p>　　因此，如果你的目标城市已经变成了杭州这样的政策，而你的经济积累也已经基本足够的话，那么LZ建议你要尽快转移到你的目标城市，开始你的安居之旅了。</p><p>　　</p><h1 id="末尾的话"><a href="#末尾的话" class="headerlink" title="末尾的话"></a>末尾的话</h1><p>　　写这篇文章，其实就是想给程序员们敲个警钟，虽然未来的很多事都说不准，但其实还是有轨迹可循的。</p><p>　　另外，LZ觉得，随着程序员们的年纪越来越大，会有不少程序员在一线无法生存，这就会导致大批量年纪较大的程序员涌向二线。或许在不久的将来，一线将不会再是程序员的主阵地，而是二线、三线甚至四线这种生活成本较小的城市。</p><p>　　毕竟互联网又不像你开超市，你必须要开到北京，才能服务北京的人群。互联网的好处就是，它可以随时随地为你服务。</p><p>　　说到这，LZ不禁想到，BAT三家公司中，除了A公司以外，其余两个的总部都分别位于北京和深圳。</p><p>　　这两个城市的房价是众所周知的，基本上都是均价6W左右，虽然这两家公司的员工工资肯定不算低，但是不可否认的是，就算是如此，这些员工要想在北京和深圳安家也不是易事。</p><p>　　随着员工们的年纪越来越大，安家需求越来越迫切，不知道BT两家公司会不会把公司重心调离一线。</p><p>　　当然了，这只是LZ的一些设想，未来到底如何，LZ也不是预言家，也说不准会怎样。</p><p>　　但LZ个人觉得，没事多思考和推敲下未来，不管是对你的工作，还是生活，可能都会有意想不到的帮助。</p><p>　　毕竟，你当下的所有努力，长远的来看，可能就是为了更好的看清未来……</p><p>原文链接：<a href="https://blog.csdn.net/zuoxiaolong8810/article/details/65441781">https://blog.csdn.net/zuoxiaolong8810/article/details/65441781</a></p><p>彩蛋</p><ul><li><p><strong>《简历吐槽大会》第一期已结束——2019-01-19</strong></p></li><li><p>　　录像地址（感谢微信少林交流群的$根root同学提供的录像）：</p></li><li><p>　　（全）：<a href="https://v.douyu.com/show/0zZVvPm9eK37O4E2">https://v.douyu.com/show/0zZVvPm9eK37O4E2</a></p></li><li><p>　　</p></li><li><p>　　<strong>《简历吐槽大会》第二期已结束——2019-03-15</strong></p></li><li><p>　　录像地址：</p></li><li><p>　　（1）：<a href="https://v.douyu.com/show/NVm0WKbz80QMJeBP">https://v.douyu.com/show/NVm0WKbz80QMJeBP</a></p></li><li><p>　　（2）：<a href="https://v.douyu.com/show/0Q8mMY09638749Ad">https://v.douyu.com/show/0Q8mMY09638749Ad</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Book </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 左萧龙 </tag>
            
            <tag> 短文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pycharm永久激活及汉化</title>
      <link href="/2020/01/07/%E6%95%99%E7%A8%8B/JetBrains%E5%85%A8%E5%AE%B6%E6%A1%B6%E7%A0%B4%E8%A7%A3-Golang-Pycharm-IDEA%E7%AD%89/"/>
      <url>/2020/01/07/%E6%95%99%E7%A8%8B/JetBrains%E5%85%A8%E5%AE%B6%E6%A1%B6%E7%A0%B4%E8%A7%A3-Golang-Pycharm-IDEA%E7%AD%89/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>该方法可以破解JetBrains家族所有编辑器，以下以Pycharm为例，不分平台（windows，Mac等）</p><h2 id="第一步打开配置信息，搜索plugins"><a href="#第一步打开配置信息，搜索plugins" class="headerlink" title="第一步打开配置信息，搜索plugins"></a>第一步打开配置信息，搜索plugins</h2><p><img src="008eGmZEgy1goclx7he07j30mu0wigsr.jpg" alt=""><br><img src="008eGmZEgy1goclzxew6oj31bk0t8n16.jpg" alt="">]</p><h2 id="第二步点击配置，修改成私有仓库"><a href="#第二步点击配置，修改成私有仓库" class="headerlink" title="第二步点击配置，修改成私有仓库"></a>第二步点击配置，修改成私有仓库</h2><p>私有仓库地址为：<a href="https://repo.idechajian.com">https://repo.idechajian.com</a></p><p>![]008eGmZEgy1gocm0xdr8lj31tk0l4ale.jpg)</p><p><img src="008eGmZEgy1gocm2cib0yj314e0r2woe.jpg" alt=""></p><h2 id="第三步-搜索插件BetterIntelliJ，并安装"><a href="#第三步-搜索插件BetterIntelliJ，并安装" class="headerlink" title="第三步 搜索插件BetterIntelliJ，并安装"></a>第三步 搜索插件BetterIntelliJ，并安装</h2><p><img src="008eGmZEgy1gocm4gd75oj31jj0u0th4.jpg" alt="image-20210308171245530"></p><p><img src="008eGmZEgy1goco84j9iqj315y0u0dqh.jpg" alt="image-20210308182530465"></p><h2 id="第四步：手动重启Pycharm，打开注册页面"><a href="#第四步：手动重启Pycharm，打开注册页面" class="headerlink" title="第四步：手动重启Pycharm，打开注册页面"></a>第四步：手动重启Pycharm，打开注册页面</h2><p><img src="008eGmZEgy1gocm9siyvhj31j40u07eq.jpg" alt="image-20210308171754025"></p><h2 id="第五步：输入如下注册码"><a href="#第五步：输入如下注册码" class="headerlink" title="第五步：输入如下注册码"></a>第五步：输入如下注册码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BISACXYELK-eyJsaWNlbnNlSWQiOiJCSVNBQ1hZRUxLIiwibGljZW5zZWVOYW1lIjoiQ2hpbmFOQiIsImFzc2lnbmVlTmFtZSI6IiIsImFzc2lnbmVlRW1haWwiOiIiLCJsaWNlbnNlUmVzdHJpY3Rpb24iOiIiLCJjaGVja0NvbmN1cnJlbnRVc2UiOmZhbHNlLCJwcm9kdWN0cyI6W3siY29kZSI6IklJIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJBQyIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiRFBOIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlJTQyIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQUyIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUlNGIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IkdPIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJETSIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJDTCIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUlMwIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlJDIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlJEIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJQQyIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUlNWIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlJTVSIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUk0iLCJwYWlkVXBUbyI6IjIwOTktMTItMzEiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IldTIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJEQiIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiREMiLCJwYWlkVXBUbyI6IjIwOTktMTItMzEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUERCIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBXUyIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQR08iLCJwYWlkVXBUbyI6IjIwOTktMTItMzEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFBTIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBQQyIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQUkIiLCJwYWlkVXBUbyI6IjIwOTktMTItMzEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFNXIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IkRQIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlJTIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIiwiZXh0ZW5kZWQiOnRydWV9XSwibWV0YWRhdGEiOiIwMTIwMjAwNzI4RVBKQTAwODAwNiIsImhhc2giOiIxNTAyMTM1NC8wOi0xMjUxMTE0NzE3IiwiZ3JhY2VQZXJpb2REYXlzIjowLCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2V9-H7NUmWcLyUNV1ctnlzc4P79j15qL56G0jeIYWPk/HViNdMg1MqPM7BR+aHR28yyuxK7Odb2bFDS8CeHNUtv7nT+4fUs85JJiqc3wc1psRpZq5R77apXLOmvmossWpbAw8T1hOGV9IPUm1f2O1+kLBxrOkdqPpv9+JanbdL7bvchAid2v4/dyQMBYJme/feZ0Dy2l7Jjpwno1TeblEAu0KZmarEo15or5RUNwtaGBL5+396TLhnw1qL904/uPnGftjxWYluLjabO/uRu/+5td8UA/39a1nvGU2nORNLk2IdRGIheiwIiuirAZrII9+OxB+p52i3TIv7ugtkw0E3Jpkw==-MIIDlzCCAn+gAwIBAgIBCTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDEw1KZXRQcm9maWxlIENBMCAXDTE4MTEwMTEyMjk0NloYDzIwOTkwODA5MDIyNjA3WjBoMQswCQYDVQQGEwJDWjEOMAwGA1UECBMFTnVzbGUxDzANBgNVBAcTBlByYWd1ZTEZMBcGA1UEChMQSmV0QnJhaW5zIHMuci5vLjEdMBsGA1UEAxMUcHJvZDN5LWZyb20tMjAxODExMDEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCdXyaNhhRySH1a8d7c8SlLLFdNcQP8M3gNnq7gudcpHC651qxRrN7Qks8gdXlIkA4u3/lp9ylp95GiIIDo4ydYje8vlTWDq02bkyWW/G7gZ3hkbBhRUK/WnNyr2vwWoOgwx5CfTRMjKkPkfD/+jffkfNfdGmGcg9yfnqPP9/AizKzWTsXSeS+0jZ8Nw5tiYFW+lpceqlzwzKdTHug7Vs0QomUPccRtZB/TBBEuiC7YzrvLg4Amu0I48ETAcch/ztt00nx/oj/fu1DTnz4Iz4ilrNY+WVIEfDz/n3mz+PKI9kM+ZeB0jAuyLsiC7skGpIVGX/2HqmZTtJKBZCoveAiVAgMBAAGjgZkwgZYwSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TAJBgNVHRMEAjAAMBMGA1UdJQQMMAoGCCsGAQUFBwMBMAsGA1UdDwQEAwIFoDAdBgNVHQ4EFgQUYSkb2hkZx8swY0GRjtKAeIwaBNwwDQYJKoZIhvcNAQELBQADggEBAJZOakWgjfY359glviVffBQFxFS6C+4WjYDYzvzjWHUQoGBFKTHG4xUmTVW7y5GnPSvIlkaj49SzbD9KuiTc77GHyFCTwYMz+qITgbDg3/ao/x/be4DD/k/byWqW4Rb8OSYCshX/fNI4Xu+hxazh179taHX4NaH92ReLVyXNYsooq7mE5YhR9Qsiy35ORviQLrgFrMCGCxT9DWlFBuiPWIOqN544sL9OzFMz+bjqjCoAE/xfIJjI7H7SqGFNrx/<span class="number">8</span>/IuF0hvZbO3bLIz+BOR1L2O+qT728wK6womnp2LLANTPbwu7nf39rpP182WW+xw2z9MKYwwMDwGR1iTYnD4/Sjw=</span><br></pre></td></tr></table></figure><p><img src="008eGmZEgy1gocmb9ow9rj31dz0u014b.jpg" alt=""></p><h2 id="第六步：大功告成，破解到2099年"><a href="#第六步：大功告成，破解到2099年" class="headerlink" title="第六步：大功告成，破解到2099年"></a>第六步：大功告成，破解到2099年</h2><p><img src="008eGmZEgy1gocmbw7fj9j31dq0u0k1h.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Pycharm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pycharm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pycharm永久激活及汉化</title>
      <link href="/2020/01/07/%E6%95%99%E7%A8%8B/Pycharm%E6%B0%B8%E4%B9%85%E6%BF%80%E6%B4%BB%E5%8F%8A%E6%B1%89%E5%8C%96/"/>
      <url>/2020/01/07/%E6%95%99%E7%A8%8B/Pycharm%E6%B0%B8%E4%B9%85%E6%BF%80%E6%B4%BB%E5%8F%8A%E6%B1%89%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="永久激活"><a href="#永久激活" class="headerlink" title="永久激活"></a>永久激活</h1><p>随着2019版的到来，之前的永久激活教程也不生效了，所以今天为大家带来一种新的永久激活方式。<br> <em>Pycharm2019.3.1 链接:<a href="https://pan.baidu.com/s/1kn3U3GQUOt1Z0S8WI6QUHw">https://pan.baidu.com/s/1kn3U3GQUOt1Z0S8WI6QUHw</a>  密码:4joj</em></p><h2 id="激活前准备工作"><a href="#激活前准备工作" class="headerlink" title="激活前准备工作"></a>激活前准备工作</h2><ul><li>激活出现问题可留言或留言中查看</li><li>配置文件修改已经不在bin目录下直接修改，而是通过pycharm修改</li><li>如果输入code一直弹出来，请去hosts里移除jetbrains相关的项目</li></ul><h2 id="1-下载新版破解补丁"><a href="#1-下载新版破解补丁" class="headerlink" title="1.下载新版破解补丁"></a>1.下载新版破解补丁</h2><p>链接: <a href="https://pan.baidu.com/s/1MlQ3nDepwZQcYYLSWYC1ZA">https://pan.baidu.com/s/1MlQ3nDepwZQcYYLSWYC1ZA</a> 提取码: 3ysa</p><p> 下载补丁文件 <code>jetbrains-agent.jar</code> 并将它放置到 pycharm安装目录的\bin目录下（位置可随意，放这里是怕误操作删除了破解文件）。</p><p><img src="1.jpg" alt=""></p><h2 id="2-进入项目界面"><a href="#2-进入项目界面" class="headerlink" title="2.进入项目界面"></a>2.进入项目界面</h2><p>如果你之前已经使用有效期激活过可跳过此步骤，如果你是刚下载的pycharm，则需要点击激活窗口的“Evaluate for free”免费试用，然后再创建一个空项目，这样就可以进入到pycharm的工作页面</p><p><img src="2.png" alt=""></p><p><img src="3.png" alt=""></p><p><img src="4.png" alt=""></p><h2 id="3-修改配置文件"><a href="#3-修改配置文件" class="headerlink" title="3.修改配置文件"></a>3.修改配置文件</h2><p>进入到项目界面后，点击Pycharm最上面的菜单栏中的 “Help” -&gt; “Edit Custom VM Options …”，如果提示是否要创建文件，请点”Yes”。</p><p><img src="5.jpg" alt=""></p><p>在打开的vmoptions编辑窗口末行添加：<code>-javaagent:你pycharm的安装目录\jetbrains-agent.jar</code></p><p><img src="9.jpg" alt=""></p><p>请仔细检查补丁路径是否正确，如果错误则会出现pycharm打不开的情况，这时候可以删除用户目录下的pycharm文件夹</p><p><img src="10.jpg" alt=""></p><p><strong>修改完配置文件之后重启pycharm，切记、切记</strong></p><h2 id="4-输入激活码"><a href="#4-输入激活码" class="headerlink" title="4.输入激活码"></a>4.输入激活码</h2><p>修改完配置文件之后重启pycharm，点击菜单栏中的 “Help” -&gt; “Register …”，选择最后一种<strong>License server</strong>激活方式，地址填入：<code>http://jetbrains-license-server</code> （应该会自动填上），或者点击按钮：”Discover Server”来自动填充地址，完成激活</p><p><img src="9.png" alt=""></p><p>如果服务器激活方式无法激活，还可以选择<strong>Activation code</strong>方式激活，复制下面激活码即可</p><p>用<code>二、激活码.txt</code> <code>二、激活码.txt</code> <code>二、激活码.txt</code></p><p><img src="11.jpg" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">520E5894E2-eyJsaWNlbnNlSWQiOiI1MjBFNTg5NEUyIiwibGljZW5zZWVOYW1lIjoicGlnNiIsImFzc2lnbmVlTmFtZSI6IiIsImFzc2lnbmVlRW1haWwiOiIiLCJsaWNlbnNlUmVzdHJpY3Rpb24iOiJVbmxpbWl0ZWQgbGljZW5zZSB0aWxsIGVuZCBvZiB0aGUgY2VudHVyeS4iLCJjaGVja0NvbmN1cnJlbnRVc2UiOmZhbHNlLCJwcm9kdWN0cyI6W3siY29kZSI6IklJIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiUlMwIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiV1MiLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJSRCIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9LHsiY29kZSI6IlJDIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiREMiLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJEQiIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9LHsiY29kZSI6IlJNIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiRE0iLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJBQyIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9LHsiY29kZSI6IkRQTiIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9LHsiY29kZSI6IkdPIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiUFMiLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJDTCIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9LHsiY29kZSI6IlBDIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiUlNVIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In1dLCJoYXNoIjoiODkwNzA3MC8wIiwiZ3JhY2VQZXJpb2REYXlzIjowLCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2V9-DZ/oNHBfyho0XrrCJJvAOKg5Q1tLBgOdbCmzCKwkuM+Yryce0RoOi3OOmH6Ba/uTcCh/L37meyD0FJdJIprv59y4+n+k2kIeF/XKrKqg0dEsDUQRw0lUqqMt99ohqa+zmbJ44Yufdwwx/F1CtoRGvEQ2Mn0QjuqRoZJZ3wiT5Am22JiJW8MaNUl3wg9YPj+OPGARKKJUdUJ0NGUDQBcBAv5ds8LhbSbJSbPkbkwH/a1QMz4nEdn6lRDKI1aFIn43QhBSCFqvUq6TPJlbIJ0ZjE+PyZjHFBKCgkry0DHPXU2BbtIZPsksQnN3fx240a9K6sN7peZnLpEoMoq23FEz4g==-MIIElTCCAn2gAwIBAgIBCTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE4MTEwMTEyMjk0NloXDTIwMTEwMjEyMjk0NlowaDELMAkGA1UEBhMCQ1oxDjAMBgNVBAgMBU51c2xlMQ8wDQYDVQQHDAZQcmFndWUxGTAXBgNVBAoMEEpldEJyYWlucyBzLnIuby4xHTAbBgNVBAMMFHByb2QzeS1mcm9tLTIwMTgxMTAxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5ndaik1GD0nyTdqkZgURQZGW+RGxCdBITPXIwpjhhaD0SXGa4XSZBEBoiPdY6XV6pOfUJeyfi9dXsY4MmT0D+sKoST3rSw96xaf9FXPvOjn4prMTdj3Ji3CyQrGWeQU2nzYqFrp1QYNLAbaViHRKuJrYHI6GCvqCbJe0LQ8qqUiVMA9wG/PQwScpNmTF9Kp2Iej+Z5OUxF33zzm+vg/nYV31HLF7fJUAplI/1nM+ZG8K+AXWgYKChtknl3sW9PCQa3a3imPL9GVToUNxc0wcuTil8mqveWcSQCHYxsIaUajWLpFzoO2AhK4mfYBSStAqEjoXRTuj17mo8Q6M2SHOcwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQBonMu8oa3vmNAa4RQP8gPGlX3SQaA3WCRUAj6Zrlk8AesKV1YSkh5D2l+yUk6njysgzfr1bIR5xF8eup5xXc4/G7NtVYRSMvrd6rfQcHOyK5UFJLm+8utmyMIDrZOzLQuTsT8NxFpbCVCfV5wNRu4rChrCuArYVGaKbmp9ymkw1PU6+HoO5i2wU3ikTmRv8IRjrlSStyNzXpnPTwt7bja19ousk56r40SmlmC04GdDHErr0ei2UbjUua5kw71Qn9g02tL9fERI2sSRjQrvPbn9INwRWl5+k05mlKekbtbu2ev2woJFZK4WEXAd/GaAdeZZdumv8T2idDFL7cAirJwcrbfpawPeXr52oKTPnXfi0l5+g9Gnt/wfiXCrPElX6ycTR6iL3GC2VR4jTz6YatT4Ntz59/THOT7NJQhr6AyLkhhJCdkzE2cob/KouVp4ivV7Q3Fc6HX7eepHAAF/DpxwgOrg9smX6coXLgfp0b1RU2u/tUNID04rpNxTMueTtrT8WSskqvaJd3RH8r7cnRj6Y2hltkja82HlpDURDxDTRvv+krbwMr26SB/40BjpMUrDRCeKuiBahC0DCoU/4+ze1l94wVUhdkCfL0GpJrMSCDEK+XEurU18Hb7WT+ThXbkdl6VpFdHsRvqAnhR2g4b+Qzgidmuky5NUZVfEaZqV/g==</span><br></pre></td></tr></table></figure><p>mac 版参考文章:<a href="https://www.cnblogs.com/vijozsoft/p/11399134.html">https://www.cnblogs.com/vijozsoft/p/11399134.html</a></p><h1 id="非永久激活"><a href="#非永久激活" class="headerlink" title="非永久激活"></a>非永久激活</h1><p>jetbrains系列迎来大面积过期，永久破解方案大家觉得麻烦，现在直接给你激活码，自行操作吧，请叫我雷锋 </p><p>免修改hosts文件哦，如果修改过请删除网址再激活</p><p><a href="https://taou.cn/jcaKK">https://taou.cn/jcaKK</a> </p><p><a href="http://idea.medeming.com/jet/">http://idea.medeming.com/jet/</a></p><h1 id="Pycharm汉化使用教程"><a href="#Pycharm汉化使用教程" class="headerlink" title="Pycharm汉化使用教程"></a>Pycharm汉化使用教程</h1><ul><li>本汉化教程对jetbrains全系列可用：IDEA、Pycharm、WebStorm、phpstorm、AndroidStudio、GoLand、RubyMine、CLion</li><li>此汉化无副作用，绝对安全</li><li>2019.06.13：原汉化补丁下载连接无效，重新更新链接</li></ul><p>此教程中使用的汉化包并非本人所产，我只是个搬运工。作者为：平方X</p><p>还是建议使用英文原版，不建议汉化，其原因是：</p><ul><li>可能下载到存在病毒的汉化包</li><li>大多数软件还是以英文为主，如果你熟悉了一种软件可以说就一通百通</li></ul><p>但是根据存在即合理的原则，英文版也许你只知道常用的或是你使用过的几个功能，而如果你有一份中文版的话，很多功能即使没用过但是你看到中文也大概能猜出它的作用，这对你全面了解某个软件的功能有很大的帮助！</p><h2 id="1-汉化前准备工作"><a href="#1-汉化前准备工作" class="headerlink" title="1.汉化前准备工作"></a>1.汉化前准备工作</h2><ul><li>先激活软件，永久激活点这里：Pycharm激活码</li><li>关闭软件</li></ul><h2 id="2-下载汉化包"><a href="#2-下载汉化包" class="headerlink" title="2.下载汉化包"></a>2.下载汉化包</h2><p>再次声明：此汉化包为平方X所产，感谢他无私的为大家免费提供。希望受益的同学们以后也可以继承IT界开源免费的精神，为改变世界而贡献自己的力量，请记住：everyone has the superpower to change the world<br>首先大家需要下载与你软件和版本对应的汉化包：<a href="https://github.com/pingfangx/jetbrains-in-chinese。">https://github.com/pingfangx/jetbrains-in-chinese。</a></p><p>图片中我以Pycharm 2019.1 为例为大家演示，你需要找到相对应软件与版本的汉化包，切记！</p><p><img src="20190918153403794.png" alt=""></p><h2 id="3-将下载的jar放入安装目录的lib目录下"><a href="#3-将下载的jar放入安装目录的lib目录下" class="headerlink" title="3.将下载的jar放入安装目录的lib目录下"></a>3.将下载的jar放入安装目录的lib目录下</h2><p><img src="2019091815341576.png" alt=""></p><h2 id="4-验证"><a href="#4-验证" class="headerlink" title="4.验证"></a>4.验证</h2><p><img src="q.png" alt=""></p><p>完工.</p><hr><h1 id="JetBrains-2021-1"><a href="#JetBrains-2021-1" class="headerlink" title="JetBrains 2021.1"></a>JetBrains 2021.1</h1><p>所有 JetBrains 开发软件 2021.1.x 版本之前包括  2021.1.x均可用此方法破解，建议支持正版，总结于网络文章，只用于学习之用，不存在买卖关系。</p><p>链接: <a href="https://pan.baidu.com/s/1izbaAkFZllQfIAPXmQln2w">https://pan.baidu.com/s/1izbaAkFZllQfIAPXmQln2w</a> 提取码: rd89</p><ol><li>将下载好的jar文件放入自己安装软件所在目录下，我放在了安装目录bin目录下</li><li>所以编辑vm 填写的位置为/Applications/GoLand.app/Contents/bin/BetterIntelliJ-1.16.jar确认位置文件存在哦！</li><li>关闭软件重新打开，点击帮助—注册—输入下列激活码激活</li><li>汉化：设置—插件—输入“中文”安装—重启ide</li><li>如果软件启动不起来，用命令启动查看日志报错，删除或修改<code>缓存文件</code></li><li>关闭更新，找到软件设置—-系统设置—-更新—√取消掉—应用—确定</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/Applications/PyCharm.app/Contents/MacOS/pycharm</span><br><span class="line">2021-12-23 22:09:06.541 pycharm[1368:16645] allVms required 1.8*,1.8+</span><br><span class="line">2021-12-23 22:09:06.545 pycharm[1368:16648] Current Directory: /Users/polaris</span><br><span class="line">2021-12-23 22:09:06.545 pycharm[1368:16648] Value of PYCHARM_VM_OPTIONS is (null)</span><br><span class="line">2021-12-23 22:09:06.545 pycharm[1368:16648] Processing VMOptions file at /Users/XXX/Library/Application Support/JetBrains/PyCharm2021.1/pycharm.vmoptions</span><br><span class="line">2021-12-23 22:09:06.546 pycharm[1368:16648] Done</span><br><span class="line">OpenJDK 64-Bit Server VM warning: Option UseConcMarkSweepGC was deprecated <span class="keyword">in</span> version 9.0 and will likely be removed <span class="keyword">in</span> a future release.</span><br><span class="line">Error opening zip file or JAR manifest missing : /Applications/PyCharm.app/Contents/bin/jetbrains-agent.jar</span><br><span class="line">Error occurred during initialization of VM</span><br><span class="line">agent library failed to init: instrument</span><br><span class="line"></span><br><span class="line">清理下：/Users/你的文件/Library/Preferences/应用目录</span><br></pre></td></tr></table></figure><p><img src="1640311535404.png" alt="img"></p><p><img src="image-20211223225508507.png" alt="image-20211223225508507"></p><p>此插件通用激活码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BISACXYELK-eyJsaWNlbnNlSWQiOiJCSVNBQ1hZRUxLIiwibGljZW5zZWVOYW1lIjoiQ2hpbmFOQiIsImFzc2lnbmVlTmFtZSI6IiIsImFzc2lnbmVlRW1haWwiOiIiLCJsaWNlbnNlUmVzdHJpY3Rpb24iOiIiLCJjaGVja0NvbmN1cnJlbnRVc2UiOmZhbHNlLCJwcm9kdWN0cyI6W3siY29kZSI6IklJIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJBQyIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiRFBOIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlJTQyIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQUyIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUlNGIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IkdPIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJETSIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJDTCIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUlMwIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlJDIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlJEIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJQQyIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUlNWIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlJTVSIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUk0iLCJwYWlkVXBUbyI6IjIwOTktMTItMzEiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IldTIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJEQiIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiREMiLCJwYWlkVXBUbyI6IjIwOTktMTItMzEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUERCIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBXUyIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQR08iLCJwYWlkVXBUbyI6IjIwOTktMTItMzEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFBTIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBQQyIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQUkIiLCJwYWlkVXBUbyI6IjIwOTktMTItMzEiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFNXIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IkRQIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlJTIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIiwiZXh0ZW5kZWQiOnRydWV9XSwibWV0YWRhdGEiOiIwMTIwMjAwNzI4RVBKQTAwODAwNiIsImhhc2giOiIxNTAyMTM1NC8wOi0xMjUxMTE0NzE3IiwiZ3JhY2VQZXJpb2REYXlzIjowLCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2V9-H7NUmWcLyUNV1ctnlzc4P79j15qL56G0jeIYWPk/HViNdMg1MqPM7BR+aHR28yyuxK7Odb2bFDS8CeHNUtv7nT+4fUs85JJiqc3wc1psRpZq5R77apXLOmvmossWpbAw8T1hOGV9IPUm1f2O1+kLBxrOkdqPpv9+JanbdL7bvchAid2v4/dyQMBYJme/feZ0Dy2l7Jjpwno1TeblEAu0KZmarEo15or5RUNwtaGBL5+396TLhnw1qL904/uPnGftjxWYluLjabO/uRu/+5td8UA/39a1nvGU2nORNLk2IdRGIheiwIiuirAZrII9+OxB+p52i3TIv7ugtkw0E3Jpkw==-MIIDlzCCAn+gAwIBAgIBCTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDEw1KZXRQcm9maWxlIENBMCAXDTE4MTEwMTEyMjk0NloYDzIwOTkwODA5MDIyNjA3WjBoMQswCQYDVQQGEwJDWjEOMAwGA1UECBMFTnVzbGUxDzANBgNVBAcTBlByYWd1ZTEZMBcGA1UEChMQSmV0QnJhaW5zIHMuci5vLjEdMBsGA1UEAxMUcHJvZDN5LWZyb20tMjAxODExMDEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCdXyaNhhRySH1a8d7c8SlLLFdNcQP8M3gNnq7gudcpHC651qxRrN7Qks8gdXlIkA4u3/lp9ylp95GiIIDo4ydYje8vlTWDq02bkyWW/G7gZ3hkbBhRUK/WnNyr2vwWoOgwx5CfTRMjKkPkfD/+jffkfNfdGmGcg9yfnqPP9/AizKzWTsXSeS+0jZ8Nw5tiYFW+lpceqlzwzKdTHug7Vs0QomUPccRtZB/TBBEuiC7YzrvLg4Amu0I48ETAcch/ztt00nx/oj/fu1DTnz4Iz4ilrNY+WVIEfDz/n3mz+PKI9kM+ZeB0jAuyLsiC7skGpIVGX/2HqmZTtJKBZCoveAiVAgMBAAGjgZkwgZYwSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TAJBgNVHRMEAjAAMBMGA1UdJQQMMAoGCCsGAQUFBwMBMAsGA1UdDwQEAwIFoDAdBgNVHQ4EFgQUYSkb2hkZx8swY0GRjtKAeIwaBNwwDQYJKoZIhvcNAQELBQADggEBAJZOakWgjfY359glviVffBQFxFS6C+4WjYDYzvzjWHUQoGBFKTHG4xUmTVW7y5GnPSvIlkaj49SzbD9KuiTc77GHyFCTwYMz+qITgbDg3/ao/x/be4DD/k/byWqW4Rb8OSYCshX/fNI4Xu+hxazh179taHX4NaH92ReLVyXNYsooq7mE5YhR9Qsiy35ORviQLrgFrMCGCxT9DWlFBuiPWIOqN544sL9OzFMz+bjqjCoAE/xfIJjI7H7SqGFNrx/8/IuF0hvZbO3bLIz+BOR1L2O+qT728wK6womnp2LLANTPbwu7nf39rpP182WW+xw2z9MKYwwMDwGR1iTYnD4/Sjw=</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Pycharm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pycharm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSH-paramiko模块的使用</title>
      <link href="/2019/12/13/Python/%E6%A8%A1%E5%9D%97/SSH-paramiko%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/12/13/Python/%E6%A8%A1%E5%9D%97/SSH-paramiko%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="paramiko"><a href="#paramiko" class="headerlink" title="paramiko"></a>paramiko</h1><h2 id="一-介绍"><a href="#一-介绍" class="headerlink" title="一 介绍"></a>一 介绍</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用于帮助开发者通过代码远程连接服务器，并对服务器进行操作。</span></span><br><span class="line"><span class="comment"># pip3 install paramiko </span></span><br></pre></td></tr></table></figure><h2 id="二-通过用户名密码方式远程执行命令"><a href="#二-通过用户名密码方式远程执行命令" class="headerlink" title="二 通过用户名密码方式远程执行命令"></a>二 通过用户名密码方式远程执行命令</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建SSH对象</span></span><br><span class="line">ssh = paramiko.SSHClient()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许连接不在know_hosts文件中的主机</span></span><br><span class="line">ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接服务器</span></span><br><span class="line">ssh.connect(hostname=<span class="string">&#x27;192.168.16.85&#x27;</span>, port=<span class="number">22</span>, username=<span class="string">&#x27;root&#x27;</span>, password=<span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行命令</span></span><br><span class="line">stdin, stdout, stderr = ssh.exec_command(<span class="string">&#x27;df&#x27;</span>)</span><br><span class="line"><span class="comment"># 获取命令结果</span></span><br><span class="line">result = stdout.read()</span><br><span class="line"><span class="comment"># 关闭连接</span></span><br><span class="line">ssh.close()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure><h2 id="三-通过用户名密码方式上传下载文件"><a href="#三-通过用户名密码方式上传下载文件" class="headerlink" title="三 通过用户名密码方式上传下载文件"></a>三 通过用户名密码方式上传下载文件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"></span><br><span class="line">transport = paramiko.Transport((<span class="string">&#x27;192.168.16.85&#x27;</span>, <span class="number">22</span>))</span><br><span class="line">transport.connect(username=<span class="string">&#x27;root&#x27;</span>, password=<span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line">sftp = paramiko.SFTPClient.from_transport(transport)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将location.py 上传至服务器 /tmp/test.py</span></span><br><span class="line"><span class="comment"># sftp.put(&#x27;123.txt&#x27;, &#x27;/data/123.txt&#x27;)</span></span><br><span class="line">sftp.get(<span class="string">&#x27;/data/123.txt&#x27;</span>, <span class="string">&#x27;123.txt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">transport.close()</span><br></pre></td></tr></table></figure><h2 id="四-通过公钥私钥远程执行命令"><a href="#四-通过公钥私钥远程执行命令" class="headerlink" title="四 通过公钥私钥远程执行命令"></a>四 通过公钥私钥远程执行命令</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"></span><br><span class="line">private_key = paramiko.RSAKey.from_private_key_file(<span class="string">r&#x27;C:/Users/Administrator/.ssh/id_rsa&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建SSH对象</span></span><br><span class="line">ssh = paramiko.SSHClient()</span><br><span class="line"><span class="comment"># 允许连接不在know_hosts文件中的主机</span></span><br><span class="line">ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class="line"><span class="comment"># 连接服务器</span></span><br><span class="line">ssh.connect(hostname=<span class="string">&#x27;192.168.16.85&#x27;</span>, port=<span class="number">22</span>, username=<span class="string">&#x27;root&#x27;</span>, pkey=private_key)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行命令</span></span><br><span class="line">stdin, stdout, stderr = ssh.exec_command(<span class="string">&#x27;df&#x27;</span>)</span><br><span class="line"><span class="comment"># 获取命令结果</span></span><br><span class="line">result = stdout.read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭连接</span></span><br><span class="line">ssh.close()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h2 id="五-通过公钥私钥远程上传下载文件"><a href="#五-通过公钥私钥远程上传下载文件" class="headerlink" title="五 通过公钥私钥远程上传下载文件"></a>五 通过公钥私钥远程上传下载文件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"></span><br><span class="line">private_key = paramiko.RSAKey.from_private_key_file(<span class="string">r&#x27;C:/Users/Administrator/.ssh/id_rsa&#x27;</span>)</span><br><span class="line"></span><br><span class="line">transport = paramiko.Transport((<span class="string">&#x27;192.168.16.85&#x27;</span>, <span class="number">22</span>))</span><br><span class="line">transport.connect(username=<span class="string">&#x27;root&#x27;</span>, pkey=private_key)</span><br><span class="line"></span><br><span class="line">sftp = paramiko.SFTPClient.from_transport(transport)</span><br><span class="line"><span class="comment"># 将location.py 上传至服务器 /tmp/test.py</span></span><br><span class="line"><span class="comment"># sftp.put(&#x27;/tmp/123.py&#x27;, &#x27;/tmp/123.py&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将remove_path 下载到本地 local_path</span></span><br><span class="line"><span class="comment"># sftp.get(&#x27;123.py&#x27;, &#x27;123.py&#x27;)</span></span><br><span class="line"></span><br><span class="line">transport.close()</span><br></pre></td></tr></table></figure><h2 id="六-通过私钥字符串远程连接服务器"><a href="#六-通过私钥字符串远程连接服务器" class="headerlink" title="六 通过私钥字符串远程连接服务器"></a>六 通过私钥字符串远程连接服务器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 也可以是存在于数据库中</span></span><br><span class="line">key = <span class="string">&quot;&quot;&quot;-----BEGIN RSA PRIVATE KEY-----</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-----END RSA PRIVATE KEY-----&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> StringIO</span><br><span class="line"></span><br><span class="line">private_key = paramiko.RSAKey(file_obj=StringIO(key))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建SSH对象</span></span><br><span class="line">ssh = paramiko.SSHClient()</span><br><span class="line"><span class="comment"># 允许连接不在know_hosts文件中的主机</span></span><br><span class="line">ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class="line"><span class="comment"># 连接服务器</span></span><br><span class="line">ssh.connect(hostname=<span class="string">&#x27;192.168.16.85&#x27;</span>, port=<span class="number">22</span>, username=<span class="string">&#x27;root&#x27;</span>, pkey=private_key)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行命令</span></span><br><span class="line">stdin, stdout, stderr = ssh.exec_command(<span class="string">&#x27;df&#x27;</span>)</span><br><span class="line"><span class="comment"># 获取命令结果</span></span><br><span class="line">result = stdout.read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭连接</span></span><br><span class="line">ssh.close()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h2 id="七-生成公钥私钥并上传"><a href="#七-生成公钥私钥并上传" class="headerlink" title="七 生成公钥私钥并上传"></a>七 生成公钥私钥并上传</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1 生成公钥和私钥s</span></span><br><span class="line">sh-keygen.exe -m pem</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2 在当前用户家目录会生成： .ssh/id_rsa.pub    .ssh/id_rsa</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3 把公钥放到服务器</span></span><br><span class="line">ssh-copy-<span class="built_in">id</span> -i ~/.ssh/id_rsa.pub root@<span class="number">192.168</span><span class="number">.16</span><span class="number">.85</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 4 以后再连接服务器时，不需要在输入密码</span></span><br><span class="line">ssh root@<span class="number">192.168</span><span class="number">.16</span><span class="number">.85</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 模块 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pymysql模块的使用</title>
      <link href="/2019/12/13/Python/%E6%A8%A1%E5%9D%97/Pymysql%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/12/13/Python/%E6%A8%A1%E5%9D%97/Pymysql%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install pymysql</span><br></pre></td></tr></table></figure><h1 id="一-链接、执行sql、关闭（游标）"><a href="#一-链接、执行sql、关闭（游标）" class="headerlink" title="一 链接、执行sql、关闭（游标）"></a>一 链接、执行sql、关闭（游标）</h1><p><img src="5.png" alt="img"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line">user=<span class="built_in">input</span>(<span class="string">&#x27;用户名: &#x27;</span>).strip()</span><br><span class="line">pwd=<span class="built_in">input</span>(<span class="string">&#x27;密码: &#x27;</span>).strip()</span><br><span class="line"></span><br><span class="line"><span class="comment">#链接</span></span><br><span class="line">conn=pymysql.connect(host=<span class="string">&#x27;localhost&#x27;</span>,user=<span class="string">&#x27;root&#x27;</span>,password=<span class="string">&#x27;123&#x27;</span>,database=<span class="string">&#x27;egon&#x27;</span>,charset=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"><span class="comment">#游标</span></span><br><span class="line">cursor=conn.cursor() <span class="comment">#执行完毕返回的结果集默认以元组显示</span></span><br><span class="line"><span class="comment">#cursor=conn.cursor(cursor=pymysql.cursors.DictCursor)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#执行sql语句</span></span><br><span class="line">sql=<span class="string">&#x27;select * from userinfo where name=&quot;%s&quot; and password=&quot;%s&quot;&#x27;</span> %(user,pwd) <span class="comment">#注意%s需要加引号</span></span><br><span class="line"><span class="built_in">print</span>(sql)</span><br><span class="line">res=cursor.execute(sql) <span class="comment">#执行sql语句，返回sql查询成功的记录数目</span></span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> res:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;登录成功&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;登录失败&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="二-execute-之sql注入"><a href="#二-execute-之sql注入" class="headerlink" title="二 execute()之sql注入"></a>二 execute()之sql注入</h1><p>注意：符号—会注释掉它之后的sql，正确的语法：—后至少有一个任意字符</p><p>根本原理：就根据程序的字符串拼接name=’%s’，我们输入一个<em>xxx’ — haha</em>,用我们输入的xxx加’在程序中拼接成一个判断条件name=’<em>xxx’ — haha</em>‘</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">最后那一个空格，在一条sql语句中如果遇到select * <span class="keyword">from</span> t1 where <span class="built_in">id</span> &gt; <span class="number">3</span> -- <span class="keyword">and</span> name=<span class="string">&#x27;egon&#x27;</span>;则--之后的条件被注释掉了</span><br><span class="line"></span><br><span class="line"><span class="comment">#1、sql注入之：用户存在，绕过密码</span></span><br><span class="line">egon<span class="string">&#x27; -- 任意字符</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#2、sql注入之：用户不存在，绕过用户与密码</span></span><br><span class="line"><span class="string">xxx&#x27;</span> <span class="keyword">or</span> <span class="number">1</span>=<span class="number">1</span> -- 任意字符</span><br></pre></td></tr></table></figure><p><img src="2.png" alt="img"></p><p><img src="3.png" alt="img"></p><p><img src="1.png" alt="img"></p><p>解决方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 原来是我们对sql进行字符串拼接</span></span><br><span class="line"><span class="comment"># sql=&quot;select * from userinfo where name=&#x27;%s&#x27; and password=&#x27;%s&#x27;&quot; %(user,pwd)</span></span><br><span class="line"><span class="comment"># print(sql)</span></span><br><span class="line"><span class="comment"># res=cursor.execute(sql)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#改写为（execute帮我们做字符串拼接，我们无需且一定不能再为%s加引号了）</span></span><br><span class="line">sql=<span class="string">&quot;select * from userinfo where name=%s and password=%s&quot;</span> <span class="comment">#！！！注意%s需要去掉引号，因为pymysql会自动为我们加上</span></span><br><span class="line">res=cursor.execute(sql,[user,pwd]) <span class="comment">#pymysql模块自动帮我们解决sql注入的问题，只要我们按照pymysql的规矩来。</span></span><br></pre></td></tr></table></figure><h1 id="三-增、删、改：conn-commit"><a href="#三-增、删、改：conn-commit" class="headerlink" title="三 增、删、改：conn.commit()"></a>三 增、删、改：conn.commit()</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="comment">#链接</span></span><br><span class="line">conn=pymysql.connect(host=<span class="string">&#x27;localhost&#x27;</span>,user=<span class="string">&#x27;root&#x27;</span>,password=<span class="string">&#x27;123&#x27;</span>,database=<span class="string">&#x27;egon&#x27;</span>)</span><br><span class="line"><span class="comment">#游标</span></span><br><span class="line">cursor=conn.cursor()</span><br><span class="line"></span><br><span class="line"><span class="comment">#执行sql语句</span></span><br><span class="line"><span class="comment">#part1</span></span><br><span class="line"><span class="comment"># sql=&#x27;insert into userinfo(name,password) values(&quot;root&quot;,&quot;123456&quot;);&#x27;</span></span><br><span class="line"><span class="comment"># res=cursor.execute(sql) #执行sql语句，返回sql影响成功的行数</span></span><br><span class="line"><span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#part2</span></span><br><span class="line"><span class="comment"># sql=&#x27;insert into userinfo(name,password) values(%s,%s);&#x27;</span></span><br><span class="line"><span class="comment"># res=cursor.execute(sql,(&quot;root&quot;,&quot;123456&quot;)) #执行sql语句，返回sql影响成功的行数</span></span><br><span class="line"><span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#part3</span></span><br><span class="line">sql=<span class="string">&#x27;insert into userinfo(name,password) values(%s,%s);&#x27;</span></span><br><span class="line">res=cursor.executemany(sql,[(<span class="string">&quot;root&quot;</span>,<span class="string">&quot;123456&quot;</span>),(<span class="string">&quot;lhf&quot;</span>,<span class="string">&quot;12356&quot;</span>),(<span class="string">&quot;eee&quot;</span>,<span class="string">&quot;156&quot;</span>)]) <span class="comment">#执行sql语句，返回sql影响成功的行数</span></span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line">conn.commit() <span class="comment">#提交后才发现表中插入记录成功</span></span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h1 id="四-查：fetchone，fetchmany，fetchall"><a href="#四-查：fetchone，fetchmany，fetchall" class="headerlink" title="四 查：fetchone，fetchmany，fetchall"></a>四 查：fetchone，fetchmany，fetchall</h1><p><img src="4.png" alt="img"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="comment">#链接</span></span><br><span class="line">conn=pymysql.connect(host=<span class="string">&#x27;localhost&#x27;</span>,user=<span class="string">&#x27;root&#x27;</span>,password=<span class="string">&#x27;123&#x27;</span>,database=<span class="string">&#x27;egon&#x27;</span>)</span><br><span class="line"><span class="comment">#游标</span></span><br><span class="line">cursor=conn.cursor()</span><br><span class="line"></span><br><span class="line"><span class="comment">#执行sql语句</span></span><br><span class="line">sql=<span class="string">&#x27;select * from userinfo;&#x27;</span></span><br><span class="line">rows=cursor.execute(sql) <span class="comment">#执行sql语句，返回sql影响成功的行数rows,将结果放入一个集合，等待被查询</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cursor.scroll(3,mode=&#x27;absolute&#x27;) # 相对绝对位置移动</span></span><br><span class="line"><span class="comment"># cursor.scroll(3,mode=&#x27;relative&#x27;) # 相对当前位置移动</span></span><br><span class="line">res1=cursor.fetchone()</span><br><span class="line">res2=cursor.fetchone()</span><br><span class="line">res3=cursor.fetchone()</span><br><span class="line">res4=cursor.fetchmany(<span class="number">2</span>)</span><br><span class="line">res5=cursor.fetchall()</span><br><span class="line"><span class="built_in">print</span>(res1)</span><br><span class="line"><span class="built_in">print</span>(res2)</span><br><span class="line"><span class="built_in">print</span>(res3)</span><br><span class="line"><span class="built_in">print</span>(res4)</span><br><span class="line"><span class="built_in">print</span>(res5)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%s rows in set (0.00 sec)&#x27;</span> %rows)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">conn.commit() <span class="comment">#提交后才发现表中插入记录成功</span></span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">(1, &#x27;root&#x27;, &#x27;123456&#x27;)</span></span><br><span class="line"><span class="string">(2, &#x27;root&#x27;, &#x27;123456&#x27;)</span></span><br><span class="line"><span class="string">(3, &#x27;root&#x27;, &#x27;123456&#x27;)</span></span><br><span class="line"><span class="string">((4, &#x27;root&#x27;, &#x27;123456&#x27;), (5, &#x27;root&#x27;, &#x27;123456&#x27;))</span></span><br><span class="line"><span class="string">((6, &#x27;root&#x27;, &#x27;123456&#x27;), (7, &#x27;lhf&#x27;, &#x27;12356&#x27;), (8, &#x27;eee&#x27;, &#x27;156&#x27;))</span></span><br><span class="line"><span class="string">rows in set (0.00 sec)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="五-获取插入的最后一条数据的自增ID"><a href="#五-获取插入的最后一条数据的自增ID" class="headerlink" title="五 获取插入的最后一条数据的自增ID"></a>五 获取插入的最后一条数据的自增ID</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line">conn=pymysql.connect(host=<span class="string">&#x27;localhost&#x27;</span>,user=<span class="string">&#x27;root&#x27;</span>,password=<span class="string">&#x27;123&#x27;</span>,database=<span class="string">&#x27;egon&#x27;</span>)</span><br><span class="line">cursor=conn.cursor()</span><br><span class="line"></span><br><span class="line">sql=<span class="string">&#x27;insert into userinfo(name,password) values(&quot;xxx&quot;,&quot;123&quot;);&#x27;</span></span><br><span class="line">rows=cursor.execute(sql)</span><br><span class="line"><span class="built_in">print</span>(cursor.lastrowid) <span class="comment">#在插入语句后查看</span></span><br><span class="line"></span><br><span class="line">conn.commit()</span><br><span class="line"></span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 模块 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pymysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python之旅：并发编程</title>
      <link href="/2019/12/12/Python/Python%E4%B9%8B%E6%97%85/Python%E4%B9%8B%E6%97%85%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91/"/>
      <url>/2019/12/12/Python/Python%E4%B9%8B%E6%97%85/Python%E4%B9%8B%E6%97%85%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h1 id="操作系统发展史"><a href="#操作系统发展史" class="headerlink" title="操作系统发展史"></a>操作系统发展史</h1><p>研究并发编程其实就是研究操作系统的底层原理，所以我们需要从操作系统的发展史开始学起</p><h2 id="手工操作-——-穿孔卡片"><a href="#手工操作-——-穿孔卡片" class="headerlink" title="手工操作 —— 穿孔卡片"></a>手工操作 —— 穿孔卡片</h2><p>​      1946年第一台计算机诞生—20世纪50年代中期，计算机工作还在采用手工操作方式。此时还没有操作系统的概念。</p><p><img src="ming_0.jpeg" alt="纸带"></p><p>　　程序员将对应于程序和数据的已穿孔的纸带（或卡片）装入输入机，然后启动输入机把程序和数据输入计算机内存，接着通过控制台开关启动程序针对数据运行；计算完毕，打印机输出计算结果；用户取走结果并卸下纸带（或卡片）后，才让下一个用户上机。</p><p>手工操作方式两个特点：</p><p>　　（1）用户独占全机。不会出现因资源已被其他用户占用而等待的现象，但资源的利用率低。</p><p>　　（2）CPU 等待手工操作。CPU的利用不充分。</p><p>​      20世纪50年代后期，出现<a href="https://baike.baidu.com/item/人机矛盾">人机矛盾</a>：手工操作的慢速度和计算机的高速度之间形成了尖锐矛盾，手工操作方式已严重损害了系统资源的利用率（使资源利用率降为百分之几，甚至更低），不能容忍。唯一的解决办法：只有摆脱人的手工操作，实现作业的自动过渡。这样就出现了成<a href="https://baike.baidu.com/item/批处理">批处理</a>。</p><h2 id="批处理-——-磁带存储"><a href="#批处理-——-磁带存储" class="headerlink" title="批处理 —— 磁带存储"></a>批处理 —— 磁带存储</h2><p>　　批处理系统：加载在计算机上的一个<a href="https://baike.baidu.com/item/系统软件">系统软件</a>，在它的控制下，计算机能够自动地、成批地处理一个或多个用户的作业（这作业包括程序、数据和命令）。</p><h3 id="联机批处理系统"><a href="#联机批处理系统" class="headerlink" title="联机批处理系统"></a>联机批处理系统</h3><p>　　首先出现的是联机批处理系统，即作业的输入/输出由CPU来处理。</p><p><img src="1.png" alt="批处理系统"></p><p>　　主机与输入机之间增加一个存储设备——磁带，在运行于主机上的监督程序的自动控制下，计算机可自动完成：成批地把输入机上的用户作业读入磁带，依次把磁带上的用户作业读入主机内存并执行并把计算结果向输出机输出。完成了上一批作业后，监督程序又从输入机上输入另一批作业，保存在磁带上，并按上述步骤重复处理。</p><p>监督程序不停地处理各个作业，从而实现了作业到作业的自动转接，减少了作业建立时间和手工操作时间，有效克服了人机矛盾，提高了计算机的利用率。</p><p>但是，在作业输入和结果输出时，主机的高速CPU仍处于空闲状态，等待慢速的输入/输出设备完成工作： 主机处于“忙等”状态。</p><h3 id="脱机批处理系统"><a href="#脱机批处理系统" class="headerlink" title="脱机批处理系统"></a>脱机批处理系统</h3><p>　　为克服与缓解：高速主机与慢速外设的矛盾，提高CPU的利用率，又引入了<a href="https://baike.baidu.com/item/脱机批处理系统">脱机批处理系统</a>，即输入/输出脱离主机控制。</p><p>　　卫星机：一台不与主机直接相连而专门用于与输入/输出设备打交道的。</p><p>　　其功能是：    </p><p>　　（1）从输入机上读取用户作业并放到输入磁带上。</p><p>　　（2）从输出磁带上读取执行结果并传给输出机。</p><p>　　这样，主机不是直接与慢速的输入/输出设备打交道，而是与速度相对较快的磁带机发生关系，有效缓解了主机与设备的矛盾。主机与卫星机可并行工作，二者分工明确，可以充分发挥主机的高速计算能力。</p><p>   脱机批处理系统:20世纪60年代应用十分广泛，它极大缓解了人机矛盾及主机与外设的矛盾。</p><p>　　不足：每次主机内存中仅存放一道作业，每当它运行期间发出输入/输出（I/O）请求后，高速的CPU便处于等待低速的I/O完成状态，致使CPU空闲。</p><p>为改善CPU的利用率，又引入了多道程序系统。</p><h1 id="多道技术"><a href="#多道技术" class="headerlink" title="多道技术"></a>多道技术</h1><p>cpu在执行一个任务的过程中，若需要操作硬盘，则发送操作硬盘的指令，指令一旦发出，硬盘上的机械手臂滑动读取数据到内存中，这一段时间，cpu需要等待，时间可能很短，但对于cpu来说已经很长很长，长到可以让cpu做很多其他的任务，如果我们让cpu在这段时间内切换到去做其他的任务，这样cpu不就充分利用了吗。这正是多道技术产生的技术背景</p><p><strong>多道技术：</strong></p><p>多道技术中的多道指的是多个程序，多道技术的实现是为了解决多个程序竞争或者说共享同一个资源（比如cpu）的有序调度问题，解决方式即多路复用，多路复用分为时间上的复用和空间上的复用。</p><p><strong>空间上的复用</strong>：将内存分为几部分，每个部分放入一个程序，这样，同一时间内存中就有了多道程序。</p><p><img src="2.png" alt=""></p><p><strong>时间上的复用</strong>：当一个程序在等待I/O时，另一个程序可以使用cpu，如果内存中可以同时存放足够多的作业，则cpu的利用率可以接近100%，类似于我们小学数学所学的<strong>统筹方法</strong>。（操作系统采用了多道技术后，可以控制进程的切换，或者说进程之间去争抢cpu的执行权限。这种切换不仅会在一个进程遇到io时进行，一个进程占用cpu时间过长也会切换，或者说被操作系统夺走cpu的执行权限）</p><p><img src="3.png" alt=""><br> 在A程序计算时，I/O空闲， A程序I/O操作时，CPU空闲（B程序也是同样）；必须A工作完成后，B才能进入内存中开始工作，两者是串行的，全部完成共需时间=T1+T2。<br><img src="4.png" alt=""></p><p>空间上的复用最大的问题是：程序之间的内存必须分割，这种分割需要在硬件层面实现，由操作系统控制。如果内存彼此不分割，则一个程序可以访问另外一个程序的内存，</p><p>首先丧失的是安全性，比如你的qq程序可以访问操作系统的内存，这意味着你的qq可以拿到操作系统的所有权限。</p><p>其次丧失的是稳定性，某个程序崩溃时有可能把别的程序的内存也给回收了，比方说把操作系统的内存给回收了，则操作系统崩溃。</p><h2 id="分时系统"><a href="#分时系统" class="headerlink" title="分时系统"></a>分时系统</h2><p>由于CPU速度不断提高和采用分时技术，一台计算机可同时连接多个用户终端，而每个用户可在自己的终端上联机使用计算机，好象自己独占机器一样。</p><p>分时技术：把处理机的运行时间分成很短的时间片，按时间片轮流把处理机分配给各联机作业使用。</p><p>　　若某个作业在分配给它的时间片内不能完成其计算，则该作业暂时中断，把处理机让给另一作业使用，等待下一轮时再继续其运行。由于计算机速度很快，作业运行轮转得很快，给每个用户的印象是，好象他独占了一台计算机。而每个用户可以通过自己的终端向系统发出各种操作控制命令，在充分的人机交互情况下，完成作业的运行。</p><p>具有上述特征的计算机系统称为分时系统，它允许多个用户同时联机使用计算机。</p><p>　　特点：</p><p>　　（1）多路性。若干个用户同时使用一台计算机。微观上看是各用户轮流使用计算机；宏观上看是各用户并行工作。</p><p>　　（2）交互性。用户可根据系统对请求的响应结果，进一步向系统提出新的请求。这种能使用户与系统进行人机对话的工作方式，明显地有别于批处理系统，因而，分时系统又被称为交互式系统。</p><p>　　（3）独立性。用户之间可以相互独立操作，互不干扰。系统保证各用户程序运行的完整性，不会发生相互混淆或破坏现象。</p><p>　　（4）及时性。系统可对用户的输入及时作出响应。分时系统性能的主要指标之一是响应时间，它是指：从终端发出命令到系统予以应答所需的时间。</p><h1 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h1><h2 id="一-什么是进程"><a href="#一-什么是进程" class="headerlink" title="一 什么是进程"></a>一 什么是进程</h2><p>进程：正在进行的一个过程或者说一个任务。是系统进行资源分配和调度的基本单位，是<a href="https://baike.baidu.com/item/操作系统">操作系统</a>结构的基础。</p><p>进程是操作系统中最基本、重要的概念。是多道程序系统出现后，为了刻画系统内部出现的动态情况，描述系统内部各道程序的活动规律引进的一个抽象概念,所有多道程序设计操作系统都建立在进程的基础上。</p><h2 id="二-进程与程序的区别"><a href="#二-进程与程序的区别" class="headerlink" title="二 进程与程序的区别"></a>二 进程与程序的区别</h2><p>程序仅仅只是一堆代码而已，而进程指的是程序的运行过程。</p><p>想象一位tom猫正在给他的宿敌jerry做奶油蛋糕。</p><p>他有做奶油蛋糕的食谱及所需的所有原料:面粉、鸡蛋、奶油等。</p><p>在这个比喻中：</p><ul><li>做蛋糕的食谱就是程序</li><li>tom猫就是处理器(cpu)</li><li>而做蛋糕的各种原料就是输入数据</li><li>进程就是tom阅读食谱、取来各种原料以及烘制蛋糕等一系列动作的总和</li></ul><p>现在假设tom猫的主人站在门外需要tom去开门</p><p>tom想了想，给主人开门的任务比给jerry鼠做蛋糕的任务更重要，于是tom立马先记下照着食谱做到第几步(保存进程的当前状态)，然后跑去给主人开门。这里，我们看到处理机从一个进程(做蛋糕)切换到另一个高优先级的进程(开门)，每个进程拥有各自的程序(食谱和开锁)。开门之后，tom又回来从他离开时的那一步继续做蛋糕</p><p><strong>需要强调的是：同一个程序执行两次，那也是两个进程，比如打开快播，虽然都是同一个软件，但是一个可以播放苍井空,一个可以播放饭岛爱,分别做不同的事情也不会混乱</strong></p><h2 id="三-进程调度"><a href="#三-进程调度" class="headerlink" title="三 进程调度"></a>三 进程调度</h2><p>要想多个进程交替运行，操作系统必须对这些进程进行调度，这个调度也不是随即进行的，而是需要遵循一定的法则，由此就有了进程的调度算法。</p><ul><li>先来先服务调度算法</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">先来先服务（FCFS）调度算法是一种最简单的调度算法，该算法既可用于作业调度，也可用于进程调度。FCFS算法比较有利于长作业（进程），而不利于短作业（进程）。由此可知，本算法适合于CPU繁忙型作业，而不利于I/O繁忙型的作业（进程）。</span><br></pre></td></tr></table></figure><ul><li>短作业优先调度算法</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">短作业（进程）优先调度算法（SJ/PF）是指对短作业或短进程优先调度的算法，该算法既可用于作业调度，也可用于进程调度。但其对长作业不利；不能保证紧迫性作业（进程）被及时处理；作业的长短只是被估算出来的。</span><br></pre></td></tr></table></figure><ul><li>时间片轮转法</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">时间片轮转(Round Robin，RR)法的基本思路是让每个进程在就绪队列中的等待时间与享受服务的时间成比例。在时间片轮转法中，需要将CPU的处理时间分成固定大小的时间片，例如，几十毫秒至几百毫秒。如果一个进程在被调度选中之后用完了系统规定的时间片，但又未完成要求的任务，则它自行释放自己所占有的CPU而排到就绪队列的末尾，等待下一次调度。同时，进程调度程序又去调度当前就绪队列中的第一个进程。</span><br></pre></td></tr></table></figure><ul><li>多级反馈队列</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">前面介绍的各种用作进程调度的算法都有一定的局限性。如短进程优先的调度算法，仅照顾了短进程而忽略了长进程，而且如果并未指明进程的长度，则短进程优先和基于进程长度的抢占式调度算法都将无法使用。</span><br><span class="line">而多级反馈队列调度算法则不必事先知道各种进程所需的执行时间，而且还可以满足各种类型进程的需要，因而它是目前被公认的一种较好的进程调度算法。在采用多级反馈队列调度算法的系统中，调度算法的实施过程如下所述。</span><br><span class="line">(1) 应设置多个就绪队列，并为各个队列赋予不同的优先级。第一个队列的优先级最高，第二个队列次之，其余各队列的优先权逐个降低。该算法赋予各个队列中进程执行时间片的大小也各不相同，在优先权愈高的队列中，为每个进程所规定的执行时间片就愈小。例如，第二个队列的时间片要比第一个队列的时间片长一倍，……，第i+1个队列的时间片要比第i个队列的时间片长一倍。</span><br><span class="line">(2) 当一个新进程进入内存后，首先将它放入第一队列的末尾，按FCFS原则排队等待调度。当轮到该进程执行时，如它能在该时间片内完成，便可准备撤离系统；如果它在一个时间片结束时尚未完成，调度程序便将该进程转入第二队列的末尾，再同样地按FCFS原则等待调度执行；如果它在第二队列中运行一个时间片后仍未完成，再依次将它放入第三队列，……，如此下去，当一个长作业(进程)从第一队列依次降到第n队列后，在第n 队列便采取按时间片轮转的方式运行。</span><br><span class="line">(3) 仅当第一队列空闲时，调度程序才调度第二队列中的进程运行；仅当第1～(i-1)队列均空时，才会调度第i队列中的进程运行。如果处理机正在第i</span><br></pre></td></tr></table></figure><h1 id="进程的并行与并发"><a href="#进程的并行与并发" class="headerlink" title="进程的并行与并发"></a>进程的并行与并发</h1><p><strong>并行</strong> : 并行是指两者同时执行，比如赛跑，两个人都在不停的往前跑</p><p><strong>并发</strong> : 并发是指资源有限的情况下，两者交替轮流使用资源，比如一段路同时只能过一个人，A走一段后，让给B，B用完继续给A ，交替使用，目的是提高效率。</p><p><strong>区别</strong>:</p><p><strong>并行</strong>是同时运行，只有具备多个cpu才能实现并行<br> <strong>并发</strong>是是伪并行，即看起来是同时运行。单个cpu+多道技术就可以实现并发,(并行也属于并发)</p><p><img src="5.png" alt="image"></p><p>所有现代计算机经常会在同一时间做很多件事，一个用户的电脑（无论是单cpu还是多cpu），都可以同时运行多个任务（一个任务可以理解为一个进程）。</p><p>　　　　启动一个进程来杀毒（360软件）</p><p>　　　　启动一个进程来看电影（暴风影音）</p><p>　　　　启动一个进程来聊天（腾讯QQ）</p><p>所有的这些进程都需被管理，于是一个支持多进程的多道程序系统是至关重要的</p><p>多道技术概念回顾：内存中同时存入多道（多个）程序，cpu从一个进程快速切换到另外一个，使每个进程各自运行几十或几百毫秒，这样，虽然在某一个瞬间，一个cpu只能执行一个任务，但在1秒内，cpu却可以运行多个进程，这就给人产生了并行的错觉，即伪并发，以此来区分多处理器操作系统的真正硬件并行（多个cpu共享同一个物理内存）</p><h1 id="同步异步阻塞非阻塞"><a href="#同步异步阻塞非阻塞" class="headerlink" title="同步异步阻塞非阻塞"></a>同步异步阻塞非阻塞</h1><h2 id="状态介绍"><a href="#状态介绍" class="headerlink" title="状态介绍"></a>状态介绍</h2><p><img src="6.png" alt=""></p><p>在了解其他概念之前，我们首先要了解进程的几个状态。在程序运行的过程中，由于被操作系统的调度算法控制，程序会进入几个状态：就绪，运行和阻塞。</p><p><strong>一、就绪(Ready)状态</strong></p><p>　　当进程已分配到除CPU以外的所有必要的资源，只要获得处理机便可立即执行，这时的进程状态称为就绪状态。</p><p><strong>二、执行/运行(Running)状态</strong></p><p>​    当进程已获得处理机，其程序正在处理机上执行，此时的进程状态称为执行状态。</p><p><strong>三、阻塞(Blocked)状态</strong></p><p>​    正在执行的进程，由于等待某个事件发生而无法执行时，便放弃处理机而处于阻塞状态。引起进程阻塞的事件可有多种，例如，等待I/O完成、申请缓冲区不能满足、等待信件(信号)等。</p><h2 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h2><h4 id="同步"><a href="#同步" class="headerlink" title="同步"></a><strong>同步</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一个任务的完成需要依赖另外一个任务时，只有等待被依赖的任务完成后，依赖的任务才能算完成，这是一种可靠的任务序列。要么成功都成功，失败都失败，两个任务的状态可以保持一致。</span><br></pre></td></tr></table></figure><h4 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">不需要等待被依赖的任务完成，只是通知被依赖的任务要完成什么工作，依赖的任务也立即执行，只要自己完成了整个任务就算完成了。至于被依赖的任务最终是否真正完成，依赖它的任务无法确定，所以它是不可靠的任务序列。</span><br></pre></td></tr></table></figure><h1 id="创建进程的多种方式"><a href="#创建进程的多种方式" class="headerlink" title="创建进程的多种方式"></a>创建进程的多种方式</h1><p>但凡是硬件，都需要有操作系统去管理，只要有操作系统，就有进程的概念，就需要有创建进程的方式，一些操作系统只为一个应用程序设计，比如扫地机器人，一旦启动，所有的进程都已经存在。</p><p>　　而对于通用系统（跑很多应用程序），需要有系统运行过程中创建或撤销进程的能力，主要分为4中形式创建新的进程：</p><p>　　1. 系统初始化（查看进程linux中用ps命令，windows中用任务管理器，前台进程负责与用户交互，后台运行的进程与用户无关，运行在后台并且只在需要时才唤醒的进程，称为守护进程，如电子邮件、web页面、新闻、打印）</p><p>　　2. 一个进程在运行过程中开启了子进程（如nginx开启多进程，os.fork,subprocess.Popen等）</p><p>　　3. 用户的交互式请求，而创建一个新进程（如用户用鼠标双击任意一款软件图片:qq,微信,暴风影音等）</p><p>　　4. 一个批处理作业的初始化（只在大型机的批处理系统中应用）</p><p>　　无论哪一种，新进程的创建都是由一个已经存在的进程执行了一个用于创建进程的系统调用而创建的。　　</p><h1 id="python程序中的进程操作"><a href="#python程序中的进程操作" class="headerlink" title="python程序中的进程操作"></a>python程序中的进程操作</h1><p>之前我们已经了解了很多进程相关的理论知识，了解进程是什么应该不再困难了，刚刚我们已经了解了，运行中的程序就是一个进程。所有的进程都是通过它的父进程来创建的。因此，运行起来的python程序也是一个进程，那么我们也可以在程序中再创建进程。多个进程可以实现并发效果，也就是说，当我们的程序中存在多个进程的时候，在某些时候，就会让程序的执行速度变快。以我们之前所学的知识，并不能实现创建进程这个功能，所以我们就需要借助python中强大的模块。</p><h2 id="multiprocess模块"><a href="#multiprocess模块" class="headerlink" title="multiprocess模块"></a>multiprocess模块</h2><p>​      仔细说来，multiprocess不是一个模块而是python中一个操作、管理进程的包。  之所以叫multi是取自multiple的多功能的意思,在这个包中几乎包含了和进程有关的所有子模块。由于提供的子模块非常多，为了方便大家归类记忆，我将这部分大致分为四个部分：创建进程部分，进程同步部分，进程池部分，进程之间数据共享。</p><h4 id="Process类介绍"><a href="#Process类介绍" class="headerlink" title="Process类介绍"></a>Process类介绍</h4><p>用法说明</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Process(group , target , name , args , kwargs)，由该类实例化得到的对象，表示一个子进程中的任务（尚未启动）</span><br><span class="line"></span><br><span class="line">强调：</span><br><span class="line"><span class="number">1.</span> 需要使用关键字的方式来指定参数</span><br><span class="line"><span class="number">2.</span> args指定的为传给target函数的位置参数，是一个元组形式，必须有逗号</span><br><span class="line"></span><br><span class="line">参数介绍：</span><br><span class="line"><span class="number">1</span> group参数未使用，值始终为<span class="literal">None</span></span><br><span class="line"><span class="number">2</span> target表示调用对象，即子进程要执行的任务</span><br><span class="line"><span class="number">3</span> args表示调用对象的位置参数元组，args=(<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;kkk&#x27;</span>,)</span><br><span class="line"><span class="number">4</span> kwargs表示调用对象的字典,kwargs=&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;kkk&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>&#125;</span><br><span class="line"><span class="number">5</span> name为子进程的名称</span><br></pre></td></tr></table></figure><h4 id="Process类创建进程的两种方式"><a href="#Process类创建进程的两种方式" class="headerlink" title="Process类创建进程的两种方式"></a>Process类创建进程的两种方式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#开进程的方法一:</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">piao</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s piaoing&#x27;</span> %name)</span><br><span class="line">    time.sleep(random.randrange(<span class="number">1</span>,<span class="number">5</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s piao end&#x27;</span> %name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">p1=Process(target=piao,args=(<span class="string">&#x27;kkk&#x27;</span>,)) <span class="comment">#必须加,号</span></span><br><span class="line">p2=Process(target=piao,args=(<span class="string">&#x27;ttt&#x27;</span>,))</span><br><span class="line">p3=Process(target=piao,args=(<span class="string">&#x27;aaa&#x27;</span>,))</span><br><span class="line">p4=Process(target=piao,args=(<span class="string">&#x27;bbb&#x27;</span>,))</span><br><span class="line"></span><br><span class="line">p1.start()</span><br><span class="line">p2.start()</span><br><span class="line">p3.start()</span><br><span class="line">p4.start()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;主线程&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#开进程的方法二:</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Piao</span>(<span class="title class_ inherited__">Process</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.name=name</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s piaoing&#x27;</span> %self.name)</span><br><span class="line"></span><br><span class="line">        time.sleep(random.randrange(<span class="number">1</span>,<span class="number">5</span>))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s piao end&#x27;</span> %self.name)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">p1=Piao(<span class="string">&#x27;ttt&#x27;</span>)</span><br><span class="line">p2=Piao(<span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line">p3=Piao(<span class="string">&#x27;bbb&#x27;</span>)</span><br><span class="line">p4=Piao(<span class="string">&#x27;ccc&#x27;</span>)</span><br><span class="line">p1.start() <span class="comment">#start会自动调用run</span></span><br><span class="line">p2.start()</span><br><span class="line">p3.start()</span><br><span class="line">p4.start()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;主线程&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>强调:</strong>在Windows操作系统中由于没有fork(linux操作系统中创建进程的机制)，在创建子进程的时候会自动 import 启动它的这个文件，而在 import  的时候又执行了整个文件。因此如果将process()直接写在文件中就会无限递归创建子进程报错。所以必须把创建子进程的部分使用if <em><em>name</em></em> ==‘<strong>main</strong>’ 判断保护起来，import 的时候  ，就不会递归运行了。</p><h1 id="进程间数据隔离"><a href="#进程间数据隔离" class="headerlink" title="进程间数据隔离"></a>进程间数据隔离</h1><p><strong>进程隔离</strong>是为保护<a href="https://baike.baidu.com/item/操作系统">操作系统</a>中进程互不干扰而设计的一组不同硬件和软件的技术</p><p>这个技术是为了避免进程A写入进程B的情况发生。 进程的隔离实现，使用了虚拟地址空间。进程A的虚拟地址和进程B的虚拟地址不同，这样就防止进程A将数据信息写入进程B</p><p>进程隔离的安全性通过禁止进程间内存的访问可以方便实现</p><p><strong>代码验证</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line">n=<span class="number">100</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">work</span>():</span><br><span class="line">    <span class="keyword">global</span> n  </span><br><span class="line">    n=<span class="number">0</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;子进程内: &#x27;</span>,n)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p=Process(target=work)</span><br><span class="line">    p.start()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;主进程内: &#x27;</span>,n)</span><br></pre></td></tr></table></figure><h1 id="守护进程"><a href="#守护进程" class="headerlink" title="守护进程"></a>守护进程</h1><p>会随着主进程的结束而结束，通俗点的说类似于古代的君王和服侍君王的太监,妃子等一干人，只要君王死了其他人都得陪葬一起翘辫子～</p><p>主进程创建守护进程</p><p>　　其一：守护进程会在主进程代码执行结束后就终止</p><p>　　其二：守护进程内无法再开启子进程,否则抛出异常：AssertionError: daemonic processes are not allowed to have children</p><p>注意：进程之间是互相独立的，主进程代码运行结束，守护进程随即终止</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Myprocess</span>(<span class="title class_ inherited__">Process</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,person</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.person = person</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(os.getpid(),self.name)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s正在和女主播聊天&#x27;</span> %self.person)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p=Myprocess(<span class="string">&#x27;炮王&#x27;</span>)</span><br><span class="line">p.daemon=<span class="literal">True</span>  <span class="comment"># 一定要在p.start()前设置,设置p为守护进程,禁止p创建子进程,并且父进程代码执行结束,p即终止运行</span></span><br><span class="line">p.start()</span><br><span class="line">time.sleep(<span class="number">10</span>)  <span class="comment"># 在sleep时查看进程id对应的进程ps -ef|grep id</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;主&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>迷惑人的小例子</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">123</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;end123&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bar</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">456</span>)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;end456&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p1=Process(target=foo)</span><br><span class="line">p2=Process(target=bar)</span><br><span class="line"></span><br><span class="line">p1.daemon=<span class="literal">True</span></span><br><span class="line">p1.start()</span><br><span class="line">p2.start()</span><br><span class="line">time.sleep(<span class="number">0.1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;main-------&quot;</span>)<span class="comment">#打印该行则主进程代码结束,则守护进程p1应该被终止.#可能会有p1任务执行的打印信息123,因为主进程打印main----时,p1也执行了,但是随即被终止.</span></span><br></pre></td></tr></table></figure><h1 id="进程同步-multiprocess-Lock"><a href="#进程同步-multiprocess-Lock" class="headerlink" title="进程同步(multiprocess.Lock)"></a>进程同步(multiprocess.Lock)</h1><h2 id="锁-multiprocess-Lock"><a href="#锁-multiprocess-Lock" class="headerlink" title="锁 multiprocess.Lock"></a>锁 multiprocess.Lock</h2><p>进程之间数据不共享,但是共享同一套文件系统,所以访问同一个文件,或同一个打印终端,是没有问题的,</p><p>而共享带来的是竞争，竞争带来的结果就是错乱，如何控制，就是加锁处理</p><h2 id="多进程模拟抢票实例"><a href="#多进程模拟抢票实例" class="headerlink" title="多进程模拟抢票实例"></a>多进程模拟抢票实例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#文件db的内容为：&#123;&quot;count&quot;:1&#125;</span></span><br><span class="line"><span class="comment">#注意一定要用双引号，不然json无法识别</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process,Lock</span><br><span class="line"><span class="keyword">import</span> time,json,random</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search</span>():</span><br><span class="line">    dic=json.load(<span class="built_in">open</span>(<span class="string">&#x27;db&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\033[43m剩余票数%s\033[0m&#x27;</span> %dic[<span class="string">&#x27;count&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get</span>():</span><br><span class="line">    dic=json.load(<span class="built_in">open</span>(<span class="string">&#x27;db&#x27;</span>))</span><br><span class="line">    time.sleep(<span class="number">0.1</span>) <span class="comment">#模拟读数据的网络延迟</span></span><br><span class="line">    <span class="keyword">if</span> dic[<span class="string">&#x27;count&#x27;</span>] &gt;<span class="number">0</span>:</span><br><span class="line">        dic[<span class="string">&#x27;count&#x27;</span>]-=<span class="number">1</span></span><br><span class="line">        time.sleep(<span class="number">0.2</span>) <span class="comment">#模拟写数据的网络延迟</span></span><br><span class="line">        json.dump(dic,<span class="built_in">open</span>(<span class="string">&#x27;db&#x27;</span>,<span class="string">&#x27;w&#x27;</span>))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\033[43m购票成功\033[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task</span>():</span><br><span class="line">    search()</span><br><span class="line">    get()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>): <span class="comment">#模拟并发100个客户端抢票</span></span><br><span class="line">        p=Process(target=task)</span><br><span class="line">        p.start()</span><br><span class="line"><span class="comment"># 引发问题:数据写入错乱</span></span><br></pre></td></tr></table></figure><h2 id="互斥锁保证数据安全"><a href="#互斥锁保证数据安全" class="headerlink" title="互斥锁保证数据安全"></a>互斥锁保证数据安全</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process,Lock</span><br><span class="line"><span class="keyword">import</span> time,json,random</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search</span>():</span><br><span class="line">    dic=json.load(<span class="built_in">open</span>(<span class="string">&#x27;db&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\033[43m剩余票数%s\033[0m&#x27;</span> %dic[<span class="string">&#x27;count&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get</span>():</span><br><span class="line">    dic=json.load(<span class="built_in">open</span>(<span class="string">&#x27;db&#x27;</span>))</span><br><span class="line">    time.sleep(random.random())  <span class="comment"># 模拟读数据的网络延迟</span></span><br><span class="line">    <span class="keyword">if</span> dic[<span class="string">&#x27;count&#x27;</span>] &gt;<span class="number">0</span>:</span><br><span class="line">        dic[<span class="string">&#x27;count&#x27;</span>]-=<span class="number">1</span></span><br><span class="line">        time.sleep(random.random())  <span class="comment"># 模拟写数据的网络延迟</span></span><br><span class="line">        json.dump(dic,<span class="built_in">open</span>(<span class="string">&#x27;db&#x27;</span>,<span class="string">&#x27;w&#x27;</span>))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\033[32m购票成功\033[0m&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\033[31m购票失败\033[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task</span>(<span class="params">lock</span>):</span><br><span class="line">    search()</span><br><span class="line">    lock.acquire()  <span class="comment"># 将买票这一环节由并发变成了串行，牺牲了运行效率但是保证了数据的安全</span></span><br><span class="line">    get()</span><br><span class="line">    lock.release()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    lock = Lock()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):  <span class="comment"># 模拟并发100个客户端抢票</span></span><br><span class="line">        p=Process(target=task,args=(lock,))</span><br><span class="line">        p.start()</span><br></pre></td></tr></table></figure><p><strong>总结:</strong>加锁可以保证多个进程修改同一块数据时，同一时间只能有一个任务可以进行修改，即串行的修改，没错，速度是慢了，但牺牲了速度却保证了数据安全。</p><p><strong>问题:</strong>虽然可以用文件共享数据显示进程间数据通信但问题是</p><ul><li>效率低(共享数据基于文件，而文件是硬盘上的数据)</li><li>需要自己加锁处理</li></ul><h1 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h1><p>我们知道进程之间数据是相互隔离的，要想实现进程间的通信(IPC机制),就必须借助于一些技术才可以，比如multiprocessing模块中的：队列和管道，这两种方式都是可以实现进程间数据传输的，由于队列是管道+锁的方式实现，所以我们着重研究队列即可</p><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><h3 id="概念介绍"><a href="#概念介绍" class="headerlink" title="概念介绍"></a>概念介绍</h3><p>创建共享的进程队列，Queue是多进程安全的队列，可以使用Queue实现多进程之间的数据传递。</p><p>大白话总结一下就是队列支持多个人从队列的一端放入数据，同样支持多个人从队列的另一端取数据</p><p><img src="7.png" alt="image"></p><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Queue([maxsize]) <span class="comment"># 创建共享的进程队列 队列底层使用管道和锁定实现。</span></span><br><span class="line"><span class="comment"># 参数 ：maxsize是队列中允许的最大项数。如果省略此参数，则无大小限制。</span></span><br></pre></td></tr></table></figure><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Queue</span><br><span class="line">q=Queue(<span class="number">3</span>)  <span class="comment"># 创建一个最大只能容纳3个数据的队列</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">常用方法</span></span><br><span class="line"><span class="string">put ,get ,put_nowait,get_nowait,full,empty</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">q.put(<span class="number">3</span>)  <span class="comment"># 往队列中存放数据</span></span><br><span class="line">q.put(<span class="number">3</span>)</span><br><span class="line">q.put(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">q.put(<span class="number">3</span>)  <span class="comment"># 如果队列已经满了，程序就会停在这里，等待数据被别人取走，再将数据放入队列。如果队列中的数据一直不被取走，程序就会永远停在这里。</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    q.put_nowait(<span class="number">3</span>) <span class="comment"># 可以使用put_nowait，如果队列满了不会阻塞，但是会因为队列满了而报错。</span></span><br><span class="line"><span class="keyword">except</span>:  <span class="comment"># 因此我们可以用一个try语句来处理这个错误。这样程序不会一直阻塞下去，但是会丢掉这个消息。</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;队列已经满了&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 因此，我们再放入数据之前，可以先看一下队列的状态，如果已经满了，就不继续put了。</span></span><br><span class="line"><span class="built_in">print</span>(q.full())  <span class="comment"># 判断队列中数据是否已存放满了</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(q.get())  <span class="comment"># 从队列中获取数据</span></span><br><span class="line"><span class="built_in">print</span>(q.get())</span><br><span class="line"><span class="built_in">print</span>(q.get())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(q.get()) <span class="comment"># 同put方法一样，如果队列已经空了，那么继续取就会出现阻塞。</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    q.get_nowait(<span class="number">3</span>) <span class="comment"># 可以使用get_nowait，如果队列满了不会阻塞，但是会因为没取到值而报错。</span></span><br><span class="line"><span class="keyword">except</span>: <span class="comment"># 因此我们可以用一个try语句来处理这个错误。这样程序不会一直阻塞下去。</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;队列已经空了&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(q.empty())  <span class="comment"># 判断队列中数据是否已经被全部取出</span></span><br></pre></td></tr></table></figure><h3 id="基于队列实现进程间通信"><a href="#基于队列实现进程间通信" class="headerlink" title="基于队列实现进程间通信"></a>基于队列实现进程间通信</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Queue</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">q</span>):</span><br><span class="line">    q.put(<span class="string">&#x27;hello&#x27;</span>)  <span class="comment">#调用主函数中p进程传递过来的进程参数 put函数为向队列中添加一条数据。</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    q = Queue()  <span class="comment"># 创建一个Queue对象</span></span><br><span class="line">    p = Process(target=f, args=(q,)) <span class="comment">#创建一个进程</span></span><br><span class="line">    p.start()</span><br><span class="line">    <span class="built_in">print</span>(q.get())  <span class="comment"># 从队列中获取数据</span></span><br><span class="line">    p.join()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Queue,Process</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">producer</span>(<span class="params">q</span>):</span><br><span class="line">    q.put(<span class="string">&#x27;hello big baby!&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">consumer</span>(<span class="params">q</span>):</span><br><span class="line">    <span class="built_in">print</span>(q.get())</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    q = Queue()</span><br><span class="line">    p = Process(target=producer,args=(q,))</span><br><span class="line">    p.start()</span><br><span class="line">    p1 = Process(target=consumer,args=(q,))</span><br><span class="line">    p1.start()</span><br></pre></td></tr></table></figure><h1 id="生产者消费者模型"><a href="#生产者消费者模型" class="headerlink" title="生产者消费者模型"></a><strong>生产者消费者模型</strong></h1><p>在并发编程中使用生产者和消费者模式能够解决绝大多数并发问题。该模式通过平衡生产线程和消费线程的工作能力来提高程序的整体处理数据的速度。</p><h3 id="什么是生产者消费者模式"><a href="#什么是生产者消费者模式" class="headerlink" title="什么是生产者消费者模式"></a><strong>什么是生产者消费者模式</strong></h3><p>生产者消费者模式是通过一个容器来解决生产者和消费者的强耦合问题。生产者和消费者彼此之间不直接通讯，而通过阻塞队列来进行通讯，所以生产者生产完数据(做包子的)之后不用等待消费者(吃包子的)处理，直接扔给阻塞队列(盘子)，消费者不找生产者要数据，而是直接从阻塞队列里取，阻塞队列就相当于一个缓冲区，平衡了生产者和消费者的处理能力。</p><h3 id="为什么要使用生产者和消费者模式"><a href="#为什么要使用生产者和消费者模式" class="headerlink" title="为什么要使用生产者和消费者模式"></a><strong>为什么要使用生产者和消费者模式</strong></h3><p>在线程世界里，生产者就是生产数据的线程，消费者就是消费数据的线程。在多线程开发当中，如果生产者处理速度很快，而消费者处理速度很慢，那么生产者就必须等待消费者处理完，才能继续生产数据。同样的道理，如果消费者的处理能力大于生产者，那么消费者就必须等待生产者。为了解决这个问题于是引入了生产者和消费者模式。</p><h3 id="基于队列实现生产者消费者模型"><a href="#基于队列实现生产者消费者模型" class="headerlink" title="基于队列实现生产者消费者模型"></a>基于队列实现生产者消费者模型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process,Queue</span><br><span class="line"><span class="keyword">import</span> time,random,os</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">consumer</span>(<span class="params">q</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        res=q.get()</span><br><span class="line">        time.sleep(random.randint(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s 吃 %s&#x27;</span> %(os.getpid(),res))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">producer</span>(<span class="params">q</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        time.sleep(random.randint(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">        res=<span class="string">&#x27;包子%s&#x27;</span> %i</span><br><span class="line">        q.put(res)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s 生产了 %s&#x27;</span> %(os.getpid(),res))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    q=Queue()</span><br><span class="line">    <span class="comment">#生产者们:即厨师们</span></span><br><span class="line">    p1=Process(target=producer,args=(q,))</span><br><span class="line"></span><br><span class="line">    <span class="comment">#消费者们:即吃货们</span></span><br><span class="line">    c1=Process(target=consumer,args=(q,))</span><br><span class="line"></span><br><span class="line">    <span class="comment">#开始</span></span><br><span class="line">    p1.start()</span><br><span class="line">    c1.start()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;主&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><blockquote><p>线程与进程的区别:</p><ol><li>线程共享创建它的进程的地址空间；进程有自己的地址空间。</li><li><p>线程可以直接访问其进程的数据段；进程有自己的父进程数据段副本。</p></li><li><p>线程可以直接与其进程的其他线程通信；进程必须使用进程间通信与同级进程通信。</p></li><li><p>新的线程很容易创建；新流程需要与父流程重复。</p></li><li><p>线程可以对同一进程的线程进行相当大的控制；进程只能对子进程进行控制。</p></li><li><p>主线程的更改（取消、优先级更改等）可能会影响进程的其他线程的行为；对父进程的更改不会影响子进程。</p></li></ol></blockquote><h2 id="一-threading模块介绍"><a href="#一-threading模块介绍" class="headerlink" title="一 threading模块介绍"></a>一 threading模块介绍</h2><p>multiprocess模块的完全模仿了threading模块的接口，二者在使用层面，有很大的相似性，因而不再详细介绍</p><p><a href="https://docs.python.org/3/library/threading.html?highlight=threading#">官网链接：https://docs.python.org/3/library/threading.html?highlight=threading#</a></p><h2 id="二-开启线程的两种方式"><a href="#二-开启线程的两种方式" class="headerlink" title="二 开启线程的两种方式"></a>二 开启线程的两种方式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#方式一</span></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sayhi</span>(<span class="params">name</span>):</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s say hello&#x27;</span> %name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    t=Thread(target=sayhi,args=(<span class="string">&#x27;egon&#x27;</span>,))</span><br><span class="line">    t.start()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;主线程&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">#方式二</span></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sayhi</span>(<span class="title class_ inherited__">Thread</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.name=name</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s say hello&#x27;</span> % self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    t = Sayhi(<span class="string">&#x27;egon&#x27;</span>)</span><br><span class="line">    t.start()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;主线程&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="8.png" alt="img"></p><h2 id="三-在一个进程下开启多个线程与在一个进程下开启多个子进程的区别"><a href="#三-在一个进程下开启多个线程与在一个进程下开启多个子进程的区别" class="headerlink" title="三 在一个进程下开启多个线程与在一个进程下开启多个子进程的区别"></a>三 在一个进程下开启多个线程与在一个进程下开启多个子进程的区别</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 谁开启的速度快</span></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">work</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment">#在主进程下开启线程</span></span><br><span class="line">    t=Thread(target=work)</span><br><span class="line">    t.start()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;主线程/主进程&#x27;</span>)</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    打印结果:</span></span><br><span class="line"><span class="string">    hello</span></span><br><span class="line"><span class="string">    主线程/主进程</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#在主进程下开启子进程</span></span><br><span class="line">    t=Process(target=work)</span><br><span class="line">    t.start()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;主线程/主进程&#x27;</span>)</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    打印结果:</span></span><br><span class="line"><span class="string">    主线程/主进程</span></span><br><span class="line"><span class="string">    hello</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 瞅一瞅pid</span></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">work</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>,os.getpid())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment">#part1:在主进程下开启多个线程,每个线程都跟主进程的pid一样</span></span><br><span class="line">    t1=Thread(target=work)</span><br><span class="line">    t2=Thread(target=work)</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;主线程/主进程pid&#x27;</span>,os.getpid())</span><br><span class="line"></span><br><span class="line">    <span class="comment">#part2:开多个进程,每个进程都有不同的pid</span></span><br><span class="line">    p1=Process(target=work)</span><br><span class="line">    p2=Process(target=work)</span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;主线程/主进程pid&#x27;</span>,os.getpid())</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 同一进程内的线程共享该进程的数据？</span></span><br><span class="line"><span class="keyword">from</span>  threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">work</span>():</span><br><span class="line">    <span class="keyword">global</span> n</span><br><span class="line">    n=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># n=100</span></span><br><span class="line">    <span class="comment"># p=Process(target=work)</span></span><br><span class="line">    <span class="comment"># p.start()</span></span><br><span class="line">    <span class="comment"># p.join()</span></span><br><span class="line">    <span class="comment"># print(&#x27;主&#x27;,n) #毫无疑问子进程p已经将自己的全局的n改成了0,但改的仅仅是它自己的,查看父进程的n仍然为100</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    n=<span class="number">1</span></span><br><span class="line">    t=Thread(target=work)</span><br><span class="line">    t.start()</span><br><span class="line">    t.join()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;主&#x27;</span>,n) <span class="comment">#查看结果为0,因为同一进程内的线程之间共享进程内的数据</span></span><br></pre></td></tr></table></figure><h2 id="四-多线程并发的socket"><a href="#四-多线程并发的socket" class="headerlink" title="四 多线程并发的socket"></a>四 多线程并发的socket</h2><p>服务端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#_*_coding:utf-8_*_</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">s.bind((<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8080</span>))</span><br><span class="line">s.listen(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">action</span>(<span class="params">conn</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data=conn.recv(<span class="number">1024</span>)</span><br><span class="line">        <span class="built_in">print</span>(data)</span><br><span class="line">        conn.send(data.upper())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        conn,addr=s.accept()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        p=threading.Thread(target=action,args=(conn,))</span><br><span class="line">        p.start()</span><br></pre></td></tr></table></figure><p>客户端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#_*_coding:utf-8_*_</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">s.connect((<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8080</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    msg=<span class="built_in">input</span>(<span class="string">&#x27;&gt;&gt;: &#x27;</span>).strip()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> msg:<span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    s.send(msg.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    data=s.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure><p>练习二：三个任务，一个接收用户输入，一个将用户输入的内容格式化成大写，一个将格式化后的结果存入文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line">msg_l=[]</span><br><span class="line">format_l=[]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">talk</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        msg=<span class="built_in">input</span>(<span class="string">&#x27;&gt;&gt;: &#x27;</span>).strip()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> msg:<span class="keyword">continue</span></span><br><span class="line">        msg_l.append(msg)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">format_msg</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> msg_l:</span><br><span class="line">            res=msg_l.pop()</span><br><span class="line">            format_l.append(res.upper())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> format_l:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;db.txt&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                res=format_l.pop()</span><br><span class="line">                f.write(<span class="string">&#x27;%s\n&#x27;</span> %res)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    t1=Thread(target=talk)</span><br><span class="line">    t2=Thread(target=format_msg)</span><br><span class="line">    t3=Thread(target=save)</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    t3.start()</span><br></pre></td></tr></table></figure><h2 id="五-线程相关的其他方法"><a href="#五-线程相关的其他方法" class="headerlink" title="五 线程相关的其他方法"></a>五 线程相关的其他方法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Thread实例对象的方法</span><br><span class="line">  # isAlive(): 返回线程是否活动的。</span><br><span class="line">  # getName(): 返回线程名。</span><br><span class="line">  # setName(): 设置线程名。</span><br><span class="line"></span><br><span class="line">threading模块提供的一些方法：</span><br><span class="line">  # threading.currentThread(): 返回当前的线程变量。</span><br><span class="line">  # threading.enumerate(): 返回一个包含正在运行的线程的list。正在运行指线程启动后、结束前，不包括启动前和终止后的线程。</span><br><span class="line">  # threading.activeCount(): 返回正在运行的线程数量，与len(threading.enumerate())有相同的结果。</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">work</span>():</span><br><span class="line">    <span class="keyword">import</span> time</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(threading.current_thread().getName())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment">#在主进程下开启线程</span></span><br><span class="line">    t=Thread(target=work)</span><br><span class="line">    t.start()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(threading.current_thread().getName())</span><br><span class="line">    <span class="built_in">print</span>(threading.current_thread()) <span class="comment">#主线程</span></span><br><span class="line">    <span class="built_in">print</span>(threading.<span class="built_in">enumerate</span>()) <span class="comment">#连同主线程在内有两个运行的线程</span></span><br><span class="line">    <span class="built_in">print</span>(threading.active_count())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;主线程/主进程&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    打印结果:</span></span><br><span class="line"><span class="string">    MainThread</span></span><br><span class="line"><span class="string">    &lt;_MainThread(MainThread, started 140735268892672)&gt;</span></span><br><span class="line"><span class="string">    [&lt;_MainThread(MainThread, started 140735268892672)&gt;, &lt;Thread(Thread-1, started 123145307557888)&gt;]</span></span><br><span class="line"><span class="string">    主线程/主进程</span></span><br><span class="line"><span class="string">    Thread-1</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>主线程等待子线程结束</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sayhi</span>(<span class="params">name</span>):</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s say hello&#x27;</span> %name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    t=Thread(target=sayhi,args=(<span class="string">&#x27;egon&#x27;</span>,))</span><br><span class="line">    t.start()</span><br><span class="line">    t.join()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;主线程&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(t.is_alive())</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    egon say hello</span></span><br><span class="line"><span class="string">    主线程</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="六-守护线程"><a href="#六-守护线程" class="headerlink" title="六 守护线程"></a>六 守护线程</h2><p><strong>无论是进程还是线程，都遵循：守护xxx会等待主xxx运行完毕后被销毁</strong></p><p><strong>需要强调的是：运行完毕并非终止运行</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#1.对主进程来说，运行完毕指的是主进程代码运行完毕</span><br><span class="line"></span><br><span class="line">#2.对主线程来说，运行完毕指的是主线程所在的进程内所有非守护线程统统运行完毕，主线程才算运行完毕</span><br></pre></td></tr></table></figure><p><strong>详细解释：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#1 主进程在其代码结束后就已经算运行完毕了（守护进程在此时就被回收）,然后主进程会一直等非守护的子进程都运行完毕后回收子进程的资源(否则会产生僵尸进程)，才会结束，</span><br><span class="line"></span><br><span class="line">#2 主线程在其他非守护线程运行完毕后才算运行完毕（守护线程在此时就被回收）。因为主线程的结束意味着进程的结束，进程整体的资源都将被回收，而进程必须保证非守护线程都运行完毕后才能结束。</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sayhi</span>(<span class="params">name</span>):</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s say hello&#x27;</span> %name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    t=Thread(target=sayhi,args=(<span class="string">&#x27;egon&#x27;</span>,))</span><br><span class="line">    t.setDaemon(<span class="literal">True</span>) <span class="comment">#必须在t.start()之前设置</span></span><br><span class="line">    t.start()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;主线程&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(t.is_alive())</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    主线程</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 迷惑人的列子</span></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">123</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;end123&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bar</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">456</span>)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;end456&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t1=Thread(target=foo)</span><br><span class="line">t2=Thread(target=bar)</span><br><span class="line"></span><br><span class="line">t1.daemon=<span class="literal">True</span></span><br><span class="line">t1.start()</span><br><span class="line">t2.start()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;main-------&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="七-Python-GIL-Global-Interpreter-Lock"><a href="#七-Python-GIL-Global-Interpreter-Lock" class="headerlink" title="七  Python GIL(Global Interpreter Lock)"></a>七  Python GIL(Global Interpreter Lock)</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">定义：</span><br><span class="line">In CPython, the global interpreter lock, or GIL, is a mutex that prevents multiple </span><br><span class="line">native threads from executing Python bytecodes at once. This lock is necessary mainly </span><br><span class="line">because CPython’s memory management is not thread-safe. (However, since the GIL </span><br><span class="line">exists, other features have grown to depend on the guarantees that it enforces.)</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">结论：在Cpython解释器中，同一个进程下开启的多线程，同一时刻只能有一个线程执行，无法利用多核优势</span><br></pre></td></tr></table></figure><p>首先需要明确的一点是<code>GIL</code>并不是Python的特性，它是在实现Python解析器(CPython)时所引入的一个概念。就好比C++是一套语言（语法）标准，但是可以用不同的编译器来编译成可执行代码。有名的编译器例如GCC，INTEL C++，Visual  C++等。Python也一样，同样一段代码可以通过CPython，PyPy，Psyco等不同的Python执行环境来执行。像其中的JPython就没有GIL。然而因为CPython是大部分环境下默认的Python执行环境。所以在很多人的概念里CPython就是Python，也就想当然的把<code>GIL</code>归结为Python语言的缺陷。所以这里要先明确一点：GIL并不是Python的特性，Python完全可以不依赖于GIL</p><p><a href="http://www.dabeaz.com/python/UnderstandingGIL.pdf">这篇文章透彻的剖析了GIL对python多线程的影响，强烈推荐看一下：http://www.dabeaz.com/python/UnderstandingGIL.pdf </a></p><h3 id="GLA介绍"><a href="#GLA介绍" class="headerlink" title="GLA介绍"></a>GLA介绍</h3><p>GIL本质就是一把互斥锁，既然是互斥锁，所有互斥锁的本质都一样，都是将并发运行变成串行，以此来控制同一时间内共享数据只能被一个任务所修改，进而保证数据安全。</p><p>可以肯定的一点是：保护不同的数据的安全，就应该加不同的锁。</p><p>要想了解GIL，首先确定一点：每次执行python程序，都会产生一个独立的进程。例如python test.py，python aaa.py，python bbb.py会产生3个不同的python进程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 验证python test.py只会产生一个进程</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">#验证python test.py只会产生一个进程</span></span><br><span class="line"><span class="string">#test.py内容</span></span><br><span class="line"><span class="string">import os,time</span></span><br><span class="line"><span class="string">print(os.getpid())</span></span><br><span class="line"><span class="string">time.sleep(1000)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">python3 test.py </span><br><span class="line"><span class="comment">#在windows下</span></span><br><span class="line">tasklist |findstr python</span><br><span class="line"><span class="comment">#在linux下</span></span><br><span class="line">ps aux |grep python</span><br></pre></td></tr></table></figure><p>在一个python的进程内，不仅有test.py的主线程或者由该主线程开启的其他线程，还有解释器开启的垃圾回收等解释器级别的线程，总之，所有线程都运行在这一个进程内，毫无疑问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#1 所有数据都是共享的，这其中，代码作为一种数据也是被所有线程共享的（test.py的所有代码以及Cpython解释器的所有代码）</span><br><span class="line">例如：test.py定义一个函数work（代码内容如下图），在进程内所有线程都能访问到work的代码，于是我们可以开启三个线程然后target都指向该代码，能访问到意味着就是可以执行。</span><br><span class="line"></span><br><span class="line">#2 所有线程的任务，都需要将任务的代码当做参数传给解释器的代码去执行，即所有的线程要想运行自己的任务，首先需要解决的是能够访问到解释器的代码。</span><br></pre></td></tr></table></figure><p>综上：</p><p>如果多个线程的target=work，那么执行流程是</p><p>多个线程先访问到解释器的代码，即拿到执行权限，然后将target的代码交给解释器的代码去执行</p><p>解释器的代码是所有线程共享的，所以垃圾回收线程也可能访问到解释器的代码而去执行，这就导致了一个问题:对于同一个数据100，可能线程1执行x=100的同时，而垃圾回收执行的是回收100的操作，解决这种问题没有什么高明的方法，就是加锁处理，如下图的GIL，保证python解释器同一时间只能执行一个任务的代码</p><p><img src="91.png" alt="img"></p><h3 id="GIL与Lock"><a href="#GIL与Lock" class="headerlink" title="GIL与Lock"></a>GIL与Lock</h3><p><strong>GIL保护的是解释器级的数据，保护用户自己的数据则需要自己加锁处理，如下图</strong></p><p><img src="92.png" alt="img"></p><h3 id="GIL与多线程"><a href="#GIL与多线程" class="headerlink" title="GIL与多线程"></a>GIL与多线程</h3><p>有了GIL的存在，同一时刻同一进程中只有一个线程被执行</p><p>听到这里，有的同学立马质问：进程可以利用多核，但是开销大，而python的多线程开销小，但却无法利用多核优势，也就是说python没用了，php才是最牛逼的语言？</p><p>别着急啊，老娘还没讲完呢。</p><p>要解决这个问题，我们需要在几个点上达成一致：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#1. cpu到底是用来做计算的，还是用来做I/O的？</span><br><span class="line"></span><br><span class="line">#2. 多cpu，意味着可以有多个核并行完成计算，所以多核提升的是计算性能</span><br><span class="line"></span><br><span class="line">#3. 每个cpu一旦遇到I/O阻塞，仍然需要等待，所以多核对I/O操作没什么用处 </span><br></pre></td></tr></table></figure><p>一个工人相当于cpu，此时计算相当于工人在干活，I/O阻塞相当于为工人干活提供所需原材料的过程，工人干活的过程中如果没有原材料了，则工人干活的过程需要停止，直到等待原材料的到来。</p><p>如果你的工厂干的大多数任务都要有准备原材料的过程（I/O密集型），那么你有再多的工人，意义也不大，还不如一个人，在等材料的过程中让工人去干别的活，</p><p>反过来讲，如果你的工厂原材料都齐全，那当然是工人越多，效率越高</p><p>结论：</p><p>　　对计算来说，cpu越多越好，但是对于I/O来说，再多的cpu也没用</p><p>　　当然对运行一个程序来说，随着cpu的增多执行效率肯定会有所提高（不管提高幅度多大，总会有所提高），这是因为一个程序基本上不会是纯计算或者纯I/O，所以我们只能相对的去看一个程序到底是计算密集型还是I/O密集型，从而进一步分析python的多线程到底有无用武之地</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#分析：</span><br><span class="line">我们有四个任务需要处理，处理方式肯定是要玩出并发的效果，解决方案可以是：</span><br><span class="line">方案一：开启四个进程</span><br><span class="line">方案二：一个进程下，开启四个线程</span><br><span class="line"></span><br><span class="line">#单核情况下，分析结果: </span><br><span class="line">　　如果四个任务是计算密集型，没有多核来并行计算，方案一徒增了创建进程的开销，方案二胜</span><br><span class="line">　　如果四个任务是I/O密集型，方案一创建进程的开销大，且进程的切换速度远不如线程，方案二胜</span><br><span class="line"></span><br><span class="line">#多核情况下，分析结果：</span><br><span class="line">　　如果四个任务是计算密集型，多核意味着并行计算，在python中一个进程中同一时刻只有一个线程执行用不上多核，方案一胜</span><br><span class="line">　　如果四个任务是I/O密集型，再多的核也解决不了I/O问题，方案二胜</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">#结论：现在的计算机基本上都是多核，python对于计算密集型的任务开多线程的效率并不能带来多大性能上的提升，甚至不如串行(没有大量切换)，但是，对于IO密集型的任务效率还是有显著提升的。</span><br></pre></td></tr></table></figure><h3 id="多线程性能测试"><a href="#多线程性能测试" class="headerlink" title="多线程性能测试"></a>多线程性能测试</h3><p>应用：</p><p>多线程用于IO密集型，如socket，爬虫，web<br>多进程用于计算密集型，如金融分析</p><p>计算密集型：多进程效率高</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> os,time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">work</span>():</span><br><span class="line">    res=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100000000</span>):</span><br><span class="line">        res*=i</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    l=[]</span><br><span class="line">    <span class="built_in">print</span>(os.cpu_count()) <span class="comment">#本机为4核</span></span><br><span class="line">    start=time.time()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        p=Process(target=work) <span class="comment">#耗时5s多</span></span><br><span class="line">        p=Thread(target=work) <span class="comment">#耗时18s多</span></span><br><span class="line">        l.append(p)</span><br><span class="line">        p.start()</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> l:</span><br><span class="line">        p.join()</span><br><span class="line">    stop=time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;run time is %s&#x27;</span> %(stop-start))</span><br></pre></td></tr></table></figure><p>I/O密集型：多线程效率高</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> os,time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">work</span>():</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;===&gt;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    l=[]</span><br><span class="line">    <span class="built_in">print</span>(os.cpu_count()) <span class="comment">#本机为4核</span></span><br><span class="line">    start=time.time()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">400</span>):</span><br><span class="line">        <span class="comment"># p=Process(target=work) #耗时12s多,大部分时间耗费在创建进程上</span></span><br><span class="line">        p=Thread(target=work) <span class="comment">#耗时2s多</span></span><br><span class="line">        l.append(p)</span><br><span class="line">        p.start()</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> l:</span><br><span class="line">        p.join()</span><br><span class="line">    stop=time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;run time is %s&#x27;</span> %(stop-start))</span><br></pre></td></tr></table></figure><h2 id="八-同步锁"><a href="#八-同步锁" class="headerlink" title="八 同步锁"></a>八 同步锁</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">三个需要注意的点：</span><br><span class="line">#1.线程抢的是GIL锁，GIL锁相当于执行权限，拿到执行权限后才能拿到互斥锁Lock，其他线程也可以抢到GIL，但如果发现Lock仍然没有被释放则阻塞，即便是拿到执行权限GIL也要立刻交出来</span><br><span class="line"></span><br><span class="line">#2.join是等待所有，即整体串行，而锁只是锁住修改共享数据的部分，即部分串行，要想保证数据安全的根本原理在于让并发变成串行，join与互斥锁都可以实现，毫无疑问，互斥锁的部分串行效率要更高</span><br><span class="line"></span><br><span class="line">#3. 一定要看本小节最后的GIL与互斥锁的经典分析</span><br></pre></td></tr></table></figure><p><strong>GIL VS Lock</strong></p><p>  <strong>机智的同学可能会问到这个问题，就是既然你之前说过了，Python已经有一个GIL来保证同一时间只能有一个线程来执行了，为什么这里还需要lock?</strong> </p><p>　<strong>首先我们需要达成共识：锁的目的是为了保护共享的数据，同一时间只能有一个线程来修改共享的数据</strong></p><p>  <strong>然后，我们可以得出结论：保护不同的数据就应该加不同的锁。</strong></p><p>　<strong>最后，问题就很明朗了，GIL 与Lock是两把锁，保护的数据不一样，前者是解释器级别的（当然保护的就是解释器级别的数据，比如垃圾回收的数据），后者是保护用户自己开发的应用程序的数据，很明显GIL不负责这件事，只能用户自定义加锁处理，即Lock</strong></p><p><strong>过程分析：所有线程抢的是GIL锁，或者说所有线程抢的是执行权限</strong></p><p>　　<strong>线程1抢到GIL锁，拿到执行权限，开始执行，然后加了一把Lock，还没有执行完毕，即线程1还未释放Lock，有可能线程2抢到GIL锁，开始执行，执行过程中发现Lock还没有被线程1释放，于是线程2进入阻塞，被夺走执行权限，有可能线程1拿到GIL，然后正常执行到释放Lock。。。这就导致了串行运行的效果</strong></p><p>　　<strong>既然是串行，那我们执行</strong></p><p>　　<strong>t1.start()</strong></p><p>　　<strong>t1.join</strong></p><p>　　<strong>t2.start()</strong></p><p>　　<strong>t2.join()</strong></p><p>　　<strong>这也是串行执行啊，为何还要加Lock呢，需知join是等待t1所有的代码执行完，相当于锁住了t1的所有代码，而Lock只是锁住一部分操作共享数据的代码。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">因为Python解释器帮你自动定期进行内存回收，你可以理解为python解释器里有一个独立的线程，每过一段时间它起wake up做一次全局轮询看看哪些内存数据是可以被清空的，此时你自己的程序 里的线程和 py解释器自己的线程是并发运行的，假设你的线程删除了一个变量，py解释器的垃圾回收线程在清空这个变量的过程中的clearing时刻，可能一个其它线程正好又重新给这个还没来及得清空的内存空间赋值了，结果就有可能新赋值的数据被删除了，为了解决类似的问题，python解释器简单粗暴的加了锁，即当一个线程运行时，其它人都不能动，这样就解决了上述的问题，  这可以说是Python早期版本的遗留问题。　</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">from threading import Thread</span><br><span class="line">import os,time</span><br><span class="line">def work():</span><br><span class="line">    global n</span><br><span class="line">    temp=n</span><br><span class="line">    time.sleep(0.1)</span><br><span class="line">    n=temp-1</span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    n=100</span><br><span class="line">    l=[]</span><br><span class="line">    for i in range(100):</span><br><span class="line">        p=Thread(target=work)</span><br><span class="line">        l.append(p)</span><br><span class="line">        p.start()</span><br><span class="line">    for p in l:</span><br><span class="line">        p.join()</span><br><span class="line"></span><br><span class="line">    print(n) #结果可能为99</span><br></pre></td></tr></table></figure><p><strong>锁通常被用来实现对共享资源的同步访问。为每一个共享资源创建一个Lock对象，当你需要访问该资源时，调用acquire方法来获取锁对象（如果其它线程已经获得了该锁，则当前线程需等待其被释放），待资源访问完后，再调用release方法释放锁：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">R=threading.Lock()</span><br><span class="line"></span><br><span class="line">R.acquire()</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">对公共数据的操作</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">R.release()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread,Lock</span><br><span class="line"><span class="keyword">import</span> os,time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">work</span>():</span><br><span class="line">    <span class="keyword">global</span> n</span><br><span class="line">    lock.acquire()</span><br><span class="line">    temp=n</span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    n=temp-<span class="number">1</span></span><br><span class="line">    lock.release()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    lock=Lock()</span><br><span class="line">    n=<span class="number">100</span></span><br><span class="line">    l=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        p=Thread(target=work)</span><br><span class="line">        l.append(p)</span><br><span class="line">        p.start()</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> l:</span><br><span class="line">        p.join()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(n) <span class="comment">#结果肯定为0，由原来的并发执行变成串行，牺牲了执行效率保证了数据安全</span></span><br></pre></td></tr></table></figure><p>GIL锁与互斥锁综合分析（重点！！！）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">分析：</span><br><span class="line">　　#1.100个线程去抢GIL锁，即抢执行权限</span><br><span class="line">     #2. 肯定有一个线程先抢到GIL（暂且称为线程1），然后开始执行，一旦执行就会拿到lock.acquire()</span><br><span class="line">     #3. 极有可能线程1还未运行完毕，就有另外一个线程2抢到GIL，然后开始运行，但线程2发现互斥锁lock还未被线程1释放，于是阻塞，被迫交出执行权限，即释放GIL</span><br><span class="line">    #4.直到线程1重新抢到GIL，开始从上次暂停的位置继续执行，直到正常释放互斥锁lock，然后其他的线程再重复2 3 4的过程</span><br></pre></td></tr></table></figure><p>互斥锁与join的区别（重点！！！）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#不加锁:并发执行,速度快,数据不安全</span></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> current_thread,Thread,Lock</span><br><span class="line"><span class="keyword">import</span> os,time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task</span>():</span><br><span class="line">    <span class="keyword">global</span> n</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s is running&#x27;</span> %current_thread().getName())</span><br><span class="line">    temp=n</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    n=temp-<span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    n=<span class="number">100</span></span><br><span class="line">    lock=Lock()</span><br><span class="line">    threads=[]</span><br><span class="line">    start_time=time.time()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        t=Thread(target=task)</span><br><span class="line">        threads.append(t)</span><br><span class="line">        t.start()</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">        t.join()</span><br><span class="line"></span><br><span class="line">    stop_time=time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;主:%s n:%s&#x27;</span> %(stop_time-start_time,n))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Thread-1 is running</span></span><br><span class="line"><span class="string">Thread-2 is running</span></span><br><span class="line"><span class="string">......</span></span><br><span class="line"><span class="string">Thread-100 is running</span></span><br><span class="line"><span class="string">主:0.5216062068939209 n:99</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#不加锁:未加锁部分并发执行,加锁部分串行执行,速度慢,数据安全</span></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> current_thread,Thread,Lock</span><br><span class="line"><span class="keyword">import</span> os,time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task</span>():</span><br><span class="line">    <span class="comment">#未加锁的代码并发运行</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s start to run&#x27;</span> %current_thread().getName())</span><br><span class="line">    <span class="keyword">global</span> n</span><br><span class="line">    <span class="comment">#加锁的代码串行运行</span></span><br><span class="line">    lock.acquire()</span><br><span class="line">    temp=n</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    n=temp-<span class="number">1</span></span><br><span class="line">    lock.release()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    n=<span class="number">100</span></span><br><span class="line">    lock=Lock()</span><br><span class="line">    threads=[]</span><br><span class="line">    start_time=time.time()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        t=Thread(target=task)</span><br><span class="line">        threads.append(t)</span><br><span class="line">        t.start()</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">        t.join()</span><br><span class="line">    stop_time=time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;主:%s n:%s&#x27;</span> %(stop_time-start_time,n))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Thread-1 is running</span></span><br><span class="line"><span class="string">Thread-2 is running</span></span><br><span class="line"><span class="string">......</span></span><br><span class="line"><span class="string">Thread-100 is running</span></span><br><span class="line"><span class="string">主:53.294203758239746 n:0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#有的同学可能有疑问:既然加锁会让运行变成串行,那么我在start之后立即使用join,就不用加锁了啊,也是串行的效果啊</span></span><br><span class="line"><span class="comment">#没错:在start之后立刻使用jion,肯定会将100个任务的执行变成串行,毫无疑问,最终n的结果也肯定是0,是安全的,但问题是</span></span><br><span class="line"><span class="comment">#start后立即join:任务内的所有代码都是串行执行的,而加锁,只是加锁的部分即修改共享数据的部分是串行的</span></span><br><span class="line"><span class="comment">#单从保证数据安全方面,二者都可以实现,但很明显是加锁的效率更高.</span></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> current_thread,Thread,Lock</span><br><span class="line"><span class="keyword">import</span> os,time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task</span>():</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s start to run&#x27;</span> %current_thread().getName())</span><br><span class="line">    <span class="keyword">global</span> n</span><br><span class="line">    temp=n</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    n=temp-<span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    n=<span class="number">100</span></span><br><span class="line">    lock=Lock()</span><br><span class="line">    start_time=time.time()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        t=Thread(target=task)</span><br><span class="line">        t.start()</span><br><span class="line">        t.join()</span><br><span class="line">    stop_time=time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;主:%s n:%s&#x27;</span> %(stop_time-start_time,n))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Thread-1 start to run</span></span><br><span class="line"><span class="string">Thread-2 start to run</span></span><br><span class="line"><span class="string">......</span></span><br><span class="line"><span class="string">Thread-100 start to run</span></span><br><span class="line"><span class="string">主:350.6937336921692 n:0 #耗时是多么的恐怖</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="九-死锁现象与递归锁"><a href="#九-死锁现象与递归锁" class="headerlink" title="九 死锁现象与递归锁"></a>九 死锁现象与递归锁</h2><p>进程也有死锁与递归锁，在进程那里忘记说了，放到这里一切说了额</p><p>所谓死锁： 是指两个或两个以上的进程或线程在执行过程中，因争夺资源而造成的一种互相等待的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程，如下就是死锁</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread,Lock</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">mutexA=Lock()</span><br><span class="line">mutexB=Lock()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span>(<span class="title class_ inherited__">Thread</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        self.func1()</span><br><span class="line">        self.func2()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func1</span>(<span class="params">self</span>):</span><br><span class="line">        mutexA.acquire()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\033[41m%s 拿到A锁\033[0m&#x27;</span> %self.name)</span><br><span class="line"></span><br><span class="line">        mutexB.acquire()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\033[42m%s 拿到B锁\033[0m&#x27;</span> %self.name)</span><br><span class="line">        mutexB.release()</span><br><span class="line"></span><br><span class="line">        mutexA.release()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func2</span>(<span class="params">self</span>):</span><br><span class="line">        mutexB.acquire()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\033[43m%s 拿到B锁\033[0m&#x27;</span> %self.name)</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        mutexA.acquire()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\033[44m%s 拿到A锁\033[0m&#x27;</span> %self.name)</span><br><span class="line">        mutexA.release()</span><br><span class="line"></span><br><span class="line">        mutexB.release()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        t=MyThread()</span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Thread-1 拿到A锁</span></span><br><span class="line"><span class="string">Thread-1 拿到B锁</span></span><br><span class="line"><span class="string">Thread-1 拿到B锁</span></span><br><span class="line"><span class="string">Thread-2 拿到A锁</span></span><br><span class="line"><span class="string">然后就卡住，死锁了</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>解决方法，递归锁，在Python中为了支持在同一线程中多次请求同一资源，python提供了可重入锁RLock。</p><p>这个RLock内部维护着一个Lock和一个counter变量，counter记录了acquire的次数，从而使得资源可以被多次require。直到一个线程所有的acquire都被release，其他的线程才能获得资源。上面的例子如果使用RLock代替Lock，则不会发生死锁：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mutexA=mutexB=threading.RLock() <span class="comment">#一个线程拿到锁，counter加1,该线程内又碰到加锁的情况，则counter继续加1，这期间所有其他线程都只能等待，等待该线程释放所有锁，即counter递减到0为止</span></span><br></pre></td></tr></table></figure><h2 id="十-信号量Semaphore"><a href="#十-信号量Semaphore" class="headerlink" title="十 信号量Semaphore"></a>十 信号量Semaphore</h2><p>同进程的一样</p><p>Semaphore管理一个内置的计数器，<br>每当调用acquire()时内置计数器-1；<br>调用release() 时内置计数器+1；<br>计数器不能小于0；当计数器为0时，acquire()将阻塞线程直到其他线程调用release()。</p><p>实例：(同时只有5个线程可以获得semaphore,即可以限制最大连接数为5)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread,Semaphore</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># def func():</span></span><br><span class="line"><span class="comment">#     if sm.acquire():</span></span><br><span class="line"><span class="comment">#         print (threading.currentThread().getName() + &#x27; get semaphore&#x27;)</span></span><br><span class="line"><span class="comment">#         time.sleep(2)</span></span><br><span class="line"><span class="comment">#         sm.release()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    sm.acquire()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s get sm&#x27;</span> %threading.current_thread().getName())</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    sm.release()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    sm=Semaphore(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">23</span>):</span><br><span class="line">        t=Thread(target=func)</span><br><span class="line">        t.start()</span><br></pre></td></tr></table></figure><p><strong>与进程池是完全不同的概念，进程池Pool(4)，最大只能产生4个进程，而且从头到尾都只是这四个进程，不会产生新的，而信号量是产生一堆线程/进程</strong></p><p><a href="http://url.cn/5DMsS9r">互斥锁与信号量推荐博客：http://url.cn/5DMsS9r</a></p><h2 id="十一-Event"><a href="#十一-Event" class="headerlink" title="十一 Event"></a>十一 Event</h2><p>同进程的一样</p><p>线程的一个关键特性是每个线程都是独立运行且状态不可预测。如果程序中的其  他线程需要通过判断某个线程的状态来确定自己下一步的操作,这时线程同步问题就会变得非常棘手。为了解决这些问题,我们需要使用threading库中的Event对象。 对象包含一个可由线程设置的信号标志,它允许线程等待某些事件的发生。在  初始情况下,Event对象中的信号标志被设置为假。如果有线程等待一个Event对象,  而这个Event对象的标志为假,那么这个线程将会被一直阻塞直至该标志为真。一个线程如果将一个Event对象的信号标志设置为真,它将唤醒所有等待这个Event对象的线程。如果一个线程等待一个已经被设置为真的Event对象,那么它将忽略这个事件, 继续执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">event.isSet()：返回event的状态值；</span><br><span class="line"></span><br><span class="line">event.wait()：如果 event.isSet()==<span class="literal">False</span>将阻塞线程；</span><br><span class="line"></span><br><span class="line">event.<span class="built_in">set</span>()： 设置event的状态值为<span class="literal">True</span>，所有阻塞池的线程激活进入就绪状态， 等待操作系统调度；</span><br><span class="line"></span><br><span class="line">event.clear()：恢复event的状态值为<span class="literal">False</span>。</span><br></pre></td></tr></table></figure><p><img src="10.png" alt="img"></p><p>例如，有多个工作线程尝试链接MySQL，我们想要在链接前确保MySQL服务正常才让那些工作线程去连接MySQL服务器，如果连接不成功，都会去尝试重新连接。那么我们就可以采用threading.Event机制来协调各个工作线程的连接操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Event,Thread,current_thread</span><br><span class="line"></span><br><span class="line">e=Event()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_mysql</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;正则检测mysql&#x27;</span>,e.is_set())</span><br><span class="line">    <span class="keyword">import</span> time</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    e.<span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">conn_mysql</span>():</span><br><span class="line">    count=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> count &lt; <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&lt;%s&gt;第%s次尝试链接&#x27;</span> % (current_thread().getName(), count))</span><br><span class="line">        e.wait(<span class="number">0.5</span>)</span><br><span class="line">        <span class="keyword">if</span> e.is_set():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;&lt;%s&gt; 链接成功&#x27;</span> % current_thread().getName())</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        count+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># raise TimeoutError(&quot;链接超时&quot;)</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&lt;%s&gt; 链接超时&quot;</span> % current_thread().getName())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    t1=Thread(target=check_mysql)</span><br><span class="line">    t2=Thread(target=conn_mysql)</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Event,Thread,current_thread</span><br><span class="line"></span><br><span class="line">e=Event()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f1</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        e.clear()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;红灯亮,请等待2秒&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        e.<span class="built_in">set</span>()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;绿灯亮,持续2秒&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f2</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> e.is_set():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;%s 过马路&#x27;</span> %current_thread().getName())</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;%s 等待&quot;</span> % current_thread().getName())</span><br><span class="line">            e.wait()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    t1=Thread(target=f1)</span><br><span class="line">    t2=Thread(target=f2)</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 红绿灯</span></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Event,Thread,current_thread</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">e = Event()  <span class="comment"># 全局变量 = False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task1</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        e.clear()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;红灯亮&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        e.<span class="built_in">set</span>()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;绿灯亮&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task2</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> e.is_set():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;%s 走你&#x27;</span> %current_thread().name)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;%s 等灯&quot;</span> %current_thread().name)</span><br><span class="line">            e.wait()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    Thread(target=task1).start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        time.sleep(random.randint(<span class="number">1</span>,<span class="number">5</span>))</span><br><span class="line">        Thread(target=task2).start()</span><br></pre></td></tr></table></figure><h2 id="十二-条件Condition（了解）"><a href="#十二-条件Condition（了解）" class="headerlink" title="十二 条件Condition（了解）"></a>十二 条件Condition（了解）</h2><p>使得线程等待，只有满足某条件时，才释放n个线程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">n</span>):</span><br><span class="line">    con.acquire()</span><br><span class="line">    con.wait()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;run the thread: %s&quot;</span> %n)</span><br><span class="line">    con.release()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"> </span><br><span class="line">    con = threading.Condition()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        t = threading.Thread(target=run, args=(i,))</span><br><span class="line">        t.start()</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        inp = <span class="built_in">input</span>(<span class="string">&#x27;&gt;&gt;&gt;&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> inp == <span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        con.acquire()</span><br><span class="line">        con.notify(<span class="built_in">int</span>(inp))</span><br><span class="line">        con.release()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">condition_func</span>():</span><br><span class="line"></span><br><span class="line">    ret = <span class="literal">False</span></span><br><span class="line">    inp = <span class="built_in">input</span>(<span class="string">&#x27;&gt;&gt;&gt;&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> inp == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">        ret = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">n</span>):</span><br><span class="line">    con.acquire()</span><br><span class="line">    con.wait_for(condition_func)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;run the thread: %s&quot;</span> %n)</span><br><span class="line">    con.release()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    con = threading.Condition()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        t = threading.Thread(target=run, args=(i,))</span><br><span class="line">        t.start()</span><br></pre></td></tr></table></figure><h2 id="十三-定时器"><a href="#十三-定时器" class="headerlink" title="十三 定时器"></a>十三 定时器</h2><p><strong>定时器，指定n秒后执行某操作</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Timer</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello, world&quot;</span>)</span><br><span class="line"> </span><br><span class="line">t = Timer(<span class="number">1</span>, hello)</span><br><span class="line">t.start()  <span class="comment"># after 1 seconds, &quot;hello, world&quot; will be printed</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 验证码定时器</span></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Timer</span><br><span class="line"><span class="keyword">import</span> random,time</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Code</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.make_cache()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_cache</span>(<span class="params">self,interval=<span class="number">5</span></span>):</span><br><span class="line">        self.cache=self.make_code()</span><br><span class="line">        <span class="built_in">print</span>(self.cache)</span><br><span class="line">        self.t=Timer(interval,self.make_cache)</span><br><span class="line">        self.t.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_code</span>(<span class="params">self,n=<span class="number">4</span></span>):</span><br><span class="line">        res=<span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            s1=<span class="built_in">str</span>(random.randint(<span class="number">0</span>,<span class="number">9</span>))</span><br><span class="line">            s2=<span class="built_in">chr</span>(random.randint(<span class="number">65</span>,<span class="number">90</span>))</span><br><span class="line">            res+=random.choice([s1,s2])</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            inp=<span class="built_in">input</span>(<span class="string">&#x27;&gt;&gt;: &#x27;</span>).strip()</span><br><span class="line">            <span class="keyword">if</span> inp.upper() ==  self.cache:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;验证成功&#x27;</span>,end=<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">                self.t.cancel()</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    obj=Code()</span><br><span class="line">    obj.check()</span><br></pre></td></tr></table></figure><h2 id="十四-线程queue"><a href="#十四-线程queue" class="headerlink" title="十四 线程queue"></a>十四 线程queue</h2><p>queue队列 ：使用import queue，用法与进程Queue一样</p><p>queue is especially useful in threaded programming when information must be exchanged safely between multiple threads.</p><p><strong>class <code>queue.Queue</code>(maxsize=0) #先进先出</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import queue</span><br><span class="line"></span><br><span class="line">q=queue.Queue()</span><br><span class="line">q.put(&#x27;first&#x27;)</span><br><span class="line">q.put(&#x27;second&#x27;)</span><br><span class="line">q.put(&#x27;third&#x27;)</span><br><span class="line"></span><br><span class="line">print(q.get())</span><br><span class="line">print(q.get())</span><br><span class="line">print(q.get())</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">结果(先进先出):</span><br><span class="line">first</span><br><span class="line">second</span><br><span class="line">third</span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure><p><strong>class <code>queue.``LifoQueue</code>(maxsize=0) #last in fisrt out</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import queue</span><br><span class="line"></span><br><span class="line">q=queue.LifoQueue()</span><br><span class="line">q.put(&#x27;first&#x27;)</span><br><span class="line">q.put(&#x27;second&#x27;)</span><br><span class="line">q.put(&#x27;third&#x27;)</span><br><span class="line"></span><br><span class="line">print(q.get())</span><br><span class="line">print(q.get())</span><br><span class="line">print(q.get())</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">结果(后进先出):</span><br><span class="line">third</span><br><span class="line">second</span><br><span class="line">first</span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure><p><strong>class <code>queue.PriorityQueue</code>(*maxsize=0*) #存储数据时可设置优先级的队列</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import queue</span><br><span class="line"></span><br><span class="line">q=queue.PriorityQueue()</span><br><span class="line">#put进入一个元组,元组的第一个元素是优先级(通常是数字,也可以是非数字之间的比较),数字越小优先级越高</span><br><span class="line">q.put((20,&#x27;a&#x27;))</span><br><span class="line">q.put((10,&#x27;b&#x27;))</span><br><span class="line">q.put((30,&#x27;c&#x27;))</span><br><span class="line"></span><br><span class="line">print(q.get())</span><br><span class="line">print(q.get())</span><br><span class="line">print(q.get())</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">结果(数字越小优先级越高,优先级高的优先出队):</span><br><span class="line">(10, &#x27;b&#x27;)</span><br><span class="line">(20, &#x27;a&#x27;)</span><br><span class="line">(30, &#x27;c&#x27;)</span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure><p>其他</p><blockquote><p>Constructor for a priority queue. maxsize is an integer that sets the upperbound limit on the number of items that can be placed in the queue. Insertion will block once this size has been reached, until queue items are consumed. If maxsize is less than or equal to zero, the queue size is infinite.</p><p>The lowest valued entries are retrieved first (the lowest valued entry is the one returned by sorted(list(entries))[0]). A typical pattern for entries is a tuple in the form: (priority_number, data).</p><p>exception queue.Empty<br>Exception raised when non-blocking get() (or get_nowait()) is called on a Queue object which is empty.</p><p>exception queue.Full<br>Exception raised when non-blocking put() (or put_nowait()) is called on a Queue object which is full.</p><p>Queue.qsize()<br>Queue.empty() #return True if empty<br>Queue.full() # return True if full<br>Queue.put(item, block=True, timeout=None)<br>Put item into the queue. If optional args block is true and timeout is None (the default), block if necessary until a free slot is available. If timeout is a positive number, it blocks at most timeout seconds and raises the Full exception if no free slot was available within that time. Otherwise (block is false), put an item on the queue if a free slot is immediately available, else raise the Full exception (timeout is ignored in that case).</p><p>Queue.put_nowait(item)<br>Equivalent to put(item, False).</p><p>Queue.get(block=True, timeout=None)<br>Remove and return an item from the queue. If optional args block is true and timeout is None (the default), block if necessary until an item is available. If timeout is a positive number, it blocks at most timeout seconds and raises the Empty exception if no item was available within that time. Otherwise (block is false), return an item if one is immediately available, else raise the Empty exception (timeout is ignored in that case).</p><p>Queue.get_nowait()<br>Equivalent to get(False).</p><p>Two methods are offered to support tracking whether enqueued tasks have been fully processed by daemon consumer threads.</p><p>Queue.task_done()<br>Indicate that a formerly enqueued task is complete. Used by queue consumer threads. For each get() used to fetch a task, a subsequent call to task_done() tells the queue that the processing on the task is complete.</p><p>If a join() is currently blocking, it will resume when all items have been processed (meaning that a task_done() call was received for every item that had been put() into the queue).</p><p>Raises a ValueError if called more times than there were items placed in the queue.</p><p>Queue.join() block直到queue被消费完毕</p></blockquote><h2 id="十五-Python标准模块—concurrent-futures"><a href="#十五-Python标准模块—concurrent-futures" class="headerlink" title="十五  Python标准模块—concurrent.futures"></a>十五  Python标准模块—concurrent.futures</h2><p><strong><a href="https://docs.python.org/dev/library/concurrent.futures.html">https://docs.python.org/dev/library/concurrent.futures.html</a></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1 介绍</span></span><br><span class="line">concurrent.futures模块提供了高度封装的异步调用接口</span><br><span class="line">ThreadPoolExecutor：线程池，提供异步调用</span><br><span class="line">ProcessPoolExecutor: 进程池，提供异步调用</span><br><span class="line">Both implement the same interface, which <span class="keyword">is</span> defined by the abstract Executor <span class="keyword">class</span>.</span><br><span class="line"></span><br><span class="line"><span class="comment">#2 基本方法</span></span><br><span class="line"><span class="comment">#submit(fn, *args, **kwargs)</span></span><br><span class="line">异步提交任务</span><br><span class="line"></span><br><span class="line"><span class="comment">#map(func, *iterables, timeout=None, chunksize=1) </span></span><br><span class="line">取代<span class="keyword">for</span>循环submit的操作</span><br><span class="line"></span><br><span class="line"><span class="comment">#shutdown(wait=True) </span></span><br><span class="line">相当于进程池的pool.close()+pool.join()操作</span><br><span class="line">wait=<span class="literal">True</span>，等待池内所有任务执行完毕回收完资源后才继续</span><br><span class="line">wait=<span class="literal">False</span>，立即返回，并不会等待池内的任务执行完毕</span><br><span class="line">但不管wait参数为何值，整个程序都会等到所有任务执行完毕</span><br><span class="line">submit和<span class="built_in">map</span>必须在shutdown之前</span><br><span class="line"></span><br><span class="line"><span class="comment">#result(timeout=None)</span></span><br><span class="line">取得结果</span><br><span class="line"></span><br><span class="line"><span class="comment">#add_done_callback(fn)</span></span><br><span class="line">回调函数</span><br></pre></td></tr></table></figure><p>ProcessPoolExecutor</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#介绍</span></span><br><span class="line">The ProcessPoolExecutor <span class="keyword">class</span> <span class="title class_">is</span> an Executor subclass that uses a pool of processes to execute calls asynchronously. ProcessPoolExecutor uses the multiprocessing module, which allows it to side-step the Global Interpreter Lock but also means that only picklable objects can be executed <span class="keyword">and</span> returned.</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">concurrent</span>.futures.ProcessPoolExecutor(max_workers=<span class="literal">None</span>, mp_context=<span class="literal">None</span>)</span><br><span class="line">An Executor subclass that executes calls asynchronously using a pool of at most max_workers processes. If max_workers <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> <span class="keyword">not</span> given, it will default to the number of processors on the machine. If max_workers <span class="keyword">is</span> lower <span class="keyword">or</span> equal to <span class="number">0</span>, then a ValueError will be raised.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#用法</span></span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor,ProcessPoolExecutor</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os,time,random</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s is runing&#x27;</span> %os.getpid())</span><br><span class="line">    time.sleep(random.randint(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">    <span class="keyword">return</span> n**<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    executor=ProcessPoolExecutor(max_workers=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    futures=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>):</span><br><span class="line">        future=executor.submit(task,i)</span><br><span class="line">        futures.append(future)</span><br><span class="line">    executor.shutdown(<span class="literal">True</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;+++&gt;&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> future <span class="keyword">in</span> futures:</span><br><span class="line">        <span class="built_in">print</span>(future.result())</span><br></pre></td></tr></table></figure><p>ThreadPoolExecutor</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#介绍</span><br><span class="line">ThreadPoolExecutor is an Executor subclass that uses a pool of threads to execute calls asynchronously.</span><br><span class="line">class concurrent.futures.ThreadPoolExecutor(max_workers=None, thread_name_prefix=&#x27;&#x27;)</span><br><span class="line">An Executor subclass that uses a pool of at most max_workers threads to execute calls asynchronously.</span><br><span class="line"></span><br><span class="line">Changed in version 3.5: If max_workers is None or not given, it will default to the number of processors on the machine, multiplied by 5, assuming that ThreadPoolExecutor is often used to overlap I/O instead of CPU work and the number of workers should be higher than the number of workers for ProcessPoolExecutor.</span><br><span class="line"></span><br><span class="line">New in version 3.6: The thread_name_prefix argument was added to allow users to control the threading.Thread names for worker threads created by the pool for easier debugging.</span><br><span class="line"></span><br><span class="line">#用法</span><br><span class="line">与ProcessPoolExecutor相同</span><br></pre></td></tr></table></figure><p>map的用法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor,ProcessPoolExecutor</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os,time,random</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s is runing&#x27;</span> %os.getpid())</span><br><span class="line">    time.sleep(random.randint(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">    <span class="keyword">return</span> n**<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    executor=ThreadPoolExecutor(max_workers=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># for i in range(11):</span></span><br><span class="line">    <span class="comment">#     future=executor.submit(task,i)</span></span><br><span class="line"></span><br><span class="line">    executor.<span class="built_in">map</span>(task,<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">12</span>)) <span class="comment">#map取代了for+submit</span></span><br></pre></td></tr></table></figure><p>回调函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor,ProcessPoolExecutor</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_page</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&lt;进程%s&gt; get %s&#x27;</span> %(os.getpid(),url))</span><br><span class="line">    respone=requests.get(url)</span><br><span class="line">    <span class="keyword">if</span> respone.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&#x27;url&#x27;</span>:url,<span class="string">&#x27;text&#x27;</span>:respone.text&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_page</span>(<span class="params">res</span>):</span><br><span class="line">    res=res.result()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&lt;进程%s&gt; parse %s&#x27;</span> %(os.getpid(),res[<span class="string">&#x27;url&#x27;</span>]))</span><br><span class="line">    parse_res=<span class="string">&#x27;url:&lt;%s&gt; size:[%s]\n&#x27;</span> %(res[<span class="string">&#x27;url&#x27;</span>],<span class="built_in">len</span>(res[<span class="string">&#x27;text&#x27;</span>]))</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;db.txt&#x27;</span>,<span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(parse_res)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    urls=[</span><br><span class="line">        <span class="string">&#x27;https://www.baidu.com&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;https://www.python.org&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;https://www.openstack.org&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;https://help.github.com/&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;http://www.sina.com.cn/&#x27;</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># p=Pool(3)</span></span><br><span class="line">    <span class="comment"># for url in urls:</span></span><br><span class="line">    <span class="comment">#     p.apply_async(get_page,args=(url,),callback=pasrse_page)</span></span><br><span class="line">    <span class="comment"># p.close()</span></span><br><span class="line">    <span class="comment"># p.join()</span></span><br><span class="line"></span><br><span class="line">    p=ProcessPoolExecutor(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">        p.submit(get_page,url).add_done_callback(parse_page) <span class="comment">#parse_page拿到的是一个future对象obj，需要用obj.result()拿到结果</span></span><br></pre></td></tr></table></figure><h1 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h1><p> 本节的主题是基于单线程来实现并发，即只用一个主线程（很明显可利用的cpu只有一个）情况下实现并发，为此我们需要先回顾下并发的本质：切换+保存状态</p><p>  cpu正在运行一个任务，会在两种情况下切走去执行其他的任务（切换由操作系统强制控制），一种情况是该任务发生了阻塞，另外一种情况是该任务计算的时间过长或有一个优先级更高的程序替代了它</p><p><img src="11.png" alt="img"></p><p>ps：在介绍进程理论时，提及进程的三种执行状态，而线程才是执行单位，所以也可以将上图理解为线程的三种状态 </p><p>   一：其中第二种情况并不能提升效率，只是为了让cpu能够雨露均沾，实现看起来所有任务都被“同时”执行的效果，如果多个任务都是纯计算的，这种切换反而会降低效率。为此我们可以基于yield来验证。yield本身就是一种在单线程下可以保存任务运行状态的方法，我们来简单复习一下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#1 yiled可以保存状态，yield的状态保存与操作系统的保存线程状态很像，但是yield是代码级别控制的，更轻量级</span><br><span class="line">#2 send可以把一个函数的结果传给另外一个函数，以此实现单线程内程序之间的切换  </span><br></pre></td></tr></table></figure><p>单纯地切换反而会降低运行效率</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1、协程：</span></span><br><span class="line"><span class="string">    单线程实现并发</span></span><br><span class="line"><span class="string">    在应用程序里控制多个任务的切换+保存状态</span></span><br><span class="line"><span class="string">    优点：</span></span><br><span class="line"><span class="string">        应用程序级别速度要远远高于操作系统的切换</span></span><br><span class="line"><span class="string">    缺点：</span></span><br><span class="line"><span class="string">        多个任务一旦有一个阻塞没有切，整个线程都阻塞在原地</span></span><br><span class="line"><span class="string">        该线程内的其他的任务都不能执行了</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        一旦引入协程，就需要检测单线程下所有的IO行为,</span></span><br><span class="line"><span class="string">        实现遇到IO就切换,少一个都不行，以为一旦一个任务阻塞了，整个线程就阻塞了，</span></span><br><span class="line"><span class="string">        其他的任务即便是可以计算，但是也无法运行了</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2、协程序的目的：</span></span><br><span class="line"><span class="string">    想要在单线程下实现并发</span></span><br><span class="line"><span class="string">    并发指的是多个任务看起来是同时运行的</span></span><br><span class="line"><span class="string">    并发=切换+保存状态</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#串行执行</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000000</span>):</span><br><span class="line">        i+<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func2</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000000</span>):</span><br><span class="line">        i+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line">func1()</span><br><span class="line">func2()</span><br><span class="line">stop = time.time()</span><br><span class="line"><span class="built_in">print</span>(stop - start)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#基于yield并发执行</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">yield</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func2</span>():</span><br><span class="line">    g=func1()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000000</span>):</span><br><span class="line">        i+<span class="number">1</span></span><br><span class="line">        <span class="built_in">next</span>(g)</span><br><span class="line"></span><br><span class="line">start=time.time()</span><br><span class="line">func2()</span><br><span class="line">stop=time.time()</span><br><span class="line"><span class="built_in">print</span>(stop-start)</span><br></pre></td></tr></table></figure><p> 二：第一种情况的切换。在任务一遇到io情况下，切到任务二去执行，这样就可以利用任务一阻塞的时间完成任务二的计算，效率的提升就在于此。</p><p>yield不能检测IO，实现遇到IO自动切换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;func1&#x27;</span>)</span><br><span class="line">        <span class="keyword">yield</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func2</span>():</span><br><span class="line">    g=func1()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000000</span>):</span><br><span class="line">        i+<span class="number">1</span></span><br><span class="line">        <span class="built_in">next</span>(g)</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;func2&#x27;</span>)</span><br><span class="line">start=time.time()</span><br><span class="line">func2()</span><br><span class="line">stop=time.time()</span><br><span class="line"><span class="built_in">print</span>(stop-start)</span><br></pre></td></tr></table></figure><p> <strong>对于单线程下，我们不可避免程序中出现io操作，但如果我们能在自己的程序中（即用户程序级别，而非操作系统级别）控制单线程下的多个任务能在一个任务遇到io阻塞时就切换到另外一个任务去计算，这样就保证了该线程能够最大限度地处于就绪态，即随时都可以被cpu执行的状态，相当于我们在用户程序级别将自己的io操作最大限度地隐藏起来，从而可以迷惑操作系统，让其看到：该线程好像是一直在计算，io比较少，从而更多的将cpu的执行权限分配给我们的线程。</strong></p><p>  协程的本质就是在单线程下，由用户自己控制一个任务遇到io阻塞了就切换另外一个任务去执行，以此来提升效率。为了实现它，我们需要找寻一种可以同时满足以下条件的解决方案：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#1. 可以控制多个任务之间的切换，切换之前将任务的状态保存下来，以便重新运行时，可以基于暂停的位置继续执行。</span><br><span class="line"></span><br><span class="line">#2. 作为1的补充：可以检测io操作，在遇到io操作的情况下才发生切换</span><br></pre></td></tr></table></figure><h2 id="协程介绍"><a href="#协程介绍" class="headerlink" title="协程介绍"></a>协程介绍</h2><p>协程：是单线程下的并发，又称微线程，纤程。英文名Coroutine。一句话说明什么是线程：<strong>协程是一种用户态的轻量级线程，即协程是由用户程序自己控制调度的。、</strong></p><p>需要强调的是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#1. python的线程属于内核级别的，即由操作系统控制调度（如单线程遇到io或执行时间过长就会被迫交出cpu执行权限，切换其他线程运行）</span><br><span class="line">#2. 单线程内开启协程，一旦遇到io，就会从应用程序级别（而非操作系统）控制切换，以此来提升效率（！！！非io操作的切换与效率无关）</span><br></pre></td></tr></table></figure><p>对比操作系统控制线程的切换，用户在单线程内控制协程的切换</p><p>优点如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#1. 协程的切换开销更小，属于程序级别的切换，操作系统完全感知不到，因而更加轻量级</span><br><span class="line">#2. 单线程内就可以实现并发的效果，最大限度地利用cpu</span><br></pre></td></tr></table></figure><p>缺点如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#1. 协程的本质是单线程下，无法利用多核，可以是一个程序开启多个进程，每个进程内开启多个线程，每个线程内开启协程</span><br><span class="line">#2. 协程指的是单个线程，因而一旦协程出现阻塞，将会阻塞整个线程</span><br></pre></td></tr></table></figure><p>总结协程特点：</p><ol><li><strong>必须在只有一个单线程里实现并发</strong></li><li><strong>修改共享数据不需加锁</strong></li><li><strong>用户程序里自己保存多个控制流的上下文栈</strong></li><li><strong>附加：一个协程遇到IO操作自动切换到其它协程（如何实现检测IO，yield、greenlet都无法实现，就用到了gevent模块（select机制））</strong></li></ol><h2 id="Greenlet"><a href="#Greenlet" class="headerlink" title="Greenlet"></a>Greenlet</h2><p>如果我们在单个线程内有20个任务，要想实现在多个任务之间切换，使用yield生成器的方式过于麻烦（需要先得到初始化一次的生成器，然后再调用send。。。非常麻烦），而使用greenlet模块可以非常简单地实现这20个任务直接的切换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装</span></span><br><span class="line">pip3 install greenlet</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> greenlet <span class="keyword">import</span> greenlet</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s eat 1&#x27;</span> %name)</span><br><span class="line">    g2.switch(<span class="string">&#x27;egon&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s eat 2&#x27;</span> %name)</span><br><span class="line">    g2.switch()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">play</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s play 1&#x27;</span> %name)</span><br><span class="line">    g1.switch()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s play 2&#x27;</span> %name)</span><br><span class="line"></span><br><span class="line">g1=greenlet(eat)</span><br><span class="line">g2=greenlet(play)</span><br><span class="line"></span><br><span class="line">g1.switch(<span class="string">&#x27;egon&#x27;</span>)<span class="comment">#可以在第一次switch时传入参数，以后都不需要</span></span><br></pre></td></tr></table></figure><p>单纯的切换（在没有io的情况下或者没有重复开辟内存空间的操作），反而会降低程序的执行速度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#顺序执行</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f1</span>():</span><br><span class="line">    res=<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100000000</span>):</span><br><span class="line">        res+=i</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f2</span>():</span><br><span class="line">    res=<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100000000</span>):</span><br><span class="line">        res*=i</span><br><span class="line"></span><br><span class="line">start=time.time()</span><br><span class="line">f1()</span><br><span class="line">f2()</span><br><span class="line">stop=time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;run time is %s&#x27;</span> %(stop-start)) <span class="comment">#10.985628366470337</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#切换</span></span><br><span class="line"><span class="keyword">from</span> greenlet <span class="keyword">import</span> greenlet</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f1</span>():</span><br><span class="line">    res=<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100000000</span>):</span><br><span class="line">        res+=i</span><br><span class="line">        g2.switch()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f2</span>():</span><br><span class="line">    res=<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100000000</span>):</span><br><span class="line">        res*=i</span><br><span class="line">        g1.switch()</span><br><span class="line"></span><br><span class="line">start=time.time()</span><br><span class="line">g1=greenlet(f1)</span><br><span class="line">g2=greenlet(f2)</span><br><span class="line">g1.switch()</span><br><span class="line">stop=time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;run time is %s&#x27;</span> %(stop-start)) <span class="comment"># 52.763017892837524</span></span><br></pre></td></tr></table></figure><p>greenlet只是提供了一种比generator更加便捷的切换方式，当切到一个任务执行时如果遇到io，那就原地阻塞，仍然是没有解决遇到IO自动切换来提升效率的问题。</p><p>单线程里的这20个任务的代码通常会既有计算操作又有阻塞操作，我们完全可以在执行任务1时遇到阻塞，就利用阻塞的时间去执行任务2。。。。如此，才能提高效率，这就用到了Gevent模块。</p><h2 id="Gevent介绍"><a href="#Gevent介绍" class="headerlink" title="Gevent介绍"></a>Gevent介绍</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装</span></span><br><span class="line">pip3 install gevent</span><br></pre></td></tr></table></figure><p>Gevent 是一个第三方库，可以轻松通过gevent实现并发同步或异步编程，在gevent中用到的主要模式是<strong>Greenlet</strong>, 它是以C扩展模块形式接入Python的轻量级协程。 Greenlet全部运行在主程序操作系统进程的内部，但它们被协作式地调度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#用法</span></span><br><span class="line">g1=gevent.spawn(func,<span class="number">1</span>,,<span class="number">2</span>,<span class="number">3</span>,x=<span class="number">4</span>,y=<span class="number">5</span>)创建一个协程对象g1，spawn括号内第一个参数是函数名，如eat，后面可以有多个参数，可以是位置实参或关键字实参，都是传给函数eat的</span><br><span class="line"></span><br><span class="line">g2=gevent.spawn(func2)</span><br><span class="line"></span><br><span class="line">g1.join() <span class="comment">#等待g1结束</span></span><br><span class="line"></span><br><span class="line">g2.join() <span class="comment">#等待g2结束</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#或者上述两步合作一步：gevent.joinall([g1,g2])</span></span><br><span class="line"></span><br><span class="line">g1.value<span class="comment">#拿到func1的返回值</span></span><br></pre></td></tr></table></figure><p><strong>遇到IO阻塞时会自动切换任务</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s eat 1&#x27;</span> %name)</span><br><span class="line">    gevent.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s eat 2&#x27;</span> %name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">play</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s play 1&#x27;</span> %name)</span><br><span class="line">    gevent.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s play 2&#x27;</span> %name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g1=gevent.spawn(eat,<span class="string">&#x27;egon&#x27;</span>)</span><br><span class="line">g2=gevent.spawn(play,name=<span class="string">&#x27;egon&#x27;</span>)</span><br><span class="line">g1.join()</span><br><span class="line">g2.join()</span><br><span class="line"><span class="comment">#或者gevent.joinall([g1,g2])</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;主&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>上例gevent.sleep(2)模拟的是gevent可以识别的io阻塞,</strong></p><p><strong>而time.sleep(2)或其他的阻塞,gevent是不能直接识别的需要用下面一行代码,打补丁,就可以识别了</strong></p><p><strong>from gevent import monkey;monkey.patch_all()必须放到被打补丁者的前面，如time，socket模块之前</strong></p><p><strong>或者我们干脆记忆成：要用gevent，需要将from gevent import monkey;monkey.patch_all()放到文件的开头</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey;monkey.patch_all()</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">eat</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;eat food 1&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;eat food 2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">play</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;play 1&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;play 2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">g1=gevent.spawn(eat)</span><br><span class="line">g2=gevent.spawn(play_phone)</span><br><span class="line">gevent.joinall([g1,g2])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;主&#x27;</span>)</span><br></pre></td></tr></table></figure><p>我们可以用threading.current_thread().getName()来查看每个g1和g2，查看的结果为DummyThread-n，即假线程</p><h2 id="Gevent之同步与异步"><a href="#Gevent之同步与异步" class="headerlink" title="Gevent之同步与异步"></a>Gevent之同步与异步</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> spawn,joinall,monkey;monkey.patch_all()</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task</span>(<span class="params">pid</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Some non-deterministic task</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Task %s done&#x27;</span> % pid)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">synchronous</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        task(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">asynchronous</span>():</span><br><span class="line">    g_l=[spawn(task,i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line">    joinall(g_l)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Synchronous:&#x27;</span>)</span><br><span class="line">    synchronous()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Asynchronous:&#x27;</span>)</span><br><span class="line">    asynchronous()</span><br><span class="line"><span class="comment">#上面程序的重要部分是将task函数封装到Greenlet内部线程的gevent.spawn。 初始化的greenlet列表存放在数组threads中，此数组被传给gevent.joinall 函数，后者阻塞当前流程，并执行所有给定的greenlet。执行流程只会在 所有greenlet执行完后才会继续向下走。</span></span><br></pre></td></tr></table></figure><h2 id="Gevent之应用举例一"><a href="#Gevent之应用举例一" class="headerlink" title="Gevent之应用举例一"></a>Gevent之应用举例一</h2><p>协程应用：爬虫</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey;monkey.patch_all()</span><br><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_page</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;GET: %s&#x27;</span> %url)</span><br><span class="line">    response=requests.get(url)</span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%d bytes received from %s&#x27;</span> %(<span class="built_in">len</span>(response.text),url))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">start_time=time.time()</span><br><span class="line">gevent.joinall([</span><br><span class="line">    gevent.spawn(get_page,<span class="string">&#x27;https://www.python.org/&#x27;</span>),</span><br><span class="line">    gevent.spawn(get_page,<span class="string">&#x27;https://www.yahoo.com/&#x27;</span>),</span><br><span class="line">    gevent.spawn(get_page,<span class="string">&#x27;https://github.com/&#x27;</span>),</span><br><span class="line">])</span><br><span class="line">stop_time=time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;run time is %s&#x27;</span> %(stop_time-start_time))</span><br></pre></td></tr></table></figure><h2 id="Gevent之应用举例二"><a href="#Gevent之应用举例二" class="headerlink" title="Gevent之应用举例二"></a>Gevent之应用举例二</h2><p>通过gevent实现单线程下的socket并发（from gevent import monkey;monkey.patch_all()一定要放到导入socket模块之前，否则gevent无法识别socket的阻塞）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务端</span></span><br><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey;monkey.patch_all()</span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果不想用money.patch_all()打补丁,可以用gevent自带的socket</span></span><br><span class="line"><span class="comment"># from gevent import socket</span></span><br><span class="line"><span class="comment"># s=socket.socket()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">server</span>(<span class="params">server_ip,port</span>):</span><br><span class="line">    s=socket(AF_INET,SOCK_STREAM)</span><br><span class="line">    s.setsockopt(SOL_SOCKET,SO_REUSEADDR,<span class="number">1</span>)</span><br><span class="line">    s.bind((server_ip,port))</span><br><span class="line">    s.listen(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        conn,addr=s.accept()</span><br><span class="line">        gevent.spawn(talk,conn,addr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">talk</span>(<span class="params">conn,addr</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            res=conn.recv(<span class="number">1024</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;client %s:%s msg: %s&#x27;</span> %(addr[<span class="number">0</span>],addr[<span class="number">1</span>],res))</span><br><span class="line">            conn.send(res.upper())</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        conn.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    server(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8080</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 客户端</span></span><br><span class="line"><span class="comment">#_*_coding:utf-8_*_</span></span><br><span class="line">__author__ = <span class="string">&#x27;wangdada&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">client=socket(AF_INET,SOCK_STREAM)</span><br><span class="line">client.connect((<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8080</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    msg=<span class="built_in">input</span>(<span class="string">&#x27;&gt;&gt;: &#x27;</span>).strip()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> msg:<span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    client.send(msg.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    msg=client.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="built_in">print</span>(msg.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 多线程并发多个客户端</span></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">client</span>(<span class="params">server_ip,port</span>):</span><br><span class="line">    c=socket(AF_INET,SOCK_STREAM) <span class="comment">#套接字对象一定要加到函数内，即局部名称空间内，放在函数外则被所有线程共享，则大家公用一个套接字对象，那么客户端端口永远一样了</span></span><br><span class="line">    c.connect((server_ip,port))</span><br><span class="line"></span><br><span class="line">    count=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        c.send((<span class="string">&#x27;%s say hello %s&#x27;</span> %(threading.current_thread().getName(),count)).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        msg=c.recv(<span class="number">1024</span>)</span><br><span class="line">        <span class="built_in">print</span>(msg.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        count+=<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">500</span>):</span><br><span class="line">        t=Thread(target=client,args=(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8080</span>))</span><br><span class="line">        t.start()</span><br></pre></td></tr></table></figure><h1 id="IO模型"><a href="#IO模型" class="headerlink" title="IO模型"></a>IO模型</h1><h2 id="一-IO模型介绍"><a href="#一-IO模型介绍" class="headerlink" title="一 IO模型介绍"></a>一 IO模型介绍</h2><p><strong>为了更好地了解IO模型，我们需要事先回顾下：同步、异步、阻塞、非阻塞</strong></p><p>  同步（synchronous）  IO和异步（asynchronous） IO，阻塞（blocking）  IO和非阻塞（non-blocking）IO分别是什么，到底有什么区别？这个问题其实不同的人给出的答案都可能不同，比如wiki，就认为asynchronous IO和non-blocking  IO是一个东西。这其实是因为不同的人的知识背景不同，并且在讨论这个问题的时候上下文(context)也不相同。所以，为了更好的回答这个问题，我先限定一下本文的上下文。</p><p>   本文讨论的背景是Linux环境下的network IO。本文最重要的参考文献是Richard Stevens的“UNIX® Network  Programming Volume 1, Third Edition: The Sockets Networking ”，6.2节“I/O  Models  ”，Stevens在这节中详细说明了各种IO的特点和区别，如果英文够好的话，推荐直接阅读。Stevens的文风是有名的深入浅出，所以不用担心看不懂。本文中的流程图也是截取自参考文献。</p><p>  Stevens在文章中一共比较了五种IO Model：<br>  * blocking IO<br>  * nonblocking IO<br>  * IO multiplexing<br>  * signal driven IO<br>  * asynchronous IO<br>  由signal driven IO（信号驱动IO）在实际中并不常用，所以主要介绍其余四种IO Model。</p><p>  再说一下IO发生时涉及的对象和步骤。对于一个network IO  (这里我们以read举例)，它会涉及到两个系统对象，一个是调用这个IO的process (or  thread)，另一个就是系统内核(kernel)。当一个read操作发生时，该操作会经历两个阶段：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#1）等待数据准备 (Waiting for the data to be ready)</span><br><span class="line">#2）将数据从内核拷贝到进程中(Copying the data from the kernel to the process)</span><br></pre></td></tr></table></figure><p>  记住这两点很重要，因为这些IO模型的区别就是在两个阶段上各有不同的情况。</p><p>  补充：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#1、输入操作：read、readv、recv、recvfrom、recvmsg共5个函数，如果会阻塞状态，则会经理wait data和copy data两个阶段，如果设置为非阻塞则在wait 不到data时抛出异常</span><br><span class="line"></span><br><span class="line">#2、输出操作：write、writev、send、sendto、sendmsg共5个函数，在发送缓冲区满了会阻塞在原地，如果设置为非阻塞，则会抛出异常</span><br><span class="line"></span><br><span class="line">#3、接收外来链接：accept，与输入操作类似</span><br><span class="line"></span><br><span class="line">#4、发起外出链接：connect，与输出操作类似</span><br></pre></td></tr></table></figure><h2 id="二-阻塞IO-blocking-IO"><a href="#二-阻塞IO-blocking-IO" class="headerlink" title="二 阻塞IO(blocking IO)"></a>二 阻塞IO(blocking IO)</h2><p>  在linux中，默认情况下所有的socket都是blocking，一个典型的读操作流程大概是这样：</p><p><img src="17.png" alt="img"></p><p>  当用户进程调用了recvfrom这个系统调用，kernel就开始了IO的第一个阶段：准备数据。对于network io来说，很多时候数据在一开始还没有到达（比如，还没有收到一个完整的UDP包），这个时候kernel就要等待足够的数据到来。</p><p>  而在用户进程这边，整个进程会被阻塞。当kernel一直等到数据准备好了，它就会将数据从kernel中拷贝到用户内存，然后kernel返回结果，用户进程才解除block的状态，重新运行起来。<br>  <strong>所以，blocking IO的特点就是在IO执行的两个阶段（等待数据和拷贝数据两个阶段）都被block了。</strong></p><p>  几乎所有的程序员第一次接触到的网络编程都是从listen()、send()、recv() 等接口开始的，使用这些接口可以很方便的构建服务器/客户机的模型。然而大部分的socket接口都是阻塞型的。如下图</p><p>  ps：所谓阻塞型接口是指系统调用（一般是IO接口）不返回调用结果并让当前线程一直阻塞，只有当该系统调用获得结果或者超时出错时才返回。</p><p><img src="16.png" alt="img"></p><p>  实际上，除非特别指定，几乎所有的IO接口 ( 包括socket接口 ) 都是阻塞型的。这给网络编程带来了一个很大的问题，如在调用recv(1024)的同时，线程将被阻塞，在此期间，线程将无法执行任何运算或响应任何的网络请求。</p><p>  一个简单的解决方案：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#在服务器端使用多线程（或多进程）。多线程（或多进程）的目的是让每个连接都拥有独立的线程（或进程），这样任何一个连接的阻塞都不会影响其他的连接。</span><br></pre></td></tr></table></figure><p>  该方案的问题是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#开启多进程或都线程的方式，在遇到要同时响应成百上千路的连接请求，则无论多线程还是多进程都会严重占据系统资源，降低系统对外界响应效率，而且线程与进程本身也更容易进入假死状态。</span><br></pre></td></tr></table></figure><p>  改进方案：   </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#很多程序员可能会考虑使用“线程池”或“连接池”。“线程池”旨在减少创建和销毁线程的频率，其维持一定合理数量的线程，并让空闲的线程重新承担新的执行任务。“连接池”维持连接的缓存池，尽量重用已有的连接、减少创建和关闭连接的频率。这两种技术都可以很好的降低系统开销，都被广泛应用很多大型系统，如websphere、tomcat和各种数据库等。</span><br></pre></td></tr></table></figure><p>  改进后方案其实也存在着问题：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#“线程池”和“连接池”技术也只是在一定程度上缓解了频繁调用IO接口带来的资源占用。而且，所谓“池”始终有其上限，当请求大大超过上限时，“池”构成的系统对外界的响应并不比没有池的时候效果好多少。所以使用“池”必须考虑其面临的响应规模，并根据响应规模调整“池”的大小。</span><br></pre></td></tr></table></figure><p>   <strong>对应上例中的所面临的可能同时出现的上千甚至上万次的客户端请求，“线程池”或“连接池”或许可以缓解部分压力，但是不能解决所有问题。总之，多线程模型可以方便高效的解决小规模的服务请求，但面对大规模的服务请求，多线程模型也会遇到瓶颈，可以用非阻塞接口来尝试解决这个问题。</strong></p><h2 id="三-非阻塞IO-non-blocking-IO"><a href="#三-非阻塞IO-non-blocking-IO" class="headerlink" title="三 非阻塞IO(non-blocking IO)"></a>三 非阻塞IO(non-blocking IO)</h2><p>  Linux下，可以通过设置socket使其变为non-blocking。当对一个non-blocking socket执行读操作时，流程是这个样子：</p><p><img src="15.png" alt="img"></p><p>   从图中可以看出，当用户进程发出read操作时，如果kernel中的数据还没有准备好，那么它并不会block用户进程，而是立刻返回一个error。从用户进程角度讲  ，它发起一个read操作后，并不需要等待，而是马上就得到了一个结果。用户进程判断结果是一个error时，它就知道数据还没有准备好，于是用户就可以在本次到下次再发起read询问的时间间隔内做其他事情，或者直接再次发送read操作。一旦kernel中的数据准备好了，并且又再次收到了用户进程的system call，那么它马上就将数据拷贝到了用户内存（这一阶段仍然是阻塞的），然后返回。</p><p>   也就是说非阻塞的recvform系统调用调用之后，进程并没有被阻塞，内核马上返回给进程，如果数据还没准备好，此时会返回一个error。进程在返回之后，可以干点别的事情，然后再发起recvform系统调用。重复上面的过程，循环往复的进行recvform系统调用。这个过程通常被称之为轮询。轮询检查内核数据，直到数据准备好，再拷贝数据到进程，进行数据处理。需要注意，拷贝数据整个过程，进程仍然是属于阻塞的状态。</p><p>  <strong>所以，在非阻塞式IO中，用户进程其实是需要不断的主动询问kernel数据准备好了没有。</strong></p><p>非阻塞IO示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务端</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">server=socket.socket()</span><br><span class="line">server.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,<span class="number">1</span>)</span><br><span class="line">server.bind((<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8083</span>))</span><br><span class="line">server.listen(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">server.setblocking(<span class="literal">False</span>)</span><br><span class="line">r_list=[]</span><br><span class="line">w_list=&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        conn,addr=server.accept()</span><br><span class="line">        r_list.append(conn)</span><br><span class="line">    <span class="keyword">except</span> BlockingIOError:</span><br><span class="line">        <span class="comment"># 强调强调强调：！！！非阻塞IO的精髓在于完全没有阻塞！！！</span></span><br><span class="line">        <span class="comment"># time.sleep(0.5) # 打开该行注释纯属为了方便查看效果</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;在做其他的事情&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;rlist: &#x27;</span>,<span class="built_in">len</span>(r_list))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;wlist: &#x27;</span>,<span class="built_in">len</span>(w_list))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 遍历读列表，依次取出套接字读取内容</span></span><br><span class="line">        del_rlist=[]</span><br><span class="line">        <span class="keyword">for</span> conn <span class="keyword">in</span> r_list:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                data=conn.recv(<span class="number">1024</span>)</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">                    conn.close()</span><br><span class="line">                    del_rlist.append(conn)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                w_list[conn]=data.upper()</span><br><span class="line">            <span class="keyword">except</span> BlockingIOError: <span class="comment"># 没有收成功，则继续检索下一个套接字的接收</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">except</span> ConnectionResetError: <span class="comment"># 当前套接字出异常，则关闭，然后加入删除列表，等待被清除</span></span><br><span class="line">                conn.close()</span><br><span class="line">                del_rlist.append(conn)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 遍历写列表，依次取出套接字发送内容</span></span><br><span class="line">        del_wlist=[]</span><br><span class="line">        <span class="keyword">for</span> conn,data <span class="keyword">in</span> w_list.items():</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                conn.send(data)</span><br><span class="line">                del_wlist.append(conn)</span><br><span class="line">            <span class="keyword">except</span> BlockingIOError:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 清理无用的套接字,无需再监听它们的IO操作</span></span><br><span class="line">        <span class="keyword">for</span> conn <span class="keyword">in</span> del_rlist:</span><br><span class="line">            r_list.remove(conn)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> conn <span class="keyword">in</span> del_wlist:</span><br><span class="line">            w_list.pop(conn)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#客户端</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">client=socket.socket()</span><br><span class="line">client.connect((<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8083</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    res=(<span class="string">&#x27;%s hello&#x27;</span> %os.getpid()).encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    client.send(res)</span><br><span class="line">    data=client.recv(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(data.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure><p>  <strong>但是非阻塞IO模型绝不被推荐。</strong></p><p>  我们不能否则其优点：能够在等待任务完成的时间里干其他活了（包括提交其他任务，也就是 “后台” 可以有多个任务在“”同时“”执行）。</p><p>  但是也难掩其缺点：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#1. 循环调用recv()将大幅度推高CPU占用率；这也是我们在代码中留一句time.sleep(2)的原因,否则在低配主机下极容易出现卡机情况</span><br><span class="line">#2. 任务完成的响应延迟增大了，因为每过一段时间才去轮询一次read操作，而任务可能在两次轮询之间的任意时间完成。这会导致整体数据吞吐量的降低。</span><br></pre></td></tr></table></figure><p>  <strong><em>\</em>此外，在这个方案中recv()更多的是起到检测“操作是否完成”的作用，实际操作系统提供了更为高效的检测“操作是否完成“作用的接口，例如select()多路复用模式，可以一次检测多个连接是否活跃。**</strong></p><h2 id="四-多路复用IO-IO-multiplexing"><a href="#四-多路复用IO-IO-multiplexing" class="headerlink" title="四 多路复用IO(IO multiplexing)"></a>四 多路复用IO(IO multiplexing)</h2><p>  IO multiplexing这个词可能有点陌生，但是如果我说select/epoll，大概就都能明白了。有些地方也称这种IO方式为<strong>事件驱动IO</strong>(event driven  IO)。我们都知道，select/epoll的好处就在于单个process就可以同时处理多个网络连接的IO。它的基本原理就是select/epoll这个function会不断的轮询所负责的所有socket，当某个socket有数据到达了，就通知用户进程。它的流程如图：</p><p><img src="14.png" alt="img"></p><p>   当用户进程调用了select，那么整个进程会被block，而同时，kernel会“监视”所有select负责的socket，当任何一个socket中的数据准备好了，select就会返回。这个时候用户进程再调用read操作，将数据从kernel拷贝到用户进程。<br>   这个图和blocking  IO的图其实并没有太大的不同，事实上还更差一些。因为这里需要使用两个系统调用(select和recvfrom)，而blocking  IO只调用了一个系统调用(recvfrom)。但是，用select的优势在于它可以同时处理多个connection。</p><p>  <strong>强调：</strong></p><p>  <strong>1.  如果处理的连接数不是很高的话，使用select/epoll的web server不一定比使用multi-threading + blocking IO的web server性能更好，可能延迟还更大。select/epoll的优势并不是对于单个连接能处理得更快，而是在于能处理更多的连接。</strong></p><p>   <strong>2. 在多路复用模型中，对于每一个socket，一般都设置成为non-blocking，但是，如上图所示，整个用户的process其实是一直被block的。只不过process是被select这个函数block，而不是被socket IO给block。</strong></p><p>  <strong>结论: select的优势在于可以处理多个连接，不适用于单个连接</strong> </p><p>select网络IO模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#服务端</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> select</span><br><span class="line">server = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">server.bind((<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8093</span>))</span><br><span class="line">server.listen(<span class="number">5</span>)</span><br><span class="line">server.setblocking(<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;starting...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">rlist=[server,]</span><br><span class="line">wlist=[]</span><br><span class="line">wdata=&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    rl,wl,xl=select.select(rlist,wlist,[],<span class="number">0.5</span>)</span><br><span class="line">    <span class="built_in">print</span>(wl)</span><br><span class="line">    <span class="keyword">for</span> sock <span class="keyword">in</span> rl:</span><br><span class="line">        <span class="keyword">if</span> sock == server:</span><br><span class="line">            conn,addr=sock.accept()</span><br><span class="line">            rlist.append(conn)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                data=sock.recv(<span class="number">1024</span>)</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">                    sock.close()</span><br><span class="line">                    rlist.remove(sock)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                wlist.append(sock)</span><br><span class="line">                wdata[sock]=data.upper()</span><br><span class="line">            <span class="keyword">except</span> Exception:</span><br><span class="line">                sock.close()</span><br><span class="line">                rlist.remove(sock)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> sock <span class="keyword">in</span> wl:</span><br><span class="line">        sock.send(wdata[sock])</span><br><span class="line">        wlist.remove(sock)</span><br><span class="line">        wdata.pop(sock)</span><br><span class="line"></span><br><span class="line"><span class="comment">#客户端</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">client=socket(AF_INET,SOCK_STREAM)</span><br><span class="line">client.connect((<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8093</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    msg=<span class="built_in">input</span>(<span class="string">&#x27;&gt;&gt;: &#x27;</span>).strip()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> msg:<span class="keyword">continue</span></span><br><span class="line">    client.send(msg.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    data=client.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="built_in">print</span>(data.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">client.close()</span><br></pre></td></tr></table></figure><p>  <strong>select监听fd变化的过程分析：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#用户进程创建socket对象，拷贝监听的fd到内核空间，每一个fd会对应一张系统文件表，内核空间的fd响应到数据后，就会发送信号给用户进程数据已到；</span><br><span class="line">#用户进程再发送系统调用，比如（accept）将内核空间的数据copy到用户空间，同时作为接受数据端内核空间的数据清除，这样重新监听时fd再有新的数据又可以响应到了（发送端因为基于TCP协议所以需要收到应答后才会清除）。</span><br></pre></td></tr></table></figure><p>  <strong>该模型的优点：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#相比其他模型，使用select() 的事件驱动模型只用单线程（进程）执行，占用资源少，不消耗太多 CPU，同时能够为多客户端提供服务。如果试图建立一个简单的事件驱动的服务器程序，这个模型有一定的参考价值。</span><br></pre></td></tr></table></figure><p>  <strong>该模型的缺点：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#首先select()接口并不是实现“事件驱动”的最好选择。因为当需要探测的句柄值较大时，select()接口本身需要消耗大量时间去轮询各个句柄。很多操作系统提供了更为高效的接口，如linux提供了epoll，BSD提供了kqueue，Solaris提供了/dev/poll，…。如果需要实现更高效的服务器程序，类似epoll这样的接口更被推荐。遗憾的是不同的操作系统特供的epoll接口有很大差异，所以使用类似于epoll的接口实现具有较好跨平台能力的服务器会比较困难。</span><br><span class="line">#其次，该模型将事件探测和事件响应夹杂在一起，一旦事件响应的执行体庞大，则对整个模型是灾难性的。</span><br></pre></td></tr></table></figure><h2 id="五-异步IO-Asynchronous-I-O"><a href="#五-异步IO-Asynchronous-I-O" class="headerlink" title="五 异步IO(Asynchronous I/O)"></a>五 异步IO(Asynchronous I/O)</h2><p>  Linux下的asynchronous IO其实用得不多，从内核2.6版本才开始引入。先看一下它的流程：</p><p><img src="13.png" alt="img"></p><p>  用户进程发起read操作之后，立刻就可以开始去做其它的事。而另一方面，从kernel的角度，当它受到一个asynchronous  read之后，首先它会立刻返回，所以不会对用户进程产生任何block。然后，kernel会等待数据准备完成，然后将数据拷贝到用户内存，当这一切都完成之后，kernel会给用户进程发送一个signal，告诉它read操作完成了。</p><h2 id="六-IO模型比较分析"><a href="#六-IO模型比较分析" class="headerlink" title="六 IO模型比较分析"></a>六 IO模型比较分析</h2><p>  到目前为止，已经将四个IO Model都介绍完了。现在回过头来回答最初的那几个问题：blocking和non-blocking的区别在哪，synchronous IO和asynchronous IO的区别在哪。<br>   先回答最简单的这个：blocking vs non-blocking。前面的介绍中其实已经很明确的说明了这两者的区别。调用blocking IO会一直block住对应的进程直到操作完成，而non-blocking IO在kernel还准备数据的情况下会立刻返回。</p><p>  再说明synchronous IO和asynchronous IO的区别之前，需要先给出两者的定义。Stevens给出的定义（其实是POSIX的定义）是这样子的：<br>  A synchronous I/O operation causes the requesting process to be blocked until that I/O operationcompletes;<br>  An asynchronous I/O operation does not cause the requesting process to be blocked;<br>   两者的区别就在于synchronous IO做”IO  operation”的时候会将process阻塞。按照这个定义，四个IO模型可以分为两大类，之前所述的blocking  IO，non-blocking IO，IO multiplexing都属于synchronous IO这一类，而 asynchronous  I/O后一类 。</p><p>  有人可能会说，non-blocking IO并没有被block啊。这里有个非常“狡猾”的地方，定义中所指的”IO  operation”是指真实的IO操作，就是例子中的recvfrom这个system call。non-blocking  IO在执行recvfrom这个system  call的时候，如果kernel的数据没有准备好，这时候不会block进程。但是，当kernel中数据准备好的时候，recvfrom会将数据从kernel拷贝到用户内存中，这个时候进程是被block了，在这段时间内，进程是被block的。而asynchronous IO则不一样，当进程发起IO  操作之后，就直接返回再也不理睬了，直到kernel发送一个信号，告诉进程说IO完成。在这整个过程中，进程完全没有被block。</p><p>  各个IO Model的比较如图所示：</p><p><img src="12.png" alt="img"></p><p>  经过上面的介绍，会发现non-blocking IO和asynchronous IO的区别还是很明显的。在non-blocking  IO中，虽然进程大部分时间都不会被block，但是它仍然要求进程去主动的check，并且当数据准备完成以后，也需要进程主动的再次调用recvfrom来将数据拷贝到用户内存。而asynchronous  IO则完全不同。它就像是用户进程将整个IO操作交给了他人（kernel）完成，然后他人做完后发信号通知。在此期间，用户进程不需要去检查IO操作的状态，也不需要主动的去拷贝数据。</p><h2 id="七-selectors模块"><a href="#七-selectors模块" class="headerlink" title="七 selectors模块"></a>七 selectors模块</h2><p>select,poll,epoll</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">IO复用：为了解释这个名词，首先来理解下复用这个概念，复用也就是共用的意思，这样理解还是有些抽象，为此，咱们来理解下复用在通信领域的使用，在通信领域中为了充分利用网络连接的物理介质，往往在同一条网络链路上采用时分复用或频分复用的技术使其在同一链路上传输多路信号，到这里我们就基本上理解了复用的含义，即公用某个“介质”来尽可能多的做同一类(性质)的事，那IO复用的“介质”是什么呢？为此我们首先来看看服务器编程的模型，客户端发来的请求服务端会产生一个进程来对其进行服务，每当来一个客户请求就产生一个进程来服务，然而进程不可能无限制的产生，因此为了解决大量客户端访问的问题，引入了IO复用技术，即：一个进程可以同时对多个客户请求进行服务。也就是说IO复用的“介质”是进程(准确的说复用的是select和poll，因为进程也是靠调用select和poll来实现的)，复用一个进程(select和poll)来对多个IO进行服务，虽然客户端发来的IO是并发的但是IO所需的读写数据多数情况下是没有准备好的，因此就可以利用一个函数(select和poll)来监听IO所需的这些数据的状态，一旦IO有数据可以进行读写了，进程就来对这样的IO进行服务。</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">理解完IO复用后，我们在来看下实现IO复用中的三个API(select、poll和epoll)的区别和联系</span><br><span class="line"></span><br><span class="line">select，poll，epoll都是IO多路复用的机制，I/O多路复用就是通过一种机制，可以监视多个描述符，一旦某个描述符就绪（一般是读就绪或者写就绪），能够通知应用程序进行相应的读写操作。但select，poll，epoll本质上都是同步I/O，因为他们都需要在读写事件就绪后自己负责进行读写，也就是说这个读写过程是阻塞的，而异步I/O则无需自己负责进行读写，异步I/O的实现会负责把数据从内核拷贝到用户空间。三者的原型如下所示：</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> select(<span class="built_in">int</span> nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout);</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> poll(struct pollfd *fds, nfds_t nfds, <span class="built_in">int</span> timeout);</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> epoll_wait(<span class="built_in">int</span> epfd, struct epoll_event *events, <span class="built_in">int</span> maxevents, <span class="built_in">int</span> timeout);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="number">1.</span>select的第一个参数nfds为fdset集合中最大描述符值加<span class="number">1</span>，fdset是一个位数组，其大小限制为__FD_SETSIZE（<span class="number">1024</span>），位数组的每一位代表其对应的描述符是否需要被检查。第二三四参数表示需要关注读、写、错误事件的文件描述符位数组，这些参数既是输入参数也是输出参数，可能会被内核修改用于标示哪些描述符上发生了关注的事件，所以每次调用select前都需要重新初始化fdset。timeout参数为超时时间，该结构会被内核修改，其值为超时剩余的时间。</span><br><span class="line"></span><br><span class="line"> select的调用步骤如下：</span><br><span class="line"></span><br><span class="line">（<span class="number">1</span>）使用copy_from_user从用户空间拷贝fdset到内核空间</span><br><span class="line"></span><br><span class="line">（<span class="number">2</span>）注册回调函数__pollwait</span><br><span class="line"></span><br><span class="line">（<span class="number">3</span>）遍历所有fd，调用其对应的poll方法（对于socket，这个poll方法是sock_poll，sock_poll根据情况会调用到tcp_poll,udp_poll或者datagram_poll）</span><br><span class="line"></span><br><span class="line">（<span class="number">4</span>）以tcp_poll为例，其核心实现就是__pollwait，也就是上面注册的回调函数。</span><br><span class="line"></span><br><span class="line">（<span class="number">5</span>）__pollwait的主要工作就是把current（当前进程）挂到设备的等待队列中，不同的设备有不同的等待队列，对于tcp_poll 来说，其等待队列是sk-&gt;sk_sleep（注意把进程挂到等待队列中并不代表进程已经睡眠了）。在设备收到一条消息（网络设备）或填写完文件数 据（磁盘设备）后，会唤醒设备等待队列上睡眠的进程，这时current便被唤醒了。</span><br><span class="line"></span><br><span class="line">（<span class="number">6</span>）poll方法返回时会返回一个描述读写操作是否就绪的mask掩码，根据这个mask掩码给fd_set赋值。</span><br><span class="line"></span><br><span class="line">（<span class="number">7</span>）如果遍历完所有的fd，还没有返回一个可读写的mask掩码，则会调用schedule_timeout是调用select的进程（也就是 current）进入睡眠。当设备驱动发生自身资源可读写后，会唤醒其等待队列上睡眠的进程。如果超过一定的超时时间（schedule_timeout 指定），还是没人唤醒，则调用select的进程会重新被唤醒获得CPU，进而重新遍历fd，判断有没有就绪的fd。</span><br><span class="line"></span><br><span class="line">（<span class="number">8</span>）把fd_set从内核空间拷贝到用户空间。</span><br><span class="line"></span><br><span class="line">总结下select的几大缺点：</span><br><span class="line"></span><br><span class="line">（<span class="number">1</span>）每次调用select，都需要把fd集合从用户态拷贝到内核态，这个开销在fd很多时会很大</span><br><span class="line"></span><br><span class="line">（<span class="number">2</span>）同时每次调用select都需要在内核遍历传递进来的所有fd，这个开销在fd很多时也很大</span><br><span class="line"></span><br><span class="line">（<span class="number">3</span>）select支持的文件描述符数量太小了，默认是<span class="number">1024</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="number">2</span>．  poll与select不同，通过一个pollfd数组向内核传递需要关注的事件，故没有描述符个数的限制，pollfd中的events字段和revents分别用于标示关注的事件和发生的事件，故pollfd数组只需要被初始化一次。</span><br><span class="line"></span><br><span class="line"> poll的实现机制与select类似，其对应内核中的sys_poll，只不过poll向内核传递pollfd数组，然后对pollfd中的每个描述符进行poll，相比处理fdset来说，poll效率更高。poll返回后，需要对pollfd中的每个元素检查其revents值，来得指事件是否发生。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="number">3</span>．直到Linux2<span class="number">.6</span>才出现了由内核直接支持的实现方法，那就是epoll，被公认为Linux2<span class="number">.6</span>下性能最好的多路I/O就绪通知方法。epoll可以同时支持水平触发和边缘触发（Edge Triggered，只告诉进程哪些文件描述符刚刚变为就绪状态，它只说一遍，如果我们没有采取行动，那么它将不会再次告知，这种方式称为边缘触发），理论上边缘触发的性能要更高一些，但是代码实现相当复杂。epoll同样只告知那些就绪的文件描述符，而且当我们调用epoll_wait()获得就绪文件描述符时，返回的不是实际的描述符，而是一个代表就绪描述符数量的值，你只需要去epoll指定的一个数组中依次取得相应数量的文件描述符即可，这里也使用了内存映射（mmap）技术，这样便彻底省掉了这些文件描述符在系统调用时复制的开销。另一个本质的改进在于epoll采用基于事件的就绪通知方式。在select/poll中，进程只有在调用一定的方法后，内核才对所有监视的文件描述符进行扫描，而epoll事先通过epoll_ctl()来注册一个文件描述符，一旦基于某个文件描述符就绪时，内核会采用类似callback的回调机制，迅速激活这个文件描述符，当进程调用epoll_wait()时便得到通知。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">epoll既然是对select和poll的改进，就应该能避免上述的三个缺点。那epoll都是怎么解决的呢？在此之前，我们先看一下epoll 和select和poll的调用接口上的不同，select和poll都只提供了一个函数——select或者poll函数。而epoll提供了三个函 数，epoll_create,epoll_ctl和epoll_wait，epoll_create是创建一个epoll句柄；epoll_ctl是注 册要监听的事件类型；epoll_wait则是等待事件的产生。</span><br><span class="line"></span><br><span class="line">　　对于第一个缺点，epoll的解决方案在epoll_ctl函数中。每次注册新的事件到epoll句柄中时（在epoll_ctl中指定 EPOLL_CTL_ADD），会把所有的fd拷贝进内核，而不是在epoll_wait的时候重复拷贝。epoll保证了每个fd在整个过程中只会拷贝 一次。</span><br><span class="line"></span><br><span class="line">　　对于第二个缺点，epoll的解决方案不像select或poll一样每次都把current轮流加入fd对应的设备等待队列中，而只在 epoll_ctl时把current挂一遍（这一遍必不可少）并为每个fd指定一个回调函数，当设备就绪，唤醒等待队列上的等待者时，就会调用这个回调 函数，而这个回调函数会把就绪的fd加入一个就绪链表）。epoll_wait的工作实际上就是在这个就绪链表中查看有没有就绪的fd（利用 schedule_timeout()实现睡一会，判断一会的效果，和select实现中的第<span class="number">7</span>步是类似的）。</span><br><span class="line"></span><br><span class="line">　　对于第三个缺点，epoll没有这个限制，它所支持的FD上限是最大可以打开文件的数目，这个数字一般远大于<span class="number">2048</span>,举个例子, 在1GB内存的机器上大约是<span class="number">10</span>万左右，具体数目可以cat /proc/sys/fs/file-<span class="built_in">max</span>察看,一般来说这个数目和系统内存关系很大。</span><br><span class="line"></span><br><span class="line">总结：</span><br><span class="line"></span><br><span class="line">（<span class="number">1</span>）select，poll实现需要自己不断轮询所有fd集合，直到设备就绪，期间可能要睡眠和唤醒多次交替。而epoll其实也需要调用 epoll_wait不断轮询就绪链表，期间也可能多次睡眠和唤醒交替，但是它是设备就绪时，调用回调函数，把就绪fd放入就绪链表中，并唤醒在 epoll_wait中进入睡眠的进程。虽然都要睡眠和交替，但是select和poll在“醒着”的时候要遍历整个fd集合，而epoll在“醒着”的 时候只要判断一下就绪链表是否为空就行了，这节省了大量的CPU时间，这就是回调机制带来的性能提升。</span><br><span class="line"></span><br><span class="line">（<span class="number">2</span>）select，poll每次调用都要把fd集合从用户态往内核态拷贝一次，并且要把current往设备等待队列中挂一次，而epoll只要 一次拷贝，而且把current往等待队列上挂也只挂一次（在epoll_wait的开始，注意这里的等待队列并不是设备等待队列，只是一个epoll内 部定义的等待队列），这也能节省不少的开销。</span><br></pre></td></tr></table></figure><p>这三种IO多路复用模型在不同的平台有着不同的支持，而epoll在windows下就不支持，好在我们有selectors模块，帮我们默认选择当前平台下最合适的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#服务端</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> selectors</span><br><span class="line"></span><br><span class="line">sel=selectors.DefaultSelector()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">accept</span>(<span class="params">server_fileobj,mask</span>):</span><br><span class="line">    conn,addr=server_fileobj.accept()</span><br><span class="line">    sel.register(conn,selectors.EVENT_READ,read)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">conn,mask</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        data=conn.recv(<span class="number">1024</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;closing&#x27;</span>,conn)</span><br><span class="line">            sel.unregister(conn)</span><br><span class="line">            conn.close()</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        conn.send(data.upper()+<span class="string">b&#x27;_SB&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;closing&#x27;</span>, conn)</span><br><span class="line">        sel.unregister(conn)</span><br><span class="line">        conn.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server_fileobj=socket(AF_INET,SOCK_STREAM)</span><br><span class="line">server_fileobj.setsockopt(SOL_SOCKET,SO_REUSEADDR,<span class="number">1</span>)</span><br><span class="line">server_fileobj.bind((<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8088</span>))</span><br><span class="line">server_fileobj.listen(<span class="number">5</span>)</span><br><span class="line">server_fileobj.setblocking(<span class="literal">False</span>) <span class="comment">#设置socket的接口为非阻塞</span></span><br><span class="line">sel.register(server_fileobj,selectors.EVENT_READ,accept) <span class="comment">#相当于网select的读列表里append了一个文件句柄server_fileobj,并且绑定了一个回调函数accept</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    events=sel.select() <span class="comment">#检测所有的fileobj，是否有完成wait data的</span></span><br><span class="line">    <span class="keyword">for</span> sel_obj,mask <span class="keyword">in</span> events:</span><br><span class="line">        callback=sel_obj.data <span class="comment">#callback=accpet</span></span><br><span class="line">        callback(sel_obj.fileobj,mask) <span class="comment">#accpet(server_fileobj,1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#客户端</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line">c=socket(AF_INET,SOCK_STREAM)</span><br><span class="line">c.connect((<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8088</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    msg=<span class="built_in">input</span>(<span class="string">&#x27;&gt;&gt;: &#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> msg:<span class="keyword">continue</span></span><br><span class="line">    c.send(msg.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    data=c.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="built_in">print</span>(data.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure><p>基于selectors模块实现并发的FTP</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 客户端</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> os,sys</span><br><span class="line">BASE_DIR = os.path.dirname(os.path.abspath(__file__))</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">selectFtpClient</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.args=sys.argv</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(self.args)&gt;<span class="number">1</span>:</span><br><span class="line">            self.port=(self.args[<span class="number">1</span>],<span class="built_in">int</span>(self.args[<span class="number">2</span>]))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.port=(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">8885</span>)</span><br><span class="line">        self.create_socket()</span><br><span class="line">        self.command_fanout()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_socket</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.sk = socket.socket()</span><br><span class="line">            self.sk.connect(self.port)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;连接FTP服务器成功!&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;error: &quot;</span>,e)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">command_fanout</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            cmd = <span class="built_in">input</span>(<span class="string">&#x27;&gt;&gt;&gt;&#x27;</span>).strip()</span><br><span class="line">            <span class="keyword">if</span> cmd == <span class="string">&#x27;exit()&#x27;</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            cmd,file = cmd.split()</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">hasattr</span>(self, cmd):</span><br><span class="line">                func = <span class="built_in">getattr</span>(self, cmd)</span><br><span class="line">                func(cmd,file)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;调用错误!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">self,cmd,file</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> os.path.isfile(file):</span><br><span class="line">            fileName= os.path.basename(file)</span><br><span class="line">            fileSize = os.path.getsize(file)</span><br><span class="line">            fileInfo =<span class="string">&#x27;%s|%s|%s&#x27;</span>%(cmd,fileName,fileSize)</span><br><span class="line">            self.sk.send(<span class="built_in">bytes</span>(fileInfo, encoding=<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">            recvStatus = self.sk.recv(<span class="number">1024</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;recvStatus&#x27;</span>, recvStatus)</span><br><span class="line">            hasSend = <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">str</span>(recvStatus, encoding=<span class="string">&#x27;utf8&#x27;</span>) == <span class="string">&quot;OK&quot;</span>:</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(file, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    <span class="keyword">while</span> fileSize &gt; hasSend :</span><br><span class="line">                        contant = f.read(<span class="number">1024</span>)</span><br><span class="line">                        recv_size = <span class="built_in">len</span>(contant)</span><br><span class="line">                        self.sk.send(contant)</span><br><span class="line">                        hasSend += recv_size</span><br><span class="line">                        s=<span class="built_in">str</span>(<span class="built_in">int</span>(hasSend/fileSize*<span class="number">100</span>))+<span class="string">&quot;%&quot;</span></span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&quot;正在上传文件：&quot;</span>+fileName+<span class="string">&quot;   已经上传：&quot;</span>+s)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;%s文件上传完毕&#x27;</span> % (fileName,))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;文件不存在&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, cmd,file</span>):</span><br><span class="line">       <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    selectFtpClient()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务端</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">BASE_DIR = os.path.dirname(os.path.abspath(__file__))</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> selectors</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">selectFtpServer</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.dic = &#123;&#125;</span><br><span class="line">        self.hasReceived=<span class="number">0</span></span><br><span class="line">        self.sel = selectors.DefaultSelector()</span><br><span class="line">        self.create_socket()</span><br><span class="line">        self.handle()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_socket</span>(<span class="params">self</span>):</span><br><span class="line">        server = socket.socket()</span><br><span class="line">        server.bind((<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">8885</span>))</span><br><span class="line">        server.listen(<span class="number">5</span>)</span><br><span class="line">        server.setblocking(<span class="literal">False</span>)</span><br><span class="line">        self.sel.register(server, selectors.EVENT_READ, self.accept)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;服务端已开启，等待用户连接...&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            events = self.sel.select()</span><br><span class="line">            <span class="keyword">for</span> key, mask <span class="keyword">in</span> events:</span><br><span class="line">                callback = key.data</span><br><span class="line">                callback(key.fileobj, mask)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">accept</span>(<span class="params">self,sock, mask</span>):</span><br><span class="line"></span><br><span class="line">        conn, addr = sock.accept()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;from %s %s connected&quot;</span>%addr)</span><br><span class="line">        conn.setblocking(<span class="literal">False</span>)</span><br><span class="line">        self.sel.register(conn, selectors.EVENT_READ, self.read)</span><br><span class="line"></span><br><span class="line">        self.dic[conn] = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">self, conn, mask</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.dic[conn] :</span><br><span class="line"></span><br><span class="line">                data = conn.recv(<span class="number">1024</span>)</span><br><span class="line">                cmd,filename,filesize = <span class="built_in">str</span>(data, encoding=<span class="string">&#x27;utf-8&#x27;</span>).split(<span class="string">&#x27;|&#x27;</span>)</span><br><span class="line">                self.dic=&#123;conn:&#123;<span class="string">&quot;cmd&quot;</span>: cmd, <span class="string">&quot;filename&quot;</span>: filename,<span class="string">&quot;filesize&quot;</span>: <span class="built_in">int</span>(filesize)&#125;&#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> cmd == <span class="string">&#x27;put&#x27;</span>:</span><br><span class="line">                    conn.send(<span class="built_in">bytes</span>(<span class="string">&quot;OK&quot;</span>,encoding=<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> self.dic[conn][<span class="string">&#x27;cmd&#x27;</span>] == <span class="string">&#x27;get&#x27;</span>:</span><br><span class="line">                    file = os.path.join(BASE_DIR,<span class="string">&quot;download&quot;</span>,filename)</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> os.path.exists(file):</span><br><span class="line">                        fileSize = os.path.getsize(file)</span><br><span class="line">                        send_info = <span class="string">&#x27;%s|%s&#x27;</span>%(<span class="string">&#x27;YES&#x27;</span>,fileSize)</span><br><span class="line">                        conn.send(<span class="built_in">bytes</span>(send_info, encoding=<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        send_info = <span class="string">&#x27;%s|%s&#x27;</span>%(<span class="string">&#x27;NO&#x27;</span>,<span class="number">0</span>)</span><br><span class="line">                        conn.send(<span class="built_in">bytes</span>(send_info, encoding=<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> self.dic[conn].get(<span class="string">&#x27;cmd&#x27;</span>,<span class="literal">None</span>):</span><br><span class="line">                    cmd=self.dic[conn].get(<span class="string">&#x27;cmd&#x27;</span>)</span><br><span class="line">                    <span class="keyword">if</span> <span class="built_in">hasattr</span>(self, cmd):</span><br><span class="line">                        func = <span class="built_in">getattr</span>(self,cmd)</span><br><span class="line">                        func(conn)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&quot;error cmd!&quot;</span>)</span><br><span class="line">                        conn.close()</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;error cmd!&quot;</span>)</span><br><span class="line">                    conn.close()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;error&#x27;</span>, e)</span><br><span class="line">            self.sel.unregister(conn)</span><br><span class="line">            conn.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">self, conn</span>):</span><br><span class="line"></span><br><span class="line">        fileName = self.dic[conn][<span class="string">&#x27;filename&#x27;</span>]</span><br><span class="line">        fileSize = self.dic[conn][<span class="string">&#x27;filesize&#x27;</span>]</span><br><span class="line">        path = os.path.join(BASE_DIR,<span class="string">&quot;upload&quot;</span>,fileName)</span><br><span class="line">        recv_data = conn.recv(<span class="number">1024</span>)</span><br><span class="line">        self.hasReceived += <span class="built_in">len</span>(recv_data)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&#x27;ab&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(recv_data)</span><br><span class="line">        <span class="keyword">if</span> fileSize == self.hasReceived:</span><br><span class="line">            <span class="keyword">if</span> conn <span class="keyword">in</span> self.dic.keys():</span><br><span class="line">                self.dic[conn] = &#123;&#125;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;%s上传完毕！&quot;</span>%fileName)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self,conn</span>):</span><br><span class="line"></span><br><span class="line">        filename = self.dic[conn][<span class="string">&#x27;filename&#x27;</span>]</span><br><span class="line">        path = os.path.join(BASE_DIR,<span class="string">&quot;download&quot;</span>,filename)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">str</span>(conn.recv(<span class="number">1024</span>), <span class="string">&#x27;utf-8&#x27;</span>) == <span class="string">&quot;second_active&quot;</span>:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">                    conn.send(line)</span><br><span class="line">            self.dic[conn] = &#123;&#125;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;文件下载完毕!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    selectFtpServer()</span><br></pre></td></tr></table></figure><h1 id="paramiko模块"><a href="#paramiko模块" class="headerlink" title="paramiko模块"></a>paramiko模块</h1><ol><li>介绍：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">paramiko是一个用于做远程控制的模块，使用该模块可以对远程服务器进行命令或文件操作，值得一说的是，fabric和ansible内部的远程管理就是使用的paramiko来现实。</span><br></pre></td></tr></table></figure><ol><li>下载安装</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install paramiko <span class="comment">#在python3中</span></span><br></pre></td></tr></table></figure><ol><li>使用</li></ol><p><strong>SSHClient</strong></p><p>用于连接远程服务器并执行基本命令</p><p><strong>基于用户名密码连接：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建SSH对象</span></span><br><span class="line">ssh = paramiko.SSHClient()</span><br><span class="line"><span class="comment"># 允许连接不在know_hosts文件中的主机</span></span><br><span class="line">ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class="line"><span class="comment"># 连接服务器</span></span><br><span class="line">ssh.connect(hostname=<span class="string">&#x27;120.92.84.249&#x27;</span>, port=<span class="number">22</span>, username=<span class="string">&#x27;root&#x27;</span>, password=<span class="string">&#x27;xxx&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行命令</span></span><br><span class="line">stdin, stdout, stderr = ssh.exec_command(<span class="string">&#x27;df&#x27;</span>)</span><br><span class="line"><span class="comment"># 获取命令结果</span></span><br><span class="line">result = stdout.read()</span><br><span class="line"><span class="built_in">print</span>(result.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="comment"># 关闭连接</span></span><br><span class="line">ssh.close()</span><br></pre></td></tr></table></figure><p>SSHClient 封装 Transport</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"></span><br><span class="line">transport = paramiko.Transport((<span class="string">&#x27;120.92.84.249&#x27;</span>, <span class="number">22</span>))</span><br><span class="line">transport.connect(username=<span class="string">&#x27;root&#x27;</span>, password=<span class="string">&#x27;xxx&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ssh = paramiko.SSHClient()</span><br><span class="line">ssh._transport = transport</span><br><span class="line"></span><br><span class="line">stdin, stdout, stderr = ssh.exec_command(<span class="string">&#x27;df&#x27;</span>)</span><br><span class="line">res=stdout.read()</span><br><span class="line"><span class="built_in">print</span>(res.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">transport.close()</span><br></pre></td></tr></table></figure><p><strong>基于公钥密钥连接：</strong></p><p><strong>客户端文件名：i</strong>d_rsa</p><p><strong>服务端必须有文件名：</strong>authorized_keys(在用ssh-keygen时，必须制作一个authorized_keys,可以用ssh-copy-id来制作)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"></span><br><span class="line">private_key = paramiko.RSAKey.from_private_key_file(<span class="string">&#x27;/tmp/id_rsa&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建SSH对象</span></span><br><span class="line">ssh = paramiko.SSHClient()</span><br><span class="line"><span class="comment"># 允许连接不在know_hosts文件中的主机</span></span><br><span class="line">ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class="line"><span class="comment"># 连接服务器</span></span><br><span class="line">ssh.connect(hostname=<span class="string">&#x27;120.92.84.249&#x27;</span>, port=<span class="number">22</span>, username=<span class="string">&#x27;root&#x27;</span>, pkey=private_key)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行命令</span></span><br><span class="line">stdin, stdout, stderr = ssh.exec_command(<span class="string">&#x27;df&#x27;</span>)</span><br><span class="line"><span class="comment"># 获取命令结果</span></span><br><span class="line">result = stdout.read()</span><br><span class="line"><span class="built_in">print</span>(result.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="comment"># 关闭连接</span></span><br><span class="line">ssh.close()</span><br></pre></td></tr></table></figure><p>SSHClient 封装 Transport</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"></span><br><span class="line">private_key = paramiko.RSAKey.from_private_key_file(<span class="string">&#x27;/tmp/id_rsa&#x27;</span>)</span><br><span class="line"></span><br><span class="line">transport = paramiko.Transport((<span class="string">&#x27;120.92.84.249&#x27;</span>, <span class="number">22</span>))</span><br><span class="line">transport.connect(username=<span class="string">&#x27;root&#x27;</span>, pkey=private_key)</span><br><span class="line"></span><br><span class="line">ssh = paramiko.SSHClient()</span><br><span class="line">ssh._transport = transport</span><br><span class="line"></span><br><span class="line">stdin, stdout, stderr = ssh.exec_command(<span class="string">&#x27;df&#x27;</span>)</span><br><span class="line">result=stdout.read()</span><br><span class="line"><span class="built_in">print</span>(result.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">transport.close()</span><br></pre></td></tr></table></figure><p>基于私钥字符串进行连接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> StringIO</span><br><span class="line"></span><br><span class="line">key_str = <span class="string">&quot;&quot;&quot;-----BEGIN RSA PRIVATE KEY-----</span></span><br><span class="line"><span class="string">MIIEoQIBAAKCAQEAsJmFLrSeCumJvga0Gl5O5wVOVwMIy2MpqIyQPi5J87dg89a4</span></span><br><span class="line"><span class="string">Da9fczJog7qoSbRwHFOQoCHNphSlp5KPhGsF6RJewkIw9H1UKV4dCOyl/4HOAkAD</span></span><br><span class="line"><span class="string">rKrsEDmrJ9JlzF2GTTZSnTgVQWcvBS2RKB4eM2R9aJ11xV6X2Hk4YDLTExIWeabb</span></span><br><span class="line"><span class="string">h2TUKw0iyjI8pRuYLKkF2X16u9TBwfOTroGYgiNFHQvhsQppbEbI49NF2XkCkFMi</span></span><br><span class="line"><span class="string">8/7tLjf95InE/VUUq56JqfzyHwdpHou+waXbwtvGgXN3sz+KkuEv6R2qDz06upZV</span></span><br><span class="line"><span class="string">FCZRRpDhzoR8Uh/UEzTGZb8z7FB6EJXUiXJikQIBIwKCAQBBmBuGYFf1bK+BGG7H</span></span><br><span class="line"><span class="string">9ySe81ecqVsJtx4aCFLVRGScWg4RbQKIvXs5an6XU/VdNGQnx0RYvBkvDvuzRRC8</span></span><br><span class="line"><span class="string">J8Bd4kB0CfTtGJuaVigKoQp02HEWx1HSa17+tlWD0c4KFBvwywi+DYQ83S64x8gz</span></span><br><span class="line"><span class="string">eOalX9bPFenqORPUD8R7gJeKvPVc6ZTPeorpuH7u9xayP0Eop8qKxZza9Xh3foVj</span></span><br><span class="line"><span class="string">Qo4IxoYnDN57CIRX5PFSlDDggpmr8FtRF4nAxmFq8LhSp05ivzX/Ku1SNHdaMWZO</span></span><br><span class="line"><span class="string">7va8tISXdLI5m0EGzoVoBvohIbwlxI6kfmamrh6Eas2Jnsc4CLzMsR4jBWt0LHLv</span></span><br><span class="line"><span class="string">/SLnAoGBANaEUf/Jptab9G/xD9W2tw/636i3gLpTPY9KPtCcAxqStNeT6RAWZ5HF</span></span><br><span class="line"><span class="string">lKJg+NKpu3pI45ldAwvts0i+aCZk2xakEWIZWqCmXm31JSPDQTaMGe7H0vOmUaxx</span></span><br><span class="line"><span class="string">ncdpBVdvhMbfFUgei15iKfuafgrKaS9oIkntXEgrC+3wBOI0Gbx3AoGBANLAGxAF</span></span><br><span class="line"><span class="string">TK7ydr+Q1+6/ujs6e8WsXt8HZMa/1khCVSbrf1MgACvZPSSSrDpVwaDTSjlRI4AL</span></span><br><span class="line"><span class="string">bb0l0RFU+/0caMiHilscuJdz9Fdd9Ux4pjROZa3TF5CFhvP7PsZAoxOo+yqJg4zr</span></span><br><span class="line"><span class="string">996GG/aAv4M8lQJ2rDFk/Dgn5y/AaAun1oM3AoGAGIQmoOPYjY4qkHNSRE9lYOl4</span></span><br><span class="line"><span class="string">pZFQilKn8x5tlC8WTC4GCgJGhX7nQ9wQ/J1eQ/YkDfmznH+ok6YjHkGlgLsRuXHW</span></span><br><span class="line"><span class="string">GdcDCwuzBUCWh76LHC1EytUCKnloa3qy8jfjWnMlHgrd3FtDILrC+C7p1Vj2FAvm</span></span><br><span class="line"><span class="string">qVz0moiTpioPL8twp9MCgYEAin49q3EyZFYwxwdpU7/SJuvq750oZq0WVriUINsi</span></span><br><span class="line"><span class="string">A6IR14oOvbqkhb94fhsY12ZGt/N9uosq22H+anms6CicoQicv4fnBHDFI3hCHE9I</span></span><br><span class="line"><span class="string">pgeh50GTJHUA6Xk34V2s/kp5KpThazv6qCw+QubkQExh660SEdSlvoCfPKMCi1EJ</span></span><br><span class="line"><span class="string">TukCgYAZKY1NZ2bjJyyO/dfNvMQ+etUL/9esi+40GUGyJ7SZcazrN9z+DO0yL39g</span></span><br><span class="line"><span class="string">7FT9NMIc2dsmNJQMaGBCDl0AjO1O3b/wqlrNvNBGkanxn2Htn5ajfo+LBU7yHAcV</span></span><br><span class="line"><span class="string">7w4X5HLarXiE1mj0LXFKJhdvFqU53KUQJXBqR6lsMqzsdPwLMJg==</span></span><br><span class="line"><span class="string">-----END RSA PRIVATE KEY-----&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">private_key = paramiko.RSAKey(file_obj=StringIO(key_str))</span><br><span class="line">transport = paramiko.Transport((<span class="string">&#x27;120.92.84.249&#x27;</span>, <span class="number">22</span>))</span><br><span class="line">transport.connect(username=<span class="string">&#x27;root&#x27;</span>, pkey=private_key)</span><br><span class="line"></span><br><span class="line">ssh = paramiko.SSHClient()</span><br><span class="line">ssh._transport = transport</span><br><span class="line"></span><br><span class="line">stdin, stdout, stderr = ssh.exec_command(<span class="string">&#x27;df&#x27;</span>)</span><br><span class="line">result = stdout.read()</span><br><span class="line"><span class="built_in">print</span>(result.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">transport.close()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><p><strong>SFTPClient</strong></p><p>用于连接远程服务器并执行上传下载</p><p><strong>基于用户名密码上传下载</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"> </span><br><span class="line">transport = paramiko.Transport((<span class="string">&#x27;120.92.84.249&#x27;</span>,<span class="number">22</span>))</span><br><span class="line">transport.connect(username=<span class="string">&#x27;root&#x27;</span>,password=<span class="string">&#x27;xxx&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">sftp = paramiko.SFTPClient.from_transport(transport)</span><br><span class="line"><span class="comment"># 将location.py 上传至服务器 /tmp/test.py</span></span><br><span class="line">sftp.put(<span class="string">&#x27;/tmp/id_rsa&#x27;</span>, <span class="string">&#x27;/etc/test.rsa&#x27;</span>)</span><br><span class="line"><span class="comment"># 将remove_path 下载到本地 local_path</span></span><br><span class="line">sftp.get(<span class="string">&#x27;remove_path&#x27;</span>, <span class="string">&#x27;local_path&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">transport.close()</span><br></pre></td></tr></table></figure><p><strong>基于公钥密钥上传下载</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"></span><br><span class="line">private_key = paramiko.RSAKey.from_private_key_file(<span class="string">&#x27;/tmp/id_rsa&#x27;</span>)</span><br><span class="line"></span><br><span class="line">transport = paramiko.Transport((<span class="string">&#x27;120.92.84.249&#x27;</span>, <span class="number">22</span>))</span><br><span class="line">transport.connect(username=<span class="string">&#x27;root&#x27;</span>, pkey=private_key )</span><br><span class="line"></span><br><span class="line">sftp = paramiko.SFTPClient.from_transport(transport)</span><br><span class="line"><span class="comment"># 将location.py 上传至服务器 /tmp/test.py</span></span><br><span class="line">sftp.put(<span class="string">&#x27;/tmp/id_rsa&#x27;</span>, <span class="string">&#x27;/tmp/a.txt&#x27;</span>)</span><br><span class="line"><span class="comment"># 将remove_path 下载到本地 local_path</span></span><br><span class="line">sftp.get(<span class="string">&#x27;remove_path&#x27;</span>, <span class="string">&#x27;local_path&#x27;</span>)</span><br><span class="line"></span><br><span class="line">transport.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Haproxy</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.host = <span class="string">&#x27;172.16.103.191&#x27;</span></span><br><span class="line">        self.port = <span class="number">22</span></span><br><span class="line">        self.username = <span class="string">&#x27;root&#x27;</span></span><br><span class="line">        self.pwd = <span class="string">&#x27;123&#x27;</span></span><br><span class="line">        self.__k = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_file</span>(<span class="params">self</span>):</span><br><span class="line">        file_name = <span class="built_in">str</span>(uuid.uuid4())</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_name,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(<span class="string">&#x27;sb&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> file_name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        self.connect()</span><br><span class="line">        self.upload()</span><br><span class="line">        self.rename()</span><br><span class="line">        self.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">connect</span>(<span class="params">self</span>):</span><br><span class="line">        transport = paramiko.Transport((self.host,self.port))</span><br><span class="line">        transport.connect(username=self.username,password=self.pwd)</span><br><span class="line">        self.__transport = transport</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">close</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        self.__transport.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">upload</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 连接，上传</span></span><br><span class="line">        file_name = self.create_file()</span><br><span class="line"></span><br><span class="line">        sftp = paramiko.SFTPClient.from_transport(self.__transport)</span><br><span class="line">        <span class="comment"># 将location.py 上传至服务器 /tmp/test.py</span></span><br><span class="line">        sftp.put(file_name, <span class="string">&#x27;/home/root/tttttttttttt.py&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">rename</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        ssh = paramiko.SSHClient()</span><br><span class="line">        ssh._transport = self.__transport</span><br><span class="line">        <span class="comment"># 执行命令</span></span><br><span class="line">        stdin, stdout, stderr = ssh.exec_command(<span class="string">&#x27;mv /home/root/tttttttttttt.py /home/root/ooooooooo.py&#x27;</span>)</span><br><span class="line">        <span class="comment"># 获取命令结果</span></span><br><span class="line">        result = stdout.read()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ha = Haproxy()</span><br><span class="line">ha.run()</span><br></pre></td></tr></table></figure><blockquote><p>练习</p><ol><li>主机分组</li><li>主机信息配置文件用configparser解析</li><li>可批量执行命令、发送文件，结果实时返回，执行格式如下 <ol><li>batch_run  -h h1,h2,h3  -g web_clusters,db_servers   -cmd  “df -h”　</li><li>batch_scp  -h h1,h2,h3  -g web_clusters,db_servers  -action put  -local test.py  -remote /tmp/　</li></ol></li><li>主机用户名密码、端口可以不同</li><li>执行远程命令使用paramiko模块</li><li>批量命令需使用multiprocessing并发</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python之旅 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬取哔哩哔哩视频</title>
      <link href="/2019/12/11/Python/%E5%A5%87%E9%97%BB%E6%9D%82%E8%B0%88/%E7%88%AC%E5%8F%96%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9%E8%A7%86%E9%A2%91/"/>
      <url>/2019/12/11/Python/%E5%A5%87%E9%97%BB%E6%9D%82%E8%B0%88/%E7%88%AC%E5%8F%96%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9%E8%A7%86%E9%A2%91/</url>
      
        <content type="html"><![CDATA[<h1 id="下载任意哔哩哔哩视频"><a href="#下载任意哔哩哔哩视频" class="headerlink" title="下载任意哔哩哔哩视频"></a>下载任意哔哩哔哩视频</h1><h2 id="一-寻找任意一个视频地址"><a href="#一-寻找任意一个视频地址" class="headerlink" title="一 寻找任意一个视频地址"></a>一 寻找任意一个视频地址</h2><p>例如这个：</p><p><img src="1.jpg" alt="img"><br>拿出窗口中的链接：<a href="https://www.bilibili.com/video/av76609390，修改源代码中的url即可完成下载">https://www.bilibili.com/video/av76609390，修改源代码中的url即可完成下载</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#由于哔哩哔哩视频音频是分开的，所以下来下来的视频是两个，一个音频，一个视频，要视频和音频合成，可看另一偏博客</span><br></pre></td></tr></table></figure><h2 id="二-分析页面"><a href="#二-分析页面" class="headerlink" title="二 分析页面"></a>二 分析页面</h2><p>这个地址加载后会有该视频的视频信息和清晰度等信息，我们只需要取出视频和音频的地址，直接下载即可，</p><p>下面这两个地址就是一个视频，一个音频，分片下载的</p><p><img src="2.jpg" alt="img"><br><img src="3.jpg" alt="img"><br>我们用requests模块模拟即可，打开文件不停的发送请求加载数据写入即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">def download_video(old_video_url, video_url, audio_url, video_name):</span><br><span class="line">    headers.update(&#123;&quot;Referer&quot;: old_video_url&#125;)</span><br><span class="line">    print(&quot;开始下载视频：%s&quot; % video_name)</span><br><span class="line">    video_content = requests.get(video_url, headers=headers)</span><br><span class="line">    print(&#x27;%s视频大小：&#x27; % video_name, video_content.headers[&#x27;content-length&#x27;])</span><br><span class="line">    audio_content = requests.get(audio_url, headers=headers)</span><br><span class="line">    print(&#x27;%s音频大小：&#x27; % video_name, audio_content.headers[&#x27;content-length&#x27;])</span><br><span class="line">    # 下载视频开始</span><br><span class="line">    received_video = 0</span><br><span class="line">    with open(&#x27;%s_video.mp4&#x27; % video_name, &#x27;ab&#x27;) as output:</span><br><span class="line">        while int(video_content.headers[&#x27;content-length&#x27;]) &gt; received_video:</span><br><span class="line">            headers[&#x27;Range&#x27;] = &#x27;bytes=&#x27; + str(received_video) + &#x27;-&#x27;</span><br><span class="line">            response = requests.get(video_url, headers=headers)</span><br><span class="line">            output.write(response.content)</span><br><span class="line">            received_video += len(response.content)</span><br><span class="line">    # 下载视频结束</span><br><span class="line">    # 下载音频开始</span><br><span class="line">    audio_content = requests.get(audio_url, headers=headers)</span><br><span class="line">    received_audio = 0</span><br><span class="line">    with open(&#x27;%s_audio.mp4&#x27; % video_name, &#x27;ab&#x27;) as output:</span><br><span class="line">        while int(audio_content.headers[&#x27;content-length&#x27;]) &gt; received_audio:</span><br><span class="line">            # 视频分片下载</span><br><span class="line">            headers[&#x27;Range&#x27;] = &#x27;bytes=&#x27; + str(received_audio) + &#x27;-&#x27;</span><br><span class="line">            response = requests.get(audio_url, headers=headers)</span><br><span class="line">            output.write(response.content)</span><br><span class="line">            received_audio += len(response.content)</span><br><span class="line">    # 下载音频结束</span><br><span class="line">    return video_name</span><br></pre></td></tr></table></figure><h2 id="三-全部代码"><a href="#三-全部代码" class="headerlink" title="三 全部代码"></a>三 全部代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line"></span><br><span class="line">通过该程序下载的视频和音频是分成连个文件的，没有合成，</span><br><span class="line">视频为：视频名_video.mp4</span><br><span class="line">音频为：视频名_audio.mp4</span><br><span class="line">修改url的值，换成自己想下载的页面节课</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line"></span><br><span class="line"># 导入requests模块，模拟发送请求</span><br><span class="line">import requests</span><br><span class="line"># 导入json</span><br><span class="line">import json</span><br><span class="line"># 导入re</span><br><span class="line">import re</span><br><span class="line"></span><br><span class="line"># 定义请求头</span><br><span class="line">headers = &#123;</span><br><span class="line">    &#x27;Accept&#x27;: &#x27;*/*&#x27;,</span><br><span class="line">    &#x27;Accept-Language&#x27;: &#x27;en-US,en;q=0.5&#x27;,</span><br><span class="line">    &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.84 Safari/537.36&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 正则表达式，根据条件匹配出值</span><br><span class="line">def my_match(text, pattern):</span><br><span class="line">    match = re.search(pattern, text)</span><br><span class="line">    print(match.group(1))</span><br><span class="line">    print()</span><br><span class="line">    return json.loads(match.group(1))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def download_video(old_video_url, video_url, audio_url, video_name):</span><br><span class="line">    headers.update(&#123;&quot;Referer&quot;: old_video_url&#125;)</span><br><span class="line">    print(&quot;开始下载视频：%s&quot; % video_name)</span><br><span class="line">    video_content = requests.get(video_url, headers=headers)</span><br><span class="line">    print(&#x27;%s视频大小：&#x27; % video_name, video_content.headers[&#x27;content-length&#x27;])</span><br><span class="line">    audio_content = requests.get(audio_url, headers=headers)</span><br><span class="line">    print(&#x27;%s音频大小：&#x27; % video_name, audio_content.headers[&#x27;content-length&#x27;])</span><br><span class="line">    # 下载视频开始</span><br><span class="line">    received_video = 0</span><br><span class="line">    with open(&#x27;%s_video.mp4&#x27; % video_name, &#x27;ab&#x27;) as output:</span><br><span class="line">        while int(video_content.headers[&#x27;content-length&#x27;]) &gt; received_video:</span><br><span class="line">            headers[&#x27;Range&#x27;] = &#x27;bytes=&#x27; + str(received_video) + &#x27;-&#x27;</span><br><span class="line">            response = requests.get(video_url, headers=headers)</span><br><span class="line">            output.write(response.content)</span><br><span class="line">            received_video += len(response.content)</span><br><span class="line">    # 下载视频结束</span><br><span class="line">    # 下载音频开始</span><br><span class="line">    audio_content = requests.get(audio_url, headers=headers)</span><br><span class="line">    received_audio = 0</span><br><span class="line">    with open(&#x27;%s_audio.mp4&#x27; % video_name, &#x27;ab&#x27;) as output:</span><br><span class="line">        while int(audio_content.headers[&#x27;content-length&#x27;]) &gt; received_audio:</span><br><span class="line">            # 视频分片下载</span><br><span class="line">            headers[&#x27;Range&#x27;] = &#x27;bytes=&#x27; + str(received_audio) + &#x27;-&#x27;</span><br><span class="line">            response = requests.get(audio_url, headers=headers)</span><br><span class="line">            output.write(response.content)</span><br><span class="line">            received_audio += len(response.content)</span><br><span class="line">    # 下载音频结束</span><br><span class="line">    return video_name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    # 换成你要爬取的视频地址</span><br><span class="line">    url = &#x27;https://www.bilibili.com/video/av76609390&#x27;</span><br><span class="line">    # 发送请求，拿回数据</span><br><span class="line">    res = requests.get(url, headers=headers)</span><br><span class="line">    # 视频详情json</span><br><span class="line">    playinfo = my_match(res.text, &#x27;__playinfo__=(.*?)&lt;/script&gt;&lt;script&gt;&#x27;)</span><br><span class="line">    # 视频内容json</span><br><span class="line">    initial_state = my_match(res.text, r&#x27;__INITIAL_STATE__=(.*?);\(function\(\)&#x27;)</span><br><span class="line">    # 视频分多种格式，直接取分辨率最高的视频 1080p</span><br><span class="line">    video_url = playinfo[&#x27;data&#x27;][&#x27;dash&#x27;][&#x27;video&#x27;][0][&#x27;baseUrl&#x27;]</span><br><span class="line">    # 取出音频地址</span><br><span class="line">    audio_url = playinfo[&#x27;data&#x27;][&#x27;dash&#x27;][&#x27;audio&#x27;][0][&#x27;baseUrl&#x27;]</span><br><span class="line">    video_name = initial_state[&#x27;videoData&#x27;][&#x27;title&#x27;]</span><br><span class="line">    print(&#x27;视频名字为：video_name&#x27;)</span><br><span class="line">    print(&#x27;视频地址为：&#x27;, video_url)</span><br><span class="line">    print(&#x27;音频地址为：&#x27;, audio_url)</span><br><span class="line">    download_video(url, video_url, audio_url, video_name)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 奇闻杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>布隆过滤器</title>
      <link href="/2019/12/09/Python/%E5%A5%87%E9%97%BB%E6%9D%82%E8%B0%88/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
      <url>/2019/12/09/Python/%E5%A5%87%E9%97%BB%E6%9D%82%E8%B0%88/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="大白话布隆过滤器"><a href="#大白话布隆过滤器" class="headerlink" title="大白话布隆过滤器"></a>大白话布隆过滤器</h1><p>不知道从什么时候开始，本来默默无闻的布隆过滤器一下子名声大燥，仿佛身在互联网，做着开发的，无人不知，无人不晓，哪怕对技术不是很关心的小伙伴也听过它的名号。我也花了不少时间去研究布隆过滤器，看了不少博客，无奈不是科班出身，又没有那么聪明的头脑，又比较懒…经过“放弃，拿起，放弃，拿起”的无限轮回，应该算是了解了布隆过滤器的核心思想，所以想给大家分享下。</p><h2 id="布隆过滤器的应用"><a href="#布隆过滤器的应用" class="headerlink" title="布隆过滤器的应用"></a>布隆过滤器的应用</h2><p>我们先来看下布隆过滤器的应用场景，让大家知道神奇的布隆过滤器到底能做什么。</p><h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><p>我们经常会把一部分数据放在Redis等缓存，比如产品详情。这样有查询请求进来，我们可以根据产品Id直接去缓存中取数据，而不用读取数据库，这是提升性能最简单，最普遍，也是最有效的做法。一般的查询请求流程是这样的：先查缓存，有缓存的话直接返回，如果缓存中没有，再去数据库查询，然后再把数据库取出来的数据放入缓存，一切看起来很美好。但是如果现在有大量请求进来，而且都在请求一个不存在的产品Id，会发生什么？既然产品Id都不存在，那么肯定没有缓存，没有缓存，那么大量的请求都怼到数据库，数据库的压力一下子就上来了，还有可能把数据库打死。<br>虽然有很多办法都可以解决这问题，但是我们的主角是“布隆过滤器”，没错，“布隆过滤器”就可以解决（缓解）缓存穿透问题。至于为什么说是“缓解”，看下去你就明白了。</p><h3 id="大量数据，判断给定的是否在其中"><a href="#大量数据，判断给定的是否在其中" class="headerlink" title="大量数据，判断给定的是否在其中"></a>大量数据，判断给定的是否在其中</h3><p>现在有大量的数据，而这些数据的大小已经远远超出了服务器的内存，现在再给你一个数据，如何判断给你的数据在不在其中。如果服务器的内存足够大，那么用HashMap是一个不错的解决方案，理论上的时间复杂度可以达到O(1)，但是现在数据的大小已经远远超出了服务器的内存，所以无法使用HashMap，这个时候就可以使用“布隆过滤器”来解决这个问题。但是还是同样的，会有一定的“误判率”。</p><h2 id="什么是布隆过滤器"><a href="#什么是布隆过滤器" class="headerlink" title="什么是布隆过滤器"></a>什么是布隆过滤器</h2><p>布隆过滤器是一个叫“布隆”的人提出的，它本身是一个很长的二进制向量，既然是二进制的向量，那么显而易见的，存放的不是0，就是1。</p><p>现在我们新建一个长度为16的布隆过滤器，默认值都是0，就像下面这样：<br><img src="1240.png" alt="png"><br>现在需要添加一个数据：</p><p>我们通过某种计算方式，比如Hash1，计算出了Hash1(数据)=5，我们就把下标为5的格子改成1，就像下面这样：</p><p><img src="1250.png" alt="png"><br><img src="1240.png" alt="png"><br><img src="1260.png" alt="png"><br>还是通过某种计算方式，比如Hash3，计算出了Hash3(数据)=2，我们就把下标为2的格子改成1，就像下面这样：</p><p><img src="1270.png" alt="png"><br>这样，刚才添加的数据就占据了布隆过滤器“5”，“9”，“2”三个格子。</p><p>可以看出，仅仅从布隆过滤器本身而言，根本没有存放完整的数据，只是运用一系列随机映射函数计算出位置，然后填充二进制向量。</p><p>这有什么用呢？比如现在再给你一个数据，你要判断这个数据是否重复，你怎么做？</p><p>你只需利用上面的三种固定的计算方式，计算出这个数据占据哪些格子，然后看看这些格子里面放置的是否都是1，如果有一个格子不为1，那么就代表这个数字不在其中。这很好理解吧，比如现在又给你了刚才你添加进去的数据，你通过三种固定的计算方式，算出的结果肯定和上面的是一模一样的，也是占据了布隆过滤器“5”，“9”，“2”三个格子。</p><p>但是有一个问题需要注意，如果这些格子里面放置的都是1，不一定代表给定的数据一定重复，也许其他数据经过三种固定的计算方式算出来的结果也是相同的。这也很好理解吧，比如我们需要判断对象是否相等，是不可以仅仅判断他们的哈希值是否相等的。</p><p>也就是说布隆过滤器只能判断数据是否一定不存在，而无法判断数据是否一定存在。</p><p>按理来说，介绍完了新增、查询的流程，就要介绍删除的流程了，但是很遗憾的是布隆过滤器是很难做到删除数据的，为什么？你想想，比如你要删除刚才给你的数据，你把“5”，“9”，“2”三个格子都改成了0，但是可能其他的数据也映射到了“5”，“9”，“2”三个格子啊，这不就乱套了吗？</p><p>相信经过我这么一介绍，大家对布隆过滤器应该有一个浅显的认识了，至少你应该清楚布隆过滤器的优缺点了：</p><ul><li>优点：由于存放的不是完整的数据，所以占用的内存很少，而且新增，查询速度够快；</li><li>缺点： 随着数据的增加，误判率随之增加；无法做到删除数据；只能判断数据是否一定不存在，而无法判断数据是否一定存在。</li></ul><p>可以看到，布隆过滤器的优点和缺点一样明显。</p><p>在上文中，我举的例子二进制向量长度为16，由三个随机映射函数计算位置，在实际开发中，如果你要添加大量的数据，仅仅16位是远远不够的，为了让误判率降低，我们还可以用更多的随机映射函数、更长的二进制向量去计算位置。</p><blockquote><p> 以上原文出自<a href="https://www.cnblogs.com/CodeBear/p/10911177.html">https://www.cnblogs.com/CodeBear/p/10911177.html</a></p></blockquote><h1 id="Python实现布隆过滤器"><a href="#Python实现布隆过滤器" class="headerlink" title="Python实现布隆过滤器"></a>Python实现布隆过滤器</h1><h2 id="布隆过滤器简介"><a href="#布隆过滤器简介" class="headerlink" title="布隆过滤器简介"></a>布隆过滤器简介</h2><p>bloomfilter：是一个通过多哈希函数映射到一张表的数据结构，能够快速的判断一个元素在一个集合内是否存在，具有很好的空间和时间效率。（典型例子，爬虫url去重）</p><p>原理：<br>BloomFilter 会开辟一个m位的bitArray(位数组)，开始所有数据全部置 0 。当一个元素过来时，能过多个哈希函数（h1,h2,h3….）计算不同的在哈希值，并通过哈希值找到对应的bitArray下标处，将里面的值 0 置为 1 。</p><p>关于多个哈希函数，它们计算出来的值必须 [0,m) 之中。</p><p>例子：</p><p>有这么一个网址</p><p>假设长度为 20的bitArray，通过 3 个哈希函数求值。如下图：</p><p><a href="./03-06-04-Python实现布隆过滤器 - 小猿取经 - 博客园_files/006y8mN6gy1g9dwunnbcyj30hk06vjrg.jpg"><img src="./03-06-04-Python实现布隆过滤器 - 小猿取经 - 博客园_files/006y8mN6gy1g9dwunnbcyj30hk06vjrg.jpg" alt="timg"></a></p><p>另外说明一下，当来查找对应的值时，同样通过哈希函数求值，再去寻找数组的下标，如果所有下标都为1时，元素存在。当然也存在错误率。（如：当数组全部为1时，那么查找什么都是存在的），但是这个错误率的大小，取决于数组的位数和哈希函数的个数。</p><h2 id="Python中使用布隆过滤器"><a href="#Python中使用布隆过滤器" class="headerlink" title="Python中使用布隆过滤器"></a>Python中使用布隆过滤器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#python3.6 安装</span></span><br><span class="line"><span class="comment">#需要先安装bitarray</span></span><br><span class="line">pip3 install bitarray-<span class="number">0.8</span><span class="number">.1</span>-cp36-cp36m-win_amd64.whl（pybloom_live依赖这个包，需要先安装）</span><br><span class="line"><span class="comment">#下载地址：https://www.lfd.uci.edu/~gohlke/pythonlibs/</span></span><br><span class="line">pip3 install pybloom_live</span><br></pre></td></tr></table></figure><p>示例一</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#ScalableBloomFilter 可以自动扩容</span></span><br><span class="line"><span class="keyword">from</span> pybloom_live <span class="keyword">import</span> ScalableBloomFilter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bloom = ScalableBloomFilter(initial_capacity=<span class="number">100</span>, error_rate=<span class="number">0.001</span>, mode=ScalableBloomFilter.LARGE_SET_GROWTH)</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;www.cnblogs.com&quot;</span></span><br><span class="line"></span><br><span class="line">url2 = <span class="string">&quot;www.liuqingzheng.top&quot;</span></span><br><span class="line"></span><br><span class="line">bloom.add(url)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(url <span class="keyword">in</span> bloom)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(url2 <span class="keyword">in</span> bloom)</span><br></pre></td></tr></table></figure><p>示例二</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#BloomFilter 是定长的</span></span><br><span class="line"><span class="keyword">from</span> pybloom_live <span class="keyword">import</span> BloomFilter</span><br><span class="line"></span><br><span class="line">bf = BloomFilter(capacity=<span class="number">1000</span>)</span><br><span class="line">url=<span class="string">&#x27;www.baidu.com&#x27;</span></span><br><span class="line">bf.add(url)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(url <span class="keyword">in</span> bf)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;www.liuqingzheng.top&quot;</span> <span class="keyword">in</span> bf)</span><br></pre></td></tr></table></figure><h1 id="Redis实现布隆过滤器"><a href="#Redis实现布隆过滤器" class="headerlink" title="Redis实现布隆过滤器"></a>Redis实现布隆过滤器</h1><p>要想使用redis提供的布隆过滤器，必须添加redis 4.0版本以上的插件才行，具体参照网上安装步骤。</p><h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><p>RedisBloom需要先进行安装，推荐使用Docker进行安装，简单方便:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker pull redislabs/rebloom:latest</span><br><span class="line">docker run -p <span class="number">6379</span>:<span class="number">6379</span> --name redis-redisbloom redislabs/rebloom:latest</span><br><span class="line">docker <span class="built_in">exec</span> -it redis-redisbloom bash</span><br><span class="line"><span class="comment"># redis-cli</span></span><br><span class="line"><span class="comment"># 127.0.0.1:6379&gt; bf.add xiaoyuanqujing hello</span></span><br></pre></td></tr></table></figure><h2 id="直接编译"><a href="#直接编译" class="headerlink" title="直接编译"></a>直接编译</h2><p>当然也可以直接编译进行安装:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/RedisBloom/RedisBloom.git</span><br><span class="line">cd RedisBloom</span><br><span class="line">make //编译 会生成一个rebloom.so文件</span><br><span class="line">redis-server --loadmodule /path/to/rebloom.so</span><br><span class="line">redis-cli -h <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> -p <span class="number">6379</span></span><br></pre></td></tr></table></figure><p>此模块不仅仅实现了布隆过滤器，还实现了 CuckooFilter（布谷鸟过滤器），以及 TopK 功能。CuckooFilter 是在 BloomFilter 的基础上主要解决了BloomFilter不能删除的缺点。先来看看 BloomFilter，后面介绍一下 CuckooFilter。</p><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bf.add 添加元素到布隆过滤器</span><br><span class="line">bf.exists 判断元素是否在布隆过滤器</span><br><span class="line">bf.madd 添加多个元素到布隆过滤器，bf.add只能添加一个</span><br><span class="line">bf.mexists 判断多个元素是否在布隆过滤器</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; bf.add rurl www.baidu.com</span><br><span class="line">&gt; bf.exists rurl www.baidu.com</span><br><span class="line">&gt; bf.madd rurl www.sougou.com www.jd.com</span><br><span class="line">&gt; bf.mexists rurl www.jd.com www.taobao.com</span><br></pre></td></tr></table></figure><p>布隆过滤器在第一次add的时候自动创建基于默认参数的过滤器，Redis还提供了自定义参数的布隆过滤器。</p><p>在add之前使用bf.reserve指令显式创建，其有3个参数，key，error_rate， initial_size，错误率越低，需要的空间越大，error_rate表示预计错误率，initial_size参数表示预计放入的元素数量，当实际数量超过这个值时，误判率会上升，所以需要提前设置一个较大的数值来避免超出。</p><p>默认的error_rate是0.01，initial_size是100。</p><p>利用布隆过滤器减少磁盘 IO 或者网络请求，因为一旦一个值必定不存在的话，我们可以不用进行后续昂贵的查询请求。</p><h2 id="测试误判率"><a href="#测试误判率" class="headerlink" title="测试误判率"></a>测试误判率</h2><p>接下来来测试一下误判率:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line">client = redis.Redis()</span><br><span class="line">size = <span class="number">100000</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(size):</span><br><span class="line">    client.execute_command(<span class="string">&quot;bf.add&quot;</span>, <span class="string">&quot;lqz&quot;</span>, <span class="string">&quot;xxx%d&quot;</span> % i)</span><br><span class="line">    result = client.execute_command(<span class="string">&quot;bf.exists&quot;</span>, <span class="string">&quot;lqz&quot;</span>, <span class="string">&quot;xxx%d&quot;</span> % (i + <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">if</span> result == <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;size: &#123;&#125; , error rate: &#123;&#125;%&quot;</span>.<span class="built_in">format</span>(size, <span class="built_in">round</span>(count / size * <span class="number">100</span>, <span class="number">5</span>)))</span><br></pre></td></tr></table></figure><p>测试结果如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#第一次测试</span></span><br><span class="line">size: <span class="number">1000</span> , error rate: <span class="number">1.0</span>%</span><br><span class="line"><span class="comment">#第一次测试</span></span><br><span class="line">size: <span class="number">10000</span> , error rate: <span class="number">1.25</span>%</span><br><span class="line"><span class="comment">#第一次测试</span></span><br><span class="line">size: <span class="number">100000</span> , error rate: <span class="number">1.304</span>%</span><br></pre></td></tr></table></figure><p>size=1000，就出现1%的误判率，size越高误判率会越高，那有没有办法控制误判率了，答案是有的。</p><p>实际上布隆过滤器是提供自定义参数，之前都是使用默认的参数，此模块还提供了一个命令<code>bf.reserve</code>，提供了三个参数， key, error_rate和initial_size。错误率越低，需要的空间越大，initial_size参数表示预计放入布隆过滤器的元素数量，当实际数量超出这个数值时，误判率会上升。 默认的参数是 error_rate=0.01, initial_size=100。</p><p>接下来测试一下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line">client = redis.Redis()</span><br><span class="line">size = <span class="number">10000</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line">client.execute_command(<span class="string">&quot;bf.reserve&quot;</span>, <span class="string">&quot;lqz&quot;</span>, <span class="number">0.001</span>, size) <span class="comment"># 新增</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(size):</span><br><span class="line">    client.execute_command(<span class="string">&quot;bf.add&quot;</span>, <span class="string">&quot;lqz&quot;</span>, <span class="string">&quot;xxx%d&quot;</span> % i)</span><br><span class="line">    result = client.execute_command(<span class="string">&quot;bf.exists&quot;</span>, <span class="string">&quot;lqz&quot;</span>, <span class="string">&quot;xxx%d&quot;</span> % (i + <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">if</span> result == <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;size: &#123;&#125; , error rate: &#123;&#125;%&quot;</span>.<span class="built_in">format</span>(size, <span class="built_in">round</span>(count / size * <span class="number">100</span>, <span class="number">5</span>)))</span><br></pre></td></tr></table></figure><p>新增一行代码，简单测试一下效果:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#第一次执行</span></span><br><span class="line">size: <span class="number">10000</span> , error rate: <span class="number">0.0</span>%</span><br><span class="line"><span class="comment">#第二次执行</span></span><br><span class="line">size: <span class="number">100000</span> , error rate: <span class="number">0.001</span>%</span><br></pre></td></tr></table></figure><p>误判率瞬间少了1000多倍。</p><p>但是要求误判率越低，所需要的空间是需要越大，可以有一个公式计算，由于公式较复杂，直接上类似计算器，感受一下:</p><p>如果一千万的数据，误判率允许 1%， 大概需要11M左右</p><p>如果要求误判率为 0.1%，则大概需要 17 M左右。</p><p>但这空间相比直接用set存1000万数据要少太多了</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 奇闻杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 布隆过滤器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫实战</title>
      <link href="/2019/12/09/Python/%E7%88%AC%E8%99%AB/%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98/"/>
      <url>/2019/12/09/Python/%E7%88%AC%E8%99%AB/%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式爬虫</title>
      <link href="/2019/12/09/Python/%E7%88%AC%E8%99%AB/%E5%88%86%E5%B8%83%E5%BC%8F%E7%88%AC%E8%99%AB/"/>
      <url>/2019/12/09/Python/%E7%88%AC%E8%99%AB/%E5%88%86%E5%B8%83%E5%BC%8F%E7%88%AC%E8%99%AB/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scrapy框架</title>
      <link href="/2019/12/09/Python/%E7%88%AC%E8%99%AB/Scrapy%E6%A1%86%E6%9E%B6/"/>
      <url>/2019/12/09/Python/%E7%88%AC%E8%99%AB/Scrapy%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scrapy框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫高性能相关</title>
      <link href="/2019/12/09/Python/%E7%88%AC%E8%99%AB/%E7%88%AC%E8%99%AB%E9%AB%98%E6%80%A7%E8%83%BD%E7%9B%B8%E5%85%B3/"/>
      <url>/2019/12/09/Python/%E7%88%AC%E8%99%AB/%E7%88%AC%E8%99%AB%E9%AB%98%E6%80%A7%E8%83%BD%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫高性能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>存储库之mongodb，redis，mysql</title>
      <link href="/2019/12/09/Python/%E7%88%AC%E8%99%AB/%E5%AD%98%E5%82%A8%E5%BA%93%E4%B9%8Bmongodb%EF%BC%8Credis%EF%BC%8Cmysql/"/>
      <url>/2019/12/09/Python/%E7%88%AC%E8%99%AB/%E5%AD%98%E5%82%A8%E5%BA%93%E4%B9%8Bmongodb%EF%BC%8Credis%EF%BC%8Cmysql/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> mongodb </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解析库之re、beautifulsoup、pyquery</title>
      <link href="/2019/12/09/Python/%E7%88%AC%E8%99%AB/%E8%A7%A3%E6%9E%90%E5%BA%93%E4%B9%8Bre%E3%80%81beautifulsoup%E3%80%81pyquery/"/>
      <url>/2019/12/09/Python/%E7%88%AC%E8%99%AB/%E8%A7%A3%E6%9E%90%E5%BA%93%E4%B9%8Bre%E3%80%81beautifulsoup%E3%80%81pyquery/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 解析库 </tag>
            
            <tag> re </tag>
            
            <tag> beautifulsoup </tag>
            
            <tag> pyquery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>请求库之requests，selenium</title>
      <link href="/2019/12/09/Python/%E7%88%AC%E8%99%AB/%E8%AF%B7%E6%B1%82%E5%BA%93%E4%B9%8Brequests%EF%BC%8Cselenium/"/>
      <url>/2019/12/09/Python/%E7%88%AC%E8%99%AB/%E8%AF%B7%E6%B1%82%E5%BA%93%E4%B9%8Brequests%EF%BC%8Cselenium/</url>
      
        <content type="html"><![CDATA[<h1 id="requests-模块"><a href="#requests-模块" class="headerlink" title="requests 模块"></a>requests 模块</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#介绍：使用requests可以模拟浏览器的请求，比起之前用到的urllib，requests模块的api更加便捷（本质就是封装了urllib3）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#注意：requests库发送请求将网页内容下载下来以后，并不会执行js代码，这需要我们自己分析目标站点然后发起新的request请求</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#安装：pip3 install requests</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#各种请求方式：常用的就是requests.get()和requests.post()</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> requests</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.get(<span class="string">&#x27;https://api.github.com/events&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.post(<span class="string">&#x27;http://httpbin.org/post&#x27;</span>, data = &#123;<span class="string">&#x27;key&#x27;</span>:<span class="string">&#x27;value&#x27;</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.put(<span class="string">&#x27;http://httpbin.org/put&#x27;</span>, data = &#123;<span class="string">&#x27;key&#x27;</span>:<span class="string">&#x27;value&#x27;</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.delete(<span class="string">&#x27;http://httpbin.org/delete&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.head(<span class="string">&#x27;http://httpbin.org/get&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.options(<span class="string">&#x27;http://httpbin.org/get&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#建议在正式学习requests前，先熟悉下HTTP协议</span></span><br><span class="line">https://www.cnblogs.com/ranyonsue/p/<span class="number">5984001.</span>html</span><br></pre></td></tr></table></figure><h2 id="基于GET请求"><a href="#基于GET请求" class="headerlink" title="基于GET请求"></a>基于GET请求</h2><h3 id="基本请求"><a href="#基本请求" class="headerlink" title="基本请求"></a>基本请求</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">response=requests.get(<span class="string">&#x27;http://dig.chouti.com&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(response)</span><br></pre></td></tr></table></figure><h3 id="带参数的GET请求-gt-params"><a href="#带参数的GET请求-gt-params" class="headerlink" title="带参数的GET请求 -&gt; params"></a>带参数的GET请求 -&gt; params</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在请求头内将自己伪装成浏览器，否则百度不会正常返回页面内容</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">response=requests.get(<span class="string">&#x27;https://www.baidu.com/s?wd=python&amp;pn=1&#x27;</span>,</span><br><span class="line">                      headers=&#123;</span><br><span class="line">                        <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.75 Safari/537.36&#x27;</span>,</span><br><span class="line">                      &#125;)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#如果查询关键词是中文或者有其他特殊符号，则不得不进行url编码</span></span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlencode</span><br><span class="line">wd=<span class="string">&#x27;是大王啊&#x27;</span></span><br><span class="line">encode_res=urlencode(&#123;<span class="string">&#x27;k&#x27;</span>:wd&#125;,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">keyword=encode_res.split(<span class="string">&#x27;=&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(keyword)</span><br><span class="line"><span class="comment"># 然后拼接成url</span></span><br><span class="line">url=<span class="string">&#x27;https://www.baidu.com/s?wd=%s&amp;pn=1&#x27;</span> %keyword</span><br><span class="line"></span><br><span class="line">response=requests.get(url,</span><br><span class="line">                      headers=&#123;</span><br><span class="line">                        <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.75 Safari/537.36&#x27;</span>,</span><br><span class="line">                      &#125;)</span><br><span class="line">res1=response.text</span><br><span class="line"></span><br><span class="line"><span class="comment">#上述操作可以用requests模块的一个params参数搞定，本质还是调用urlencode</span></span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlencode</span><br><span class="line">wd=<span class="string">&#x27;是大王啊&#x27;</span></span><br><span class="line">pn=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">response=requests.get(<span class="string">&#x27;https://www.baidu.com/s&#x27;</span>,</span><br><span class="line">                      params=&#123;</span><br><span class="line">                          <span class="string">&#x27;wd&#x27;</span>:wd,</span><br><span class="line">                          <span class="string">&#x27;pn&#x27;</span>:pn</span><br><span class="line">                      &#125;,</span><br><span class="line">                      headers=&#123;</span><br><span class="line">                        <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.75 Safari/537.36&#x27;</span>,</span><br><span class="line">                      &#125;)</span><br><span class="line">res2=response.text</span><br><span class="line"></span><br><span class="line"><span class="comment">#验证结果，打开a.html与b.html页面内容一样</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a.html&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(res1) </span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;b.html&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(res2)</span><br></pre></td></tr></table></figure><h3 id="带参数的GET请求-gt-headers"><a href="#带参数的GET请求-gt-headers" class="headerlink" title="带参数的GET请求 -&gt; headers"></a>带参数的GET请求 -&gt; headers</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#通常我们在发送请求时都需要带上请求头，请求头是将自身伪装成浏览器的关键，常见的有用的请求头如下</span></span><br><span class="line">Host</span><br><span class="line">Referer <span class="comment">#大型网站通常都会根据该参数判断请求的来源</span></span><br><span class="line">User-Agent <span class="comment">#客户端</span></span><br><span class="line">Cookie <span class="comment">#Cookie信息虽然包含在请求头里，但requests模块有单独的参数来处理他，headers=&#123;&#125;内就不要放它了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#添加headers(浏览器会识别请求头,不加可能会被拒绝访问,比如访问https://www.zhihu.com/explore)</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">response=requests.get(<span class="string">&#x27;https://www.zhihu.com/explore&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(response.status_code)    <span class="comment"># 400</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#自己定制headers</span></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2490.76 Mobile Safari/537.36&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line">respone=requests.get(<span class="string">&#x27;https://www.zhihu.com/explore&#x27;</span>,</span><br><span class="line">                     headers=headers)</span><br><span class="line"><span class="built_in">print</span>(respone.status_code)  <span class="comment"># 200</span></span><br></pre></td></tr></table></figure><h3 id="带参数的GET请求-gt-cookies"><a href="#带参数的GET请求-gt-cookies" class="headerlink" title="带参数的GET请求-&gt;cookies"></a>带参数的GET请求-&gt;cookies</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#登录github，然后从浏览器中获取cookies，以后就可以直接拿着cookie登录了，无需输入用户名密码</span></span><br><span class="line"><span class="comment">#用户名:lin 邮箱378533872@qq.com 密码lin@123</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">Cookies=&#123;   <span class="string">&#x27;user_session&#x27;</span>:<span class="string">&#x27;wGMHFJKgDcmRIVvcA14_Wrt_3xaUyJNsBnPbYzEL6L0bHcfc&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line">response=requests.get(<span class="string">&#x27;https://github.com/settings/emails&#x27;</span>,</span><br><span class="line">             cookies=Cookies) <span class="comment">#github对请求头没有什么限制，我们无需定制user-agent，对于其他网站可能还需要定制</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;378533872@qq.com&#x27;</span> <span class="keyword">in</span> response.text) <span class="comment">#True</span></span><br></pre></td></tr></table></figure><h2 id="基于POST请求"><a href="#基于POST请求" class="headerlink" title="基于POST请求"></a>基于POST请求</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> requests </tag>
            
            <tag> selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫基本原理</title>
      <link href="/2019/12/09/Python/%E7%88%AC%E8%99%AB/%E7%88%AC%E8%99%AB%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/"/>
      <url>/2019/12/09/Python/%E7%88%AC%E8%99%AB/%E7%88%AC%E8%99%AB%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="爬虫是什么"><a href="#爬虫是什么" class="headerlink" title="爬虫是什么"></a>爬虫是什么</h2><p><img src="view.jpg" alt="img"><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、什么是互联网？</span></span><br><span class="line">    互联网是由网络设备（网线，路由器，交换机，防火墙等等）和一台台计算机连接而成，像一张网一样。</span><br><span class="line"></span><br><span class="line"><span class="comment">#2、互联网建立的目的？</span></span><br><span class="line">    互联网的核心价值在于数据的共享/传递：数据是存放于一台台计算机上的，而将计算机互联到一起的目的就是为了能够方便彼此之间的数据共享/传递，否则你只能拿U盘去别人的计算机上拷贝数据了。</span><br><span class="line"></span><br><span class="line"><span class="comment">#3、什么是上网？爬虫要做的是什么？</span></span><br><span class="line">    我们所谓的上网便是由用户端计算机发送请求给目标计算机，将目标计算机的数据下载到本地的过程。</span><br><span class="line">    <span class="comment">#3.1 只不过，用户获取网络数据的方式是：</span></span><br><span class="line">      浏览器提交请求-&gt;下载网页代码-&gt;解析/渲染成页面。</span><br><span class="line"></span><br><span class="line">    <span class="comment">#3.2 而爬虫程序要做的就是：</span></span><br><span class="line">      模拟浏览器发送请求-&gt;下载网页代码-&gt;只提取有用的数据-&gt;存放于数据库或文件中</span><br><span class="line">　</span><br><span class="line">    <span class="comment">#3.1与3.2的区别在于:</span></span><br><span class="line">      我们的爬虫程序只提取网页代码中对我们有用的数据</span><br><span class="line"></span><br><span class="line"><span class="comment">#4、总结爬虫</span></span><br><span class="line">    <span class="comment">#4.1 爬虫的比喻：</span></span><br><span class="line">      如果我们把互联网比作一张大的蜘蛛网，那一台计算机上的数据便是蜘蛛网上的一个猎物，而爬虫程序就是一只小蜘蛛，沿着蜘蛛网抓取自己想要的猎物/数据</span><br><span class="line"></span><br><span class="line">    <span class="comment">#4.2 爬虫的定义：</span></span><br><span class="line">      向网站发起请求，获取资源后分析并提取有用数据的程序 </span><br><span class="line"></span><br><span class="line">    <span class="comment">#4.3 爬虫的价值：</span></span><br><span class="line">      互联网中最有价值的便是数据，比如天猫商城的商品信息，链家网的租房信息，雪球网的证券投资信息等等，这些数据都代表了各个行业的真金白银，可以说，谁掌握了行业内的第一手数据，谁就成了整个行业的主宰，如果把整个互联网的数据比喻为一座宝藏，那我们的爬虫课程就是来教大家如何来高效地挖掘这些宝藏，掌握了爬虫技能，你就成了所有互联网信息公司幕后的老板，换言之，它们都在免费为你提供有价值的数据。</span><br></pre></td></tr></table></figure></p><h2 id="爬虫的基本流程"><a href="#爬虫的基本流程" class="headerlink" title="爬虫的基本流程"></a>爬虫的基本流程</h2><p><img src="1036857-20171102174025326-341248106.png" alt="img"><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、发起请求</span></span><br><span class="line">使用http库向目标站点发起请求，即发送一个Request</span><br><span class="line">Request包含：请求头、请求体等</span><br><span class="line"></span><br><span class="line"><span class="comment">#2、获取响应内容</span></span><br><span class="line">如果服务器能正常响应，则会得到一个Response</span><br><span class="line">Response包含：html，json，图片，视频等</span><br><span class="line"></span><br><span class="line"><span class="comment">#3、解析内容</span></span><br><span class="line">解析html数据：正则表达式，第三方解析库如Beautifulsoup，pyquery等</span><br><span class="line">解析json数据：json模块</span><br><span class="line">解析二进制数据:以b的方式写入文件</span><br><span class="line"></span><br><span class="line"><span class="comment">#4、保存数据</span></span><br><span class="line">数据库</span><br><span class="line">文件</span><br></pre></td></tr></table></figure></p><h2 id="请求与响应"><a href="#请求与响应" class="headerlink" title="请求与响应"></a>请求与响应</h2><p><img src="1036857-20171102180223529-1349691987.png" alt="img"><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#http协议：http://www.cnblogs.com/linhaifeng/articles/8243379.html#Request：用户将自己的信息通过浏览器（socket client）发送给服务器（socket server）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Response：服务器接收请求，分析用户发来的请求信息，然后返回数据（返回的数据中可能包含其他链接，如：图片，js，css等）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#ps：浏览器在接收Response后，会解析其内容来显示给用户，而爬虫程序在模拟浏览器发送请求然后接收Response后，是要提取其中的有用数据。</span></span><br></pre></td></tr></table></figure></p><h2 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、请求方式：</span></span><br><span class="line">    常用的请求方式：GET，POST</span><br><span class="line">    其他请求方式：HEAD，PUT，DELETE，OPTHONS</span><br><span class="line"></span><br><span class="line">    ps：用浏览器演示get与post的区别，（用登录演示post）</span><br><span class="line"></span><br><span class="line">    post与get请求最终都会拼接成这种形式：k1=xxx&amp;k2=yyy&amp;k3=zzz</span><br><span class="line">    post请求的参数放在请求体内：</span><br><span class="line">        可用浏览器查看，存放于form data内</span><br><span class="line">    get请求的参数直接放在url后</span><br><span class="line"></span><br><span class="line"><span class="comment">#2、请求url</span></span><br><span class="line">    url全称统一资源定位符，如一个网页文档，一张图片</span><br><span class="line">    一个视频等都可以用url唯一来确定</span><br><span class="line"></span><br><span class="line">    url编码</span><br><span class="line">    https://www.baidu.com/s?wd=图片</span><br><span class="line">    图片会被编码（看示例代码）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    网页的加载过程是：</span><br><span class="line">    加载一个网页，通常都是先加载document文档，</span><br><span class="line">    在解析document文档的时候，遇到链接，则针对超链接发起下载图片的请求</span><br><span class="line"></span><br><span class="line"><span class="comment">#3、请求头</span></span><br><span class="line">    User-agent：请求头中如果没有user-agent客户端配置，</span><br><span class="line">    服务端可能将你当做一个非法用户</span><br><span class="line">    host</span><br><span class="line">    cookies：cookie用来保存登录信息</span><br><span class="line"></span><br><span class="line">    一般做爬虫都会加上请求头</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#4、请求体</span></span><br><span class="line">    如果是get方式，请求体没有内容</span><br><span class="line">    如果是post方式，请求体是<span class="built_in">format</span> data</span><br><span class="line"></span><br><span class="line">    ps：</span><br><span class="line">    <span class="number">1</span>、登录窗口，文件上传等，信息都会被附加到请求体内</span><br><span class="line">    <span class="number">2</span>、登录，输入错误的用户名密码，然后提交，就可以看到post，正确登录后页面通常会跳转，无法捕捉到post </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlencode</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">headers=&#123;</span><br><span class="line"><span class="string">&#x27;Accept&#x27;</span>:<span class="string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Cookie&#x27;</span>:<span class="string">&#x27;H_WISE_SIDS=101556_115474_115442_114743_108373_100099_115725_106201_107320_115339_114797_115553_116093_115546_115625_115446_114329_115350_114275_116040_110085; PSTM=1494300712; BAIDUID=42FE2934E37AF7AD1FA31D8CC7006D45:FG=1; BIDUPSID=2996557DB2710279BD865C50F9A68615; MCITY=-%3A; __cfduid=da9f97dea6458ca26aa4278280752ebb01508939712; BDSFRCVID=PGLsJeCCxG3wt_3ZUrBLDfv2D_qBZSjAgcEe3J; H_BDCLCKID_SF=tJAOoCLytI03qn5zq4Oh-4oHhxoJq5QxbT7Z0l8KtfcNVJQs-lCMhbtp-l3GJPoLWK6hBKQmWIQHDnbsbq0M2tcQXR5-WROCte74KKJx-4PWeIJo5tKh04JbhUJiB5OLBan7Lq7xfDDbbDtmej_3-PC3ql6354Rj2C_X3b7EfKjIOtO_bfbT2MbyeqrNQlTkLIvXoITJQD_bEP3Fbfj2DPQ3KabZqjDjJbue_I05f-oqebT4btbMqRtthf5KeJ3KaKrKW5rJabC3hPJeKU6qLT5Xjh6B5qDfyDoAbKOt-IOjhb5hMpnx-p0njxQyaR3RL2Kj0p_EWpcxsCQqLUonDh8L3H7MJUntKjnRonTO5hvvhb6O3M7-XpOhDG0fJjtJJbksQJ5e24oqHP-kKPrV-4oH5MQy5toyHD7yWCvjWlT5OR5Jj6KMjMkb3xbz2fcpMIrjob8M5CQESInv3MA--fcLD2ch5-3eQgTI3fbIJJjWsq0x0-jle-bQypoa-U0j2COMahkMal7xO-QO05CaD53yDNDqtjn-5TIX_CjJbnA_Hn7zepoxebtpbt-qJJjzMerW_Mc8QUJBH4tR-T3keh-83xbnBT5KaKO2-RnPXbcWjt_lWh_bLf_kQN3TbxuO5bRiL66I0h6jDn3oyT3VXp0n54nTqjDHfRuDVItXf-L_qtDk-PnVeUP3DhbZKxtqtDKjXJ7X2fclHJ7z-R3IBPCD0tjk-6JnWncKaRcI3poiqKtmjJb6XJkl2HQ405OT-6-O0KJcbRodobAwhPJvyT8DXnO7-fRTfJuJ_DDMJDD3fP36q4QV-JIehmT22jnT32JeaJ5n0-nnhP3mBTbA3JDYX-Oh-jjRX56GhfO_0R3jsJKRy66jK4JKjHKet6vP; ispeed_lsm=0; H_PS_PSSID=1421_24558_21120_17001_24880_22072; BD_UPN=123253; H_PS_645EC=44be6I1wqYYVvyugm2gc3PK9PoSa26pxhzOVbeQrn2rRadHvKoI%2BCbN5K%2Bg; BDORZ=B490B5EBF6F3CD402E515D22BCDA1598&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Host&#x27;</span>:<span class="string">&#x27;www.baidu.com&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># response=requests.get(&#x27;https://www.baidu.com/s?&#x27;+urlencode(&#123;&#x27;wd&#x27;:&#x27;美女&#x27;&#125;),headers=headers)</span></span><br><span class="line">response=requests.get(<span class="string">&#x27;https://www.baidu.com/s&#x27;</span>,params=&#123;<span class="string">&#x27;wd&#x27;</span>:<span class="string">&#x27;美女&#x27;</span>&#125;,headers=headers) <span class="comment">#params内部就是调用urlencode</span></span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure><h2 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、响应状态</span></span><br><span class="line">    <span class="number">200</span>：代表成功</span><br><span class="line">    <span class="number">301</span>：代表跳转</span><br><span class="line">    <span class="number">404</span>：文件不存在</span><br><span class="line">    <span class="number">403</span>：权限</span><br><span class="line">    <span class="number">502</span>：服务器错误</span><br><span class="line"></span><br><span class="line"><span class="comment">#2、Respone header</span></span><br><span class="line">    <span class="built_in">set</span>-cookie：可能有多个，是来告诉浏览器，把cookie保存下来</span><br><span class="line">    </span><br><span class="line"><span class="comment">#3、preview就是网页源代码</span></span><br><span class="line">    最主要的部分，包含了请求资源的内容</span><br><span class="line">    如网页html，图片</span><br><span class="line">    二进制数据等</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、总结爬虫流程：</span></span><br><span class="line">    爬取---&gt;解析---&gt;存储</span><br><span class="line"></span><br><span class="line"><span class="comment">#2、爬虫所需工具：</span></span><br><span class="line">    请求库：requests,selenium</span><br><span class="line">    解析库：正则，beautifulsoup，pyquery</span><br><span class="line">    存储库：文件，MySQL，Mongodb，Redis</span><br><span class="line"></span><br><span class="line"><span class="comment">#3、爬虫常用框架：</span></span><br><span class="line">    scrapy</span><br></pre></td></tr></table></figure><p>爬取校花网视频</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_page</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;GET %s&#x27;</span> %url)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response=requests.get(url)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">return</span> response.content</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_index</span>(<span class="params">res</span>):</span><br><span class="line">    obj=re.<span class="built_in">compile</span>(<span class="string">&#x27;class=&quot;items.*?&lt;a href=&quot;(.*?)&quot;&#x27;</span>,re.S)</span><br><span class="line">    detail_urls=obj.findall(res.decode(<span class="string">&#x27;gbk&#x27;</span>))</span><br><span class="line">    <span class="keyword">for</span> detail_url <span class="keyword">in</span> detail_urls:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> detail_url.startswith(<span class="string">&#x27;http&#x27;</span>):</span><br><span class="line">            detail_url=<span class="string">&#x27;http://www.xiaohuar.com&#x27;</span>+detail_url</span><br><span class="line">        <span class="keyword">yield</span> detail_url</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_detail</span>(<span class="params">res</span>):</span><br><span class="line">    obj=re.<span class="built_in">compile</span>(<span class="string">&#x27;id=&quot;media&quot;.*?src=&quot;(.*?)&quot;&#x27;</span>,re.S)</span><br><span class="line">    res=obj.findall(res.decode(<span class="string">&#x27;gbk&#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(res) &gt; <span class="number">0</span>:</span><br><span class="line">        movie_url=res[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">return</span> movie_url</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save</span>(<span class="params">movie_url</span>):</span><br><span class="line">    response=requests.get(movie_url,stream=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">        m=hashlib.md5()</span><br><span class="line">        m.update((<span class="string">&#x27;%s%s.mp4&#x27;</span> %(movie_url,time.time())).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        filename=m.hexdigest()</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;./movies/%s.mp4&#x27;</span> %filename,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(response.content)</span><br><span class="line">            f.flush()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    index_url=<span class="string">&#x27;http://www.xiaohuar.com/list-3-&#123;0&#125;.html&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;*&#x27;</span>*<span class="number">50</span>,i)</span><br><span class="line">        <span class="comment">#爬取主页面</span></span><br><span class="line">        index_page=get_page(index_url.<span class="built_in">format</span>(i,))</span><br><span class="line">        <span class="comment">#解析主页面,拿到视频所在的地址列表</span></span><br><span class="line">        detail_urls=parse_index(index_page)</span><br><span class="line">        <span class="comment">#循环爬取视频页</span></span><br><span class="line">        <span class="keyword">for</span> detail_url <span class="keyword">in</span> detail_urls:</span><br><span class="line">            <span class="comment">#爬取视频页</span></span><br><span class="line">            detail_page=get_page(detail_url)</span><br><span class="line">            <span class="comment">#拿到视频的url</span></span><br><span class="line">            movie_url=parse_detail(detail_page)</span><br><span class="line">            <span class="keyword">if</span> movie_url:</span><br><span class="line">                <span class="comment">#保存视频</span></span><br><span class="line">                save(movie_url)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#并发爬取</span></span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> current_thread</span><br><span class="line"></span><br><span class="line">p=ThreadPoolExecutor(<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_page</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s GET %s&#x27;</span> %(current_thread().getName(),url))</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response=requests.get(url)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">return</span> response.content</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_index</span>(<span class="params">res</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s parse index &#x27;</span> %current_thread().getName())</span><br><span class="line">    res=res.result()</span><br><span class="line">    obj=re.<span class="built_in">compile</span>(<span class="string">&#x27;class=&quot;items.*?&lt;a href=&quot;(.*?)&quot;&#x27;</span>,re.S)</span><br><span class="line">    detail_urls=obj.findall(res.decode(<span class="string">&#x27;gbk&#x27;</span>))</span><br><span class="line">    <span class="keyword">for</span> detail_url <span class="keyword">in</span> detail_urls:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> detail_url.startswith(<span class="string">&#x27;http&#x27;</span>):</span><br><span class="line">            detail_url=<span class="string">&#x27;http://www.xiaohuar.com&#x27;</span>+detail_url</span><br><span class="line">        p.submit(get_page,detail_url).add_done_callback(parse_detail)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_detail</span>(<span class="params">res</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s parse detail &#x27;</span> %current_thread().getName())</span><br><span class="line">    res=res.result()</span><br><span class="line">    obj=re.<span class="built_in">compile</span>(<span class="string">&#x27;id=&quot;media&quot;.*?src=&quot;(.*?)&quot;&#x27;</span>,re.S)</span><br><span class="line">    res=obj.findall(res.decode(<span class="string">&#x27;gbk&#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(res) &gt; <span class="number">0</span>:</span><br><span class="line">        movie_url=res[<span class="number">0</span>]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;MOVIE_URL: &#x27;</span>,movie_url)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;db.txt&#x27;</span>,<span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(<span class="string">&#x27;%s\n&#x27;</span> %movie_url)</span><br><span class="line">        <span class="comment"># save(movie_url)</span></span><br><span class="line">        p.submit(save,movie_url)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s下载任务已经提交&#x27;</span> %movie_url)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save</span>(<span class="params">movie_url</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s SAVE: %s&#x27;</span> %(current_thread().getName(),movie_url))</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response=requests.get(movie_url,stream=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            m=hashlib.md5()</span><br><span class="line">            m.update((<span class="string">&#x27;%s%s.mp4&#x27;</span> %(movie_url,time.time())).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">            filename=m.hexdigest()</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;./movies/%s.mp4&#x27;</span> %filename,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(response.content)</span><br><span class="line">                f.flush()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    index_url=<span class="string">&#x27;http://www.xiaohuar.com/list-3-&#123;0&#125;.html&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        p.submit(get_page,index_url.<span class="built_in">format</span>(i,)).add_done_callback(parse_index)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫快速入门</title>
      <link href="/2019/12/09/Python/%E7%88%AC%E8%99%AB/%E7%88%AC%E8%99%AB%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
      <url>/2019/12/09/Python/%E7%88%AC%E8%99%AB/%E7%88%AC%E8%99%AB%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="fc2886d8a537bd8193b5379e3265d5254895515176aea6ecc6f3510a6773f7c6">bf079e01f8347d45e7dd35fa6a7eb850f7e47c28f6854204f3eb58261949c30e5d6c469404246d3e795e044f33e33a0bfb037de40347e5d9c79cdad04db1c2a9130170476a837bb97f8da3a5e024a7faf2b236c5ac8a4c2135350ab8e34ce5a682bd9127bd6d070a36bfc8e52ef5c905eef5cda9dcaa80fb10a0266a3c7820faa473b2db643a10473788768bd6dbbf83476b0791cc0585712d4526cd2f92353be18fec1a73aeb1dcfb0b0c5bf3ca60e62dc3d4f1a25401f27fd0b4c23ce28e724a8888633da87edcd68dfc1d6d860d9f3fc8f19134e69b2173567de18a99242eb157da0480ecdd8b8cada414b5e9106f47be6788a92ef33b7d80cec558f273a0ea70cb5f25816b2709b0c99686b188a3af4f71827c9fd0749a26ff886fdac26a5ea02fb9603e3f059c5a699edfb026394880ecae703929a067db476b02319df183cf496851144f578dedaf84616e2ccc401af3a5a2691c2e56b099a6fa7d68e0c2e7a8d00710b844d1e36c8216c6453344833f41a4e00f5310aeac368dd28f81aed85b3f28188b15997e14f69d23c63bf53469b73cd5ceccc6a303ca51ca6e93f71577261cfec9dfdef303c8cc15228a67049d91de98ec9976e1e879284f703b8d71a06147717acf16dc2a04caf3b668a0406fa7011914af135f80feeb39cefb728dee123edccb8e8e31f95800bb84ea8e3c060ef0bd7654a3b99f34e2d7a0c5272e18a195430b7f8cdc24bc02c03a403900ae32c650af7bf4a4652226e2f66930434cc88d030f033ba8f6e9c6969088ed60ed0c05a91c622f7fbf215872a01f7db3131cfb76dbce7211c3cd4526689d3a6305ec59d0659b416aa3bdd5740e09ea7c940bc46fd2a2ddab79cedeee4da0c2f5aa81b41128eb9d992ea8a8c5e0eadd23783e18f0c0fdc470b141db74c7aa4415c069e31f5fc224546715d6afea3cdd02cad592505784bb61d1913867058242ce60ed4f528bca6ae0e84832935ec38b7ebf22bc70f3e086cc70a33a1c544a94e43906a0264974b30dfa8a8ecbb492d61dff3fe4a87a210270e967d2c2be99191b0c42eecd5565def80596b13792e569bd8bb8692eb1d609816af559e74bb49a39f13746c3d1df5ae1248fd6ed8bd83ac0236a2699eb99685f8901f8ca2bd3c10df6efdd895cd304e2b059178111a16da487d0c4f1ac2909ed57450ffae57aeacd3ff3b8793ded22f5f8e9d8036a3779cda687e6e717b7a9e0b97d5def826c0450345f9323d21ab17a622fe39c6d010ed5582c2d2d0ef9f78d7d926200a2ab4f8fd7f9067ec3c7b5aa8792872dbac3be0380fbb7c176ac2f7d2e92ac72d8792ce62ad1397298505089b0bd077ab437e0fcb4efd983753f667924934d05408fb9afdaa3fa6efc0e88a13d780914d55eb4d8feef344432a9845839c2013186b5da7c9b097b7950699e8139aa75c48a4897e8e504f4045aa3388e867efdd42a8774f9179de5da0ca6dd63e46b9e54f30cad9d5dae048bd71b05d16a160ec74bda49d734c2b35a05ce91fc21954c64b3e9ccea3fc081ba580c75c0e281717d37aaa1db078c2394498788cee3bfe7cf83f0aad25a13b20038ceb02cfc53498535be338f05eb4f47d44ee485ef980a3edd073f3ef618b634f39f6507ce1c70a1668f1cb4d919f52e9057588af4e897c9764aff1c153293eafc373b147c9effc96ed121d1487ba4baab070f3216b1af65b249145897f5bd6bb5fb9044337646ceeb25b2fbb4bc13a6bd76d9c1f72b3ebd890e196068c92175161ba9f0a4fa3552b01234195c9eb0d393f2a9bb42abc2ba79ae69107d4114c551a91f7e519bb092d306c56f15f3d40f94c36ca9ef4901e01d0579e7f0c841de3503dcd1aac2bf19b809e036dc79c0450d7c1a602f02c58a035158c31ab89b01c6bd04a10e6f8e9d0e8bf2a222a5b6309797678e84242fb801d2b23f82eb2fc8af14165cf4dfbd9679d7502062b51d2512edad3013a1373eeacb3af41655497c06e88ba741ebc9d5be2618555fb07adb67500de41fa15ac83a09d82afc150b75f0c989eda984ace0374713de4192bd8d680da1e4002b862de1d57debb2b87b9fc45f88834dc8727386dcb88f952138ebc94e5a0acf6b1eb68142c0dab9fcdbabcdffc1cea6de14a5ce8d37b44af759a2c026309b80ed3cbc0dd4ad9d85caaf2732bf2cb59c66648d90e70eedd9d063a735c85348479c8fedf184f14f23d0623ff60ec557fb01474083c50101008d20e16fae9db1f781e6440422005c37de3d10566248b35cf20a97b54d2eee9c6e431e020d0cd23f96a2279d506729d78294d13eaa520bc2fa08f990b2f51b5314fb576e96359d205da9418e184a5a211706200419304ae0bdfa5e092d8317871857271f50a5d9fc27f578db12e43c12decfacd40cf0cc16f8dcd0a1936c141cf3c9c2c244b9b1dfc629bb836d8517f899e28b9380882413e6127548c861a21ce274ab3165c0bbae8aca7a880907b27a8e99b28d869641085b09afe0b191e496d4b108e05dc2040c78659f92c77e744d429b454f01f5f7869bf66476b0c6f65ef9e2d340c2018b8e5f2df58f2a16b0661226c38a34ae904bc646dd20d8c9d207d3466cc30c371368220fd288724a6106547c83faf2650c4ffe70cef5b2167c4e37e0a65fcccbeb142d6f6f35a6e14cd5494e4e4b89b3d8bab119ae3105d1d2081f70f8ece8023e1d048d9bee36e174aff19dc98cfa0cbca2d8556c5a5f39d18b97f803ce9efcd486287c6fd6e8ae97afeed750c0a6297b9fede11883f9896d3ab1f2d1a72023f840f037cc960892b196417a9eccc1dfd6c76e318f32b27b07e95534ea7ba5a74f8cab03414fb2ed9fb8e1d1618ee5f521914ba50aa8ea159d5134ac305ccf527d5e6e6cd4e5ca7e35d8b2da32f4986a7cb75d17cee479e5181a9ab5c76ba30681db3b60203dfe0ec5077328a442c7ee72444ee5c970e8ff7c301451b55db097f53ed26eb47573738b2d90e36ed6e331db331ad3b88eb61f7e606c12b80106ff69a6733df6a6ee2cdf42fdd54d130a8260adb8dda2e7d4e11f73f4eb092f1b586530ff99423f5a2d7953241311fc2e7a316b43f88866afd4634c8e6be1d1fa27e286ddcef1fee6f6b1c12474b5e43d84dcfa96f2f5fe2a05c5480d521a977b33429a44f76c84b1552bb48eec6f4f1a8f9a163033d8750afc894359068f409b9f624af5e684396345346ed960b6f137f9ed75ea7c61a601b9b7260d16a7322cd90e52d88ad78b79bbd9a07c5ac06798f1919176d41986abd24fda270c1c967e0cc5b34f6f4f94073c619307ec9a086460a13773399f9b8cf99cb37e7c08e42c4260678b0d05658dd8407cc8b934cef19d6cf9cbbc04ec34a2f5c9e48d930f1380cefa612a553b143ebe82449b4b59de1fccce9a67a8faa917bf7851cd404cd5289123d5f774741333ba24acb86b46d6e8400118c482361101eb9e53c9ab90050df26c480b20f631e2b6dc5b221b78ca2eef733a83e742b1a96145a956fa865f31746bee29a84ef41e711803b6d413472c342fb3a829808abb18bc8c4bde4e37dc72633ccc37e6faa2bd7f488059806bc6dbf48ec1c6c34c1f3df2fc3fde8d7c228c7bda2496bc326bca4a7660044e83600e253f8a7235139856cc735db62b37c1deb4e6b9dbdb96cd00fe5c1ef7ef37e52de15f7f4f27eabdf4656a3dc932bde792ea0fb241dfc82dff5c0fbcdb4cf5b576d380f3cdf8967e40619c601c6167f4da488295261db1b34ee07759713b5517893e029c1e76060468ad1794d34e88b5a94ee266ebf289b81d1f7dc9537dc01fbdf67fa3b3978733a7bbed039a63e9a2361cb41f9f40607c8708d89824e1d76de74a0a7a883813be11a4fd81106a1a0e249395b2b8129fe77337e7e0320296cb22e574e3be0822f90a0a59e4c541e9349d9d100c757ed8fcca3cd5eed545378a0dc53c66310421e5269b1aecaf6d1ad0cb18f78737e8d4d4fb99dd42bf1bc2d7f2928c2c44692a6b5e64166b02ec3b0738287ed1ce8ee92123db454cdb860a5c7c98d33c15bc1f2d6f2bf5f9c4446d4dff45d006d6c96f704f585dec8d432687ea9dfc45e3f933d8c1c2ae98c3a16e04ba4d1dfd7eed9bf658a28e701f056d0f5b3889f4db15be47fd22a38d3158e92a5a5326965b78f5423d0ee39475137f89488b3bd1090611496e43eb2699c7d9c96763fd07df155d4d9182d4a67a857baeaad5cfd3e4d895efe09770a6a2274711340aeb5d0f1699f288dbe2676c18431a217485b3e6275453d23c49c0460360236d9b7247804062eb5150bb0a85aa08ab2dbddab70cf15760e85dcf3c19d3f0989fef5212810f1ab46c10253baf0ffee79aecb2dac9a45fa0347382a844acd679916502f9ad30d2a8d8ce925f24ec3eb43e1c79d8f117b7a1b6d69fb82a3a71beff1cdcd68f72ab39711d1269c85be81f8dc02914ad04834eed0c773cce62f238c0d58204575e948f12029a9db9ded1155ed88dc44f7b7845cce999161ea164be16d5084e3125f01d4c42a89eeac690b84ddd526ea74b687d4e1670b253d99df20a922807da606286ded35e274c73157e3f495203750dc45568830b2cdb1a1aed0244136d4eefcb55636c05749d9962c601877e131df6fd33fa9c190bee00d3df62f9eb46b8d1a7d8a83ce71ad78ce8689ce84169263d16fd88b49870a0aee8a25fdb29df7f4b6237256389130c0b138b8d8be2d186030df1a9b69781dbe1a50e9cfff33030d264d1c8927fb43ca2e58871dacea651b3d49f8095cb67322dba59d81bf622a9be820e4b4263a16ec5c48a4f3a7bd4dddd8bf83ba69e6172205bf3c326ce72b04a2dadba9857a0b894f72713569fa0ca464f77b0d05a23e0646a2fb29a7d6be708e38f86b122b6f18518e0252ff6dc177a4520d03ab3cade649d3a0af5d0eb353dec0b3dfaadd320a3ac17ef006f4a361a7c17363d6fd88d4002079e255381598e788d4f41934c9582713f163feb8485420eaa8f493854982e40134c3252e86fe2d786c6b669fe509a6d01301606edfc431dab14673262cea5476d8f47abcb948d6d</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 目录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> passwd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git pull卡死</title>
      <link href="/2019/12/09/error/git-pull%E5%8D%A1%E6%AD%BB/"/>
      <url>/2019/12/09/error/git-pull%E5%8D%A1%E6%AD%BB/</url>
      
        <content type="html"><![CDATA[<p>在拉取代码的时候，<code>git pull origin master</code>一直无响应。</p><p>用过的处理方法(无效)：</p><ol><li>重新配置git</li><li>重新配置git密码以及github公钥</li><li>重启服务器</li></ol><p>这样的问题，是自己本地“悬空对象”太多，及删除分支或清除stash的时候，其实这些并没有真正删除，成为悬空对象，解决方法如下两步：</p><p><code>git fsck --lost-found</code></p><p><code>git gc --prune=now</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@allen blog]# git pull origin master</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">^C</span><br><span class="line">[root@allen blog]# git fsck --lost-found</span><br><span class="line">notice: HEAD points to an unborn branch (master)</span><br><span class="line">notice: No default references</span><br><span class="line">[root@allen blog]# git gc --prune=now</span><br><span class="line">Nothing new to pack.</span><br><span class="line">[root@allen blog]# git pull origin master</span><br><span class="line">remote: Enumerating objects: 7769, done.</span><br><span class="line">remote: Counting objects: 100% (7769/7769), done.</span><br><span class="line">remote: Compressing objects: 100% (1487/1487), done.</span><br><span class="line"> * branch            master     -&gt; FETCH_HEAD</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>借鉴于：<a href="https://blog.csdn.net/CaiFeiYueLe/article/details/95331726">https://blog.csdn.net/CaiFeiYueLe/article/details/95331726</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Errors </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>load average多高的负载才算高负载?</title>
      <link href="/2019/12/07/%E8%AE%A1%E7%AE%97%E6%9C%BA/load-average%E5%A4%9A%E9%AB%98%E7%9A%84%E8%B4%9F%E8%BD%BD%E6%89%8D%E7%AE%97%E9%AB%98%E8%B4%9F%E8%BD%BD/"/>
      <url>/2019/12/07/%E8%AE%A1%E7%AE%97%E6%9C%BA/load-average%E5%A4%9A%E9%AB%98%E7%9A%84%E8%B4%9F%E8%BD%BD%E6%89%8D%E7%AE%97%E9%AB%98%E8%B4%9F%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<p><img src="model-name.png" alt=""></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@37wan ~]# uptime</span><br><span class="line"> 12:53:01 up 227 days, 16:33,  1 user,  load average: 1.43, 2.16, 2.20</span><br><span class="line"><span class="meta prompt_"> # </span><span class="language-bash">and</span></span><br><span class="line"> [root@37wan ~]# cat /proc/loadavg </span><br><span class="line">1.72 1.89 2.02 1/535 20618</span><br></pre></td></tr></table></figure><p>load average 后面三个值代表系统在1分钟、5分钟和15分钟的负载情况，都知道数字越高表示系统负载越大，第一直觉就是这个系统不行了。那么到底多高的负载才算高负载? 我们又如何去判断系统是否已经高负载呢？</p><h1 id="什么是load-average？"><a href="#什么是load-average？" class="headerlink" title="什么是load average？"></a>什么是load average？</h1><p>load average的就是一定时间内计算机有多少个active_tasks，也就是说是计算机的任务执行队列的长度，cpu计算的队列。</p><h1 id="load-average多少是正常？"><a href="#load-average多少是正常？" class="headerlink" title="load average多少是正常？"></a>load average多少是正常？</h1><p>既然load是cpu计算的队列，那就应该和cpu个处理方式和cpu的个数有关系。所以我个人认为应该按系统识别的cpu个数来确定load的临界值，系统识别为8个cpu，那么load为8就是临界点，高于8就属于over load了。</p><h1 id="什么叫系统识别CPU个数？"><a href="#什么叫系统识别CPU个数？" class="headerlink" title="什么叫系统识别CPU个数？"></a>什么叫系统识别CPU个数？</h1><p>这里涉及到cpu物理个数和超线程技术的问题。对于单处理器在满负载的情况下1.00，则双处理器的负载满额的情况是 2.00，它还有一倍的资源可以利用。<br>从性能的角度上理解，一台主机拥有多核心的处理器与另台拥有同样数目的处理性能基本上可以认为是相差无几。当然实际 情况会复杂得多，不同数量的缓存、处理器的频率等因素都可能造成性能的差异。但即便这些因素造成的实际性能稍有不同，其实系统还是以处理器的核心数量计算负载均值 。这使我们有了两个新的法则：<br>　　“有多少核心即为有多少负荷”法则： 在多核处理中，你的系统均值不应该高于处理器核心的总数量。<br>　　“核心的核心”法则： 核心分布在分别几个单个物理处理中并不重要，其实两颗四核的处理器 等于 四个双核处理器 等于 八个单处理器。所以，它应该有八个处理器内核。</p><h1 id="如何查看系统的CPU个数？"><a href="#如何查看系统的CPU个数？" class="headerlink" title="如何查看系统的CPU个数？"></a>如何查看系统的CPU个数？</h1><p>在 Linux 下，可以使用下面的命令获取你系统上的逻辑处理器的数量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@37wan ~]# cat /proc/cpuinfo | grep &#x27;model name&#x27;</span><br><span class="line">model name: Intel(R) Xeon(R) CPU E5-2407 v2 @ 2.40GHz</span><br><span class="line">model name: Intel(R) Xeon(R) CPU E5-2407 v2 @ 2.40GHz</span><br><span class="line">model name: Intel(R) Xeon(R) CPU E5-2407 v2 @ 2.40GHz</span><br><span class="line">model name: Intel(R) Xeon(R) CPU E5-2407 v2 @ 2.40GHz</span><br><span class="line">model name: Intel(R) Xeon(R) CPU E5-2407 v2 @ 2.40GHz</span><br><span class="line">model name: Intel(R) Xeon(R) CPU E5-2407 v2 @ 2.40GHz</span><br><span class="line">model name: Intel(R) Xeon(R) CPU E5-2407 v2 @ 2.40GHz</span><br><span class="line">model name: Intel(R) Xeon(R) CPU E5-2407 v2 @ 2.40GHz</span><br><span class="line">[root@37wan ~]# cat /proc/cpuinfo | grep &#x27;model name&#x27; | wc -l</span><br><span class="line">8</span><br></pre></td></tr></table></figure><h1 id="CPU高不等同于load高"><a href="#CPU高不等同于load高" class="headerlink" title="CPU高不等同于load高"></a>CPU高不等同于load高</h1><p>在Unix/Linux可能经常会遇到cpu的使用率为100%，但是load却不高！这是为什么呢？因为几乎所有的任务和会和CPU进行交互，但是由于各个设备的使用频率不同，造成了不能同步进行的问题。比如说，当对硬盘进行读写的时候，出现IO的等待时候，事实上cpu已经被切换到别的进程上了。该任务就处于等待状态，当这样的任务过多，导致队列长度过大，这样就体现到负载过大了，但实际是此时cpu被分配去干执行别的任务或空闲，因此CPU高不等同于load高，load高也不能于cpu高。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> load average </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux 查看当前系统的负载情况</title>
      <link href="/2019/12/07/%E8%AE%A1%E7%AE%97%E6%9C%BA/linux-%E6%9F%A5%E7%9C%8B%E5%BD%93%E5%89%8D%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%B4%9F%E8%BD%BD%E6%83%85%E5%86%B5/"/>
      <url>/2019/12/07/%E8%AE%A1%E7%AE%97%E6%9C%BA/linux-%E6%9F%A5%E7%9C%8B%E5%BD%93%E5%89%8D%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%B4%9F%E8%BD%BD%E6%83%85%E5%86%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="uptime"><a href="#uptime" class="headerlink" title="uptime"></a>uptime</h1><p>linux uptime命令主要用于获取主机运行时间和查询linux系统负载等信息。</p><p><strong>eg: </strong></p><p> 12:55:56 up 227 days, 16:25,  1 user,  load average: 1.25, 1.62, 2.04</p><p>显示内容说明：</p><p>12:55:56 //系统当前时间 </p><p>up 227 days, 16:25 //主机已运行时间,时间越大，说明你的机器越稳定。 </p><p>1user //用户连接数，是总连接数而不是用户数 </p><p>load average // 系统平均负载，统计最近1，5，15分钟的系统平均负载</p><p>那么什么是系统平均负载呢？</p><p><strong><em>系统平均负载是指在特定时间间隔内运行队列中的平均进程数</em></strong>。 </p><p>如果每个CPU内核的当前活动进程数不大于3的话，那么系统的性能是良好的。</p><p>如果每个CPU内核的任务数大于5，那么这台机器的性能有严重问题。 </p><p>如果你的linux主机是1个双核CPU的话，当Load Average 为6的时候说明机器已经被充分使用了。</p><p>1可以被认为是最优的负载值。负载是会随着系统不同改变得。</p><p>单CPU系统1-3和SMP系统6-10都是可能接受的。</p><h1 id="cat-proc-loadavg"><a href="#cat-proc-loadavg" class="headerlink" title="cat /proc/loadavg"></a>cat /proc/loadavg</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@37wan ~]# cat /proc/loadavg </span><br><span class="line">1.72 1.89 2.02 1/535 20618</span><br></pre></td></tr></table></figure><p>1.72 1.89 2.02 表示最近1分钟,5分钟,15分钟 系统的平均负载; 系统负载越高,代表CPU越繁忙;</p><p>1/535 1代表此时运行队列中的进程个数;535 代表系统中进程的总数</p><p>20618 代表到此为止创建的最后一个进程的ID.</p><h1 id="w"><a href="#w" class="headerlink" title="w"></a>w</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@37wan ~]# w</span><br><span class="line"> 13:08:23 up 227 days, 16:49,  1 user,  load average: 2.52, 2.21, 2.11</span><br><span class="line">USER     TTY      FROM              LOGIN@   IDLE   JCPU   PCPU WHAT</span><br><span class="line">root     pts/0    115.238.239.139  12:44    0.00s  0.05s  0.00s w</span><br></pre></td></tr></table></figure><p>​    USER:用户名<br>​    TTY:登录后系统分配的终端号<br>​    FROM: 远程主机名(即从哪儿登录来的)<br>​    LOGIN@:何时登录<br>​    IDLE:空闲了多长时间，表示用户闲置的时间。</p><p>​    JCPU:和该终端（tty）连接的所有进程占用的时间，这个时间里并不包括过去的后台作业时间，但却包括当前正在运行的后台作业所 </p><p>​         占用的时间</p><p>​    PCPU:指当前进程（即在WHAT项中显示的进程）所占用的时间<br>​    WHAT:当前正在运行进程的命令行</p><h1 id="tload"><a href="#tload" class="headerlink" title="tload"></a>tload</h1><p># tload</p><p> 2.12, 2.03, 2.05</p><p><em>平均负载: 2.12, 2.03, 2.05 表示最近1分钟,5分钟,15分钟的系统平均负载.</em></p><h1 id="top"><a href="#top" class="headerlink" title="top"></a>top</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">top - 13:11:33 up 227 days, 16:52,  1 user,  load average: 2.15, 2.06, 2.06</span><br><span class="line">Tasks: 230 total,   2 running, 228 sleeping,   0 stopped,   0 zombie</span><br><span class="line">Cpu(s):  0.7%us,  1.3%sy,  0.0%ni, 97.9%id,  0.0%wa,  0.0%hi,  0.0%si,  0.0%st</span><br><span class="line">Mem:  49349228k total, 44294036k used,  5055192k free,   387384k buffers</span><br><span class="line">Swap: 33572860k total,     2560k used, 33570300k free, 40473596k cached</span><br></pre></td></tr></table></figure><h2 id="系统运行时间和平均负载："><a href="#系统运行时间和平均负载：" class="headerlink" title="系统运行时间和平均负载："></a>系统运行时间和平均负载：</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top - 13:11:33 up 227 days, 16:52,  1 user,  load average: 2.15, 2.06, 2.06</span><br></pre></td></tr></table></figure><p>top命令的顶部显示与uptime命令相似的输出</p><p>这些字段显示：</p><ul><li>当前时间</li><li>系统已运行的时间</li><li>当前登录用户的数量</li><li>相应最近5、10和15分钟内的平均负载。</li></ul><p>可以使用’l’命令切换uptime的显示。</p><p>13:11:33 — 当前系统时间<br>227 days, 16:52, — 系统已经运行了的时间（在这期间没有重启过）<br>1 users — 当前有2个用户登录系统<br>load average: 2.15, 2.06, 2.06 — load average后面的三个数分别是5分钟、10分钟、15分钟的负载情况。</p><p>load average数据是每隔5秒钟检查一次活跃的进程数，然后按特定算法计算出的数值。如果这个数除以逻辑CPU的数量，结果高于5的时候就表明系统在超负荷运转了。</p><h2 id="任务"><a href="#任务" class="headerlink" title="任务:"></a>任务:</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Tasks: 230 total,   2 running, 228 sleeping,   0 stopped,   0 zombie</span><br></pre></td></tr></table></figure><p>Tasks — 任务(进程)：进程总数:230 正在运行进程数:2 睡眠进程数:228 停止的进程数:0 僵尸进程数:0</p><p>第二行显示的是任务或者进程的总结。进程可以处于不同的状态。这里显示了全部进程的数量。除此之外，还有正在运行、睡眠、停止、僵尸进程的数量（僵尸是一种进程的状态）。这些进程概括信息可以用’t’切换显示</p><h2 id="CPU-状态"><a href="#CPU-状态" class="headerlink" title="CPU 状态:"></a>CPU 状态:</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cpu(s):  0.7%us,  1.3%sy,  0.0%ni, 97.9%id,  0.0%wa,  0.0%hi,  0.0%si,  0.0%st</span><br></pre></td></tr></table></figure><p>这里显示不同模式下所占cpu时间百分比，这些不同的cpu时间表示：</p><ul><li>us, user： 运行(未调整优先级的) 用户进程的CPU时间</li><li>sy，system: 运行内核进程的CPU时间</li><li>ni，niced：运行已调整优先级的用户进程的CPU时间</li><li>wa，IO wait: 用于等待IO完成的CPU时间</li><li>hi：处理硬件中断的CPU时间</li><li>si: 处理软件中断的CPU时间</li><li>st：这个虚拟机被hypervisor偷去的CPU时间（译注：如果当前处于一个hypervisor下的vm，实际上hypervisor也是要消耗一部分CPU处理时间的）。</li></ul><p>可以使用’t’命令切换显示。</p><p>0.7% us — 用户空间占用CPU的百分比。<br>1.3% sy — 内核空间占用CPU的百分比。<br>0.0% ni — 改变过优先级的进程占用CPU的百分比<br>97.9% id — 空闲CPU百分比<br>0.0% wa — IO等待占用CPU的百分比<br>0.0% hi — 硬中断（Hardware IRQ）占用CPU的百分比<br>0.0% si — 软中断（Software Interrupts）占用CPU的百分比</p><p>在这里CPU的使用比率和windows概念不同，如果你不理解用户空间和内核空间，需要充充电了。</p><h2 id="内存使用"><a href="#内存使用" class="headerlink" title="内存使用:"></a>内存使用:</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Mem:  49349228k total, 44294036k used,  5055192k free,   387384k buffers</span><br><span class="line">Swap: 33572860k total,     2560k used, 33570300k free, 40473596k cached</span><br></pre></td></tr></table></figure><p>接下来两行显示内存使用率，有点像’free’命令。第一行是物理内存使用，第二行是虚拟内存使用(交换空间)。</p><p>物理内存显示如下:全部可用内存、已使用内存、空闲内存、缓冲内存。相似地：交换部分显示的是：全部、已使用、空闲和缓冲交换空间。</p><p>内存显示可以用’m’命令切换。</p><p>49349228k total — 物理内存总量<br>44294036k used — 使用中的内存总量<br>5055192k free — 空闲内存总量<br>387384k buffers — 缓存的内存量</p><p>swap交换分区<br>33572860k total — 交换区总量<br>2560k used — 使用的交换区总量<br>33570300k free — 空闲交换区总量<br>40473596k cached — 缓冲的交换区总量</p><p>这里要说明的是不能用windows的内存概念理解这些数据，如果按windows的方式此台服务器“危矣”：8G的内存总量只剩下530M的可用内存。Linux的内存管理有其特殊性，复杂点需要一本书来说明，这里只是简单说点和我们传统概念（windows）的不同。</p><p>第四行中使用中的内存总量（used）指的是现在系统内核控制的内存数，空闲内存总量（free）是内核还未纳入其管控范围的数量。纳入内核管理的内存不见得都在使用中，还包括过去使用过的现在可以被重复利用的内存，内核并不把这些可被重新使用的内存交还到free中去，因此在linux上free内存会越来越少，但不用为此担心。</p><p>如果出于习惯去计算可用内存数，这里有个近似的计算公式：第四行的free + 第四行的buffers + 第五行的cached，按这个公式此台服务器的可用内存：</p><p>5055192k+387384k+40473596k= 45916172K= 44840MB + 43GB。</p><p>对于内存监控，在top里我们要时刻监控第五行swap交换分区的used，如果这个数值在不断的变化，说明内核在不断进行内存和swap的数据交换，这是真正的内存不够用了。</p><h2 id="各进程（任务）的状态监控"><a href="#各进程（任务）的状态监控" class="headerlink" title="各进程（任务）的状态监控:"></a>各进程（任务）的状态监控:</h2><p><img src="top.png" alt="top"><br>PID：进程ID，进程的唯一标识符</p><p>USER：进程所有者的实际用户名。</p><p>PR：进程的调度优先级。这个字段的一些值是’rt’。这意味这这些进程运行在实时态。</p><p>NI：进程的nice值（优先级）。越小的值意味着越高的优先级。负值表示高优先级，正值表示低优先级</p><p>VIRT：进程使用的虚拟内存。进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RES</p><p>RES：驻留内存大小。驻留内存是任务使用的非交换物理内存大小。进程使用的、未被换出的物理内存大小，单位kb。RES=CODE+DATA</p><p>SHR：SHR是进程使用的共享内存。共享内存大小，单位kb</p><p>S：这个是进程的状态。它有以下不同的值:</p><ul><li>D - 不可中断的睡眠态。</li><li>R – 运行态</li><li>S – 睡眠态</li><li>T – 被跟踪或已停止</li><li>Z – 僵尸态</li></ul><p>%CPU：自从上一次更新时到现在任务所使用的CPU时间百分比。</p><p>%MEM：进程使用的可用物理内存百分比。</p><p>TIME+：任务启动后到现在所使用的全部CPU时间，精确到百分之一秒。</p><p>COMMAND：运行进程所使用的命令。进程名称（命令名/命令行）</p><p>还有许多在默认情况下不会显示的输出，它们可以显示进程的页错误、有效组和组ID和其他更多的信息。</p><h2 id="top-的内部命令"><a href="#top-的内部命令" class="headerlink" title="top 的内部命令"></a>top 的内部命令</h2><p><strong>top 运行中可以通过 top 的内部命令对进程的显示方式进行控制。内部命令如下：</strong><br>s – 改变画面更新频率<br>l – 关闭或开启第一部分第一行 top 信息的表示<br>t – 关闭或开启第一部分第二行 Tasks 和第三行 Cpus 信息的表示<br>m – 关闭或开启第一部分第四行 Mem 和 第五行 Swap 信息的表示<br>N – 以 PID 的大小的顺序排列表示进程列表<br>P – 以 CPU 占用率大小的顺序排列进程列表<br>M – 以内存占用率大小的顺序排列进程列表<br>h – 显示帮助<br>n – 设置在进程列表所显示进程的数量<br>q – 退出 top<br>s – 改变画面更新周期</p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统负载 </tag>
            
            <tag> load average </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python之旅：网络编程</title>
      <link href="/2019/12/03/Python/Python%E4%B9%8B%E6%97%85/Python%E4%B9%8B%E6%97%85%EF%BC%9A%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
      <url>/2019/12/03/Python/Python%E4%B9%8B%E6%97%85/Python%E4%B9%8B%E6%97%85%EF%BC%9A%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h1><p>你现在已经学会了写python代码，假如你写了两个python文件a.py和b.py，分别去运行，你就会发现，这两个python的文件分别运行的很好。但是如果这两个程序之间想要传递一个数据，你要怎么做呢？</p><p>这个问题以你现在的知识就可以解决了，我们可以创建一个文件，把a.py想要传递的内容写到文件中，然后b.py从这个文件中读取内容就可以了</p><p><img src="1825659-20191021214903467-581414181.png" alt="img"><br>但是当你的a.py和b.py分别在不同电脑上的时候，你要怎么办呢？</p><p>类似的机制有计算机网盘，qq等等。我们可以在我们的电脑上和别人聊天，可以在自己的电脑上向网盘中上传、下载内容。这些都是两个程序在通信。</p><h1 id="软件开发架构"><a href="#软件开发架构" class="headerlink" title="软件开发架构"></a>软件开发架构</h1><p>我们了解的涉及到两个程序之间通讯的应用大致可以分为两种：</p><p>第一种是应用类：qq、微信、网盘、优酷这一类是属于需要安装的桌面应用</p><p>第二种是web类：比如百度、知乎、博客园等使用浏览器访问就可以直接使用的应用</p><p>这些应用的本质其实都是两个程序之间的通讯。而这两个分类又对应了两个软件开发的架构～</p><h2 id="c-s架构"><a href="#c-s架构" class="headerlink" title="c/s架构"></a>c/s架构</h2><p>C/S即：Client与Server ，中文意思：客户端与服务器端架构，这种架构也是从用户层面（也可以是物理层面）来划分的。</p><p><img src="1825659-20191021214903921-1620758624.png" alt="img"><br>这里的客户端一般泛指客户端应用程序EXE，程序需要先安装后，才能运行在用户的电脑上，对用户的电脑操作系统环境依赖较大。</p><h2 id="b-s架构"><a href="#b-s架构" class="headerlink" title="b/s架构"></a>b/s架构</h2><p>B/S即：Browser与Server,中文意思：浏览器端与服务器端架构，这种架构是从用户层面来划分的。</p><p>Browser浏览器，其实也是一种Client客户端，只是这个客户端不需要大家去安装什么应用程序，只需在浏览器上通过HTTP请求服务器端相关的资源（网页资源），客户端Browser浏览器就能进行增删改查。</p><p><img src="1825659-20191021214904352-515264786.png" alt="img"></p><h1 id="网路基础"><a href="#网路基础" class="headerlink" title="网路基础"></a>网路基础</h1><h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><ul><li><p>早期的电话需要有电话线、后面的大屁股电脑需要插网线、再后来的智能手机电脑需要有网卡。</p><p>也就是说网络通信的第一步必须得先有<strong>物理连接介质</strong></p></li><li><p>有了物理连接介质就能实现通信了吗</p><p>不同语言国家的人彼此之间打电话沟通，彼此都无法理解对方说了些什么，需要双方都精通对方的语言或者用一种全世界<strong>通用的</strong>语言进行沟通交流才可以解决。</p><p>那回到我们的计算机，不同计算机之间要想实现无障碍的通信，除了物理连接介质以外，也应该有一套共用的标准，只有大家都按照这个标准来，计算机之间才能实现通信</p><p>这个标准我们叫它<strong>互联网协议</strong>！</p></li></ul><h2 id="互联网协议"><a href="#互联网协议" class="headerlink" title="互联网协议"></a>互联网协议</h2><p>互联网协议按照功能不同分为osi七层或tcp/ip五层或tcp/ip四层</p><p><img src="1825659-20191021214944865-77757134..png" alt="img"><br><strong>每层常见物理设备</strong></p><p><img src="b812c8fcc3cec3fd98cbf503d688d43f869427ca.jpg" alt="img"></p><p><strong>交换机知识点补充</strong></p><p>现在如果就两台计算机，它们之间要想通信仅仅只需要彼此链接起来即可通信。</p><p>那如果是多台电脑之间想要实现彼此之间的相互通信，该如何链接呢？</p><p>一台电脑开多个网口插多个网线？那不成马蜂窝了嘛？</p><p>这个时候就需要一个中间人来帮我们完成多台机器之间的互联&gt;&gt;&gt;:<strong>交换机(所有链接了同一个交换机的电脑彼此之间都是互联的)</strong></p><p><strong>了解:</strong></p><p>三层交换机:既具有交换机功能又具有路由器功能</p><p>四层交换机:能够根据你走的是什么协议对应找到对应的应用</p><p><img src="1825659-20191021214945467-1745364508..png" alt="img"><br><strong>每层常见运行协议</strong></p><p><img src="1825659-20191021214945829-524193847..png" alt="img"></p><h3 id="1-物理层"><a href="#1-物理层" class="headerlink" title="1.物理层"></a>1.物理层</h3><p>物理链接介质，传递电信号</p><h3 id="2-数据链路层"><a href="#2-数据链路层" class="headerlink" title="2.数据链路层"></a>2.数据链路层</h3><p>物理层接收到一长串010101如何切分取值，这个事数据链路层的里面的以太网协议</p><ul><li>1.它规定了0101的二进制电信号的分组方式</li><li>2.但凡接入互联网的机器，必须有一块网卡<ul><li>网卡(用来唯一标识全世界独一无二的一台计算机)每块网卡出厂时都会被烧制上一个全世界唯一的编号，通常由12位16进制数表示（前六位是厂商编号，后六位是流水线号)</li><li>这个唯一表示计算机独一无二的地址就叫mac地址</li></ul></li></ul><p><strong>基于以太网协议的通信方式</strong></p><p>上面如果仅仅是两台电脑之间通信是不是已经开业完成了，但是如果是多台呢？如何去精准找到对方？</p><p>这里需要知道，在同一个局域网内通信基本靠吼！广播，单播</p><p>弊端:广播风暴，无法跨局域网通信</p><p><img src="1825659-20191021214946271-186507198..png" alt="img"></p><h3 id="3-网络层"><a href="#3-网络层" class="headerlink" title="3.网络层"></a>3.网络层</h3><p>规定了计算机都必须有一个ip地址</p><p>ip地址特点:点分十进制</p><p>有两个版本ipv4和ipv6 为了能够兼容更多的计算机</p><p>其中ipv4版本</p><p>​    最小:0.0.0.0</p><p>​    最大:255.255.255.255</p><p>IP协议可以跨局域网传输并且ip地址能够唯一标识互联网中独一无二的一台机器！</p><h3 id="4-传输层"><a href="#4-传输层" class="headerlink" title="4.传输层"></a>4.传输层</h3><p>TCP/UDP协议都是基于端口工作的协议这是重点，后面再讲，先来看，计算机之间通信，到底是谁和谁想通信，是计算机本身吗？是不是应该是我安装在计算机上的应用软件之间想通信(qq,微信等)，那我们现在只是知道了如何定位全世界独一无二的计算机，没办法确定计算机之上的哪款软件需要通信吧?这就需要用到端口</p><p><strong>端口(port):</strong>0～65535用来标识一台计算机之上<strong>基于网络通信</strong>的应用软件，0～1024操作系统自己用的，一般情况下8000之后的端口我们可以任意使用，8000之前的通常会有相应的程序默认使用</p><p>​    ip：能够查到全世界独一无二的计算机</p><p>​    port:能够标识一台机器上的某个程序</p><p>​    ip+port:能够确定全世界范围内一台计算机上的某个程序</p><h4 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h4><p>当应用程序想通过TCP协议实现远程通信时，彼此之间必须先先建立双向通信通道，基于该双向通道实现数据的远程交互，该双向通道直到任意一方主动断开才会失效</p><p><img src="1825659-20191021214947782-1358252741..png" alt="img"></p><h5 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h5><p>建立双向通道的过程称之为三次握手,建立通道的发起者可以是客户端也可以是服务端，下面我们就以客户端先主动发起为例</p><ul><li><p>客户端会朝服务端发送一个请求询问服务端:”我能不能挖一条通往你家的地道”</p></li><li><p>服务端收到请求，回复说:”好吧 你挖吧”，由于TCP是双向通道，客户端挖向服务端的通道只能给客户端朝服务端发消息使用，服务端要向给客户端发消息是没办法走这一条通道的，需要自己挖一条通往客户端的通道</p><p>所以服务端在回复同意客户端挖通道的同时还会问一句:”那我能不能也挖一条通往你家的通道”</p></li><li><p>客户端收到服务端请求后客户端到服务端的通道就挖成功了，然后也会同意服务端的请求，服务端挖向客户端的通道也会成功</p></li></ul><p>总结:之所以称之为三次握手就是因为中间的服务端的同意，和请求合并成了一次请求</p><p><img src="1825659-20191021214948388-305208614.gif" alt="img"></p><h5 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h5><p>建立一个连接需要三次握手，而终止一个连接要经过四次握手</p><p>当服务端或者客户端不想再与对方进行通信之后，双方任意一方都可以主动发起断开链接的请求，我们还是以客户端主动发起为例</p><ul><li><p>客户端由于已经没有任何需要发送给服务端的消息了，所以发起断开客户端到服务端的通道请求</p></li><li><p>服务端收到该请求后同意了 至此客户端到服务端的单项通道断开</p></li><li><p>服务端这个时候不会立刻朝客户端发器请求说那我也断开到你家的通道吧，服务端需要想想我手上还有没有需要发送给客户端的消息，如果还有的话，那我不能立马断开，先把数据发完才能断</p><p>等服务端检查完毕之后发送也没有数据要给客户端了，这个时候就会朝客户端发起断开服务端到客户端的通道请求</p></li><li><p>客户端同意该请求，至此四次挥手完成</p></li></ul><p>总结:挥手必须是四次，中间的两次不能合并成一次，原因就在于需要检查是否还有数据需要给对方发送</p><p><img src="1825659-20191021214948696-690441959.gif" alt="img"></p><h4 id="UDP协议"><a href="#UDP协议" class="headerlink" title="UDP协议"></a>UDP协议</h4><p>当应用程序希望通过UDP与一个应用程序通信时，传输数据之前源端和终端不建立连接。</p><p>当它想传送时就简单地去抓取来自应用程序的数据，并尽可能快地把它扔到网络上。</p><p>TCP和UDP类似于</p><p>​    TCP：打电话(你一句我一句，你侬我侬)</p><p>​    UDP:  发短信(管你看不看，发了就不关我事了)</p><p><img src="1825659-20191021214949134-1934760925.gif" alt="img"></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>TCP—-传输控制协议,提供的是面向连接、可靠的字节流服务。当客户和服务器彼此交换数据前，必须先在双方之间建立一个TCP连接，之后才能传输数据。TCP提供超时重发，丢弃重复数据，检验数据，流量控制等功能，保证数据能从一端传到另一端。<br> UDP—-用户数据报协议，是一个简单的面向数据报的运输层协议。UDP不提供可靠性，它只是把应用程序传给IP层的数据报发送出去，但是并不能保证它们能到达目的地。由于UDP在传输数据报前不用在客户和服务器之间建立一个连接，且没有超时重发等机制，故而传输速度很快</p><h3 id="5-应用层"><a href="#5-应用层" class="headerlink" title="5.应用层"></a>5.应用层</h3><p>应用层协议:  <strong>http协议</strong>,<strong>ftp协议</strong></p><p>应用层由来：用户使用的都是应用程序，均工作于应用层，互联网是开发的，大家都可以开发自己的应用程序，数据多种多样，必须规定好数据的组织形式 </p><p>应用层功能：规定应用程序的数据格式。</p><p>例：TCP协议可以为各种各样的程序传递数据，比如Email、WWW、FTP等等。那么，必须有不同协议规定电子邮件、网页、FTP数据的格式，这些应用程序协议就构成了”应用层”。</p><p><img src="1036857-20161008190023098-992049015.png" alt="img"></p><h1 id="Socket通信"><a href="#Socket通信" class="headerlink" title="Socket通信"></a>Socket通信</h1><h2 id="Socket概念"><a href="#Socket概念" class="headerlink" title="Socket概念"></a>Socket概念</h2><p>Socket是应用层与TCP/IP协议族通信的中间软件抽象层，它是一组接口。在设计模式中，Socket其实就是一个门面模式，它把复杂的TCP/IP协议族隐藏在Socket接口后面，对用户来说，一组简单的接口就是全部，让Socket去组织数据，以符合指定的协议。</p><p><img src="1825659-20191021215017364-1950126898..png" alt="img"></p><h2 id="套接字发展史及分类"><a href="#套接字发展史及分类" class="headerlink" title="套接字发展史及分类"></a>套接字发展史及分类</h2><p>套接字起源于 20 世纪 70 年代加利福尼亚大学伯克利分校版本的 Unix,即人们所说的 BSD  Unix。 因此,有时人们也把套接字称为“伯克利套接字”或“BSD 套接字”。一开始,套接字被设计用在同  一台主机上多个应用程序之间的通讯。这也被称进程间通讯,或 IPC。套接字有两种（或者称为有两个种族）,分别是基于文件型的和基于网络型的。 </p><p><strong>基于文件类型的套接字家族</strong></p><p>套接字家族的名字：AF_UNIX</p><p>unix一切皆文件，基于文件的套接字调用的就是底层的文件系统来取数据，两个套接字进程运行在同一机器，可以通过访问同一个文件系统间接完成通信</p><p><strong>基于网络类型的套接字家族</strong></p><p>套接字家族的名字：AF_INET</p><p>(还有AF_INET6被用于ipv6，还有一些其他的地址家族，不过，他们要么是只用于某个平台，要么就是已经被废弃，或者是很少被使用，或者是根本没有实现，所有地址家族中，AF_INET是使用最广泛的一个，python支持很多种地址家族，但是由于我们只关心网络编程，所以大部分时候我么只使用AF_INET)</p><h2 id="socket工作流程"><a href="#socket工作流程" class="headerlink" title="socket工作流程"></a>socket工作流程</h2><p><img src="v2-7d4ff6c59a5201bac25926b792826a40_720w.jpg" alt="img"></p><p>先从服务器端说起。服务器端先初始化Socket，然后与端口绑定(bind)，对端口进行监听(listen)，调用accept阻塞，等待客户端连接。在这时如果有个客户端初始化一个Socket，然后连接服务器(connect)，如果连接成功，这时客户端与服务器端的连接就建立了。客户端发送数据请求，服务器端接收请求并处理请求，然后把回应数据发送给客户端，客户端读取数据，最后关闭连接，一次交互结束</p><p><strong>socket()模块函数用法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">socket.socket(socket_family,socket_type,protocal=<span class="number">0</span>)<span class="comment"># eg: socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span></span><br><span class="line">socket_family 可以是 AF_UNIX 或 AF_INET。socket_type 可以是 SOCK_STREAM(tcp) 或 SOCK_DGRAM(udp)。protocol 一般不填,默认值为 <span class="number">0</span>。</span><br><span class="line"></span><br><span class="line">获取tcp/ip套接字</span><br><span class="line">tcpSock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">获取udp/ip套接字</span><br><span class="line">udpSock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line"></span><br><span class="line">由于 socket 模块中有太多的属性。我们在这里破例使用了<span class="string">&#x27;from module import *&#x27;</span>语句。使用 <span class="string">&#x27;from socket import *&#x27;</span>,我们就把 socket 模块里的所有属性都带到我们的命名空间里了,这样能 大幅减短我们的代码。</span><br><span class="line">例如tcpSock = socket(AF_INET, SOCK_STREAM)</span><br></pre></td></tr></table></figure><div class="note success flat"><p>套接字函数</p><p><strong>服务端套接字函数</strong><br>s.bind()    绑定(主机,端口号)到套接字<br>s.listen()  开始TCP监听<br>s.accept()  被动接受TCP客户的连接,(阻塞式)等待连接的到来</p><p><strong>客户端套接字函数</strong><br>s.connect()     主动初始化TCP服务器连接<br>s.connect_ex()  connect()函数的扩展版本,出错时返回出错码,而不是抛出异常</p><p><strong>公共用途的套接字函数</strong><br>s.recv()            接收TCP数据<br>s.send()            发送TCP数据(send在待发送数据量大于己端缓存区剩余空间时,数据丢失,不会发完)<br>s.sendall()         发送完整的TCP数据(本质就是循环调用send,sendall在待发送数据量大于己端缓存区剩余空间时,数据不丢失,循环调用send直到发完)<br>s.recvfrom()        接收UDP数据<br>s.sendto()          发送UDP数据<br>s.getpeername()     连接到当前套接字的远端的地址<br>s.getsockname()     当前套接字的地址<br>s.getsockopt()      返回指定套接字的参数<br>s.setsockopt()      设置指定套接字的参数<br>s.close()           关闭套接字</p><p><strong>面向锁的套接字方法</strong><br>s.setblocking()     设置套接字的阻塞与非阻塞模式<br>s.settimeout()      设置阻塞套接字操作的超时时间<br>s.gettimeout()      得到阻塞套接字操作的超时时间</p><p><strong>面向文件的套接字的函数</strong><br>s.fileno()          套接字的文件描述符<br>s.makefile()        创建一个与该套接字相关的文件</p></div><h2 id="基于TCP协议的socket"><a href="#基于TCP协议的socket" class="headerlink" title="基于TCP协议的socket"></a>基于TCP协议的socket</h2><p>模拟打电话</p><p><strong>server端</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">sk=socket.socket(socket.AF_INET,socket.SOCK_STREAM)     <span class="comment"># 买电话sk = socket.socket()</span></span><br><span class="line">sk.bind((<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8090</span>)) <span class="comment"># 插手机卡   端口有0-65535 0-1024是给系统用的 # 把地址绑定到套接字</span></span><br><span class="line">sk.listen(<span class="number">5</span>)    <span class="comment"># 开机   同一时间最大请求数，并非最大连接数# 监听链接</span></span><br><span class="line"></span><br><span class="line">conn,client_addr=sk.accept()    <span class="comment"># 等待电话连接#接受客户端链接</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;连接中&#x27;</span>,conn,client_addr)</span><br><span class="line">msg=conn.recv(<span class="number">1024</span>)     <span class="comment"># 收消息，1024是一个最大的限制  英文一个字节，中文三个字节 #接收客户端信息</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;收到客户端消息：&#x27;</span>,msg)<span class="comment">#向客户端发送信息</span></span><br><span class="line">conn.send((msg.upper()))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 挂电话</span></span><br><span class="line">conn.close()<span class="comment">#关闭客户端套接字</span></span><br><span class="line">sk.close() <span class="comment">#关闭服务器套接字(可选)</span></span><br></pre></td></tr></table></figure><p><strong>client端</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">sk=socket.socket(socket.AF_INET,socket.SOCK_STREAM)     <span class="comment"># 买电话# 创建客户套接字</span></span><br><span class="line">sk.connect((<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8090</span>)) <span class="comment"># 拨电话  地址是要连接服务器的 IP、PORT # 尝试连接服务器</span></span><br><span class="line"></span><br><span class="line">sk.send(<span class="string">&#x27;hello&#x27;</span>.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">data=sk.recv(<span class="number">1024</span>)  <span class="comment"># 收消息# 对话(发送/接收)</span></span><br><span class="line"><span class="built_in">print</span>(data.decode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">sk.close()<span class="comment"># 关闭客户套接字</span></span><br></pre></td></tr></table></figure><p><strong>tcp是基于链接的，必须先启动服务端，然后再启动客户端去链接服务端</strong></p><p>问题：有的同学在重启服务端时可能会遇到报错</p><p>更改下服务端与客户端端口，你即使执行了close 但是系统还没有close造成的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;E:/s1/server.py&quot;</span>, line <span class="number">3</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    sk.bind((<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8090</span>)) <span class="comment"># 插手机卡   端口有0-65535 0-1024是给系统用的</span></span><br><span class="line">OSError: [WinError <span class="number">10048</span>] 通常每个套接字地址(协议/网络地址/端口)只允许使用一次。</span><br></pre></td></tr></table></figure><p><strong>连续通话—-连续交换数据</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># server</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">sk=socket.socket(socket.AF_INET,socket.SOCK_STREAM)     </span><br><span class="line">sk.bind((<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8090</span>)) </span><br><span class="line">sk.listen(<span class="number">5</span>)    </span><br><span class="line">conn,client_addr=sk.accept()    </span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        msg=conn.recv(<span class="number">1024</span>)     </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;收到客户端消息：&#x27;</span>,msg)</span><br><span class="line">        conn.send((msg.upper()))</span><br><span class="line">    <span class="keyword">except</span> ConnectionResetError:</span><br><span class="line">        conn, client_addr = sk.accept()</span><br><span class="line">        </span><br><span class="line">conn.close()</span><br><span class="line">sk.close() </span><br><span class="line"></span><br><span class="line"><span class="comment"># client</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">sk=socket.socket(socket.AF_INET,socket.SOCK_STREAM)     </span><br><span class="line">sk.connect((<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8090</span>)) </span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    code=<span class="built_in">input</span>(<span class="string">&#x27;::: &#x27;</span>)</span><br><span class="line">    sk.send(code.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">    data=sk.recv(<span class="number">1024</span>)  </span><br><span class="line">    <span class="built_in">print</span>(data.decode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">sk.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">### client 断开 服务端还一直在监听，所以会报错 try一下</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;E:/s1/server.py&quot;</span>, line <span class="number">9</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    msg=conn.recv(<span class="number">1024</span>)     <span class="comment"># 收消息，1024是一个最大的限制  英文一个字节，中文三个字节 #接收客户端信息</span></span><br><span class="line">ConnectionResetError: [WinError <span class="number">10054</span>] 远程主机强迫关闭了一个现有的连接。</span><br></pre></td></tr></table></figure><h2 id="基于UDP协议的socket"><a href="#基于UDP协议的socket" class="headerlink" title="基于UDP协议的socket"></a>基于UDP协议的socket</h2><p>server端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">udp_sk=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)     <span class="comment"># 创建一个服务器的套接字</span></span><br><span class="line">udp_sk.bind((<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">9000</span>)) <span class="comment"># 绑定ip port</span></span><br><span class="line"></span><br><span class="line">msg,addr=udp_sk.recvfrom(<span class="number">1024</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;收到客户端消息：&#x27;</span>,msg)</span><br><span class="line">udp_sk.sendto(<span class="string">b&#x27;hi ni hao&#x27;</span>,addr)<span class="comment"># 对话(接收与发送)</span></span><br><span class="line">udp_sk.close()<span class="comment"># 关闭服务器套接字</span></span><br></pre></td></tr></table></figure><p>client端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">ip=(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">9000</span>)</span><br><span class="line">udp_sk=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)</span><br><span class="line">udp_sk.sendto(<span class="string">b&#x27;hello&#x27;</span>,ip)</span><br><span class="line">back_msg,addr=udp_sk.recvfrom(<span class="number">1024</span>)</span><br><span class="line"><span class="built_in">print</span>(back_msg.decode(<span class="string">&#x27;utf8&#x27;</span>),addr)</span><br></pre></td></tr></table></figure><p><strong>udp是无链接的，启动服务之后可以直接接受消息，不需要提前建立链接</strong></p><h2 id="黏包现象"><a href="#黏包现象" class="headerlink" title="黏包现象"></a>黏包现象</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">res=subprocess.Popen(cmd.decode(<span class="string">&#x27;utf-8&#x27;</span>),</span><br><span class="line">shell=<span class="literal">True</span>,</span><br><span class="line">stderr=subprocess.PIPE,</span><br><span class="line">stdout=subprocess.PIPE)</span><br><span class="line"></span><br><span class="line">输出的结果的编码是以当前所在的系统为准的，如果是windows，那么res.stdout.read()读出的就是GBK编码的，在接收端需要用GBK解码,且只能从管道里读一次结果</span><br></pre></td></tr></table></figure><p>同时执行多条命令之后，得到的结果很可能只有一部分，在执行其他命令的时候又接收到之前执行的另外一部分结果，这种显现就是黏包</p><p><strong>  基于tcp协议实现的黏包</strong></p><p>Server端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#_*_coding:utf-8_*_</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">ip_port=(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8888</span>)</span><br><span class="line">BUFSIZE=<span class="number">1024</span></span><br><span class="line"></span><br><span class="line">tcp_socket_server=socket(AF_INET,SOCK_STREAM)</span><br><span class="line">tcp_socket_server.setsockopt(SOL_SOCKET,SO_REUSEADDR,<span class="number">1</span>)</span><br><span class="line">tcp_socket_server.bind(ip_port)</span><br><span class="line">tcp_socket_server.listen(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    conn,addr=tcp_socket_server.accept()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;客户端&#x27;</span>,addr)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        cmd=conn.recv(BUFSIZE)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(cmd) == <span class="number">0</span>:<span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        res=subprocess.Popen(cmd.decode(<span class="string">&#x27;utf-8&#x27;</span>),shell=<span class="literal">True</span>,</span><br><span class="line">                         stdout=subprocess.PIPE,</span><br><span class="line">                         stdin=subprocess.PIPE,</span><br><span class="line">                         stderr=subprocess.PIPE)</span><br><span class="line"></span><br><span class="line">        stderr=res.stderr.read()</span><br><span class="line">        stdout=res.stdout.read()</span><br><span class="line">        conn.send(stderr)</span><br><span class="line">        conn.send(stdout)</span><br></pre></td></tr></table></figure><p>Client端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#_*_coding:utf-8_*_</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">BUFSIZE=<span class="number">1024</span></span><br><span class="line">ip_port=(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8888</span>)</span><br><span class="line"></span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">res=s.connect_ex(ip_port)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    msg=<span class="built_in">input</span>(<span class="string">&#x27;&gt;&gt;: &#x27;</span>).strip()</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(msg) == <span class="number">0</span>:<span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> msg == <span class="string">&#x27;quit&#x27;</span>:<span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    s.send(msg.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    act_res=s.recv(BUFSIZE)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(act_res.decode(<span class="string">&#x27;utf-8&#x27;</span>),end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="黏包成因"><a href="#黏包成因" class="headerlink" title="黏包成因"></a>黏包成因</h2><p>TCP面向流的通信特点和Nagle算法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">TCP（transport control protocol，传输控制协议）是面向连接的，面向流的，提供高可靠性服务。</span><br><span class="line">收发两端（客户端和服务器端）都要有一一成对的socket，因此，发送端为了将多个发往接收端的包，更有效的发到对方，使用了优化方法（Nagle算法），将多次间隔较小且数据量小的数据，合并成一个大的数据块，然后进行封包。</span><br><span class="line">这样，接收端，就难于分辨出来了，必须提供科学的拆包机制。 即面向流的通信是无消息保护边界的。 </span><br><span class="line">对于空消息：tcp是基于数据流的，于是收发的消息不能为空，这就需要在客户端和服务端都添加空消息的处理机制，防止程序卡住，而udp是基于数据报的，即便是你输入的是空内容（直接回车），也可以被发送，udp协议会帮你封装上消息头发送过去。 </span><br><span class="line">可靠黏包的tcp协议：tcp的协议数据不会丢，没有收完包，下次接收，会继续上次继续接收，己端总是在收到ack时才会清除缓冲区内容。数据是可靠的，但是会粘包。</span><br></pre></td></tr></table></figure><p>UDP不会发生黏包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">UDP（user datagram protocol，用户数据报协议）是无连接的，面向消息的，提供高效率服务。 </span><br><span class="line">不会使用块的合并优化算法，, 由于UDP支持的是一对多的模式，所以接收端的skbuff(套接字缓冲区）采用了链式结构来记录每一个到达的UDP包，在每个UDP包中就有了消息头（消息来源地址，端口等信息），这样，对于接收端来说，就容易进行区分处理了。 即面向消息的通信是有消息保护边界的。 </span><br><span class="line">对于空消息：tcp是基于数据流的，于是收发的消息不能为空，这就需要在客户端和服务端都添加空消息的处理机制，防止程序卡住，而udp是基于数据报的，即便是你输入的是空内容（直接回车），也可以被发送，udp协议会帮你封装上消息头发送过去。 </span><br><span class="line">不可靠不黏包的udp协议：udp的recvfrom是阻塞的，一个recvfrom(x)必须对唯一一个sendinto(y),收完了x个字节的数据就算完成,若是y;x数据就丢失，这意味着udp根本不会粘包，但是会丢数据，不可靠。</span><br></pre></td></tr></table></figure><h3 id="会发生黏包的两种情况"><a href="#会发生黏包的两种情况" class="headerlink" title="会发生黏包的两种情况"></a>会发生黏包的两种情况</h3><p>情况一 发送方的缓存机制</p><p>发送端需要等缓冲区满才发送出去，造成粘包（发送数据时间间隔很短，数据了很小，会合到一起，产生粘包）</p><p>情况二 接收方的缓存机制</p><p>接收方不及时接收缓冲区的包，造成多个包接收（客户端发送了一段数据，服务端只收了一小部分，服务端下次再收的时候还是从缓冲区拿上次遗留的数据，产生粘包）</p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>黏包现象只发生在tcp协议中：</p><p>1.从表面上看，黏包问题主要是因为发送方和接收方的缓存机制、tcp协议面向流通信的特点。</p><p>2.实际上，<strong>主要还是因为接收方不知道消息之间的界限，不知道一次性提取多少字节的数据所造成的</strong></p><h2 id="黏包解决方案"><a href="#黏包解决方案" class="headerlink" title="黏包解决方案"></a>黏包解决方案</h2><h3 id="解决方案一"><a href="#解决方案一" class="headerlink" title="解决方案一"></a>解决方案一</h3><p>问题的根源在于，接收端不知道发送端将要传送的字节流的长度，所以解决粘包的方法就是围绕，如何让发送端在发送数据前，把自己将要发送的字节流总大小让接收端知晓，然后接收端来一个死循环接收完所有数据。</p><p><img src="1825659-20191021215018988-377044498..png" alt="img"><br>存在的问题：<br> 程序的运行速度远快于网络传输速度，所以在发送一段字节前，先用send去发送该字节流长度，这种方式会放大网络延迟带来的性能损耗</p><h3 id="解决方案进阶"><a href="#解决方案进阶" class="headerlink" title="解决方案进阶"></a>解决方案进阶</h3><p>刚刚的方法，问题在于我们我们在发送</p><p>我们可以借助一个模块，这个模块可以把要发送的数据长度转换成固定长度的字节。这样客户端每次接收消息之前只要先接受这个固定长度字节的内容看一看接下来要接收的信息大小，那么最终接受的数据只要达到这个值就停止，就能刚好不多不少的接收完整的数据了。</p><h4 id="struct模块"><a href="#struct模块" class="headerlink" title="struct模块"></a>struct模块</h4><p>该模块可以把一个类型，如数字，转成固定长度的bytes</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line">obj = struct.pack(<span class="string">&#x27;i&#x27;</span>,<span class="number">123456</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(obj))  <span class="comment"># 4</span></span><br><span class="line">obj = struct.pack(<span class="string">&#x27;i&#x27;</span>,<span class="number">898898789</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(obj))  <span class="comment"># 4</span></span><br><span class="line"><span class="comment"># 无论数字多大，打包后长度恒为4</span></span><br></pre></td></tr></table></figure><p><img src="1825659-20191021215019868-960304832..png" alt="img"></p><h4 id="使用struct解决黏包"><a href="#使用struct解决黏包" class="headerlink" title="使用struct解决黏包"></a>使用struct解决黏包</h4><p>借助struct模块，我们知道长度数字可以被转换成一个标准大小的4字节数字。因此可以利用这个特点来预先发送数据长度。</p><div class="table-container"><table><thead><tr><th>发送时</th><th>接收时</th></tr></thead><tbody><tr><td>先发送struct转换好的数据长度4字节</td><td>先接受4个字节使用struct转换成数字来获取要接收的数据长度</td></tr><tr><td>再发送数据</td><td>再按照长度接收数据</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># server端</span></span><br><span class="line">obj=subprocess.Popen(cmd.decode(<span class="string">&#x27;utf-8&#x27;</span>),</span><br><span class="line">                             shell=<span class="literal">True</span>,</span><br><span class="line">                             stdout=subprocess.PIPE,</span><br><span class="line">                             stderr=subprocess.PIPE</span><br><span class="line">                             )</span><br><span class="line">            stdout=obj.stdout.read()</span><br><span class="line">            stderr=obj.stderr.read()</span><br><span class="line">            <span class="comment"># 1. 先制作固定长度的报头</span></span><br><span class="line">            header=struct.pack(<span class="string">&#x27;i&#x27;</span>,<span class="built_in">len</span>(stdout) + <span class="built_in">len</span>(stderr))</span><br><span class="line">            <span class="comment"># 2. 再发送报头</span></span><br><span class="line">            conn.send(header)</span><br><span class="line">            <span class="comment"># 3. 最后发送真实的数据</span></span><br><span class="line">            conn.send(stdout)</span><br><span class="line">            conn.send(stderr)</span><br><span class="line"><span class="comment"># client端</span></span><br><span class="line"><span class="comment">#1. 先收报头,从报头里解出数据的长度</span></span><br><span class="line">    header=client.recv(<span class="number">4</span>)</span><br><span class="line">    total_size=struct.unpack(<span class="string">&#x27;i&#x27;</span>,header)[<span class="number">0</span>]</span><br><span class="line">    <span class="comment">#2. 接收真正的数据</span></span><br><span class="line">    cmd_res=<span class="string">b&#x27;&#x27;</span></span><br><span class="line">    recv_size=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> recv_size &lt; total_size:</span><br><span class="line">        data=client.recv(<span class="number">1024</span>)</span><br><span class="line">        recv_size+=<span class="built_in">len</span>(data)</span><br><span class="line">        cmd_res+=data</span><br><span class="line">    <span class="built_in">print</span>(cmd_res.decode(<span class="string">&#x27;gbk&#x27;</span>))</span><br></pre></td></tr></table></figure><p>我们还可以把报头做成字典，字典里包含将要发送的真实数据的详细信息，然后json序列化，然后用struck将序列化后的数据长度打包成4个字节（4个自己足够用了）</p><div class="table-container"><table><thead><tr><th>发送时</th><th>接收时</th></tr></thead><tbody><tr><td>先发报头长度</td><td>先收报头长度，用struct取出来</td></tr><tr><td>再编码报头内容然后发送</td><td>根据取出的长度收取报头内容，然后解码，反序列化</td></tr><tr><td>最后发真实内容</td><td>从反序列化的结果中取出待取数据的详细信息，然后去取真实的数据内容</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># server端</span></span><br><span class="line"> <span class="comment"># 1. 先制作报头</span></span><br><span class="line">     header_dic = &#123;</span><br><span class="line">         <span class="string">&#x27;filename&#x27;</span>: <span class="string">&#x27;a.txt&#x27;</span>,</span><br><span class="line">         <span class="string">&#x27;md5&#x27;</span>: <span class="string">&#x27;asdfasdf123123x1&#x27;</span>,</span><br><span class="line">         <span class="string">&#x27;total_size&#x27;</span>: <span class="built_in">len</span>(stdout) + <span class="built_in">len</span>(stderr)</span><br><span class="line">     &#125;</span><br><span class="line">     header_json = json.dumps(header_dic)</span><br><span class="line">     header_bytes = header_json.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">     <span class="comment"># 2. 先发送4个bytes(包含报头的长度)</span></span><br><span class="line">     conn.send(struct.pack(<span class="string">&#x27;i&#x27;</span>, <span class="built_in">len</span>(header_bytes)))</span><br><span class="line">     <span class="comment"># 3  再发送报头</span></span><br><span class="line">     conn.send(header_bytes)</span><br><span class="line">     <span class="comment"># 4. 最后发送真实的数据</span></span><br><span class="line">     conn.send(stdout)</span><br><span class="line">     conn.send(stderr)</span><br><span class="line"><span class="comment"># client端</span></span><br><span class="line"><span class="comment">#1. 先收4bytes,解出报头的长度</span></span><br><span class="line">    header_size=struct.unpack(<span class="string">&#x27;i&#x27;</span>,client.recv(<span class="number">4</span>))[<span class="number">0</span>]</span><br><span class="line">    <span class="comment">#2. 再接收报头,拿到header_dic</span></span><br><span class="line">    header_bytes=client.recv(header_size)</span><br><span class="line">    header_json=header_bytes.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    header_dic=json.loads(header_json)</span><br><span class="line">    <span class="built_in">print</span>(header_dic)</span><br><span class="line">    total_size=header_dic[<span class="string">&#x27;total_size&#x27;</span>]</span><br><span class="line">    <span class="comment">#3. 接收真正的数据</span></span><br><span class="line">    cmd_res=<span class="string">b&#x27;&#x27;</span></span><br><span class="line">    recv_size=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> recv_size &lt; total_size:</span><br><span class="line">        data=client.recv(<span class="number">1024</span>)</span><br><span class="line">        recv_size+=<span class="built_in">len</span>(data)</span><br><span class="line">        cmd_res+=data</span><br><span class="line">    <span class="built_in">print</span>(cmd_res.decode(<span class="string">&#x27;gbk&#x27;</span>))</span><br></pre></td></tr></table></figure><p>总结:先发字典报头，再发字典数据，最后发真实数据</p><h3 id="SocketServer模块介绍"><a href="#SocketServer模块介绍" class="headerlink" title="SocketServer模块介绍"></a>SocketServer模块介绍</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># TCP socketserver使用</span></span><br><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyTcpServer</span>(socketserver.BaseRequestHandler):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                data = self.request.recv(<span class="number">1024</span>)  <span class="comment"># 对于tcp，self.request相当于conn对象</span></span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(data) == <span class="number">0</span>:<span class="keyword">break</span></span><br><span class="line">                <span class="built_in">print</span>(data)</span><br><span class="line">                self.request.send(data.upper())</span><br><span class="line">            <span class="keyword">except</span> ConnectionResetError:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    server = socketserver.ThreadingTCPServer((<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8081</span>),MyTcpServer)</span><br><span class="line">    server.serve_forever()</span><br><span class="line"></span><br><span class="line"><span class="comment"># UDP socketserver使用</span></span><br><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyUdpServer</span>(socketserver.BaseRequestHandler):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            data, sock = self.request</span><br><span class="line">            <span class="built_in">print</span>(data)</span><br><span class="line">            sock.sendto(data.upper(), self.client_address)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    server = socketserver.ThreadingUDPServer((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8080</span>), MyUdpServer)</span><br><span class="line">    server.serve_forever()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python之旅 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python之旅：异常处理</title>
      <link href="/2019/12/03/Python/Python%E4%B9%8B%E6%97%85/Python%E4%B9%8B%E6%97%85%EF%BC%9A%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
      <url>/2019/12/03/Python/Python%E4%B9%8B%E6%97%85/Python%E4%B9%8B%E6%97%85%EF%BC%9A%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是异常"><a href="#什么是异常" class="headerlink" title="什么是异常"></a>什么是异常</h1><p>异常是程序发生错误的信号。程序一旦出现错误，便会产生一个异常，若程序中没有处理它，就会抛出该异常，程序的运行也随之终止。在Python中,错误触发的异常如下</p><p><img src="1825659-20191014123006083-1029617120.gif" alt="异常处理"></p><p>而错误分成两种，一种是语法上的错误<code>SyntaxError</code>，这种错误应该在程序运行前就修改正确</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span>  </span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span></span><br><span class="line">     ^</span><br><span class="line">SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure><p>另一类就是逻辑错误，常见的逻辑错误如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># TypeError：数字类型无法与字符串类型相加</span></span><br><span class="line"><span class="number">1</span>+’<span class="number">2</span>’</span><br><span class="line"></span><br><span class="line"><span class="comment"># ValueError：当字符串包含有非数字的值时，无法转成int类型</span></span><br><span class="line">num=<span class="built_in">input</span>(<span class="string">&quot;&gt;&gt;: &quot;</span>) <span class="comment">#输入hello</span></span><br><span class="line"><span class="built_in">int</span>(num)</span><br><span class="line"></span><br><span class="line"><span class="comment"># NameError：引用了一个不存在的名字x</span></span><br><span class="line">x</span><br><span class="line"></span><br><span class="line"><span class="comment"># IndexError：索引超出列表的限制</span></span><br><span class="line">l=[<span class="string">&#x27;allen&#x27;</span>,<span class="string">&#x27;aa&#x27;</span>]</span><br><span class="line">l[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># KeyError：引用了一个不存在的key</span></span><br><span class="line">dic=&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;allen&#x27;</span>&#125;</span><br><span class="line">dic[<span class="string">&#x27;age&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># AttributeError：引用的属性不存在</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">Foo.x</span><br><span class="line"></span><br><span class="line"><span class="comment"># ZeroDivisionError：除数不能为0</span></span><br><span class="line"><span class="number">1</span>/<span class="number">0</span></span><br></pre></td></tr></table></figure><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><h2 id="try-except"><a href="#try-except" class="headerlink" title="try-except"></a>try-except</h2><p>try的工作原理是，当开始一个try语句后，python就在当前程序的上下文中作标记，这样当异常出现时就可以回到这里，try子句先执行，接下来会发生什么依赖于执行时是否出现异常。</p><ul><li>如果当try后的语句执行时发生异常，python就跳回到try并执行第一个匹配该异常的except子句，异常处理完毕，控制流就通过整个try语句（除非在处理异常时又引发新的异常）。</li><li>如果在try后的语句里发生了异常，却没有匹配的except子句，异常将被递交到上层的try，或者到程序的最上层（这样将结束程序，并打印默认的出错信息）。</li><li>如果在try子句执行时没有发生异常，python将执行else语句后的语句（如果有else的话），然后控制流通过整个try语句</li></ul><p>为了保证程序的容错性与可靠性，即在遇到错误时有相应的处理机制不会任由程序崩溃掉，我们需要对异常进行处理，处理的基本形式为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    被检测的代码块</span><br><span class="line"><span class="keyword">except</span> 异常类型：</span><br><span class="line">    检测到异常，就执行这个位置的逻辑</span><br></pre></td></tr></table></figure><p>举例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;start...&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(x) <span class="comment"># 引用了一个不存在的名字，触发异常NameError</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;end...&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> NameError <span class="keyword">as</span> e: <span class="comment"># as语法将异常类型的值赋值给变量e，这样我们通过打印e便可以知道错误的原因</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;异常值为：%s&#x27;</span> %e)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;run other code...&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#执行结果为</span></span><br><span class="line">start...</span><br><span class="line">异常值为：name <span class="string">&#x27;x&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line">run other code...</span><br></pre></td></tr></table></figure><p>本来程序一旦出现异常就整体结束掉了，有了异常处理以后，在被检测的代码块出现异常时，被检测的代码块中异常发生位置之后的代码将不会执行，取而代之的是执行匹配异常的except子代码块，其余代码均正常运行。</p><p>​    当被检测的代码块中有可能触发不同类型的异常时，针对不同类型的异常：</p><p>​    如果我们想分别用不同的逻辑处理，需要用到多分支的except（类似于多分支的elif，从上到下依次匹配，匹配成功一次便不再匹配其他）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    被检测的代码块</span><br><span class="line"><span class="keyword">except</span> NameError:</span><br><span class="line">    触发NameError时对应的处理逻辑</span><br><span class="line"><span class="keyword">except</span> IndexError:</span><br><span class="line">    触发IndexError时对应的处理逻辑</span><br><span class="line"><span class="keyword">except</span> KeyError:</span><br><span class="line">    触发KeyError时对应的处理逻辑</span><br></pre></td></tr></table></figure><p>举例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">convert_int</span>(<span class="params">obj</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res=<span class="built_in">int</span>(obj)</span><br><span class="line">    <span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;ValueError: %s&#x27;</span> %e)</span><br><span class="line">        res=<span class="literal">None</span></span><br><span class="line">    <span class="keyword">except</span> TypeError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;TypeError: %s&#x27;</span> %e)</span><br><span class="line">        res=<span class="literal">None</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">convert_int(<span class="string">&#x27;allen&#x27;</span>) <span class="comment"># ValueError: invalid literal for int() with base 10: &#x27;allen&#x27;</span></span><br><span class="line">convert_int(&#123;<span class="string">&#x27;n&#x27;</span>:<span class="number">1</span>&#125;) <span class="comment"># TypeError: int() argument must be a string, a bytes-like object or a number, not &#x27;dict&#x27;</span></span><br></pre></td></tr></table></figure><p>如果我们想多种类型的异常统一用一种逻辑处理，可以将多个异常放到一个元组内，用一个except匹配</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    被检测的代码块</span><br><span class="line"><span class="keyword">except</span> (NameError,IndexError,TypeError):</span><br><span class="line">    触发NameError或IndexError或TypeError时对应的处理逻辑</span><br></pre></td></tr></table></figure><p>举例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">convert_int</span>(<span class="params">obj</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res=<span class="built_in">int</span>(obj)</span><br><span class="line">    <span class="keyword">except</span> (ValueError,TypeError):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;argument must be number or numeric string&#x27;</span>)</span><br><span class="line">        res=<span class="literal">None</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">convert_int(<span class="string">&#x27;allen&#x27;</span>) <span class="comment"># argument must be number or numeric string</span></span><br><span class="line">convert_int(&#123;<span class="string">&#x27;n&#x27;</span>:<span class="number">1</span>&#125;) <span class="comment"># argument must be number or numeric string</span></span><br></pre></td></tr></table></figure><p>如果我们想捕获所有异常并用一种逻辑处理，Python提供了一个万能异常类型Exception</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    被检测的代码块</span><br><span class="line"><span class="keyword">except</span> NameError:</span><br><span class="line">    触发NameError时对应的处理逻辑</span><br><span class="line"><span class="keyword">except</span> IndexError:</span><br><span class="line">    触发IndexError时对应的处理逻辑</span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line">    其他类型的异常统一用此处的逻辑处理</span><br></pre></td></tr></table></figure><p>在多分支except之后还可以跟一个else（else必须跟在except之后，不能单独存在），只有在被检测的代码块没有触发任何异常的情况下才会执行else的子代码块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    被检测的代码块</span><br><span class="line"><span class="keyword">except</span> 异常类型<span class="number">1</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> 异常类型<span class="number">2</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">......</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    没有异常发生时执行的代码块</span><br></pre></td></tr></table></figure><h2 id="try-finally-语句"><a href="#try-finally-语句" class="headerlink" title="try-finally 语句"></a>try-finally 语句</h2><p>此外try还可以与finally连用，从语法上讲finally必须放到else之后，但可以使用try-except-finally的形式，也可以直接使用try-finally的形式。无论被检测的代码块是否触发异常，都会执行finally的子代码块，因此通常在finally的子代码块做一些回收资源的操作，比如关闭打开的文件、关闭数据库连接等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">   被检测的代码块</span><br><span class="line"><span class="keyword">except</span> 异常类型<span class="number">1</span>:</span><br><span class="line">   <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> 异常类型<span class="number">2</span>:</span><br><span class="line">   <span class="keyword">pass</span></span><br><span class="line">......</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   没有异常发生时执行的代码块</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">   无论有无异常发生都会执行的代码块</span><br></pre></td></tr></table></figure><p>举例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">f=<span class="literal">None</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f=<span class="built_in">open</span>(‘db.txt’,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    s=f.read().strip()</span><br><span class="line">    <span class="built_in">int</span>(s)  <span class="comment"># 若字符串s中包含非数字时则会触发异常ValueError</span></span><br><span class="line">    <span class="comment"># f.close() # 若上面的代码触发异常，则根本不可能执行到此处的代码，应该将关闭文件的操作放到finally中</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="keyword">if</span> f: <span class="comment"># 文件存在则f的值不为None</span></span><br><span class="line">        f.close()</span><br></pre></td></tr></table></figure><h2 id="raise语句"><a href="#raise语句" class="headerlink" title="raise语句"></a>raise语句</h2><p>我们可以使用raise语句自己触发异常</p><p>raise语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">raise [Exception [, args [, traceback]]]</span><br></pre></td></tr></table></figure><p>在不符合Python解释器的语法或逻辑规则时，是由Python解释器主动触发的各种类型的异常，而对于违反程序员自定制的各类规则，则需要由程序员自己来明确地触发异常，这就用到了raise语句，raise后必须是一个异常的类或者是异常的实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(name,<span class="built_in">str</span>):</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;name must be str&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(age,<span class="built_in">int</span>):</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;age must be int&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line"></span><br><span class="line">stu1=Student(<span class="number">4573</span>,<span class="number">18</span>) <span class="comment"># TypeError: name must be str</span></span><br><span class="line">stu2=Student(<span class="string">&#x27;allen&#x27;</span>,<span class="string">&#x27;18&#x27;</span>) <span class="comment"># TypeError: age must be int</span></span><br></pre></td></tr></table></figure><p>在内置异常不够用的情况下，我们可以通过继承内置的异常类来自定义异常类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PoolEmptyError</span>(<span class="title class_ inherited__">Exception</span>): <span class="comment"># 可以通过继承Exception来定义一个全新的异常</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,value=<span class="string">&#x27;The proxy source is exhausted&#x27;</span></span>): <span class="comment"># 可以定制初始化方法</span></span><br><span class="line">        <span class="built_in">super</span>(PoolEmptyError,self).__init__()</span><br><span class="line">        self.value=value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>): <span class="comment"># 可以定义该方法用来定制触发异常时打印异常值的格式</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&lt; %s &gt;&#x27;</span> %self.value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NetworkIOError</span>(<span class="title class_ inherited__">IOError</span>): <span class="comment"># 也可以在特定异常的基础上扩展一个相关的异常</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">raise</span> PoolEmptyError <span class="comment"># __main__.PoolEmptyError: &lt; The proxy source is exhausted &gt;</span></span><br><span class="line"><span class="keyword">raise</span> NetworkIOError(<span class="string">&#x27;连接被拒绝&#x27;</span>) <span class="comment"># __main__.NetworkIOError: 连接被拒绝</span></span><br></pre></td></tr></table></figure><p>最后，Python还提供了一个断言语句assert expression，断定表达式expression成立，否则触发异常AssertionError，与raise-if-not的语义相同，如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">age=<span class="string">&#x27;18&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 若表达式isinstance(age,int)返回值为False则触发异常AssertionError</span></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">isinstance</span>(age,<span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等同于</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(age,<span class="built_in">int</span>):</span><br><span class="line"><span class="keyword">raise</span> AssertionError</span><br></pre></td></tr></table></figure><h1 id="何时使用异常处理"><a href="#何时使用异常处理" class="headerlink" title="何时使用异常处理"></a>何时使用异常处理</h1><p>在了解了异常处理机制后，本着提高程序容错性和可靠性的目的，读者可能会错误地认为应该尽可能多地为程序加上try…except…，这其是在过度消费程序的可读性，因为try…except本来就是你附加给程序的一种额外的逻辑，与你的主要工作是没有多大关系的。</p><p>​    如果错误发生的条件是“可预知的”，我们应该用if来进行”预防”，如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">age=<span class="built_in">input</span>(<span class="string">&#x27;input your age&gt;&gt;: &#x27;</span>).strip()</span><br><span class="line"><span class="keyword">if</span> age.isdigit(): <span class="comment"># 可预知只有满足字符串age是数字的条件，int(age)才不会触发异常，</span></span><br><span class="line">    age=<span class="built_in">int</span>(age)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;You must enter the number&#x27;</span>)</span><br></pre></td></tr></table></figure><p>如果错误发生的条件“不可预知”，即异常一定会触发，那么我们才应该使用try…except语句来处理。例如我们编写一个下载网页内容的功能，网络发生延迟之类的异常是很正常的事，而我们根本无法预知在满足什么条件的情况下才会出现延迟，因而只能用异常处理机制了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> requests.exceptions <span class="keyword">import</span> ConnectTimeout <span class="comment"># 导入requests模块内自定义的异常</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response=requests.get(url,timeout=<span class="number">3</span>)<span class="comment">#超过3秒未下载成功则触发ConnectTimeout异常</span></span><br><span class="line">        res=response.text</span><br><span class="line">    <span class="keyword">except</span> ConnectTimeout:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;连接请求超时&#x27;</span>)</span><br><span class="line">        res=<span class="literal">None</span></span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;网络出现其他异常&#x27;</span>)</span><br><span class="line">        res=<span class="literal">None</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">get(<span class="string">&#x27;https://www.python.org&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="python标准异常"><a href="#python标准异常" class="headerlink" title="python标准异常"></a>python标准异常</h1><div class="table-container"><table><thead><tr><th>异常名称</th><th>描述</th></tr></thead><tbody><tr><td></td><td></td></tr><tr><td>BaseException</td><td>所有异常的基类</td></tr><tr><td>SystemExit</td><td>解释器请求退出</td></tr><tr><td>KeyboardInterrupt</td><td>用户中断执行(通常是输入^C)</td></tr><tr><td>Exception</td><td>常规错误的基类</td></tr><tr><td>StopIteration</td><td>迭代器没有更多的值</td></tr><tr><td>GeneratorExit</td><td>生成器(generator)发生异常来通知退出</td></tr><tr><td>StandardError</td><td>所有的内建标准异常的基类</td></tr><tr><td>ArithmeticError</td><td>所有数值计算错误的基类</td></tr><tr><td>FloatingPointError</td><td>浮点计算错误</td></tr><tr><td>OverflowError</td><td>数值运算超出最大限制</td></tr><tr><td>ZeroDivisionError</td><td>除(或取模)零 (所有数据类型)</td></tr><tr><td>AssertionError</td><td>断言语句失败</td></tr><tr><td>AttributeError</td><td>对象没有这个属性</td></tr><tr><td>EOFError</td><td>没有内建输入,到达EOF 标记</td></tr><tr><td>EnvironmentError</td><td>操作系统错误的基类</td></tr><tr><td>IOError</td><td>输入/输出操作失败</td></tr><tr><td>OSError</td><td>操作系统错误</td></tr><tr><td>WindowsError</td><td>系统调用失败</td></tr><tr><td>ImportError</td><td>导入模块/对象失败</td></tr><tr><td>LookupError</td><td>无效数据查询的基类</td></tr><tr><td>IndexError</td><td>序列中没有此索引(index)</td></tr><tr><td>KeyError</td><td>映射中没有这个键</td></tr><tr><td>MemoryError</td><td>内存溢出错误(对于Python 解释器不是致命的)</td></tr><tr><td>NameError</td><td>未声明/初始化对象 (没有属性)</td></tr><tr><td>UnboundLocalError</td><td>访问未初始化的本地变量</td></tr><tr><td>ReferenceError</td><td>弱引用(Weak reference)试图访问已经垃圾回收了的对象</td></tr><tr><td>RuntimeError</td><td>一般的运行时错误</td></tr><tr><td>NotImplementedError</td><td>尚未实现的方法</td></tr><tr><td>SyntaxError</td><td>Python 语法错误</td></tr><tr><td>IndentationError</td><td>缩进错误</td></tr><tr><td>TabError</td><td>Tab 和空格混用</td></tr><tr><td>SystemError</td><td>一般的解释器系统错误</td></tr><tr><td>TypeError</td><td>对类型无效的操作</td></tr><tr><td>ValueError</td><td>传入无效的参数</td></tr><tr><td>UnicodeError</td><td>Unicode 相关的错误</td></tr><tr><td>UnicodeDecodeError</td><td>Unicode 解码时的错误</td></tr><tr><td>UnicodeEncodeError</td><td>Unicode 编码时错误</td></tr><tr><td>UnicodeTranslateError</td><td>Unicode 转换时错误</td></tr><tr><td>Warning</td><td>警告的基类</td></tr><tr><td>DeprecationWarning</td><td>关于被弃用的特征的警告</td></tr><tr><td>FutureWarning</td><td>关于构造将来语义会有改变的警告</td></tr><tr><td>OverflowWarning</td><td>旧的关于自动提升为长整型(long)的警告</td></tr><tr><td>PendingDeprecationWarning</td><td>关于特性将会被废弃的警告</td></tr><tr><td>RuntimeWarning</td><td>可疑的运行时行为(runtime behavior)的警告</td></tr><tr><td>SyntaxWarning</td><td>可疑的语法的警告</td></tr><tr><td>UserWarning</td><td>用户代码生成的警告</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> Python之旅 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python之旅：面向对象高级</title>
      <link href="/2019/11/30/Python/Python%E4%B9%8B%E6%97%85/Python%E4%B9%8B%E6%97%85%EF%BC%9A%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7/"/>
      <url>/2019/11/30/Python/Python%E4%B9%8B%E6%97%85/Python%E4%B9%8B%E6%97%85%EF%BC%9A%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="isinstance-obj-cls-和issubclass-sub-super"><a href="#isinstance-obj-cls-和issubclass-sub-super" class="headerlink" title="isinstance(obj,cls)和issubclass(sub,super)"></a>isinstance(obj,cls)和issubclass(sub,super)</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">obj=Foo()</span><br><span class="line"><span class="built_in">isinstance</span>(obj,Foo)  <span class="comment"># isinstance(obj,Foo) 检查是否obj是否是类 Foo 的对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bar</span>(<span class="title class_ inherited__">Foo</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">obj=Foo()</span><br><span class="line"><span class="built_in">issubclass</span>(Bar,Foo)<span class="comment"># issubclass(Bar,Foo)# 检查 Bar 类是否是 Foo 类的派生类</span></span><br></pre></td></tr></table></figure><h1 id="setattr-delattr-getattr"><a href="#setattr-delattr-getattr" class="headerlink" title="__setattr__,__delattr__,__getattr__"></a><code>__setattr__,__delattr__,__getattr__</code></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>:</span><br><span class="line">    x=<span class="number">1</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,y</span>):</span><br><span class="line">        self.y=y</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getattr__</span>(<span class="params">self, item</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        对象取值时，取值的顺序为：先从object里__getattribute__中找，第二步从对象的属性中找，第三步从当前类中找，第四步从父类中找，第五步从__getattr__中找，如果没有，直接抛出异常。</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;----&gt; from getattr:你找的属性不存在&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__setattr__</span>(<span class="params">self, key, value</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;----&gt; from setattr&#x27;</span>)</span><br><span class="line">        <span class="comment"># self.key=value # self.key=value又触发了__setattr__ 这就无限递归了,你好好想想</span></span><br><span class="line">        self.__dict__[key]=value <span class="comment">#应该使用他</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__delattr__</span>(<span class="params">self, item</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;----&gt; from delattr&#x27;</span>)</span><br><span class="line">        <span class="comment"># del self.item #无限递归了</span></span><br><span class="line">        self.__dict__.pop(item)</span><br><span class="line"></span><br><span class="line"><span class="comment">#__setattr__添加/修改属性会触发它的执行</span></span><br><span class="line">f1=Foo(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(f1.__dict__) <span class="comment"># 因为你重写了__setattr__,凡是赋值操作都会触发它的运行,你啥都没写,就是根本没赋值,除非你直接操作属性字典,否则永远无法赋值</span></span><br><span class="line">f1.z=<span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(f1.__dict__)</span><br><span class="line"></span><br><span class="line"><span class="comment">#__delattr__删除属性的时候会触发</span></span><br><span class="line"><span class="keyword">del</span> f1.z</span><br><span class="line"><span class="built_in">print</span>(f1.__dict__)</span><br><span class="line"></span><br><span class="line"><span class="comment">#__getattr__只有在使用点调用属性且属性不存在的时候才会触发</span></span><br><span class="line">f1.zxxx</span><br><span class="line"></span><br><span class="line"><span class="comment">## </span></span><br><span class="line">----&gt; <span class="keyword">from</span> <span class="built_in">setattr</span></span><br><span class="line">&#123;<span class="string">&#x27;y&#x27;</span>: <span class="number">10</span>&#125;</span><br><span class="line">----&gt; <span class="keyword">from</span> <span class="built_in">setattr</span></span><br><span class="line">&#123;<span class="string">&#x27;y&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;z&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line">----&gt; <span class="keyword">from</span> <span class="built_in">delattr</span></span><br><span class="line">&#123;<span class="string">&#x27;y&#x27;</span>: <span class="number">10</span>&#125;</span><br><span class="line">----&gt; <span class="keyword">from</span> <span class="built_in">getattr</span>:你找的属性不存在</span><br></pre></td></tr></table></figure><h1 id="二次加工标准类型-包装"><a href="#二次加工标准类型-包装" class="headerlink" title="二次加工标准类型(包装)"></a>二次加工标准类型(包装)</h1><p>包装：python为大家提供了标准数据类型，以及丰富的内置方法，其实在很多场景下我们都需要基于标准数据类型来定制我们自己的数据类型，新增/改写方法，这就用到了我们刚学的继承/派生知识（其他的标准类型均可以通过下面的方式进行二次加工） </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">List</span>(<span class="title class_ inherited__">list</span>):   <span class="comment">#继承list所有的属性，也可以派生出自己新的，比如append和mid</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">append</span>(<span class="params">self,name</span>):</span><br><span class="line">        <span class="string">&#x27;派生自己append，加上类型检查&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span>(name) <span class="keyword">is</span> <span class="built_in">str</span>:</span><br><span class="line">            <span class="built_in">super</span>().append(name)    <span class="comment"># super()调用自己的父类</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;非字符串&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property   </span><span class="comment">#一种装饰器，是用来修饰方法的</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mid</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&#x27;新增自己的属性&#x27;</span></span><br><span class="line">        count=<span class="built_in">len</span>(self)//<span class="number">2</span></span><br><span class="line">        <span class="keyword">return</span> self[count]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">l=<span class="type">List</span>(<span class="string">&#x27;helloword&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(l.mid)</span><br><span class="line"></span><br><span class="line">l.append(<span class="string">&#x27;allen&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line"><span class="comment">##</span></span><br><span class="line">o</span><br><span class="line">[<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;allen&#x27;</span>]</span><br></pre></td></tr></table></figure><p>授权：授权是包装的一个特性, 包装一个类型通常是对已存在的类型的一些定制,这种做法可以新建,修改或删除原有产品的功能。其它的则保持原样。授权的过程,即是所有更新的功能都是由新类的某部分来处理,但已存在的功能就授权给对象的默认属性。</p><p>实现授权的关键点就是覆盖<code>__getattr__</code>方法</p><p>基于继承实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">List</span>(<span class="title class_ inherited__">list</span>): <span class="comment">#继承list所有的属性，也可以派生出自己新的，比如append和mid</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">append</span>(<span class="params">self, p_object</span>):</span><br><span class="line">        <span class="string">&#x27; 派生自己的append：加上类型检查&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(p_object,<span class="built_in">int</span>):</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;must be int&#x27;</span>)</span><br><span class="line">        <span class="built_in">super</span>().append(p_object)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mid</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&#x27;新增自己的属性&#x27;</span></span><br><span class="line">        index=<span class="built_in">len</span>(self)//<span class="number">2</span></span><br><span class="line">        <span class="keyword">return</span> self[index]</span><br><span class="line"></span><br><span class="line">l=<span class="type">List</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line">l.append(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line"><span class="comment"># l.append(&#x27;1111111&#x27;) #报错，必须为int类型</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(l.mid)</span><br><span class="line"></span><br><span class="line"><span class="comment">#其余的方法都继承list的</span></span><br><span class="line">l.insert(<span class="number">0</span>,-<span class="number">123</span>)</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line">l.clear()</span><br><span class="line"><span class="built_in">print</span>(l)</span><br></pre></td></tr></table></figure><p>练习（clear加权限限制）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">List</span>(<span class="title class_ inherited__">list</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,item,tag=<span class="literal">False</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(item)</span><br><span class="line">        self.tag=tag</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">append</span>(<span class="params">self, p_object</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(p_object,<span class="built_in">str</span>):</span><br><span class="line">            <span class="keyword">raise</span> TypeError</span><br><span class="line">        <span class="built_in">super</span>().append(p_object)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">clear</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.tag:</span><br><span class="line">            <span class="keyword">raise</span> PermissionError</span><br><span class="line">        <span class="built_in">super</span>().clear()</span><br><span class="line"></span><br><span class="line">l=<span class="type">List</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line"><span class="built_in">print</span>(l.tag)</span><br><span class="line"></span><br><span class="line">l.append(<span class="string">&#x27;saf&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line"></span><br><span class="line"><span class="comment"># l.clear() #异常</span></span><br><span class="line"></span><br><span class="line">l.tag=<span class="literal">True</span></span><br><span class="line">l.clear()</span><br></pre></td></tr></table></figure><p> 授权示范一</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FileHandle</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,filename,mode=<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span></span>):</span><br><span class="line">        self.file=<span class="built_in">open</span>(filename,mode,encoding=encoding)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">write</span>(<span class="params">self,line</span>):</span><br><span class="line">        t=time.strftime(<span class="string">&#x27;%Y-%m-%d %T&#x27;</span>)</span><br><span class="line">        self.file.write(<span class="string">&#x27;%s %s&#x27;</span> %(t,line))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getattr__</span>(<span class="params">self, item</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">getattr</span>(self.file,item)</span><br><span class="line"></span><br><span class="line">f1=FileHandle(<span class="string">&#x27;b.txt&#x27;</span>,<span class="string">&#x27;w+&#x27;</span>)</span><br><span class="line">f1.write(<span class="string">&#x27;你好啊&#x27;</span>)</span><br><span class="line">f1.seek(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(f1.read())</span><br><span class="line">f1.close()</span><br></pre></td></tr></table></figure><p>授权示范二</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#_*_coding:utf-8_*_</span></span><br><span class="line">__author__ = <span class="string">&#x27;Linhaifeng&#x27;</span></span><br><span class="line"><span class="comment">#我们来加上b模式支持</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FileHandle</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,filename,mode=<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span></span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;b&#x27;</span> <span class="keyword">in</span> mode:</span><br><span class="line">            self.file=<span class="built_in">open</span>(filename,mode)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.file=<span class="built_in">open</span>(filename,mode,encoding=encoding)</span><br><span class="line">        self.filename=filename</span><br><span class="line">        self.mode=mode</span><br><span class="line">        self.encoding=encoding</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">write</span>(<span class="params">self,line</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;b&#x27;</span> <span class="keyword">in</span> self.mode:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(line,<span class="built_in">bytes</span>):</span><br><span class="line">                <span class="keyword">raise</span> TypeError(<span class="string">&#x27;must be bytes&#x27;</span>)</span><br><span class="line">        self.file.write(line)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getattr__</span>(<span class="params">self, item</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">getattr</span>(self.file,item)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;b&#x27;</span> <span class="keyword">in</span> self.mode:</span><br><span class="line">            res=<span class="string">&quot;&lt;_io.BufferedReader name=&#x27;%s&#x27;&gt;&quot;</span> %self.filename</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            res=<span class="string">&quot;&lt;_io.TextIOWrapper name=&#x27;%s&#x27; mode=&#x27;%s&#x27; encoding=&#x27;%s&#x27;&gt;&quot;</span> %(self.filename,self.mode,self.encoding)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">f1=FileHandle(<span class="string">&#x27;b.txt&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line"><span class="comment"># f1.write(&#x27;你好啊啊啊啊啊&#x27;) #自定制的write,不用在进行encode转成二进制去写了,简单,大气</span></span><br><span class="line">f1.write(<span class="string">&#x27;你好啊&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(f1)</span><br><span class="line">f1.close()</span><br></pre></td></tr></table></figure><p>练习授权</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#练习一</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">List</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,seq</span>):</span><br><span class="line">        self.seq=seq</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">append</span>(<span class="params">self, p_object</span>):</span><br><span class="line">        <span class="string">&#x27; 派生自己的append加上类型检查，覆盖原有的append&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(p_object,<span class="built_in">int</span>):</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;must be int&#x27;</span>)</span><br><span class="line">        self.seq.append(p_object)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mid</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&#x27;新增自己的方法&#x27;</span></span><br><span class="line">        index=<span class="built_in">len</span>(self.seq)//<span class="number">2</span></span><br><span class="line">        <span class="keyword">return</span> self.seq[index]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getattr__</span>(<span class="params">self, item</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">getattr</span>(self.seq,item)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(self.seq)</span><br><span class="line"></span><br><span class="line">l=<span class="type">List</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line">l.append(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line"><span class="comment"># l.append(&#x27;3333333&#x27;) #报错，必须为int类型</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(l.mid)</span><br><span class="line"></span><br><span class="line"><span class="comment">#基于授权，获得insert方法</span></span><br><span class="line">l.insert(<span class="number">0</span>,-<span class="number">123</span>)</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#练习二</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">List</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,seq,permission=<span class="literal">False</span></span>):</span><br><span class="line">        self.seq=seq</span><br><span class="line">        self.permission=permission</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">clear</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.permission:</span><br><span class="line">            <span class="keyword">raise</span> PermissionError(<span class="string">&#x27;not allow the operation&#x27;</span>)</span><br><span class="line">        self.seq.clear()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getattr__</span>(<span class="params">self, item</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">getattr</span>(self.seq,item)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(self.seq)</span><br><span class="line">l=<span class="type">List</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="comment"># l.clear() #此时没有权限，抛出异常</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">l.permission=<span class="literal">True</span></span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line">l.clear()</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line"></span><br><span class="line"><span class="comment">#基于授权，获得insert方法</span></span><br><span class="line">l.insert(<span class="number">0</span>,-<span class="number">123</span>)</span><br><span class="line"><span class="built_in">print</span>(l)</span><br></pre></td></tr></table></figure><h1 id="getattribute"><a href="#getattribute" class="headerlink" title="__getattribute__"></a><code>__getattribute__</code></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#_*_coding:utf-8_*_</span></span><br><span class="line">__author__ = <span class="string">&#x27;wangdada&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,x</span>):</span><br><span class="line">        self.x=x</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getattr__</span>(<span class="params">self, item</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;不存在,执行的是我&#x27;</span>)</span><br><span class="line">        <span class="comment"># return self.__dict__[item]</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getattribute__</span>(<span class="params">self, item</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;不管是否存在,我都会执行&#x27;</span>)</span><br><span class="line">        <span class="keyword">raise</span> AttributeError(<span class="string">&#x27;哈哈&#x27;</span>)</span><br><span class="line"></span><br><span class="line">f1=Foo(<span class="number">10</span>)</span><br><span class="line">f1.x</span><br><span class="line">f1.xxxxxx</span><br><span class="line"></span><br><span class="line"><span class="comment">#当__getattribute__与__getattr__同时存在,只会执行__getattribute__,除非__getattribute__在执行过程中抛出异常AttributeError</span></span><br></pre></td></tr></table></figure><h1 id="描述符-get-set-delete"><a href="#描述符-get-set-delete" class="headerlink" title="描述符(__get__,__set__,__delete__)"></a>描述符(<code>__get__,__set__,__delete</code>__)</h1><p>1 描述符是什么:描述符本质就是一个新式类,在这个新式类中,至少实现了<strong>get</strong>(),<strong>set</strong>(),<strong>delete</strong>()中的一个,这也被称为描述符协议</p><blockquote><p><strong>get</strong>():调用一个属性时,触发<br><strong>set</strong>():为一个属性赋值时,触发<br><strong>delete</strong>():采用del删除属性时,触发</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个描述符</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>: <span class="comment">#在python3中Foo是新式类,它实现了三种方法,这个类就被称作一个描述符</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__get__</span>(<span class="params">self, instance, owner</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__set__</span>(<span class="params">self, instance, value</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__delete__</span>(<span class="params">self, instance</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>2 描述符是干什么的:描述符的作用是用来代理另外一个类的属性的(必须把描述符定义成这个类的类属性，不能定义到构造函数中)</p><p>引子:描述符类产生的实例进行属性操作并不会触发三个方法的执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 引子:描述符类产生的实例进行属性操作并不会触发三个方法的执行</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__get__</span>(<span class="params">self, instance, owner</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;触发get&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__set__</span>(<span class="params">self, instance, value</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;触发set&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__delete__</span>(<span class="params">self, instance</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;触发delete&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#包含这三个方法的新式类称为描述符,由这个类产生的实例进行属性的调用/赋值/删除,并不会触发这三个方法</span></span><br><span class="line">f1=Foo()</span><br><span class="line">f1.name=<span class="string">&#x27;allen&#x27;</span></span><br><span class="line">f1.name</span><br><span class="line"><span class="keyword">del</span> f1.name</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 描述符应用之何时?何地?</span></span><br><span class="line"><span class="comment">#描述符Str</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Str</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__get__</span>(<span class="params">self, instance, owner</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Str调用&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__set__</span>(<span class="params">self, instance, value</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Str设置...&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__delete__</span>(<span class="params">self, instance</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Str删除...&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#描述符Int</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Int</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__get__</span>(<span class="params">self, instance, owner</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Int调用&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__set__</span>(<span class="params">self, instance, value</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Int设置...&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__delete__</span>(<span class="params">self, instance</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Int删除...&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">People</span>:</span><br><span class="line">    name=Str()</span><br><span class="line">    age=Int()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>): <span class="comment">#name被Str类代理,age被Int类代理,</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line"></span><br><span class="line"><span class="comment">#何地？：定义成另外一个类的类属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#何时？：且看下列演示</span></span><br><span class="line"></span><br><span class="line">p1=People(<span class="string">&#x27;alex&#x27;</span>,<span class="number">18</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#描述符Str的使用</span></span><br><span class="line">p1.name</span><br><span class="line">p1.name=<span class="string">&#x27;allen&#x27;</span></span><br><span class="line"><span class="keyword">del</span> p1.name</span><br><span class="line"></span><br><span class="line"><span class="comment">#描述符Int的使用</span></span><br><span class="line">p1.age</span><br><span class="line">p1.age=<span class="number">18</span></span><br><span class="line"><span class="keyword">del</span> p1.age</span><br><span class="line"></span><br><span class="line"><span class="comment">#我们来瞅瞅到底发生了什么</span></span><br><span class="line"><span class="built_in">print</span>(p1.__dict__)</span><br><span class="line"><span class="built_in">print</span>(People.__dict__)</span><br><span class="line"></span><br><span class="line"><span class="comment">#补充</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(p1) == People) <span class="comment">#type(obj)其实是查看obj是由哪个类实例化来的</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(p1).__dict__ == People.__dict__)</span><br></pre></td></tr></table></figure><p>3 描述符分两种<br>    一 数据描述符:至少实现了<code>__get__()</code>和<code>__set__()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>:</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__set__</span>(<span class="params">self, instance, value</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;set&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__get__</span>(<span class="params">self, instance, owner</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;get&#x27;</span>)</span><br></pre></td></tr></table></figure><p>二 非数据描述符:没有实现<strong>set</strong>()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__get__</span>(<span class="params">self, instance, owner</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;get&#x27;</span>)</span><br></pre></td></tr></table></figure><p>4 注意事项:<br>    一 描述符本身应该定义成新式类,被代理的类也应该是新式类<br>    二 必须把描述符定义成这个类的类属性，不能为定义到构造函数中<br>    三 要严格遵循该优先级,优先级由高到底分别是<br>        1.类属性<br>        2.数据描述符<br>        3.实例属性<br>        4.非数据描述符<br>        5.找不到的属性触发<code>__getattr__()</code></p><h2 id="类属性-gt-数据描述符"><a href="#类属性-gt-数据描述符" class="headerlink" title="类属性&gt;数据描述符"></a>类属性&gt;数据描述符</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#描述符Str</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Str</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__get__</span>(<span class="params">self, instance, owner</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Str调用&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__set__</span>(<span class="params">self, instance, value</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Str设置...&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__delete__</span>(<span class="params">self, instance</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Str删除...&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">People</span>:</span><br><span class="line">    name=Str()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>): <span class="comment">#name被Str类代理,age被Int类代理,</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#基于上面的演示,我们已经知道,在一个类中定义描述符它就是一个类属性,存在于类的属性字典中,而不是实例的属性字典</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#那既然描述符被定义成了一个类属性,直接通过类名也一定可以调用吧,没错</span></span><br><span class="line">People.name <span class="comment">#恩,调用类属性name,本质就是在调用描述符Str,触发了__get__()</span></span><br><span class="line"></span><br><span class="line">People.name=<span class="string">&#x27;allen&#x27;</span> <span class="comment">#那赋值呢,我去,并没有触发__set__()</span></span><br><span class="line"><span class="keyword">del</span> People.name <span class="comment">#赶紧试试del,我去,也没有触发__delete__()</span></span><br><span class="line"><span class="comment">#结论:描述符对类没有作用--------&gt;傻逼到家的结论</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">原因:描述符在使用时被定义成另外一个类的类属性,因而类属性比二次加工的描述符伪装而来的类属性有更高的优先级</span></span><br><span class="line"><span class="string">People.name #恩,调用类属性name,找不到就去找描述符伪装的类属性name,触发了__get__()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">People.name=&#x27;allen&#x27; #那赋值呢,直接赋值了一个类属性,它拥有更高的优先级,相当于覆盖了描述符,肯定不会触发描述符的__set__()</span></span><br><span class="line"><span class="string">del People.name #同上</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="数据描述符-gt-实例属性"><a href="#数据描述符-gt-实例属性" class="headerlink" title="数据描述符&gt;实例属性"></a>数据描述符&gt;实例属性</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#描述符Str</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Str</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__get__</span>(<span class="params">self, instance, owner</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Str调用&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__set__</span>(<span class="params">self, instance, value</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Str设置...&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__delete__</span>(<span class="params">self, instance</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Str删除...&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">People</span>:</span><br><span class="line">    name=Str()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>): <span class="comment">#name被Str类代理,age被Int类代理,</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p1=People(<span class="string">&#x27;allen&#x27;</span>,<span class="number">18</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果描述符是一个数据描述符(即有__get__又有__set__),那么p1.name的调用与赋值都是触发描述符的操作,于p1本身无关了,相当于覆盖了实例的属性</span></span><br><span class="line">p1.name=<span class="string">&#x27;allennnnnn&#x27;</span></span><br><span class="line">p1.name</span><br><span class="line"><span class="built_in">print</span>(p1.__dict__)<span class="comment">#实例的属性字典中没有name,因为name是一个数据描述符,优先级高于实例属性,查看/赋值/删除都是跟描述符有关,与实例无关了</span></span><br><span class="line"><span class="keyword">del</span> p1.name</span><br></pre></td></tr></table></figure><h2 id="实例属性-gt-非数据描述符"><a href="#实例属性-gt-非数据描述符" class="headerlink" title="实例属性&gt;非数据描述符"></a>实例属性&gt;非数据描述符</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;我胡汉三又回来了&#x27;</span>)</span><br><span class="line">f1=Foo()</span><br><span class="line">f1.func() <span class="comment">#调用类的方法,也可以说是调用非数据描述符</span></span><br><span class="line"><span class="comment">#函数是一个非数据描述符对象(一切皆对象么)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(Foo.func))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hasattr</span>(Foo.func,<span class="string">&#x27;__set__&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hasattr</span>(Foo.func,<span class="string">&#x27;__get__&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hasattr</span>(Foo.func,<span class="string">&#x27;__delete__&#x27;</span>))</span><br><span class="line"><span class="comment">#有人可能会问,描述符不都是类么,函数怎么算也应该是一个对象啊,怎么就是描述符了</span></span><br><span class="line"><span class="comment">#笨蛋哥,描述符是类没问题,描述符在应用的时候不都是实例化成一个类属性么</span></span><br><span class="line"><span class="comment">#函数就是一个由非描述符类实例化得到的对象</span></span><br><span class="line"><span class="comment">#没错，字符串也一样</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f1.func=<span class="string">&#x27;这是实例属性啊&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(f1.func)</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> f1.func <span class="comment">#删掉了非数据</span></span><br><span class="line">f1.func()</span><br></pre></td></tr></table></figure><h2 id="再次验证：实例属性-gt-非数据描述符"><a href="#再次验证：实例属性-gt-非数据描述符" class="headerlink" title="再次验证：实例属性&gt;非数据描述符"></a>再次验证：实例属性&gt;非数据描述符</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__set__</span>(<span class="params">self, instance, value</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;set&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__get__</span>(<span class="params">self, instance, owner</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;get&#x27;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Room</span>:</span><br><span class="line">    name=Foo()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,width,length</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.width=width</span><br><span class="line">        self.length=length</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#name是一个数据描述符,因为name=Foo()而Foo实现了get和set方法,因而比实例属性有更高的优先级</span></span><br><span class="line"><span class="comment">#对实例的属性操作,触发的都是描述符的</span></span><br><span class="line">r1=Room(<span class="string">&#x27;厕所&#x27;</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">r1.name</span><br><span class="line">r1.name=<span class="string">&#x27;厨房&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__get__</span>(<span class="params">self, instance, owner</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;get&#x27;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Room</span>:</span><br><span class="line">    name=Foo()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,width,length</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.width=width</span><br><span class="line">        self.length=length</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#name是一个非数据描述符,因为name=Foo()而Foo没有实现set方法,因而比实例属性有更低的优先级</span></span><br><span class="line"><span class="comment">#对实例的属性操作,触发的都是实例自己的</span></span><br><span class="line">r1=Room(<span class="string">&#x27;厕所&#x27;</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">r1.name</span><br><span class="line">r1.name=<span class="string">&#x27;厨房&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="非数据描述符-gt-找不到"><a href="#非数据描述符-gt-找不到" class="headerlink" title="非数据描述符&gt;找不到"></a>非数据描述符&gt;找不到</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;我胡汉三又回来了&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getattr__</span>(<span class="params">self, item</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;找不到了当然是来找我啦&#x27;</span>,item)</span><br><span class="line">f1=Foo()</span><br><span class="line"></span><br><span class="line">f1.xxxxxxxxxxx</span><br></pre></td></tr></table></figure><p>5 描述符使用</p><p>众所周知，python是弱类型语言，即参数的赋值没有类型限制，下面我们通过描述符机制来实现类型限制功能</p><h2 id="牛刀小试"><a href="#牛刀小试" class="headerlink" title="牛刀小试"></a>牛刀小试</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Str</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__get__</span>(<span class="params">self, instance, owner</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;get---&gt;&#x27;</span>,instance,owner)</span><br><span class="line">        <span class="keyword">return</span> instance.__dict__[self.name]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__set__</span>(<span class="params">self, instance, value</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;set---&gt;&#x27;</span>,instance,value)</span><br><span class="line">        instance.__dict__[self.name]=value</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__delete__</span>(<span class="params">self, instance</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;delete---&gt;&#x27;</span>,instance)</span><br><span class="line">        instance.__dict__.pop(self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">People</span>:</span><br><span class="line">    name=Str(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age,salary</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">        self.salary=salary</span><br><span class="line"></span><br><span class="line">p1=People(<span class="string">&#x27;allen&#x27;</span>,<span class="number">18</span>,<span class="number">3231.3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用</span></span><br><span class="line"><span class="built_in">print</span>(p1.__dict__)</span><br><span class="line">p1.name</span><br><span class="line"></span><br><span class="line"><span class="comment">#赋值</span></span><br><span class="line"><span class="built_in">print</span>(p1.__dict__)</span><br><span class="line">p1.name=<span class="string">&#x27;allenlin&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(p1.__dict__)</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除</span></span><br><span class="line"><span class="built_in">print</span>(p1.__dict__)</span><br><span class="line"><span class="keyword">del</span> p1.name</span><br><span class="line"><span class="built_in">print</span>(p1.__dict__)</span><br></pre></td></tr></table></figure><h2 id="拔刀相助"><a href="#拔刀相助" class="headerlink" title="拔刀相助"></a>拔刀相助</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Str</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__get__</span>(<span class="params">self, instance, owner</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;get---&gt;&#x27;</span>,instance,owner)</span><br><span class="line">        <span class="keyword">return</span> instance.__dict__[self.name]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__set__</span>(<span class="params">self, instance, value</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;set---&gt;&#x27;</span>,instance,value)</span><br><span class="line">        instance.__dict__[self.name]=value</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__delete__</span>(<span class="params">self, instance</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;delete---&gt;&#x27;</span>,instance)</span><br><span class="line">        instance.__dict__.pop(self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">People</span>:</span><br><span class="line">    name=Str(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age,salary</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">        self.salary=salary</span><br><span class="line"></span><br><span class="line"><span class="comment">#疑问:如果我用类名去操作属性呢</span></span><br><span class="line">People.name <span class="comment">#报错,错误的根源在于类去操作属性时,会把None传给instance</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#修订__get__方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Str</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__get__</span>(<span class="params">self, instance, owner</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;get---&gt;&#x27;</span>,instance,owner)</span><br><span class="line">        <span class="keyword">if</span> instance <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> self</span><br><span class="line">        <span class="keyword">return</span> instance.__dict__[self.name]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__set__</span>(<span class="params">self, instance, value</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;set---&gt;&#x27;</span>,instance,value)</span><br><span class="line">        instance.__dict__[self.name]=value</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__delete__</span>(<span class="params">self, instance</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;delete---&gt;&#x27;</span>,instance)</span><br><span class="line">        instance.__dict__.pop(self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">People</span>:</span><br><span class="line">    name=Str(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age,salary</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">        self.salary=salary</span><br><span class="line"><span class="built_in">print</span>(People.name) <span class="comment">#完美,解决</span></span><br></pre></td></tr></table></figure><h2 id="拔刀霍霍"><a href="#拔刀霍霍" class="headerlink" title="拔刀霍霍"></a>拔刀霍霍</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Str</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,expected_type</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.expected_type=expected_type</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__get__</span>(<span class="params">self, instance, owner</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;get---&gt;&#x27;</span>,instance,owner)</span><br><span class="line">        <span class="keyword">if</span> instance <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> self</span><br><span class="line">        <span class="keyword">return</span> instance.__dict__[self.name]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__set__</span>(<span class="params">self, instance, value</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;set---&gt;&#x27;</span>,instance,value)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(value,self.expected_type): <span class="comment">#如果不是期望的类型，则抛出异常</span></span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;Expected %s&#x27;</span> %<span class="built_in">str</span>(self.expected_type))</span><br><span class="line">        instance.__dict__[self.name]=value</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__delete__</span>(<span class="params">self, instance</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;delete---&gt;&#x27;</span>,instance)</span><br><span class="line">        instance.__dict__.pop(self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">People</span>:</span><br><span class="line">    name=Str(<span class="string">&#x27;name&#x27;</span>,<span class="built_in">str</span>) <span class="comment">#新增类型限制str</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age,salary</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">        self.salary=salary</span><br><span class="line"></span><br><span class="line">p1=People(<span class="number">123</span>,<span class="number">18</span>,<span class="number">3333.3</span>)<span class="comment">#传入的name因不是字符串类型而抛出异常</span></span><br></pre></td></tr></table></figure><h2 id="大刀阔福"><a href="#大刀阔福" class="headerlink" title="大刀阔福"></a>大刀阔福</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Typed</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,expected_type</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.expected_type=expected_type</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__get__</span>(<span class="params">self, instance, owner</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;get---&gt;&#x27;</span>,instance,owner)</span><br><span class="line">        <span class="keyword">if</span> instance <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> self</span><br><span class="line">        <span class="keyword">return</span> instance.__dict__[self.name]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__set__</span>(<span class="params">self, instance, value</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;set---&gt;&#x27;</span>,instance,value)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(value,self.expected_type):</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;Expected %s&#x27;</span> %<span class="built_in">str</span>(self.expected_type))</span><br><span class="line">        instance.__dict__[self.name]=value</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__delete__</span>(<span class="params">self, instance</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;delete---&gt;&#x27;</span>,instance)</span><br><span class="line">        instance.__dict__.pop(self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">People</span>:</span><br><span class="line">    name=Typed(<span class="string">&#x27;name&#x27;</span>,<span class="built_in">str</span>)</span><br><span class="line">    age=Typed(<span class="string">&#x27;name&#x27;</span>,<span class="built_in">int</span>)</span><br><span class="line">    salary=Typed(<span class="string">&#x27;name&#x27;</span>,<span class="built_in">float</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age,salary</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">        self.salary=salary</span><br><span class="line"></span><br><span class="line">p1=People(<span class="number">123</span>,<span class="number">18</span>,<span class="number">3333.3</span>)</span><br><span class="line">p1=People(<span class="string">&#x27;allen&#x27;</span>,<span class="string">&#x27;18&#x27;</span>,<span class="number">3333.3</span>)</span><br><span class="line">p1=People(<span class="string">&#x27;allen&#x27;</span>,<span class="number">18</span>,<span class="number">3333</span>)</span><br></pre></td></tr></table></figure><p>大刀阔斧之后我们已然能实现功能了，但是问题是，如果我们的类有很多属性，你仍然采用在定义一堆类属性的方式去实现，low，这时候我需要教你一招：独孤九剑</p><h2 id="类的装饰器-无参"><a href="#类的装饰器-无参" class="headerlink" title="类的装饰器:无参"></a>类的装饰器:无参</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decorate</span>(<span class="params">cls</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;类的装饰器开始运行啦------&gt;&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> cls</span><br><span class="line"></span><br><span class="line"><span class="meta">@decorate </span><span class="comment">#无参:People=decorate(People)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">People</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age,salary</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">        self.salary=salary</span><br><span class="line"></span><br><span class="line">p1=People(<span class="string">&#x27;allen&#x27;</span>,<span class="number">18</span>,<span class="number">3333.3</span>)</span><br></pre></td></tr></table></figure><h2 id="类的装饰器-有参"><a href="#类的装饰器-有参" class="headerlink" title="类的装饰器:有参"></a>类的装饰器:有参</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">typeassert</span>(<span class="params">**kwargs</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decorate</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;类的装饰器开始运行啦------&gt;&#x27;</span>,kwargs)</span><br><span class="line">        <span class="keyword">return</span> cls</span><br><span class="line">    <span class="keyword">return</span> decorate</span><br><span class="line"><span class="meta">@typeassert(<span class="params">name=<span class="built_in">str</span>,age=<span class="built_in">int</span>,salary=<span class="built_in">float</span></span>) </span><span class="comment">#有参:1.运行typeassert(...)返回结果是decorate,此时参数都传给kwargs 2.People=decorate(People)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">People</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age,salary</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">        self.salary=salary</span><br><span class="line"></span><br><span class="line">p1=People(<span class="string">&#x27;allen&#x27;</span>,<span class="number">18</span>,<span class="number">3333.3</span>)</span><br></pre></td></tr></table></figure><h2 id="刀光剑影"><a href="#刀光剑影" class="headerlink" title="刀光剑影"></a>刀光剑影</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Typed</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,expected_type</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.expected_type=expected_type</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__get__</span>(<span class="params">self, instance, owner</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;get---&gt;&#x27;</span>,instance,owner)</span><br><span class="line">        <span class="keyword">if</span> instance <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> self</span><br><span class="line">        <span class="keyword">return</span> instance.__dict__[self.name]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__set__</span>(<span class="params">self, instance, value</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;set---&gt;&#x27;</span>,instance,value)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(value,self.expected_type):</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;Expected %s&#x27;</span> %<span class="built_in">str</span>(self.expected_type))</span><br><span class="line">        instance.__dict__[self.name]=value</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__delete__</span>(<span class="params">self, instance</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;delete---&gt;&#x27;</span>,instance)</span><br><span class="line">        instance.__dict__.pop(self.name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">typeassert</span>(<span class="params">**kwargs</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decorate</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;类的装饰器开始运行啦------&gt;&#x27;</span>,kwargs)</span><br><span class="line">        <span class="keyword">for</span> name,expected_type <span class="keyword">in</span> kwargs.items():</span><br><span class="line">            <span class="built_in">setattr</span>(cls,name,Typed(name,expected_type))</span><br><span class="line">        <span class="keyword">return</span> cls</span><br><span class="line">    <span class="keyword">return</span> decorate</span><br><span class="line"><span class="meta">@typeassert(<span class="params">name=<span class="built_in">str</span>,age=<span class="built_in">int</span>,salary=<span class="built_in">float</span></span>) </span><span class="comment">#有参:1.运行typeassert(...)返回结果是decorate,此时参数都传给kwargs 2.People=decorate(People)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">People</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age,salary</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">        self.salary=salary</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(People.__dict__)</span><br><span class="line">p1=People(<span class="string">&#x27;allen&#x27;</span>,<span class="number">18</span>,<span class="number">3333.3</span>)</span><br></pre></td></tr></table></figure><p>6 描述符总结</p><p>描述符是可以实现大部分python类特性中的底层魔法,包括@classmethod,@staticmethd,@property甚至是<code>__slots__</code>属性</p><p>描述父是很多高级库和框架的重要工具之一,描述符通常是使用到装饰器或者元类的大型框架中的一个组件.</p><p>7 利用描述符原理完成一个自定制@property,实现延迟计算（本质就是把一个函数属性利用装饰器原理做成一个描述符：类的属性字典中函数名为key，value为描述符类产生的对象）</p><h2 id="property回顾"><a href="#property回顾" class="headerlink" title="@property回顾"></a>@property回顾</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Room</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,width,length</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.width=width</span><br><span class="line">        self.length=length</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">area</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.width * self.length</span><br><span class="line"></span><br><span class="line">r1=Room(<span class="string">&#x27;alex&#x27;</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(r1.area)</span><br></pre></td></tr></table></figure><h2 id="自己做一个-property"><a href="#自己做一个-property" class="headerlink" title="自己做一个@property"></a>自己做一个@property</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Lazyproperty</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,func</span>):</span><br><span class="line">        self.func=func</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__get__</span>(<span class="params">self, instance, owner</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;这是我们自己定制的静态属性,r1.area实际是要执行r1.area()&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> instance <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> self</span><br><span class="line">        <span class="keyword">return</span> self.func(instance) <span class="comment">#此时你应该明白,到底是谁在为你做自动传递self的事情</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Room</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,width,length</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.width=width</span><br><span class="line">        self.length=length</span><br><span class="line"></span><br><span class="line"><span class="meta">    @Lazyproperty </span><span class="comment">#area=Lazyproperty(area) 相当于定义了一个类属性,即描述符</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">area</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.width * self.length</span><br><span class="line"></span><br><span class="line">r1=Room(<span class="string">&#x27;alex&#x27;</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(r1.area)</span><br></pre></td></tr></table></figure><h2 id="实现延迟计算功能"><a href="#实现延迟计算功能" class="headerlink" title="实现延迟计算功能"></a>实现延迟计算功能</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Lazyproperty</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,func</span>):</span><br><span class="line">        self.func=func</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__get__</span>(<span class="params">self, instance, owner</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;这是我们自己定制的静态属性,r1.area实际是要执行r1.area()&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> instance <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> self</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;---&gt;&#x27;</span>)</span><br><span class="line">            value=self.func(instance)</span><br><span class="line">            <span class="built_in">setattr</span>(instance,self.func.__name__,value) <span class="comment">#计算一次就缓存到实例的属性字典中</span></span><br><span class="line">            <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Room</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,width,length</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.width=width</span><br><span class="line">        self.length=length</span><br><span class="line"></span><br><span class="line"><span class="meta">    @Lazyproperty </span><span class="comment">#area=Lazyproperty(area) 相当于&#x27;定义了一个类属性,即描述符&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">area</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.width * self.length</span><br><span class="line"></span><br><span class="line">r1=Room(<span class="string">&#x27;alex&#x27;</span>,<span class="number">111</span>,<span class="number">111</span>)</span><br><span class="line"><span class="built_in">print</span>(r1.area) <span class="comment">#先从自己的属性字典找,没有再去类的中找,然后出发了area的__get__方法</span></span><br><span class="line"><span class="built_in">print</span>(r1.area) <span class="comment">#先从自己的属性字典找,找到了,是上次计算的结果,这样就不用每执行一次都去计算</span></span><br></pre></td></tr></table></figure><h2 id="一个小的改动，延迟计算的美梦就破碎了"><a href="#一个小的改动，延迟计算的美梦就破碎了" class="headerlink" title="一个小的改动，延迟计算的美梦就破碎了"></a>一个小的改动，延迟计算的美梦就破碎了</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#缓存不起来了</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Lazyproperty</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,func</span>):</span><br><span class="line">        self.func=func</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__get__</span>(<span class="params">self, instance, owner</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;这是我们自己定制的静态属性,r1.area实际是要执行r1.area()&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> instance <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> self</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            value=self.func(instance)</span><br><span class="line">            instance.__dict__[self.func.__name__]=value</span><br><span class="line">            <span class="keyword">return</span> value</span><br><span class="line">        <span class="comment"># return self.func(instance) #此时你应该明白,到底是谁在为你做自动传递self的事情</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__set__</span>(<span class="params">self, instance, value</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;hahahahahah&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Room</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,width,length</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.width=width</span><br><span class="line">        self.length=length</span><br><span class="line"></span><br><span class="line"><span class="meta">    @Lazyproperty </span><span class="comment">#area=Lazyproperty(area) 相当于定义了一个类属性,即描述符</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">area</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.width * self.length</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Room.__dict__)</span><br><span class="line">r1=Room(<span class="string">&#x27;alex&#x27;</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(r1.area)</span><br><span class="line"><span class="built_in">print</span>(r1.area) </span><br><span class="line"><span class="built_in">print</span>(r1.area) </span><br><span class="line"><span class="built_in">print</span>(r1.area) <span class="comment">#缓存功能失效,每次都去找描述符了,为何,因为描述符实现了set方法,它由非数据描述符变成了数据描述符,数据描述符比实例属性有更高的优先级,因而所有的属性操作都去找描述符了</span></span><br></pre></td></tr></table></figure><p>8 利用描述符原理完成一个自定制@classmethod</p><h2 id="自己做一个-classmethod"><a href="#自己做一个-classmethod" class="headerlink" title="自己做一个@classmethod"></a>自己做一个@classmethod</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ClassMethod</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,func</span>):</span><br><span class="line">        self.func=func</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__get__</span>(<span class="params">self, instance, owner</span>): <span class="comment">#类来调用,instance为None,owner为类本身,实例来调用,instance为实例,owner为类本身,</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">feedback</span>():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;在这里可以加功能啊...&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> self.func(owner)</span><br><span class="line">        <span class="keyword">return</span> feedback</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">People</span>:</span><br><span class="line">    name=<span class="string">&#x27;linhaifeng&#x27;</span></span><br><span class="line"><span class="meta">    @ClassMethod </span><span class="comment"># say_hi=ClassMethod(say_hi)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_hi</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;你好啊,帅哥 %s&#x27;</span> %cls.name)</span><br><span class="line"></span><br><span class="line">People.say_hi()</span><br><span class="line"></span><br><span class="line">p1=People()</span><br><span class="line">p1.say_hi()</span><br><span class="line"><span class="comment">#疑问,类方法如果有参数呢,好说,好说</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ClassMethod</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,func</span>):</span><br><span class="line">        self.func=func</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__get__</span>(<span class="params">self, instance, owner</span>): <span class="comment">#类来调用,instance为None,owner为类本身,实例来调用,instance为实例,owner为类本身,</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">feedback</span>(<span class="params">*args,**kwargs</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;在这里可以加功能啊...&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> self.func(owner,*args,**kwargs)</span><br><span class="line">        <span class="keyword">return</span> feedback</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">People</span>:</span><br><span class="line">    name=<span class="string">&#x27;linhaifeng&#x27;</span></span><br><span class="line"><span class="meta">    @ClassMethod </span><span class="comment"># say_hi=ClassMethod(say_hi)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_hi</span>(<span class="params">cls,msg</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;你好啊,帅哥 %s %s&#x27;</span> %(cls.name,msg))</span><br><span class="line"></span><br><span class="line">People.say_hi(<span class="string">&#x27;你是那偷心的贼&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p1=People()</span><br><span class="line">p1.say_hi(<span class="string">&#x27;你是那偷心的贼&#x27;</span>)</span><br></pre></td></tr></table></figure><p>9 利用描述符原理完成一个自定制的@staticmethod</p><h2 id="自己做一个-staticmethod"><a href="#自己做一个-staticmethod" class="headerlink" title="自己做一个@staticmethod"></a>自己做一个@staticmethod</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">StaticMethod</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,func</span>):</span><br><span class="line">        self.func=func</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__get__</span>(<span class="params">self, instance, owner</span>): <span class="comment">#类来调用,instance为None,owner为类本身,实例来调用,instance为实例,owner为类本身,</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">feedback</span>(<span class="params">*args,**kwargs</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;在这里可以加功能啊...&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> self.func(*args,**kwargs)</span><br><span class="line">        <span class="keyword">return</span> feedback</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">People</span>:</span><br><span class="line"><span class="meta">    @StaticMethod</span><span class="comment"># say_hi=StaticMethod(say_hi)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say_hi</span>(<span class="params">x,y,z</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;------&gt;&#x27;</span>,x,y,z)</span><br><span class="line"></span><br><span class="line">People.say_hi(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">p1=People()</span><br><span class="line">p1.say_hi(<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br></pre></td></tr></table></figure><h1 id="再看property"><a href="#再看property" class="headerlink" title="再看property"></a>再看property</h1><p>一个静态属性property本质就是实现了get，set，delete三种方法</p><h2 id="用法一"><a href="#用法一" class="headerlink" title="用法一"></a>用法一</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>:</span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">AAA</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;get的时候运行我啊&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @AAA.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">AAA</span>(<span class="params">self,value</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;set的时候运行我啊&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @AAA.deleter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">AAA</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;delete的时候运行我啊&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#只有在属性AAA定义property后才能定义AAA.setter,AAA.deleter</span></span><br><span class="line">f1=Foo()</span><br><span class="line">f1.AAA</span><br><span class="line">f1.AAA=<span class="string">&#x27;aaa&#x27;</span></span><br><span class="line"><span class="keyword">del</span> f1.AAA</span><br></pre></td></tr></table></figure><h2 id="用法二"><a href="#用法二" class="headerlink" title="用法二"></a>用法二</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_AAA</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;get的时候运行我啊&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_AAA</span>(<span class="params">self,value</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;set的时候运行我啊&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete_AAA</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;delete的时候运行我啊&#x27;</span>)</span><br><span class="line">    AAA=<span class="built_in">property</span>(get_AAA,set_AAA,delete_AAA) <span class="comment">#内置property三个参数与get,set,delete一一对应</span></span><br><span class="line"></span><br><span class="line">f1=Foo()</span><br><span class="line">f1.AAA</span><br><span class="line">f1.AAA=<span class="string">&#x27;aaa&#x27;</span></span><br><span class="line"><span class="keyword">del</span> f1.AAA</span><br></pre></td></tr></table></figure><p>怎么用</p><h2 id="案例一"><a href="#案例一" class="headerlink" title="案例一"></a>案例一</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Goods</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 原价</span></span><br><span class="line">        self.original_price = <span class="number">100</span></span><br><span class="line">        <span class="comment"># 折扣</span></span><br><span class="line">        self.discount = <span class="number">0.8</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">price</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 实际价格 = 原价 * 折扣</span></span><br><span class="line">        new_price = self.original_price * self.discount</span><br><span class="line">        <span class="keyword">return</span> new_price</span><br><span class="line"></span><br><span class="line"><span class="meta">    @price.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">price</span>(<span class="params">self, value</span>):</span><br><span class="line">        self.original_price = value</span><br><span class="line"></span><br><span class="line"><span class="meta">    @price.deleter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">price</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">del</span> self.original_price</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj = Goods()</span><br><span class="line">obj.price         <span class="comment"># 获取商品价格</span></span><br><span class="line">obj.price = <span class="number">200</span>   <span class="comment"># 修改商品原价</span></span><br><span class="line"><span class="built_in">print</span>(obj.price)</span><br><span class="line"><span class="keyword">del</span> obj.price     <span class="comment"># 删除商品原价</span></span><br></pre></td></tr></table></figure><h2 id="案例二"><a href="#案例二" class="headerlink" title="案例二"></a>案例二</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#实现类型检测功能</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#第一关：</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">People</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        self.name=name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"><span class="comment"># p1=People(&#x27;alex&#x27;) #property自动实现了set和get方法属于数据描述符,比实例属性优先级高,所以你这面写会触发property内置的set,抛出异常</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#第二关：修订版</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">People</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        self.name=name <span class="comment">#实例化就触发property</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># return self.name #无限递归</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;get------&gt;&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> self.DouNiWan</span><br><span class="line"></span><br><span class="line"><span class="meta">    @name.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">self,value</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;set------&gt;&#x27;</span>)</span><br><span class="line">        self.DouNiWan=value</span><br><span class="line"></span><br><span class="line"><span class="meta">    @name.deleter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;delete------&gt;&#x27;</span>)</span><br><span class="line">        <span class="keyword">del</span> self.DouNiWan</span><br><span class="line"></span><br><span class="line">p1=People(<span class="string">&#x27;alex&#x27;</span>) <span class="comment">#self.name实际是存放到self.DouNiWan里</span></span><br><span class="line"><span class="built_in">print</span>(p1.name)</span><br><span class="line"><span class="built_in">print</span>(p1.name)</span><br><span class="line"><span class="built_in">print</span>(p1.name)</span><br><span class="line"><span class="built_in">print</span>(p1.__dict__)</span><br><span class="line"></span><br><span class="line">p1.name=<span class="string">&#x27;allen&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(p1.__dict__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> p1.name</span><br><span class="line"><span class="built_in">print</span>(p1.__dict__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#第三关:加上类型检查</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">People</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        self.name=name <span class="comment">#实例化就触发property</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># return self.name #无限递归</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;get------&gt;&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> self.DouNiWan</span><br><span class="line"></span><br><span class="line"><span class="meta">    @name.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">self,value</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;set------&gt;&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(value,<span class="built_in">str</span>):</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;必须是字符串类型&#x27;</span>)</span><br><span class="line">        self.DouNiWan=value</span><br><span class="line"></span><br><span class="line"><span class="meta">    @name.deleter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;delete------&gt;&#x27;</span>)</span><br><span class="line">        <span class="keyword">del</span> self.DouNiWan</span><br><span class="line"></span><br><span class="line">p1=People(<span class="string">&#x27;alex&#x27;</span>) <span class="comment">#self.name实际是存放到self.DouNiWan里</span></span><br><span class="line">p1.name=<span class="number">1</span></span><br></pre></td></tr></table></figure><h1 id="setitem-getitem-delitem"><a href="#setitem-getitem-delitem" class="headerlink" title="__setitem__,__getitem__,__delitem__"></a><code>__setitem__,__getitem__,__delitem__</code></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># item 与 setattr 效果一样只是换了一种形式  字典的形式</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">qqq</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, item</span>):    <span class="comment"># 取值</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;getitem&#x27;</span>,item)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__setitem__</span>(<span class="params">self, key, value</span>):  <span class="comment"># 赋值</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;setitem&#x27;</span>)</span><br><span class="line">        self.__dict__[key]=value</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__delitem__</span>(<span class="params">self, key</span>):         <span class="comment"># 删除</span></span><br><span class="line">        self.__dict__.pop(key)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;delitem&#x27;</span>)</span><br><span class="line"></span><br><span class="line">q=qqq()</span><br><span class="line"><span class="comment"># q[&#x27;qqq&#x27;] # --&gt; getitem 获取不到就执行</span></span><br><span class="line">q[<span class="string">&#x27;name&#x27;</span>]=<span class="string">&#x27;wangdada&#x27;</span>    <span class="comment"># 设置就执行 setitem</span></span><br><span class="line">q[<span class="string">&#x27;name&#x27;</span>]  <span class="comment"># 取值就执行 getitem \\\ getitem name</span></span><br><span class="line">q[<span class="string">&#x27;qqq&#x27;</span>] <span class="comment"># 取值就执行 getitem \\\    getitem qqq</span></span><br><span class="line"><span class="built_in">print</span>(q.__dict__)       <span class="comment">#  &#123;&#x27;name&#x27;: &#x27;wangdada&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># del q.name  # 结果 也是删除了q.name 但是却没有打印delitem 因为触发的是__delattr__</span></span><br><span class="line"><span class="keyword">del</span> q[<span class="string">&#x27;name&#x27;</span>]   <span class="comment"># 以字典的形式触发__delitem__</span></span><br><span class="line"><span class="built_in">print</span>(q.__dict__)   <span class="comment"># &#123;&#125;</span></span><br></pre></td></tr></table></figure><h1 id="str-repr-format"><a href="#str-repr-format" class="headerlink" title="__str__,__repr__,__format__"></a><code>__str__,__repr__,__format__</code></h1><p>改变对象的字符串显示<code>__str__</code>,<code>__repr__</code></p><p>自定制格式化字符串<code>__format__</code></p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str函数或者print函数---&gt;obj.__str__()</span><br><span class="line">repr或者交互式解释器---&gt;obj.__repr__()</span><br><span class="line">如果__str__没有被定义,那么就会使用__repr__来代替输出</span><br><span class="line">注意:这俩方法的返回值必须是字符串,否则抛出异常</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># str--》print() 时候触发  repr--》在解释器中触发</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):<span class="comment"># print() 时候触发</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;这是str&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>): <span class="comment"># repr--》 在解释器中触发</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Name: &#123;&#125; , Age: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(self.name,self.age)</span><br><span class="line">f=Foo(<span class="string">&#x27;wangdada&#x27;</span>,<span class="string">&#x27;15&#x27;</span>)</span><br><span class="line"><span class="comment">#&#x27;这是str&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(f)    <span class="comment"># print 本质就是在执行f.__str__()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">########</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># str--》print() 时候触发  repr--》在解释器中触发</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">    <span class="comment"># def __str__(self):# print() 时候触发</span></span><br><span class="line">    <span class="comment">#     return &#x27;这是str&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>): <span class="comment"># repr--》 在解释器中触发</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Name: &#123;&#125; , Age: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(self.name,self.age)</span><br><span class="line">f=Foo(<span class="string">&#x27;wangdada&#x27;</span>,<span class="string">&#x27;15&#x27;</span>)</span><br><span class="line"><span class="comment">#&#x27;Name: wangdada , Age: 15&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(f)    <span class="comment"># print当找不到f.__str__() 就会把f.__repr__()当成一个替代品执行</span></span><br></pre></td></tr></table></figure><p>repr 在解释器中触发</p><p><img src="repr.png" alt="repr"></p><p><strong>format </strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">date_dict=&#123;</span><br><span class="line">    <span class="comment"># 0 就是format(第一位) 比如 fm.format(self)  0就是self</span></span><br><span class="line">    <span class="string">&#x27;ymd&#x27;</span>:<span class="string">&#x27;&#123;0.year&#125;&#123;0.month&#125;&#123;0.day&#125;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;y:m:d&#x27;</span>:<span class="string">&#x27;&#123;0.year&#125;:&#123;0.month&#125;:&#123;0.day&#125;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;m-d-y&#x27;</span>:<span class="string">&#x27;&#123;0.month&#125;-&#123;0.day&#125;-&#123;0.year&#125;&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Date</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,year,month,day</span>):</span><br><span class="line">        self.year=year</span><br><span class="line">        self.month=month</span><br><span class="line">        self.day=day</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__format__</span>(<span class="params">self, format_spec</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;执行format&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> format_spec <span class="keyword">not</span> <span class="keyword">in</span> date_dict.keys():</span><br><span class="line">            <span class="string">&#x27;&#x27;&#x27;传过来的值不在字典里则执行&#x27;&#x27;&#x27;</span></span><br><span class="line">            fm = date_dict[<span class="string">&#x27;m-d-y&#x27;</span>]</span><br><span class="line">            <span class="keyword">return</span> fm.<span class="built_in">format</span>(self)</span><br><span class="line"></span><br><span class="line">        fm=date_dict[format_spec]</span><br><span class="line">        <span class="keyword">return</span>  fm.<span class="built_in">format</span>(self)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">d=Date(<span class="number">2020</span>,<span class="number">3</span>,<span class="number">16</span>)</span><br><span class="line">f1=<span class="built_in">format</span>(d,<span class="string">&#x27;ymd&#x27;</span>)</span><br><span class="line">f2=<span class="built_in">format</span>(d,<span class="string">&#x27;y:m:d&#x27;</span>)</span><br><span class="line">f3=<span class="built_in">format</span>(d,<span class="string">&#x27;m-d-y&#x27;</span>)</span><br><span class="line">f4=<span class="built_in">format</span>(d,<span class="string">&#x27;mdd-y&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(f1,f2,f3)</span><br><span class="line"><span class="built_in">print</span>(f4)</span><br><span class="line"><span class="comment">##</span></span><br><span class="line">执行<span class="built_in">format</span></span><br><span class="line">执行<span class="built_in">format</span></span><br><span class="line">执行<span class="built_in">format</span></span><br><span class="line">执行<span class="built_in">format</span></span><br><span class="line"><span class="number">2020316</span> <span class="number">2020</span>:<span class="number">3</span>:<span class="number">16</span> <span class="number">3</span>-<span class="number">16</span>-<span class="number">2020</span></span><br><span class="line"><span class="number">3</span>-<span class="number">16</span>-<span class="number">2020</span></span><br></pre></td></tr></table></figure><h1 id="slots"><a href="#slots" class="headerlink" title="__slots__"></a><code>__slots__</code></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1.__slots__是什么:是一个类变量,变量值可以是列表,元祖,或者可迭代对象,也可以是一个字符串(意味着所有实例只有一个数据属性)</span></span><br><span class="line"><span class="string">2.引子:使用点来访问属性本质就是在访问类或者对象的__dict__属性字典(类的字典是共享的,而每个实例的是独立的)</span></span><br><span class="line"><span class="string">3.为何使用__slots__:字典会占用大量内存,如果你有一个属性很少的类,但是有很多实例,为了节省内存可以使用__slots__取代实例的__dict__</span></span><br><span class="line"><span class="string">当你定义__slots__后,__slots__就会为实例使用一种更加紧凑的内部表示。实例通过一个很小的固定大小的数组来构建,而不是为每个实例定义一个</span></span><br><span class="line"><span class="string">字典,这跟元组或列表很类似。在__slots__中列出的属性名在内部被映射到这个数组的指定小标上。使用__slots__一个不好的地方就是我们不能再给</span></span><br><span class="line"><span class="string">实例添加新的属性了,只能使用在__slots__中定义的那些属性名。</span></span><br><span class="line"><span class="string">4.注意事项:__slots__的很多特性都依赖于普通的基于字典的实现。另外,定义了__slots__后的类不再 支持一些普通类特性了,比如多继承。大多数情况下,你应该</span></span><br><span class="line"><span class="string">只在那些经常被使用到 的用作数据结构的类上定义__slots__比如在程序中需要创建某个类的几百万个实例对象 。</span></span><br><span class="line"><span class="string">关于__slots__的一个常见误区是它可以作为一个封装工具来防止用户给实例增加新的属性。尽管使用__slots__可以达到这样的目的,但是这个并不是它的初衷。           更多的是用来作为一个内存优化工具。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>:</span><br><span class="line">    __slots__=<span class="string">&#x27;x&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f1=Foo()</span><br><span class="line">f1.x=<span class="number">1</span></span><br><span class="line">f1.y=<span class="number">2</span><span class="comment">#报错</span></span><br><span class="line"><span class="built_in">print</span>(f1.__slots__) <span class="comment">#f1不再有__dict__</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bar</span>:</span><br><span class="line">    __slots__=[<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;y&#x27;</span>]</span><br><span class="line">    </span><br><span class="line">n=Bar()</span><br><span class="line">n.x,n.y=<span class="number">1</span>,<span class="number">2</span></span><br><span class="line">n.z=<span class="number">3</span><span class="comment">#报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>:</span><br><span class="line">    __slots__=[<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;age&#x27;</span>]</span><br><span class="line"></span><br><span class="line">f1=Foo()</span><br><span class="line">f1.name=<span class="string">&#x27;alex&#x27;</span></span><br><span class="line">f1.age=<span class="number">18</span></span><br><span class="line"><span class="built_in">print</span>(f1.__slots__)</span><br><span class="line"></span><br><span class="line">f2=Foo()</span><br><span class="line">f2.name=<span class="string">&#x27;allen&#x27;</span></span><br><span class="line">f2.age=<span class="number">19</span></span><br><span class="line"><span class="built_in">print</span>(f2.__slots__)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Foo.__dict__)</span><br><span class="line"><span class="comment">#f1与f2都没有属性字典__dict__了,统一归__slots__管,节省内存</span></span><br></pre></td></tr></table></figure><h1 id="next-和-iter-实现迭代器协议"><a href="#next-和-iter-实现迭代器协议" class="headerlink" title="__next__和__iter__实现迭代器协议"></a><code>__next__</code>和<code>__iter__</code>实现迭代器协议</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 简单示范</span></span><br><span class="line"><span class="comment">#_*_coding:utf-8_*_</span></span><br><span class="line">__author__ = <span class="string">&#x27;Linhaifeng&#x27;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,x</span>):</span><br><span class="line">        self.x=x</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__next__</span>(<span class="params">self</span>):</span><br><span class="line">        n=self.x</span><br><span class="line">        self.x+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> self.x</span><br><span class="line"></span><br><span class="line">f=Foo(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> f:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,start,stop</span>):</span><br><span class="line">        self.num=start</span><br><span class="line">        self.stop=stop</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__next__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.num &gt;= self.stop:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line">        n=self.num</span><br><span class="line">        self.num+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line"></span><br><span class="line">f=Foo(<span class="number">1</span>,<span class="number">5</span>)</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Iterable,Iterator</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(f,Iterator))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> Foo(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(i) </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#练习：简单模拟range，加上步长</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Range</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,n,stop,step</span>):</span><br><span class="line">        self.n=n</span><br><span class="line">        self.stop=stop</span><br><span class="line">        self.step=step</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__next__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.n &gt;= self.stop:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line">        x=self.n</span><br><span class="line">        self.n+=self.step</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> Range(<span class="number">1</span>,<span class="number">7</span>,<span class="number">3</span>): <span class="comment">#</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#斐波那契数列</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fib</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self._a=<span class="number">0</span></span><br><span class="line">        self._b=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__next__</span>(<span class="params">self</span>):</span><br><span class="line">        self._a,self._b=self._b,self._a + self._b</span><br><span class="line">        <span class="keyword">return</span> self._a</span><br><span class="line"></span><br><span class="line">f1=Fib()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(f1.__next__())</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(f1))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(f1))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> f1:</span><br><span class="line">    <span class="keyword">if</span> i &gt; <span class="number">100</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s &#x27;</span> %i,end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="doc"><a href="#doc" class="headerlink" title="__doc__"></a><code>__doc__</code></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>:</span><br><span class="line">    <span class="string">&#x27;我是描述信息&#x27;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Foo.__doc__)</span><br><span class="line"></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">#该属性无法被继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>:</span><br><span class="line">    <span class="string">&#x27;我是描述信息&#x27;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bar</span>(<span class="title class_ inherited__">Foo</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="built_in">print</span>(Bar.__doc__) <span class="comment">#该属性无法继承给子类</span></span><br></pre></td></tr></table></figure><h1 id="module-和-class"><a href="#module-和-class" class="headerlink" title="__module__和__class__"></a><code>__module__和__class__</code></h1><blockquote><p>　　<strong>module</strong> 表示当前操作的对象在那个模块</p><p>　　<strong>class</strong>   表示当前操作的对象的类是什么</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#lib/aa.py</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.name = ‘S<span class="string">B&#x27;</span></span><br><span class="line"><span class="string"># index.py</span></span><br><span class="line"><span class="string">from lib.aa import C</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">obj = C()</span></span><br><span class="line"><span class="string">print obj.__module__  # 输出 lib.aa，即：输出模块</span></span><br><span class="line"><span class="string">print obj.__class__      # 输出 lib.aa.C，即：输出类</span></span><br></pre></td></tr></table></figure><h1 id="enter-和-exit"><a href="#enter-和-exit" class="headerlink" title="__enter__和__exit__"></a><code>__enter__和__exit__</code></h1><p>我们知道在操作文件对象的时候可以这么写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">　　<span class="string">&#x27;代码块&#x27;</span></span><br></pre></td></tr></table></figure><p>上述叫做上下文管理协议，即with语句，为了让一个对象兼容with语句，必须在这个对象的类中声明<code>__enter__</code>和<code>__exit__</code>方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 上下文管理协议</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Open</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        self.name=name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__enter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;出现with语句,对象的__enter__被触发,有返回值则赋值给as声明的变量&#x27;</span>)</span><br><span class="line">        <span class="comment"># return self</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__exit__</span>(<span class="params">self, exc_type, exc_val, exc_tb</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;with中代码块执行完毕时执行我啊&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> Open(<span class="string">&#x27;a.txt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;=====&gt;执行代码块&#x27;</span>)</span><br><span class="line">    <span class="comment"># print(f,f.name)</span></span><br></pre></td></tr></table></figure><p><code>__exit__</code>()中的三个参数分别代表异常类型，异常值和追溯信息,with语句中代码块出现异常，则with后的代码都无法执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Open</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        self.name=name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__enter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;出现with语句,对象的__enter__被触发,有返回值则赋值给as声明的变量&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__exit__</span>(<span class="params">self, exc_type, exc_val, exc_tb</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;with中代码块执行完毕时执行我啊&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(exc_type)</span><br><span class="line">        <span class="built_in">print</span>(exc_val)</span><br><span class="line">        <span class="built_in">print</span>(exc_tb)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> Open(<span class="string">&#x27;a.txt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;=====&gt;执行代码块&#x27;</span>)</span><br><span class="line">    <span class="keyword">raise</span> AttributeError(<span class="string">&#x27;***着火啦,救火啊***&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;0&#x27;</span>*<span class="number">100</span>) <span class="comment">#-------------------------------&gt;不会执行</span></span><br></pre></td></tr></table></figure><p><code>__exit__</code>()中的三个参数分别代表异常类型，异常值和追溯信息,with语句中代码块出现异常，则with后的代码都无法执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Open</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        self.name=name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__enter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;出现with语句,对象的__enter__被触发,有返回值则赋值给as声明的变量&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__exit__</span>(<span class="params">self, exc_type, exc_val, exc_tb</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;with中代码块执行完毕时执行我啊&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(exc_type)</span><br><span class="line">        <span class="built_in">print</span>(exc_val)</span><br><span class="line">        <span class="built_in">print</span>(exc_tb)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> Open(<span class="string">&#x27;a.txt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;=====&gt;执行代码块&#x27;</span>)</span><br><span class="line">    <span class="keyword">raise</span> AttributeError(<span class="string">&#x27;***着火啦,救火啊***&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;0&#x27;</span>*<span class="number">100</span>) <span class="comment">#-------------------------------&gt;不会执行</span></span><br></pre></td></tr></table></figure><p>如果__exit()返回值为True,那么异常会被清空，就好像啥都没发生一样，with后的语句正常执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Open</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        self.name=name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__enter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;出现with语句,对象的__enter__被触发,有返回值则赋值给as声明的变量&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__exit__</span>(<span class="params">self, exc_type, exc_val, exc_tb</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;with中代码块执行完毕时执行我啊&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(exc_type)</span><br><span class="line">        <span class="built_in">print</span>(exc_val)</span><br><span class="line">        <span class="built_in">print</span>(exc_tb)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> Open(<span class="string">&#x27;a.txt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;=====&gt;执行代码块&#x27;</span>)</span><br><span class="line">    <span class="keyword">raise</span> AttributeError(<span class="string">&#x27;***着火啦,救火啊***&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;0&#x27;</span>*<span class="number">100</span>) <span class="comment">#-------------------------------&gt;会执行</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 练习：模拟Open</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Open</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,filepath,mode=<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span></span>):</span><br><span class="line">        self.filepath=filepath</span><br><span class="line">        self.mode=mode</span><br><span class="line">        self.encoding=encoding</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__enter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># print(&#x27;enter&#x27;)</span></span><br><span class="line">        self.f=<span class="built_in">open</span>(self.filepath,mode=self.mode,encoding=self.encoding)</span><br><span class="line">        <span class="keyword">return</span> self.f</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__exit__</span>(<span class="params">self, exc_type, exc_val, exc_tb</span>):</span><br><span class="line">        <span class="comment"># print(&#x27;exit&#x27;)</span></span><br><span class="line">        self.f.close()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getattr__</span>(<span class="params">self, item</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">getattr</span>(self.f,item)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> Open(<span class="string">&#x27;a.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">print</span>(f)</span><br><span class="line">    f.write(<span class="string">&#x27;aaaaaa&#x27;</span>)</span><br><span class="line">    f.wasdf <span class="comment">#抛出异常，交给__exit__处理</span></span><br></pre></td></tr></table></figure><p>用途或者说好处：</p><p>1.使用with语句的目的就是把代码块放入with中执行，with结束后，自动完成清理工作，无须手动干预</p><p>2.在需要管理一些资源比如文件，网络连接和锁的编程环境中，可以在<code>__exit__</code>中定制自动释放资源的机制，你无须再去关系这个问题，这将大有用处</p><h1 id="call"><a href="#call" class="headerlink" title="__call__"></a><code>__call__</code></h1><p>对象后面加括号，触发执行。</p><p>注：构造方法的执行是由创建对象触发的，即：对象 = 类名() ；而对于 <strong>call</strong> 方法的执行是由对象后加括号触发的，即：对象() 或者 类()()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;__call__&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj = Foo() <span class="comment"># 执行 __init__</span></span><br><span class="line">obj()       <span class="comment"># 执行 __call__</span></span><br></pre></td></tr></table></figure><h1 id="exec-内置语句"><a href="#exec-内置语句" class="headerlink" title="exec 内置语句"></a>exec 内置语句</h1><p>exec 执行储存在字符串或文件中的Python语句，相比于 eval，exec可以执行更复杂的 Python 代码。</p><p><strong>语法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#exec：三个参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#参数一：包含一系列python代码的字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#参数二：全局作用域（字典形式），如果不指定，默认为globals()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#参数三：局部作用域（字典形式），如果不指定，默认为locals()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#可以把exec命令的执行当成是一个函数的执行，会将执行期间产生的名字存放于局部名称空间中</span></span><br><span class="line"><span class="built_in">exec</span> obj</span><br><span class="line"><span class="built_in">exec</span> (obj,&#123;全局作用域&#125;,&#123;局部作用域&#125;)</span><br></pre></td></tr></table></figure><p><strong>实例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">exec</span> <span class="string">&#x27;print &quot;Hello World&quot;&#x27;</span></span><br><span class="line">Hello World</span><br><span class="line"><span class="comment"># 单行语句字符串</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">exec</span> <span class="string">&quot;print &#x27;runoob.com&#x27;&quot;</span></span><br><span class="line">runoob.com</span><br><span class="line"> </span><br><span class="line"><span class="comment">#  多行语句字符串</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">exec</span> <span class="string">&quot;&quot;&quot;for i in range(5):</span></span><br><span class="line"><span class="string"><span class="meta">... </span>  print &quot;iter time: %d&quot; % i</span></span><br><span class="line"><span class="string"><span class="meta">... </span>&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">iter</span> time: <span class="number">0</span></span><br><span class="line"><span class="built_in">iter</span> time: <span class="number">1</span></span><br><span class="line"><span class="built_in">iter</span> time: <span class="number">2</span></span><br><span class="line"><span class="built_in">iter</span> time: <span class="number">3</span></span><br><span class="line"><span class="built_in">iter</span> time: <span class="number">4</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">x = <span class="number">10</span></span><br><span class="line">expr = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">z = 30</span></span><br><span class="line"><span class="string">sum = x + y + z</span></span><br><span class="line"><span class="string">print(sum)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    y = <span class="number">20</span></span><br><span class="line">    <span class="built_in">exec</span>(expr)</span><br><span class="line">    <span class="built_in">exec</span>(expr, &#123;<span class="string">&#x27;x&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;y&#x27;</span>: <span class="number">2</span>&#125;)</span><br><span class="line">    <span class="built_in">exec</span>(expr, &#123;<span class="string">&#x27;x&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;y&#x27;</span>: <span class="number">2</span>&#125;, &#123;<span class="string">&#x27;y&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;z&#x27;</span>: <span class="number">4</span>&#125;)</span><br><span class="line">    </span><br><span class="line">func()</span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="number">60</span></span><br><span class="line"><span class="number">33</span></span><br><span class="line"><span class="number">34</span></span><br></pre></td></tr></table></figure><h1 id="元类"><a href="#元类" class="headerlink" title="元类"></a>元类</h1><h2 id="元类介绍"><a href="#元类介绍" class="headerlink" title="元类介绍"></a>元类介绍</h2><p>什么是元类呢？一切源自于一句话：python中一切皆为对象。让我们先定义一个类，然后逐步分析</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">StanfordTeacher</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    school=<span class="string">&#x27;Stanford&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s says welcome to the Stanford to learn Python&#x27;</span> %self.name)</span><br></pre></td></tr></table></figure><p>所有的对象都是实例化或者说调用类而得到的（调用类的过程称为类的实例化），比如对象t1是调用类StanfordTeacher得到的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t1=StanfordTeacher(<span class="string">&#x27;lili&#x27;</span>,<span class="number">18</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(t1)) <span class="comment">#查看对象t1的类是&lt;class &#x27;__main__.StanfordTeacher&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p>如果一切皆为对象，那么类StanfordTeacher本质也是一个对象，既然所有的对象都是调用类得到的，那么StanfordTeacher必然也是调用了一个类得到的，这个类称为元类</p><p><strong>于是我们可以推导出===&gt;产生StanfordTeacher的过程一定发生了：StanfordTeacher=元类(…)</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(StanfordTeacher)) <span class="comment"># 结果为&lt;class &#x27;type&#x27;&gt;，证明是调用了type这个元类而产生的StanfordTeacher，即默认的元类为type</span></span><br></pre></td></tr></table></figure><p><img src="yuanLeiType.png" alt="元类"></p><h2 id="class关键字创建类的流程分析"><a href="#class关键字创建类的流程分析" class="headerlink" title="class关键字创建类的流程分析"></a>class关键字创建类的流程分析</h2><p>上文我们基于python中一切皆为对象的概念分析出：我们用class关键字定义的类本身也是一个对象，负责产生该对象的类称之为元类（元类可以简称为类的类），内置的元类为type</p><p>class关键字在帮我们创建类时，必然帮我们调用了元类StanfordTeacher=type(…)，那调用type时传入的参数是什么呢？必然是类的关键组成部分，一个类有三大组成部分，分别是</p><p>1、类名class_name=’StanfordTeacher’</p><p>2、基类们class_bases=(object,)</p><p>3、类的名称空间class_dic，类的名称空间是执行类体代码而得到的</p><p>调用type时会依次传入以上三个参数</p><p>综上，class关键字帮我们创建一个类应该细分为以下四个过程</p><p><img src="image-20210330095443936.png" alt="img"></p><p>补充：exec的用法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#exec：三个参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#参数一：包含一系列python代码的字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#参数二：全局作用域（字典形式），如果不指定，默认为globals()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#参数三：局部作用域（字典形式），如果不指定，默认为locals()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#可以把exec命令的执行当成是一个函数的执行，会将执行期间产生的名字存放于局部名称空间中</span></span><br><span class="line">g=&#123;</span><br><span class="line">    <span class="string">&#x27;x&#x27;</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;y&#x27;</span>:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">l=&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span>(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">global x,z</span></span><br><span class="line"><span class="string">x=100</span></span><br><span class="line"><span class="string">z=200</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">m=300</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>,g,l)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(g) <span class="comment">#&#123;&#x27;x&#x27;: 100, &#x27;y&#x27;: 2,&#x27;z&#x27;:200,......&#125;</span></span><br><span class="line"><span class="built_in">print</span>(l) <span class="comment">#&#123;&#x27;m&#x27;: 300&#125;</span></span><br></pre></td></tr></table></figure><h2 id="自定义元类控制类StanfordTeacher的创建"><a href="#自定义元类控制类StanfordTeacher的创建" class="headerlink" title="自定义元类控制类StanfordTeacher的创建"></a>自定义元类控制类StanfordTeacher的创建</h2><p>一个类没有声明自己的元类，默认他的元类就是type，除了使用内置元类type，我们也可以通过继承type来自定义元类，然后使用metaclass关键字参数为一个类指定元类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Mymeta</span>(<span class="title class_ inherited__">type</span>): <span class="comment">#只有继承了type类才能称之为一个元类，否则就是一个普通的自定义类</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># StanfordTeacher=Mymeta(&#x27;StanfordTeacher&#x27;,(object),&#123;...&#125;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StanfordTeacher</span>(<span class="built_in">object</span>,metaclass=Mymeta): </span><br><span class="line">    school=<span class="string">&#x27;Stanford&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s says welcome to the Stanford to learn Python&#x27;</span> %self.name)</span><br></pre></td></tr></table></figure><p>自定义元类可以控制类的产生过程，类的产生过程其实就是元类的调用过程,即StanfordTeacher=Mymeta(‘StanfordTeacher’,(object),{…})，调用Mymeta会先产生一个空对象StanfordTeacher，然后连同调用Mymeta括号内的参数一同传给Mymeta下的<code>__init__</code>方法，完成初始化，于是我们可以</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Mymeta</span>(<span class="title class_ inherited__">type</span>): <span class="comment">#只有继承了type类才能称之为一个元类，否则就是一个普通的自定义类</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,class_name,class_bases,class_dic</span>):</span><br><span class="line">        <span class="comment"># print(self) #&lt;class &#x27;__main__.StanfordTeacher&#x27;&gt;</span></span><br><span class="line">        <span class="comment"># print(class_bases) #(&lt;class &#x27;object&#x27;&gt;,)</span></span><br><span class="line">        <span class="comment"># print(class_dic) #&#123;&#x27;__module__&#x27;: &#x27;__main__&#x27;, &#x27;__qualname__&#x27;: &#x27;StanfordTeacher&#x27;, &#x27;school&#x27;: &#x27;Stanford&#x27;, &#x27;__init__&#x27;: &lt;function StanfordTeacher.__init__ at 0x102b95ae8&gt;, &#x27;say&#x27;: &lt;function StanfordTeacher.say at 0x10621c6a8&gt;&#125;</span></span><br><span class="line">        <span class="built_in">super</span>(Mymeta, self).__init__(class_name, class_bases, class_dic)  <span class="comment"># 重用父类的功能</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> class_name.islower():</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;类名%s请修改为驼峰体&#x27;</span> %class_name)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;__doc__&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> class_dic <span class="keyword">or</span> <span class="built_in">len</span>(class_dic[<span class="string">&#x27;__doc__&#x27;</span>].strip(<span class="string">&#x27; \n&#x27;</span>)) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;类中必须有文档注释，并且文档注释不能为空&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># StanfordTeacher=Mymeta(&#x27;StanfordTeacher&#x27;,(object),&#123;...&#125;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StanfordTeacher</span>(<span class="built_in">object</span>,metaclass=Mymeta): </span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    类StanfordTeacher的文档注释</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    school=<span class="string">&#x27;Stanford&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s says welcome to the Stanford to learn Python&#x27;</span> %self.name)</span><br></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/80/v2-cb7c3e73b09fc81f61bde2d076aeb605_720w.jpeg" alt="img"></p><p><img src="https://pic1.zhimg.com/80/v2-ac1e4d27769d13173968120e88ae3954_720w.jpeg" alt="img"></p><h2 id="自定义元类控制类StanfordTeacher的调用"><a href="#自定义元类控制类StanfordTeacher的调用" class="headerlink" title="自定义元类控制类StanfordTeacher的调用"></a>自定义元类控制类StanfordTeacher的调用</h2><p>储备知识：<code>__call__</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(self)</span><br><span class="line">        <span class="built_in">print</span>(args)</span><br><span class="line">        <span class="built_in">print</span>(kwargs)</span><br><span class="line"></span><br><span class="line">obj=Foo()</span><br><span class="line"><span class="comment">#1、要想让obj这个对象变成一个可调用的对象，需要在该对象的类中定义一个方法__call__方法，该方法会在调用对象时自动触发</span></span><br><span class="line"><span class="comment">#2、调用obj的返回值就是__call__方法的返回值</span></span><br><span class="line">res=obj(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,x=<span class="number">1</span>,y=<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>由上例得知，调用一个对象，就是触发对象所在类中的<code>__call__</code>方法的执行，如果把StanfordTeacher也当做一个对象，那么在StanfordTeacher这个对象的类中也必然存在一个<code>__call__</code>方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Mymeta</span>(<span class="title class_ inherited__">type</span>): <span class="comment">#只有继承了type类才能称之为一个元类，否则就是一个普通的自定义类</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(self) <span class="comment">#&lt;class &#x27;__main__.StanfordTeacher&#x27;&gt;</span></span><br><span class="line">        <span class="built_in">print</span>(args) <span class="comment">#(&#x27;lili&#x27;, 18)</span></span><br><span class="line">        <span class="built_in">print</span>(kwargs) <span class="comment">#&#123;&#125;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StanfordTeacher</span>(<span class="built_in">object</span>,metaclass=Mymeta):</span><br><span class="line">    school=<span class="string">&#x27;Stanford&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s says welcome to the Stanford to learn Python&#x27;</span> %self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用StanfordTeacher就是在调用StanfordTeacher类中的__call__方法</span></span><br><span class="line"><span class="comment"># 然后将StanfordTeacher传给self,溢出的位置参数传给*，溢出的关键字参数传给**</span></span><br><span class="line"><span class="comment"># 调用StanfordTeacher的返回值就是调用__call__的返回值</span></span><br><span class="line">t1=StanfordTeacher(<span class="string">&#x27;lili&#x27;</span>,<span class="number">18</span>)</span><br><span class="line"><span class="built_in">print</span>(t1) <span class="comment">#123</span></span><br></pre></td></tr></table></figure><p>默认地，调用t1=StanfordTeacher(‘lili’,18)会做三件事</p><p>1、产生一个空对象obj</p><p>2、调用<code>__init__</code>方法初始化对象obj</p><p>3、返回初始化好的obj</p><p>对应着，StanfordTeacher类中的<code>__call__</code>方法也应该做这三件事</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Mymeta</span>(<span class="title class_ inherited__">type</span>): <span class="comment">#只有继承了type类才能称之为一个元类，否则就是一个普通的自定义类</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwargs</span>): <span class="comment">#self=&lt;class &#x27;__main__.StanfordTeacher&#x27;&gt;</span></span><br><span class="line">        <span class="comment">#1、调用__new__产生一个空对象obj</span></span><br><span class="line">        obj=self.__new__(self) <span class="comment"># 此处的self是类OldoyTeacher，必须传参，代表创建一个StanfordTeacher的对象obj</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#2、调用__init__初始化空对象obj</span></span><br><span class="line">        self.__init__(obj,*args,**kwargs)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#3、返回初始化好的对象obj</span></span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StanfordTeacher</span>(<span class="built_in">object</span>,metaclass=Mymeta):</span><br><span class="line">    school=<span class="string">&#x27;Stanford&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s says welcome to the Stanford to learn Python&#x27;</span> %self.name)</span><br><span class="line"></span><br><span class="line">t1=StanfordTeacher(<span class="string">&#x27;lili&#x27;</span>,<span class="number">18</span>)</span><br><span class="line"><span class="built_in">print</span>(t1.__dict__) <span class="comment">#&#123;&#x27;name&#x27;: &#x27;lili&#x27;, &#x27;age&#x27;: 18&#125;</span></span><br></pre></td></tr></table></figure><p>上例的<code>__call__</code>相当于一个模板，我们可以在该基础上改写<code>__call__</code>的逻辑从而控制调用StanfordTeacher的过程，比如将StanfordTeacher的对象的所有属性都变成私有的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Mymeta</span>(<span class="title class_ inherited__">type</span>): <span class="comment">#只有继承了type类才能称之为一个元类，否则就是一个普通的自定义类</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwargs</span>): <span class="comment">#self=&lt;class &#x27;__main__.StanfordTeacher&#x27;&gt;</span></span><br><span class="line">        <span class="comment">#1、调用__new__产生一个空对象obj</span></span><br><span class="line">        obj=self.__new__(self) <span class="comment"># 此处的self是类StanfordTeacher，必须传参，代表创建一个StanfordTeacher的对象obj</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#2、调用__init__初始化空对象obj</span></span><br><span class="line">        self.__init__(obj,*args,**kwargs)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 在初始化之后，obj.__dict__里就有值了</span></span><br><span class="line">        obj.__dict__=&#123;<span class="string">&#x27;_%s__%s&#x27;</span> %(self.__name__,k):v <span class="keyword">for</span> k,v <span class="keyword">in</span> obj.__dict__.items()&#125;</span><br><span class="line">        <span class="comment">#3、返回初始化好的对象obj</span></span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StanfordTeacher</span>(<span class="built_in">object</span>,metaclass=Mymeta):</span><br><span class="line">    school=<span class="string">&#x27;Stanford&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s says welcome to the Stanford to learn Python&#x27;</span> %self.name)</span><br><span class="line"></span><br><span class="line">t1=StanfordTeacher(<span class="string">&#x27;lili&#x27;</span>,<span class="number">18</span>)</span><br><span class="line"><span class="built_in">print</span>(t1.__dict__) <span class="comment">#&#123;&#x27;_StanfordTeacher__name&#x27;: &#x27;lili&#x27;, &#x27;_StanfordTeacher__age&#x27;: 18&#125;</span></span><br></pre></td></tr></table></figure><p>上例中涉及到查找属性的问题，比如<code>self.__new__</code>，请看下一小节</p><h2 id="再看属性查找"><a href="#再看属性查找" class="headerlink" title="再看属性查找"></a>再看属性查找</h2><p>结合python继承的实现原理+元类重新看属性的查找应该是什么样子呢？？？</p><p>在学习完元类后，其实我们用class自定义的类也全都是对象（包括object类本身也是元类type的  一个实例，可以用type(object)查看），我们学习过继承的实现原理，如果把类当成对象去看，将下述继承应该说成是：对象StanfordTeacher继承对象Foo，对象Foo继承对象Bar，对象Bar继承对象object</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Mymeta</span>(<span class="title class_ inherited__">type</span>): <span class="comment">#只有继承了type类才能称之为一个元类，否则就是一个普通的自定义类</span></span><br><span class="line">    n=<span class="number">444</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwargs</span>): <span class="comment">#self=&lt;class &#x27;__main__.StanfordTeacher&#x27;&gt;</span></span><br><span class="line">        obj=self.__new__(self)</span><br><span class="line">        self.__init__(obj,*args,**kwargs)</span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bar</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    n=<span class="number">333</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>(<span class="title class_ inherited__">Bar</span>):</span><br><span class="line">    n=<span class="number">222</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StanfordTeacher</span>(Foo,metaclass=Mymeta):</span><br><span class="line">    n=<span class="number">111</span></span><br><span class="line"></span><br><span class="line">    school=<span class="string">&#x27;Stanford&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s says welcome to the Stanford to learn Python&#x27;</span> %self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(StanfordTeacher.n) <span class="comment">#自下而上依次注释各个类中的n=xxx，然后重新运行程序，发现n的查找顺序为StanfordTeacher-&gt;Foo-&gt;Bar-&gt;object-&gt;Mymeta-&gt;type</span></span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/v2-1c83a64a4831811981dd5db4aafb3e6a_720w.jpeg" alt="img"></p><p>于是属性查找应该分成两层，一层是对象层（基于c3算法的MRO）的查找，另外一个层则是类层（即元类层）的查找</p><p><img src="image-20210330095844696.png" alt="img"><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查找顺序：</span></span><br><span class="line"><span class="comment">#1、先对象层：StanfordTeacher-&gt;Foo-&gt;Bar-&gt;object</span></span><br><span class="line"><span class="comment">#2、然后元类层：Mymeta-&gt;type</span></span><br></pre></td></tr></table></figure></p><p>依据上述总结，我们来分析下元类Mymeta中<code>__call__</code>里的<code>self.__new__</code>的查找</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Mymeta</span>(<span class="title class_ inherited__">type</span>): </span><br><span class="line">    n=<span class="number">444</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwargs</span>): <span class="comment">#self=&lt;class &#x27;__main__.StanfordTeacher&#x27;&gt;</span></span><br><span class="line">        obj=self.__new__(self)</span><br><span class="line">        <span class="built_in">print</span>(self.__new__ <span class="keyword">is</span> <span class="built_in">object</span>.__new__) <span class="comment">#True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bar</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    n=<span class="number">333</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># def __new__(cls, *args, **kwargs):</span></span><br><span class="line">    <span class="comment">#     print(&#x27;Bar.__new__&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>(<span class="title class_ inherited__">Bar</span>):</span><br><span class="line">    n=<span class="number">222</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># def __new__(cls, *args, **kwargs):</span></span><br><span class="line">    <span class="comment">#     print(&#x27;Foo.__new__&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StanfordTeacher</span>(Foo,metaclass=Mymeta):</span><br><span class="line">    n=<span class="number">111</span></span><br><span class="line"></span><br><span class="line">    school=<span class="string">&#x27;Stanford&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s says welcome to the Stanford to learn Python&#x27;</span> %self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># def __new__(cls, *args, **kwargs):</span></span><br><span class="line">    <span class="comment">#     print(&#x27;StanfordTeacher.__new__&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">StanfordTeacher(<span class="string">&#x27;lili&#x27;</span>,<span class="number">18</span>) <span class="comment">#触发StanfordTeacher的类中的__call__方法的执行，进而执行self.__new__开始查找</span></span><br></pre></td></tr></table></figure><p>总结，Mymeta下的<code>__call__</code>里的<code>self.__new__</code>在StanfordTeacher、Foo、Bar里都没有找到<code>__new__</code>的情况下，会去找object里的<code>__new__</code>，而object下默认就有一个<code>__new__</code>，所以即便是之前的类均未实现<code>__new__</code>,也一定会在object中找到一个，根本不会、也根本没必要再去找元类Mymeta-&gt;type中查找<code>__new__</code></p><p><img src="https://pic2.zhimg.com/80/v2-0efee7de2aeae470f383336f50f4f2a1_720w.jpeg" alt="img"></p><p>我们在元类的<code>__call__</code>中也可以用<code>object.__new__(self)</code>去造对象</p><p><img src="image-20210330095911878.png" alt="img"><br><strong>但我们还是推荐在<code>__call__</code>中使用<code>self.__new__(self)</code>去创造空对象，因为这种方式会检索三个类StanfordTeacher-&gt;Foo-&gt;Bar,而<code>object.__new__</code>则是直接跨过了他们三个</strong></p><p>最后说明一点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Mymeta</span>(<span class="title class_ inherited__">type</span>): <span class="comment">#只有继承了type类才能称之为一个元类，否则就是一个普通的自定义类</span></span><br><span class="line">    n=<span class="number">444</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line">        obj=<span class="built_in">type</span>.__new__(cls,*args,**kwargs) <span class="comment"># 必须按照这种传值方式</span></span><br><span class="line">        <span class="built_in">print</span>(obj.__dict__)</span><br><span class="line">        <span class="comment"># return obj # 只有在返回值是type的对象时，才会触发下面的__init__</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,class_name,class_bases,class_dic</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;run。。。&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StanfordTeacher</span>(<span class="built_in">object</span>,metaclass=Mymeta): <span class="comment">#StanfordTeacher=Mymeta(&#x27;StanfordTeacher&#x27;,(object),&#123;...&#125;)</span></span><br><span class="line">    n=<span class="number">111</span></span><br><span class="line"></span><br><span class="line">    school=<span class="string">&#x27;Stanford&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s says welcome to the Stanford to learn Python&#x27;</span> %self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(Mymeta)) <span class="comment">#&lt;class &#x27;type&#x27;&gt;</span></span><br><span class="line"><span class="comment"># 产生类StanfordTeacher的过程就是在调用Mymeta，而Mymeta也是type类的一个对象，那么Mymeta之所以可以调用，一定是在元类type中有一个__call__方法</span></span><br><span class="line"><span class="comment"># 该方法中同样需要做至少三件事：</span></span><br><span class="line"><span class="comment"># class type:</span></span><br><span class="line"><span class="comment">#     def __call__(self, *args, **kwargs): #self=&lt;class &#x27;__main__.Mymeta&#x27;&gt;</span></span><br><span class="line"><span class="comment">#         obj=self.__new__(self,*args,**kwargs) # 产生Mymeta的一个对象</span></span><br><span class="line"><span class="comment">#         self.__init__(obj,*args,**kwargs) </span></span><br><span class="line"><span class="comment">#         return obj</span></span><br></pre></td></tr></table></figure><h2 id="复习"><a href="#复习" class="headerlink" title="复习"></a>复习</h2><p><strong>1、在元类中控制把自定义类的数据属性都变成大写</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Mymetaclass</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls,name,bases,attrs</span>):</span><br><span class="line">        update_attrs=&#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> k,v <span class="keyword">in</span> attrs.items():</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">callable</span>(v) <span class="keyword">and</span> <span class="keyword">not</span> k.startswith(<span class="string">&#x27;__&#x27;</span>):</span><br><span class="line">                update_attrs[k.upper()]=v</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                update_attrs[k]=v</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">type</span>.__new__(cls,name,bases,update_attrs)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Chinese</span>(metaclass=Mymetaclass):</span><br><span class="line">    country=<span class="string">&#x27;China&#x27;</span></span><br><span class="line">    tag=<span class="string">&#x27;Legend of the Dragon&#x27;</span> <span class="comment">#龙的传人</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">walk</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s is walking&#x27;</span> %self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Chinese.__dict__)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#123;&#x27;__module__&#x27;: &#x27;__main__&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;COUNTRY&#x27;: &#x27;China&#x27;, </span></span><br><span class="line"><span class="string"> &#x27;TAG&#x27;: &#x27;Legend of the Dragon&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;walk&#x27;: &lt;function Chinese.walk at 0x0000000001E7B950&gt;,</span></span><br><span class="line"><span class="string"> &#x27;__dict__&#x27;: &lt;attribute &#x27;__dict__&#x27; of &#x27;Chinese&#x27; objects&gt;,                                         </span></span><br><span class="line"><span class="string"> &#x27;__weakref__&#x27;: &lt;attribute &#x27;__weakref__&#x27; of &#x27;Chinese&#x27; objects&gt;,</span></span><br><span class="line"><span class="string"> &#x27;__doc__&#x27;: None&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>2、在元类中控制自定义的类无需<code>__init__</code>方法</strong></p><p>   1.元类帮其完成创建对象，以及初始化操作；</p><p>2.要求实例化时传参必须为关键字形式，否则抛出异常TypeError: must use keyword argument</p><p>3.key作为用户自定义类产生对象的属性，且所有属性变成大写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Mymetaclass</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line">    <span class="comment"># def __new__(cls,name,bases,attrs):</span></span><br><span class="line">    <span class="comment">#     update_attrs=&#123;&#125;</span></span><br><span class="line">    <span class="comment">#     for k,v in attrs.items():</span></span><br><span class="line">    <span class="comment">#         if not callable(v) and not k.startswith(&#x27;__&#x27;):</span></span><br><span class="line">    <span class="comment">#             update_attrs[k.upper()]=v</span></span><br><span class="line">    <span class="comment">#         else:</span></span><br><span class="line">    <span class="comment">#             update_attrs[k]=v</span></span><br><span class="line">    <span class="comment">#     return type.__new__(cls,name,bases,update_attrs)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> args:</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;must use keyword argument for key function&#x27;</span>)</span><br><span class="line">        obj = <span class="built_in">object</span>.__new__(self) <span class="comment">#创建对象，self为类Foo</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> k,v <span class="keyword">in</span> kwargs.items():</span><br><span class="line">            obj.__dict__[k.upper()]=v</span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Chinese</span>(metaclass=Mymetaclass):</span><br><span class="line">    country=<span class="string">&#x27;China&#x27;</span></span><br><span class="line">    tag=<span class="string">&#x27;Legend of the Dragon&#x27;</span> <span class="comment">#龙的传人</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">walk</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s is walking&#x27;</span> %self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p=Chinese(name=<span class="string">&#x27;lili&#x27;</span>,age=<span class="number">18</span>,sex=<span class="string">&#x27;male&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(p.__dict__)</span><br></pre></td></tr></table></figure><p><strong>3、在元类中控制自定义的类产生的对象相关的属性全部为隐藏属性</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Mymeta</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,class_name,class_bases,class_dic</span>):</span><br><span class="line">        <span class="comment">#控制类Foo的创建</span></span><br><span class="line">        <span class="built_in">super</span>(Mymeta,self).__init__(class_name,class_bases,class_dic)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="comment">#控制Foo的调用过程，即Foo对象的产生过程</span></span><br><span class="line">        obj = self.__new__(self)</span><br><span class="line">        self.__init__(obj, *args, **kwargs)</span><br><span class="line">        obj.__dict__=&#123;<span class="string">&#x27;_%s__%s&#x27;</span> %(self.__name__,k):v <span class="keyword">for</span> k,v <span class="keyword">in</span> obj.__dict__.items()&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>(<span class="built_in">object</span>,metaclass=Mymeta):  <span class="comment"># Foo=Mymeta(...)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age,sex</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">        self.sex=sex</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj=Foo(<span class="string">&#x27;lili&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;male&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(obj.__dict__)</span><br></pre></td></tr></table></figure><p><strong>4、基于元类实现单例模式</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#步骤五：基于元类实现单例模式</span></span><br><span class="line"><span class="comment"># 单例：即单个实例，指的是同一个类实例化多次的结果指向同一个对象，用于节省内存空间</span></span><br><span class="line"><span class="comment"># 如果我们从配置文件中读取配置来进行实例化，在配置相同的情况下，就没必要重复产生对象浪费内存了</span></span><br><span class="line"><span class="comment">#settings.py文件内容如下</span></span><br><span class="line">HOST=<span class="string">&#x27;1.1.1.1&#x27;</span></span><br><span class="line">PORT=<span class="number">3306</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#方式一:定义一个类方法实现单例模式</span></span><br><span class="line"><span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mysql</span>:</span><br><span class="line">    __instance=<span class="literal">None</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,host,port</span>):</span><br><span class="line">        self.host=host</span><br><span class="line">        self.port=port</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">singleton</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> cls.__instance:</span><br><span class="line">            cls.__instance=cls(settings.HOST,settings.PORT)</span><br><span class="line">        <span class="keyword">return</span> cls.__instance</span><br><span class="line"></span><br><span class="line">obj1=Mysql(<span class="string">&#x27;1.1.1.2&#x27;</span>,<span class="number">3306</span>)</span><br><span class="line">obj2=Mysql(<span class="string">&#x27;1.1.1.3&#x27;</span>,<span class="number">3307</span>)</span><br><span class="line"><span class="built_in">print</span>(obj1 <span class="keyword">is</span> obj2) <span class="comment">#False</span></span><br><span class="line"></span><br><span class="line">obj3=Mysql.singleton()</span><br><span class="line">obj4=Mysql.singleton()</span><br><span class="line"><span class="built_in">print</span>(obj3 <span class="keyword">is</span> obj4) <span class="comment">#True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#方式二：定制元类实现单例模式</span></span><br><span class="line"><span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mymeta</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,bases,dic</span>): <span class="comment">#定义类Mysql时就触发</span></span><br><span class="line">        <span class="comment"># 事先先从配置文件中取配置来造一个Mysql的实例出来</span></span><br><span class="line">        self.__instance = <span class="built_in">object</span>.__new__(self)  <span class="comment"># 产生对象</span></span><br><span class="line">        self.__init__(self.__instance, settings.HOST, settings.PORT)  <span class="comment"># 初始化对象</span></span><br><span class="line">        <span class="comment"># 上述两步可以合成下面一步</span></span><br><span class="line">        <span class="comment"># self.__instance=super().__call__(*args,**kwargs)</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(name,bases,dic)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwargs</span>): <span class="comment">#Mysql(...)时触发</span></span><br><span class="line">        <span class="keyword">if</span> args <span class="keyword">or</span> kwargs: <span class="comment"># args或kwargs内有值</span></span><br><span class="line">            obj=<span class="built_in">object</span>.__new__(self)</span><br><span class="line">            self.__init__(obj,*args,**kwargs)</span><br><span class="line">            <span class="keyword">return</span> obj</span><br><span class="line">        <span class="keyword">return</span> self.__instance</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mysql</span>(metaclass=Mymeta):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,host,port</span>):</span><br><span class="line">        self.host=host</span><br><span class="line">        self.port=port</span><br><span class="line"></span><br><span class="line">obj1=Mysql() <span class="comment"># 没有传值则默认从配置文件中读配置来实例化，所有的实例应该指向一个内存地址</span></span><br><span class="line">obj2=Mysql()</span><br><span class="line">obj3=Mysql()</span><br><span class="line"><span class="built_in">print</span>(obj1 <span class="keyword">is</span> obj2 <span class="keyword">is</span> obj3)</span><br><span class="line">obj4=Mysql(<span class="string">&#x27;1.1.1.4&#x27;</span>,<span class="number">3307</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#方式三:定义一个装饰器实现单例模式</span></span><br><span class="line"><span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">singleton</span>(<span class="params">cls</span>): <span class="comment">#cls=Mysql</span></span><br><span class="line">    _instance=cls(settings.HOST,settings.PORT)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args,**kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> args <span class="keyword">or</span> kwargs:</span><br><span class="line">            obj=cls(*args,**kwargs)</span><br><span class="line">            <span class="keyword">return</span> obj</span><br><span class="line">        <span class="keyword">return</span> _instance</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@singleton </span><span class="comment"># Mysql=singleton(Mysql)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mysql</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,host,port</span>):</span><br><span class="line">        self.host=host</span><br><span class="line">        self.port=port</span><br><span class="line"></span><br><span class="line">obj1=Mysql()</span><br><span class="line">obj2=Mysql()</span><br><span class="line">obj3=Mysql()</span><br><span class="line"><span class="built_in">print</span>(obj1 <span class="keyword">is</span> obj2 <span class="keyword">is</span> obj3) <span class="comment">#True</span></span><br><span class="line"></span><br><span class="line">obj4=Mysql(<span class="string">&#x27;1.1.1.3&#x27;</span>,<span class="number">3307</span>)</span><br><span class="line">obj5=Mysql(<span class="string">&#x27;1.1.1.4&#x27;</span>,<span class="number">3308</span>)</span><br><span class="line"><span class="built_in">print</span>(obj3 <span class="keyword">is</span> obj4) <span class="comment">#False</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python之旅 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python之旅：面向对象</title>
      <link href="/2019/11/28/Python/Python%E4%B9%8B%E6%97%85/Python%E4%B9%8B%E6%97%85%EF%BC%9A%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
      <url>/2019/11/28/Python/Python%E4%B9%8B%E6%97%85/Python%E4%B9%8B%E6%97%85%EF%BC%9A%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[ <div class="note info flat"><ul><li>类（class）: 定义了一件事物的抽象特点。</li><li>对象（object）：是类的实例。在操作系统中，系统给对象分配内存空间，而不会给类分配内存空间。</li><li>继承（inheritance）：是指通过一个已有的类(父类)定义另外一个类(子类),子类共享父类开放的属性和方法。</li><li>封装性（Excapsulation）：封装性是指类在定义时可以将不能或不需要其他类知道的成员定义成私有成员，而只公开其他类需要的使用的成员，以达到信息隐蔽和简单化的作用。</li><li>多态性(Polymorphism)：是指同一方法作用于不同对象身上，可以有不同的解释，产生不同的执行结果。在具体的实现方式上，多态性是允许开发者将父对象的变量设置为对子对象的引用，赋值后，父对象变量就可以根据当前的赋值给他的子对象的特性以不同的方式运作。</li></ul></div><h1 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h1><h2 id="面向过程-与-面向对象"><a href="#面向过程-与-面向对象" class="headerlink" title="面向过程 与 面向对象"></a>面向过程 与 面向对象</h2><p><code>面向过程的程序设计</code>：核心是过程二字，过程指的是解决问题的步骤，即先干什么再干什么……面向过程的设计就好比精心设计好一条流水线，是一种机械式的思维方式。 </p><blockquote><p> 优点是：复杂度的问题流程化，进而简单化（一个复杂的问题，分成一个个小的步骤去实现，实现小的步骤将会非常简单） </p><p> 缺点是：一套流水线或者流程就是用来解决一个问题，生产汽水的流水线无法生产汽车，即便是能，也得是大改，改一个组件，牵一发而动全身。 </p><p> 应用场景：一旦完成基本很少改变的场景，著名的例子有Linux內核，git，以及Apache HTTP Server等。</p></blockquote><p><code>面向对象的程序设计</code>：核心是对象二字，（要理解对象为何物，必须把自己当成上帝，上帝眼里世间存在的万物皆为对象，不存在的也可以创造出来。面向对象的程序设计好比如来设计西游记，如来要解决的问题是把经书传给东土大唐，如来想了想解决这个问题需要四个人：唐僧，沙和尚，猪八戒，孙悟空，每个人都有各自的特征和技能（这就是对象的概念，特征和技能分别对应对象的数据属性和方法属性），然而这并不好玩，于是如来又安排了一群妖魔鬼怪，为了防止师徒四人在取经路上被搞死，又安排了一群神仙保驾护航，这些都是对象。然后取经开始，师徒四人与妖魔鬼怪神仙交互着直到最后取得真经。如来根本不会管师徒四人按照什么流程去取),对象是特征与技能的结合体，基于面向对象设计程序就好比在创造一个世界，你就是这个世界的上帝，存在的皆为对象，不存在的也可以创造出来，与面向过程机械式的思维方式形成鲜明对比，面向对象更加注重对现实世界的模拟，是一种“上帝式”的思维方式。</p><blockquote><p>优点是：<br>解决了程序    的扩展性。对某一个对象单独修改，会立刻反映到整个体系中，如对游戏中一个人物参数的特征和技能修改都很容易。</p><p>缺点：</p><ol><li><p>编程的复杂度远高于面向过程，不了解面向对象而立即上手基于它设计程序，极容易出现过度设计的问题。一些扩展性要求低的场景使用面向对象会徒增编程难度，比如管理linux系统的shell脚本就不适合用面向对象去设计，面向过程反而更加适合。</p></li><li><p>无法向面向过程的程序设计流水线式的可以很精准的预测问题的处理流程与结果，面向对象的程序一旦开始就由对象之间的交互解决问题，即便是上帝也无法准确地预测最终结果。于是我们经常看到对战类游戏，新增一个游戏人物，在对战的过程中极容易出现BUG的技能，一刀砍死3个人，这种情况是无法准确预知的，只有对象之间交互才能准确地知道最终的结果。</p></li></ol><p>应用场景：需求经常变化的软件，一般需求的变化都集中在用户层，互联网应用，企业内部软件，游戏等都是面向对象的程序设计大显身手的好地方</p></blockquote><p>面向对象的程序设计并不是全部。对于一个软件质量来说，面向对象的程序设计只是用来解决扩展性。</p><p><img src="1036857-20170301105507938-1164072796.png" alt="img"><br><a href="https://baike.baidu.com/item/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/5880653?fr=aladdin">百度百科</a></p><h2 id="抽象理解"><a href="#抽象理解" class="headerlink" title="抽象理解"></a>抽象理解</h2><p>类即类别、种类，是面向对象设计最重要的概念，对象是特征与技能的结合体，而类则是一系列对象相似的特征与技能的结合体</p><p>那么问题来了，先有的一个个具体存在的对象（比如一个具体存在的人），还是先有的人类这个概念，这个问题需要分两种情况去看</p><p>在现实世界中：先有对象，再有类</p><p><em>世界上肯定是先出现各种各样的实际存在的物体，然后随着人类文明的发展，人类站在不同的角度总结出了不同的种类，如人类、动物类、植物类等概念</em></p><p><em>也就说，对象是具体的存在，而类仅仅只是一个概念，并不真实存在</em></p><p>在程序中：务必保证<code>先定义类，后产生对象</code></p><p>这与函数的使用是类似的，先定义函数，后调用函数，类也是一样的，在程序中需要先定义类，后调用类</p><p>不一样的是，调用函数会执行函数体代码返回的是函数体执行的结果，而调用类会产生对象，返回的是对象</p><p>类是一系列对象相似的特征与技能的结合体<br>优点：可扩展性强<br>缺点：编程的复杂度远高于面向过程</p><p>对象是特征与技能的结合体，在程序中<br>特征：变量<br>技能：函数</p><p>按照上述步骤，我们来定义一个类（我们站在学校的角度去看，在座的各位都是学生）</p><p><code>在现实世界中：先有对象，再有类</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在现实世界中，站在北大学校的角度：先有对象，再有类</span></span><br><span class="line">对象<span class="number">1</span>：李坦克</span><br><span class="line">    特征:</span><br><span class="line">        学校=beida</span><br><span class="line">        姓名=李大牛</span><br><span class="line">        性别=男</span><br><span class="line">        年龄=<span class="number">19</span></span><br><span class="line">    技能：</span><br><span class="line">        学习</span><br><span class="line">        吃饭</span><br><span class="line">        睡觉</span><br><span class="line"></span><br><span class="line">对象<span class="number">2</span>：王大炮</span><br><span class="line">    特征:</span><br><span class="line">        学校=beida</span><br><span class="line">        姓名=王大炮</span><br><span class="line">        性别=女</span><br><span class="line">        年龄=<span class="number">38</span></span><br><span class="line">    技能：</span><br><span class="line">        学习</span><br><span class="line">        吃饭</span><br><span class="line">        睡觉</span><br></pre></td></tr></table></figure><h2 id="对象的概念"><a href="#对象的概念" class="headerlink" title="对象的概念"></a>对象的概念</h2><p>”面向对象“的核心是“对象”二字，而对象的精髓在于“整合“</p><p>所有的程序都是由”数据”与“功能“组成，因而编写程序的本质就是定义出一系列的数据，然后定义出一系列的功能来对数据进行操作。在学习”对象“之前，程序中的数据与功能是分离开的，如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据：name、age、sex</span></span><br><span class="line">name=<span class="string">&#x27;lili&#x27;</span></span><br><span class="line">age=<span class="number">18</span></span><br><span class="line">sex=<span class="string">&#x27;female&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 功能：tell_info</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tell_info</span>(<span class="params">name,age,sex</span>): </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&lt;%s:%s:%s&gt;&#x27;</span> %(name,age,sex))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时若想执行查看个人信息的功能，需要同时拿来两样东西，一类是功能tell_info，另外一类则是多个数据name、age、sex，然后才能执行，非常麻烦</span></span><br><span class="line">tell_info(name,age,sex)</span><br></pre></td></tr></table></figure><p>在学习了“对象”之后，我们就有了一个容器，该容器可以盛放数据与功能，所以我们可以说：对象是把数据与功能整合到一起的产物，或者说”对象“就是一个盛放数据与功能的容器/箱子/盒子。</p><p>如果把”数据“比喻为”睫毛膏“、”眼影“、”唇彩“等化妆所需要的原材料；把”功能“比喻为眼线笔、眉笔等化妆所需要的工具，那么”对象“就是一个彩妆盒，彩妆盒可以把”原材料“与”工具“都装到一起</p><p><img src="caizhuanghe.png" alt="彩妆盒"><br>如果我们把”化妆“比喻为要执行的业务逻辑，此时只需要拿来一样东西即可，那就是彩妆盒，因为彩妆盒里整合了化妆所需的所有原材料与功能，这比起你分别拿来原材料与功能才能执行，要方便的多。</p><p>​     在了解了对象的基本概念之后，理解面向对象的编程方式就相对简单很多了，面向对象编程就是要造出一个个的对象，把原本分散开的相关数据与功能整合到一个个 的对象里，这么做既方便使用，也可以提高程序的解耦合程度，进而提升了程序的可扩展性（需要强调的是，软件质量属性包含很多方面，面向对象解决的仅仅只是 扩展性问题）</p><h1 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h1><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p><code>在程序中：先定义类，后产生对象</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在程序中，务必保证：先定义（类），后使用（产生对象）</span></span><br><span class="line">PS:</span><br><span class="line">  <span class="number">1.</span> 在程序中特征用变量标识，技能用函数标识</span><br><span class="line">  <span class="number">2.</span> 因而类中最常见的无非是：变量和函数的定义</span><br><span class="line"></span><br><span class="line"><span class="comment"># 类定义代码分析如下:</span></span><br><span class="line"><span class="comment"># 1. 类名为BeidaStudent</span></span><br><span class="line"><span class="comment"># 2. 该类中定义了一个成员变量,并为其赋了初始值为beida</span></span><br><span class="line"><span class="comment"># 3. 类中定义了三个成员函数learn(self),eat(self),sleep(self);注意类中的定义函数必须带self</span></span><br><span class="line"><span class="comment"># 4. 参数self是对象本身的引用,在成员函数体中可以引用self参数获得对象的信息</span></span><br><span class="line"><span class="comment">#程序中的类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BeidaStudent</span>():</span><br><span class="line">    <span class="comment"># 对象们相似的特征</span></span><br><span class="line">    school=<span class="string">&#x27;beida&#x27;</span></span><br><span class="line">    <span class="comment"># 对象们相似的技能</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">learn</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;is learning&#x27;</span>)</span><br><span class="line">    <span class="comment"># 对象们相似的技能</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;is eating&#x27;</span>)</span><br><span class="line">    <span class="comment"># 对象们相似的技能</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sleep</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;is sleeping&#x27;</span>)</span><br><span class="line">BeidaStudent.school=<span class="string">&#x27;清华&#x27;</span>   <span class="comment"># 修改成员变量</span></span><br><span class="line"><span class="built_in">print</span>(BeidaStudent.school)  <span class="comment"># &gt;&gt;&gt; 清华</span></span><br><span class="line">obj1=BeidaStudent()         <span class="comment"># 实例化一个BeidaStudent对象</span></span><br><span class="line">obj1.eat()                  <span class="comment"># 调用成员函数，无需传入self  &gt;&gt;&gt; is eating</span></span><br><span class="line">obj1.school=<span class="string">&#x27;北大&#x27;</span>           <span class="comment"># 对象修改成员变量</span></span><br><span class="line"><span class="built_in">print</span>(obj1.school)          <span class="comment"># &gt;&gt;&gt; 北大</span></span><br><span class="line"><span class="built_in">print</span>(BeidaStudent.school)  <span class="comment"># &gt;&gt;&gt; 清华</span></span><br></pre></td></tr></table></figure><p>通过在类后面加小括号可以直接实例化类来获得对象变量,使用对象变量可以访问类的成员变量以及成员函数.</p><h2 id="类的用法"><a href="#类的用法" class="headerlink" title="类的用法"></a>类的用法</h2><p>注意：</p><ol><li>类中可以有任意python代码，这些代码在类定义阶段便会执行</li><li>因而会产生新的名称空间，用来存放类的变量名与函数名，可以通过<code>BeidaStudent.__dict__</code>查看</li><li>对于经典类来说我们可以通过该字典操作类名称空间的名字（新式类有限制），但python为我们提供专门的.语法</li><li>点是访问属性的语法，类中定义的名字，都是类的属性</li></ol><p>类的用法<br><code>.</code>:专门用来访问属性，本质操作的就是<code>__dict__</code><br>BeidaStudent.school #等于经典类的操作<code>BeidaStudent.__dict__[&#39;school&#39;]</code><br>BeidaStudent.school=’beida’ #等于经典类的操<code>BeidaStudent.__dict__[&#39;school&#39;]=&#39;beida&#39;</code><br>BeidaStudent.x=1 #等于经典类的操作<code>BeidaStudent.__dict__[&#39;x&#39;]=1</code><br>del BeidaStudent.x #等于经典类的操作<code>BeidaStudent.__dict__.pop(&#39;x&#39;)</code></p><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><blockquote><p>构造函数是一种特殊的处理方法,用来在创建对象的时候初始化对象,即为对象变量赋初始值.</p><p>Python中类的构造函数用<code>__init__</code>命名</p></blockquote><p>程序中的对象<br>调用类称为实例化，得到对象<br>s1=BeidaStudent()<br>s2=BeidaStudent()<br>s3=BeidaStudent()</p><p>如此，s1、s2、s3都一样了，而这三者除了相似的属性之外还各种不同的属性，这就用到了<code>__init__</code><br><code>注意：</code>该方法是在对象产生之后才会执行，只用来为对象进行初始化操作，可以有任意代码，但一定不能有返回值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BeidaStudent</span>:</span><br><span class="line">    <span class="comment"># ...... 其他变量或函数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age,sex</span>):</span><br><span class="line">      self.name=name</span><br><span class="line">      self.age=age</span><br><span class="line">      self.sex=sex</span><br><span class="line">    <span class="comment"># ...... 其他变量或函数</span></span><br><span class="line"></span><br><span class="line">s1=BeidaStudent(<span class="string">&#x27;李大牛&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">18</span>) <span class="comment">#先调用类产生空对象s1，然后调用BeidaStudent.__init__(s1,&#x27;李坦克&#x27;,&#x27;男&#x27;,18)</span></span><br><span class="line">s2=BeidaStudent(<span class="string">&#x27;王大炮&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="number">38</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#程序中对象的用法</span></span><br><span class="line"><span class="comment">#执行__init__,s1.name=&#x27;李大牛&#x27;，很明显也会产生对象的名称空间</span></span><br><span class="line"><span class="built_in">print</span>(s2.__dict__) <span class="comment"># &gt;&gt;&gt; &#123;&#x27;name&#x27;: &#x27;王大炮&#x27;, &#x27;age&#x27;: &#x27;女&#x27;, &#x27;sex&#x27;: 38&#125;</span></span><br><span class="line">s2.name <span class="comment">#s2.__dict__[&#x27;name&#x27;]</span></span><br><span class="line">s2.name=<span class="string">&#x27;王三炮&#x27;</span> <span class="comment">#s2.__dict__[&#x27;name&#x27;]=&#x27;王三炮&#x27;</span></span><br><span class="line">s2.course=<span class="string">&#x27;python&#x27;</span> <span class="comment">#s2.__dict__[&#x27;course&#x27;]=&#x27;python&#x27;</span></span><br><span class="line"><span class="keyword">del</span> s2.course <span class="comment">#s2.__dict__.pop(&#x27;course&#x27;)</span></span><br></pre></td></tr></table></figure><p><code>__init__</code>方法之为对象定制自己独有的特征 该函数会在调用类时自动触发执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#__init__演变:</span></span><br><span class="line"><span class="comment">#方式一、为对象初始化自己独有的特征</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">People</span>:</span><br><span class="line">    country=<span class="string">&#x27;China&#x27;</span></span><br><span class="line">    x=<span class="number">1</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;-----&gt;&#x27;</span>, self)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化出三个空对象</span></span><br><span class="line">obj1=People()</span><br><span class="line">obj2=People()</span><br><span class="line">obj3=People()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为对象定制自己独有的特征</span></span><br><span class="line">obj1.name=<span class="string">&#x27;allen&#x27;</span></span><br><span class="line">obj1.age=<span class="number">18</span></span><br><span class="line">obj1.sex=<span class="string">&#x27;male&#x27;</span></span><br><span class="line"></span><br><span class="line">obj2.name=<span class="string">&#x27;lxx&#x27;</span></span><br><span class="line">obj2.age=<span class="number">38</span></span><br><span class="line">obj2.sex=<span class="string">&#x27;female&#x27;</span></span><br><span class="line"></span><br><span class="line">obj3.name=<span class="string">&#x27;alex&#x27;</span></span><br><span class="line">obj3.age=<span class="number">38</span></span><br><span class="line">obj3.sex=<span class="string">&#x27;female&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(obj1.__dict__)</span></span><br><span class="line"><span class="comment"># print(obj2.__dict__)</span></span><br><span class="line"><span class="comment"># print(obj3.__dict__)</span></span><br><span class="line"><span class="comment"># print(People.__dict__)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#方式二、为对象初始化自己独有的特征</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">People</span>:</span><br><span class="line">    country=<span class="string">&#x27;China&#x27;</span></span><br><span class="line">    x=<span class="number">1</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;-----&gt;&#x27;</span>, self)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化出三个空对象</span></span><br><span class="line">obj1=People()</span><br><span class="line">obj2=People()</span><br><span class="line">obj3=People()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为对象定制自己独有的特征</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chu_shi_hua</span>(<span class="params">obj, x, y, z</span>): <span class="comment">#obj=obj1,x=&#x27;allen&#x27;,y=18,z=&#x27;male&#x27;</span></span><br><span class="line">    obj.name = x</span><br><span class="line">    obj.age = y</span><br><span class="line">    obj.sex = z</span><br><span class="line"></span><br><span class="line">chu_shi_hua(obj1,<span class="string">&#x27;allen&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;male&#x27;</span>)</span><br><span class="line">chu_shi_hua(obj2,<span class="string">&#x27;lxx&#x27;</span>,<span class="number">38</span>,<span class="string">&#x27;female&#x27;</span>)</span><br><span class="line">chu_shi_hua(obj3,<span class="string">&#x27;alex&#x27;</span>,<span class="number">38</span>,<span class="string">&#x27;female&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#方式三、为对象初始化自己独有的特征</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">People</span>:</span><br><span class="line">    country=<span class="string">&#x27;China&#x27;</span></span><br><span class="line">    x=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">chu_shi_hua</span>(<span class="params">obj, x, y, z</span>): <span class="comment">#obj=obj1,x=&#x27;allen&#x27;,y=18,z=&#x27;male&#x27;</span></span><br><span class="line">        obj.name = x</span><br><span class="line">        obj.age = y</span><br><span class="line">        obj.sex = z</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;-----&gt;&#x27;</span>, self)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj1=People()</span><br><span class="line"><span class="comment"># print(People.chu_shi_hua)</span></span><br><span class="line">People.chu_shi_hua(obj1,<span class="string">&#x27;allen&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;male&#x27;</span>)</span><br><span class="line"></span><br><span class="line">obj2=People()</span><br><span class="line">People.chu_shi_hua(obj2,<span class="string">&#x27;lxx&#x27;</span>,<span class="number">38</span>,<span class="string">&#x27;female&#x27;</span>)</span><br><span class="line"></span><br><span class="line">obj3=People()</span><br><span class="line">People.chu_shi_hua(obj3,<span class="string">&#x27;alex&#x27;</span>,<span class="number">38</span>,<span class="string">&#x27;female&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式四、为对象初始化自己独有的特征</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">People</span>:</span><br><span class="line">    country=<span class="string">&#x27;China&#x27;</span></span><br><span class="line">    x=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">obj, x, y, z</span>): <span class="comment">#obj=obj1,x=&#x27;allen&#x27;,y=18,z=&#x27;male&#x27;</span></span><br><span class="line">        obj.name = x</span><br><span class="line">        obj.age = y</span><br><span class="line">        obj.sex = z</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;-----&gt;&#x27;</span>, self)</span><br><span class="line"></span><br><span class="line">obj1=People(<span class="string">&#x27;allen&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;male&#x27;</span>) <span class="comment">#People.__init__(obj1,&#x27;allen&#x27;,18,&#x27;male&#x27;)</span></span><br><span class="line">obj2=People(<span class="string">&#x27;lxx&#x27;</span>,<span class="number">38</span>,<span class="string">&#x27;female&#x27;</span>) <span class="comment">#People.__init__(obj2,&#x27;lxx&#x27;,38,&#x27;female&#x27;)</span></span><br><span class="line">obj3=People(<span class="string">&#x27;alex&#x27;</span>,<span class="number">38</span>,<span class="string">&#x27;female&#x27;</span>) <span class="comment">#People.__init__(obj3,&#x27;alex&#x27;,38,&#x27;female&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># __init__方法</span></span><br><span class="line"><span class="comment"># 强调：</span></span><br><span class="line"><span class="comment">#   1、该方法内可以有任意的python代码</span></span><br><span class="line"><span class="comment">#   2、一定不能有返回值</span></span><br><span class="line"><span class="comment">#   3、调用类自动触发执行</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">People</span>:</span><br><span class="line">    country=<span class="string">&#x27;China&#x27;</span></span><br><span class="line">    x=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">obj, name, age, sex</span>): <span class="comment">#obj=obj1,name=&#x27;allen&#x27;,age=18,sex=&#x27;male&#x27;</span></span><br><span class="line">        <span class="comment"># if type(name) is not str:</span></span><br><span class="line">        <span class="comment">#     raise TypeError(&#x27;名字必须是字符串类型&#x27;)</span></span><br><span class="line">        obj.name = name</span><br><span class="line">        obj.age = age</span><br><span class="line">        obj.sex = sex</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;-----&gt;&#x27;</span>, self)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj1=People(<span class="string">&#x27;allen&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;male&#x27;</span>) <span class="comment"># People(obj1,&#x27;allen&#x27;,18,&#x27;male&#x27;)</span></span><br><span class="line"><span class="comment">#obj1=People(3537,18,&#x27;male&#x27;) </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(obj1.run)</span></span><br><span class="line"><span class="comment"># obj1.run() #People.run(obj1)</span></span><br><span class="line"><span class="comment"># print(People.run)</span></span><br></pre></td></tr></table></figure><blockquote><p>PS： </p><ol><li><p>站的角度不同，定义出的类是截然不同的，详见面向对象实战之需求分析 </p></li><li><p>现实中的类并不完全等于程序中的类，比如现实中的公司类，在程序中有时需要拆分成部门类，业务类……  </p></li><li><p>有时为了编程需求，程序中也可能会定义现实中不存在的类，比如策略类，现实中并不存在，但是在程序中却是一个很常见的类 </p></li></ol></blockquote><h2 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h2><blockquote><p>析构函数是构造函数的反函数,在销毁(释放)对象时调用它们.析构函数往往用来做“清理善后”的工作.</p><p>例如数据库链接对象可以在析构函数中释放对数据库资源的占用.</p><p>Python中为类定义析构函数的方式是:在类中定义一个<code>__del__</code>的没有返回值和参数的函数.</p></blockquote><p>注：如果产生的对象仅仅只是python程序级别的（用户级），那么无需定义<strong>del</strong>,如果产生的对象的同时还会向操作系统发起系统调用，即一个对象有用户级与内核级两种资源，比如（打开一个文件，创建一个数据库链接），则必须在清除对象的同时回收系统资源，这就用到了<code>__del__</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BeidaStudent</span>:</span><br><span class="line">    <span class="comment"># ...... 其他变量或函数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age,sex</span>):</span><br><span class="line">      self.name=name</span><br><span class="line">      self.age=age</span><br><span class="line">      self.sex=sex</span><br><span class="line">    <span class="comment"># ...... 其他变量或函数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;对象实例化结束&quot;</span>)</span><br><span class="line"></span><br><span class="line">s1=BeidaStudent(<span class="string">&#x27;李大牛&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">18</span>) <span class="comment">#先调用类产生空对象s1，然后调用BeidaStudent.__init__(s1,&#x27;李坦克&#x27;,&#x27;男&#x27;,18)</span></span><br><span class="line">s1.run()</span><br><span class="line"><span class="comment"># 用__del__释放对象时析构函数会自动调用,代码运行结果如下</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt; 李大牛</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt; 对象实例化结束</span></span><br></pre></td></tr></table></figure><p>典型的应用场景：</p><p>创建数据库类，用该类实例化出数据库链接对象，对象本身是存放于用户空间内存中，而链接则是由操作系统管理的，存放于内核空间内存中</p><p>当程序结束时，python只会回收自己的内存空间，即用户态内存，而操作系统的资源则没有被回收，这就需要我们定制<code>__del__</code>，在对象被删除前向操作系统发起关闭数据库链接的系统调用，回收资源</p><p>这与文件处理是一个道理：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">f=<span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>) <span class="comment">#做了两件事，在用户空间拿到一个f变量，在操作系统内核空间打开一个文件</span></span><br><span class="line"><span class="keyword">del</span> f <span class="comment">#只回收用户空间的f，操作系统的文件还处于打开状态</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#所以我们应该在del f之前保证f.close()执行,即便是没有del，程序执行完毕也会自动del清理资源，于是文件操作的正确用法应该是</span></span><br><span class="line">f=<span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>)</span><br><span class="line">读写...</span><br><span class="line">f.close()</span><br><span class="line">很多情况下大家都容易忽略f.close,这就用到了<span class="keyword">with</span>上下文管理</span><br></pre></td></tr></table></figure><h2 id="类的特殊属性"><a href="#类的特殊属性" class="headerlink" title="类的特殊属性"></a>类的特殊属性</h2><p><code>(了解即可)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python为类内置的特殊属性 </span></span><br><span class="line"></span><br><span class="line">类名.__name__<span class="comment"># 类的名字(字符串)</span></span><br><span class="line">类名.__doc__<span class="comment"># 类的文档字符串</span></span><br><span class="line">类名.__base__<span class="comment"># 类的第一个父类(在讲继承时会讲)</span></span><br><span class="line">类名.__bases__<span class="comment"># 类所有父类构成的元组(在讲继承时会讲)</span></span><br><span class="line">类名.__dict__<span class="comment"># 类的字典属性</span></span><br><span class="line">类名.__module__<span class="comment"># 类定义所在的模块</span></span><br><span class="line">类名.__class__<span class="comment"># 实例对应的类(仅新式类中)</span></span><br></pre></td></tr></table></figure><h2 id="从代码级别看面向对象"><a href="#从代码级别看面向对象" class="headerlink" title="从代码级别看面向对象"></a>从代码级别看面向对象</h2><p>数据与专门操作该数据的功能组合到一起</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、在没有学习类这个概念时，数据与功能是分离的</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exc1</span>(<span class="params">host,port,db,charset</span>):</span><br><span class="line">    conn=connect(host,port,db,charset)</span><br><span class="line">    conn.execute(sql)</span><br><span class="line">    <span class="keyword">return</span> xxx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exc2</span>(<span class="params">host,port,db,charset,proc_name</span>)</span><br><span class="line">    conn=connect(host,port,db,charset)</span><br><span class="line">    conn.call_proc(sql)</span><br><span class="line">    <span class="keyword">return</span> xxx</span><br><span class="line"></span><br><span class="line"><span class="comment">#每次调用都需要重复传入一堆参数</span></span><br><span class="line">exc1(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">3306</span>,<span class="string">&#x27;db1&#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>,<span class="string">&#x27;select * from tb1;&#x27;</span>)</span><br><span class="line">exc2(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">3306</span>,<span class="string">&#x27;db1&#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>,<span class="string">&#x27;存储过程的名字&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#2、我们能想到的解决方法是，把这些变量都定义成全局变量</span></span><br><span class="line">HOST=‘<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>’</span><br><span class="line">PORT=<span class="number">3306</span></span><br><span class="line">DB=‘db1’</span><br><span class="line">CHARSET=‘utf8’</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exc1</span>(<span class="params">host,port,db,charset</span>):</span><br><span class="line">    conn=connect(host,port,db,charset)</span><br><span class="line">    conn.execute(sql)</span><br><span class="line">    <span class="keyword">return</span> xxx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exc2</span>(<span class="params">host,port,db,charset,proc_name</span>)</span><br><span class="line">    conn=connect(host,port,db,charset)</span><br><span class="line">    conn.call_proc(sql)</span><br><span class="line">    <span class="keyword">return</span> xxx</span><br><span class="line"></span><br><span class="line">exc1(HOST,PORT,DB,CHARSET,<span class="string">&#x27;select * from tb1;&#x27;</span>)</span><br><span class="line">exc2(HOST,PORT,DB,CHARSET,<span class="string">&#x27;存储过程的名字&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#3、但是2的解决方法也是有问题的，按照2的思路，我们将会定义一大堆全局变量，这些全局变量并没有做任何区分，即能够被所有功能使用，然而事实上只有HOST，PORT，DB，CHARSET是给exc1和exc2这两个功能用的。言外之意：我们必须找出一种能够将数据与操作数据的方法组合到一起的解决方法，这就是我们说的类了</span></span><br><span class="line"><span class="comment"># 参数self是对象本身的引用,在成员函数体中可以引用self参数获得对象的信息.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MySQLHandler</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,host,port,db,charset=<span class="string">&#x27;utf8&#x27;</span></span>):</span><br><span class="line">        self.host=host</span><br><span class="line">        self.port=port</span><br><span class="line">        self.db=db</span><br><span class="line">        self.charset=charset</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">exc1</span>(<span class="params">self,sql</span>):</span><br><span class="line">        conn=connect(self.host,self.port,self.db,self.charset)</span><br><span class="line">        res=conn.execute(sql)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">exc2</span>(<span class="params">self,sql</span>):</span><br><span class="line">        conn=connect(self.host,self.port,self.db,self.charset)</span><br><span class="line">        res=conn.call_proc(sql)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj=MySQLHandler(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">3306</span>,<span class="string">&#x27;db1&#x27;</span>)</span><br><span class="line">obj.exc1(<span class="string">&#x27;select * from tb1;&#x27;</span>)</span><br><span class="line">obj.exc2(<span class="string">&#x27;存储过程的名字&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#改进</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MySQLHandler</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,host,port,db,charset=<span class="string">&#x27;utf8&#x27;</span></span>):</span><br><span class="line">        self.host=host</span><br><span class="line">        self.port=port</span><br><span class="line">        self.db=db</span><br><span class="line">        self.charset=charset</span><br><span class="line">        self.conn=connect(self.host,self.port,self.db,self.charset)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">exc1</span>(<span class="params">self,sql</span>):</span><br><span class="line">        <span class="keyword">return</span> self.conn.execute(sql)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">exc2</span>(<span class="params">self,sql</span>):</span><br><span class="line">        <span class="keyword">return</span> self.conn.call_proc(sql)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用类---》产生类的对象，该对象也可以称为类的一个实例，调用类的过程也称为类的实例化</span></span><br><span class="line">obj=MySQLHandler(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">3306</span>,<span class="string">&#x27;db1&#x27;</span>)</span><br><span class="line">obj.exc1(<span class="string">&#x27;select * from tb1;&#x27;</span>)</span><br><span class="line">obj.exc2(<span class="string">&#x27;存储过程的名字&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="属性查找"><a href="#属性查找" class="headerlink" title="属性查找"></a>属性查找</h2> <div class="note info flat"><p>类有两种属性：数据属性和函数属性</p><p><em>1. 类的数据属性是所有对象共享的</em></p><p><em>2. 类的函数属性是绑定给对象用的</em></p></div> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BeidaStudent</span>:</span><br><span class="line">    school=<span class="string">&#x27;北大&#x27;</span></span><br><span class="line">    <span class="comment"># ...... 其他变量或函数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age,sex</span>):</span><br><span class="line">      self.name=name</span><br><span class="line">      self.age=age</span><br><span class="line">      self.sex=sex</span><br><span class="line">    <span class="comment"># ...... 其他变量或函数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.name)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># def __del__(self):</span></span><br><span class="line">    <span class="comment">#     print(&quot;对象实例化结束&quot;)</span></span><br><span class="line"></span><br><span class="line">s1=BeidaStudent(<span class="string">&#x27;李大牛&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">18</span>) <span class="comment">#先调用类产生空对象s1，然后调用BeidaStudent.__init__(s1,&#x27;李坦克&#x27;,&#x27;男&#x27;,18)</span></span><br><span class="line">s2=BeidaStudent(<span class="string">&#x27;大锤&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">11</span>)</span><br><span class="line">s3=BeidaStudent(<span class="string">&#x27;赵三&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#类的数据属性是所有对象共享的,id都一样</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(BeidaStudent.school))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(s1.school))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(s2.school))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(s3.school))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">4332785800</span></span><br><span class="line"><span class="string">4332785800</span></span><br><span class="line"><span class="string">4332785800</span></span><br><span class="line"><span class="string">4332785800</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#类的函数属性是绑定给对象使用的,obj.method称为绑定方法,内存地址都不一样</span></span><br><span class="line"><span class="comment">#ps:id是python的实现机制,并不能真实反映内存地址,如果有内存地址,还是以内存地址为准</span></span><br><span class="line"><span class="built_in">print</span>(BeidaStudent.run)</span><br><span class="line"><span class="built_in">print</span>(s1.run)</span><br><span class="line"><span class="built_in">print</span>(s2.run)</span><br><span class="line"><span class="built_in">print</span>(s3.run)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;function BeidaStudent.run at 0x102c22730&gt;</span></span><br><span class="line"><span class="string">&lt;bound method BeidaStudent.run of &lt;__main__.BeidaStudent object at 0x102c1e6a0&gt;&gt;</span></span><br><span class="line"><span class="string">&lt;bound method BeidaStudent.run of &lt;__main__.BeidaStudent object at 0x102c1e7f0&gt;&gt;</span></span><br><span class="line"><span class="string">&lt;bound method BeidaStudent.run of &lt;__main__.BeidaStudent object at 0x102c1e780&gt;&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="1036857-20180412100925876-873684320.png" alt="img">在obj.name会先从obj自己的名称空间里找name，找不到则去类中找，类也找不到就找父类…最后都找不到就抛出异常  </p><h2 id="绑定到对象的方法的特殊之处"><a href="#绑定到对象的方法的特殊之处" class="headerlink" title="绑定到对象的方法的特殊之处"></a>绑定到对象的方法的特殊之处</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#改写</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BeidaStudent</span>:</span><br><span class="line">    school=<span class="string">&#x27;Beida&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age,sex</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">        self.sex=sex</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">learn</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s is learning&#x27;</span> %self.name) <span class="comment">#新增self.name</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s is eating&#x27;</span> %self.name)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sleep</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s is sleeping&#x27;</span> %self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s1=BeidaStudent(<span class="string">&#x27;李坦克&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">18</span>)</span><br><span class="line">s2=BeidaStudent(<span class="string">&#x27;王大炮&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="number">38</span>)</span><br><span class="line">s3=BeidaStudent(<span class="string">&#x27;牛榴弹&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">78</span>)</span><br></pre></td></tr></table></figure><p>类中定义的函数（没有被任何装饰器装饰的）是类的函数属性，类可以使用，但必须遵循函数的参数规则，有几个参数需要传几个参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BeidaStudent.learn(s1) <span class="comment">#李坦克 is learning</span></span><br><span class="line">BeidaStudent.learn(s2) <span class="comment">#王大炮 is learning</span></span><br><span class="line">BeidaStudent.learn(s3) <span class="comment">#牛榴弹 is learning</span></span><br></pre></td></tr></table></figure><p>类中定义的函数（没有被任何装饰器装饰的）,其实主要是给对象使用的，而且是绑定到对象的，虽然所有对象指向的都是相同的功能，但是绑定到不同的对象就是不同的绑定方法</p><p>强调：绑定到对象的方法的特殊之处在于，绑定给谁就由谁来调用，谁来调用，就会将‘谁’本身当做第一个参数传给方法，即自动传值（方法<strong>init</strong>也是一样的道理）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s1.learn() <span class="comment">#等同于BeidaStudent.learn(s1)</span></span><br><span class="line">s2.learn() <span class="comment">#等同于BeidaStudent.learn(s2)</span></span><br><span class="line">s3.learn() <span class="comment">#等同于BeidaStudent.learn(s3)</span></span><br></pre></td></tr></table></figure><p>注意：绑定到对象的方法的这种自动传值的特征，决定了在类中定义的函数都要默认写一个参数self，self可以是任意名字，但是约定俗成地写出self。</p><p>类即类型</p><p>　　提示：python的class术语与c++有一定区别，与 Modula-3更像。</p><p>　　python中一切皆为对象，且python3中类与类型是一个概念，类型就是类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#类型dict就是类dict</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span></span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;list&#x27;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#实例化的到3个对象l1,l2,l3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l1=<span class="built_in">list</span>()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l2=<span class="built_in">list</span>()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l3=<span class="built_in">list</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">#三个对象都有绑定方法append,是相同的功能,但内存地址不同</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l1.append</span><br><span class="line">&lt;built-<span class="keyword">in</span> method append of <span class="built_in">list</span> <span class="built_in">object</span> at <span class="number">0x10b482b48</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l2.append</span><br><span class="line">&lt;built-<span class="keyword">in</span> method append of <span class="built_in">list</span> <span class="built_in">object</span> at <span class="number">0x10b482b88</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l3.append</span><br><span class="line">&lt;built-<span class="keyword">in</span> method append of <span class="built_in">list</span> <span class="built_in">object</span> at <span class="number">0x10b482bc8</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#操作绑定方法l1.append(3),就是在往l1添加3,绝对不会将3添加到l2或l3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l1.append(<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l1</span><br><span class="line">[<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l2</span><br><span class="line">[]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l3</span><br><span class="line">[]</span><br><span class="line"><span class="comment">#调用类list.append(l3,111)等同于l3.append(111)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>.append(l3,<span class="number">111</span>) <span class="comment">#l3.append(111)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l3</span><br><span class="line">[<span class="number">111</span>] </span><br></pre></td></tr></table></figure><h2 id="对象之间的交互"><a href="#对象之间的交互" class="headerlink" title="对象之间的交互"></a>对象之间的交互</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Garen</span>:        <span class="comment">#定义英雄盖伦的类，不同的玩家可以用它实例出自己英雄;</span></span><br><span class="line">    camp=<span class="string">&#x27;Demacia&#x27;</span>  <span class="comment">#所有玩家的英雄(盖伦)的阵营都是Demacia;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,nickname,aggressivity=<span class="number">58</span>,life_value=<span class="number">455</span></span>): <span class="comment">#英雄的初始攻击力58...;</span></span><br><span class="line">        self.nickname=nickname  <span class="comment">#为自己的盖伦起个别名;</span></span><br><span class="line">        self.aggressivity=aggressivity <span class="comment">#英雄都有自己的攻击力;</span></span><br><span class="line">        self.life_value=life_value <span class="comment">#英雄都有自己的生命值;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">attack</span>(<span class="params">self,enemy</span>):   <span class="comment">#普通攻击技能，enemy是敌人;</span></span><br><span class="line">        enemy.life_value-=self.aggressivity <span class="comment">#根据自己的攻击力，攻击敌人就减掉敌人的生命值。</span></span><br></pre></td></tr></table></figure><p>我们可以仿照garen类再创建一个Riven类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Riven</span>:</span><br><span class="line">    camp=<span class="string">&#x27;Noxus&#x27;</span>  <span class="comment">#所有玩家的英雄(锐雯)的阵营都是Noxus;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,nickname,aggressivity=<span class="number">54</span>,life_value=<span class="number">414</span></span>): <span class="comment">#英雄的初始攻击力54;</span></span><br><span class="line">        self.nickname=nickname  <span class="comment">#为自己的锐雯起个别名;</span></span><br><span class="line">        self.aggressivity=aggressivity <span class="comment">#英雄都有自己的攻击力;</span></span><br><span class="line">        self.life_value=life_value <span class="comment">#英雄都有自己的生命值;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">attack</span>(<span class="params">self,enemy</span>):   <span class="comment">#普通攻击技能，enemy是敌人;</span></span><br><span class="line">        enemy.life_value-=self.aggressivity <span class="comment">#根据自己的攻击力，攻击敌人就减掉敌人的生命值。 </span></span><br></pre></td></tr></table></figure><p>实例出俩英雄</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>g1=Garen(<span class="string">&#x27;草丛伦&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r1=Riven(<span class="string">&#x27;锐雯雯&#x27;</span>)</span><br><span class="line">​```python</span><br><span class="line"></span><br><span class="line">交互：锐雯雯攻击草丛伦，反之一样</span><br><span class="line"></span><br><span class="line">​```python</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g1.life_value</span><br><span class="line"><span class="number">455</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r1.attack(g1)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g1.life_value</span><br><span class="line"><span class="number">401</span> </span><br></pre></td></tr></table></figure><p>上边看懂了,就看看优化后的代码吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">YingXiong</span>:        <span class="comment">#定义英雄盖伦的类，不同的玩家可以用它实例出自己英雄;</span></span><br><span class="line">    <span class="comment"># camp=&#x27;Demacia&#x27;  #所有玩家的英雄(盖伦)的阵营都是Demacia;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,nickname,aggressivity,life_value,camp</span>): <span class="comment">#英雄的初始攻击力58...;</span></span><br><span class="line">        self.nickname=nickname  <span class="comment">#为自己的盖伦起个别名;</span></span><br><span class="line">        self.aggressivity=aggressivity <span class="comment">#英雄都有自己的攻击力;</span></span><br><span class="line">        self.life_value=life_value <span class="comment">#英雄都有自己的生命值;</span></span><br><span class="line">        self.camp=camp</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">attack</span>(<span class="params">self,enemy</span>):   <span class="comment">#普通攻击技能，enemy是敌人;</span></span><br><span class="line">        <span class="keyword">if</span> self.camp!=enemy.camp:       <span class="comment">#  不是同阵营的才攻击成功</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;阵营分别来自：&#x27;</span>,self.camp,enemy.camp)</span><br><span class="line">            enemy.life_value-=self.aggressivity <span class="comment">#根据自己的攻击力，攻击敌人就减掉敌人的生命值。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gaiLun=YingXiong(<span class="string">&#x27;盖伦&#x27;</span>,<span class="number">11</span>,<span class="number">60</span>,<span class="string">&#x27;Demacia&#x27;</span>)</span><br><span class="line">ruiWen=YingXiong(<span class="string">&#x27;锐雯&#x27;</span>,<span class="number">22</span>,<span class="number">30</span>,<span class="string">&#x27;Noxus&#x27;</span>)</span><br><span class="line">gaiLun.attack(ruiWen)   <span class="comment"># 盖伦打了锐雯一下</span></span><br><span class="line"><span class="built_in">print</span>(ruiWen.life_value)    <span class="comment"># 查看攻击后锐雯的血量</span></span><br><span class="line">ruiWen.attack(gaiLun)   <span class="comment"># 锐雯打了盖伦一下</span></span><br><span class="line"><span class="built_in">print</span>(gaiLun.life_value)    <span class="comment"># 查看攻击后盖伦的血量</span></span><br><span class="line"></span><br><span class="line">‘’‘</span><br><span class="line">阵营分别来自： Demacia Noxus</span><br><span class="line"><span class="number">19</span></span><br><span class="line">阵营分别来自： Noxus Demacia</span><br><span class="line"><span class="number">38</span></span><br><span class="line">’‘’</span><br></pre></td></tr></table></figure><p>补充：</p><p>　　garen_hero.Q()称为向garen_hero这个对象发送了一条消息，让他去执行Q这个功能，类似的有：</p><p>　　garen_hero.W()</p><p>　　garen_hero.E()</p><p>　　garen_hero.R()</p><h1 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h1><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p> 面向对象编程有三大特性：<code>封装</code>、<code>继承</code>、<code>多态</code>，其中最重要的一个特性就是封装。封装指的就是把数据与功能都整合到一起，听起来是不是很熟悉，没错我们之前所说的”整合“二字其实就是封装的通俗说法。</p><p>封装的真谛在于明确地区分内外，封装的属性可以直接在内部使用，而不能被外部直接使用，然而定义属性的目的终归是要用，外部要想用类隐藏的属性，需要我们为其开辟接口，让外部能够间接地用到我们隐藏起来的属性</p><p>除此之外，针对封装到对象或者类中的属性，我们还可以严格控制对它们的访问，分两步实现：隐藏与开放接口</p><h2 id="隐藏属性"><a href="#隐藏属性" class="headerlink" title="隐藏属性"></a>隐藏属性</h2><p>Python的Class机制采用双下划线开头的方式将属性隐藏起来（设置成私有的），但其实这仅仅只是一种变形操作，类中所有双下滑线开头的属性都会在类定义阶段、检测语法时自动变成“<em>类名_</em>属性名”的形式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>:</span><br><span class="line">    __N=<span class="number">0</span> <span class="comment"># 变形为_Foo__N</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>): <span class="comment"># 定义函数时，会检测函数语法，所以__开头的属性也会变形</span></span><br><span class="line">        self.__x=<span class="number">10</span> <span class="comment"># 变形为self._Foo__x</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__f1</span>(<span class="params">self</span>): <span class="comment"># 变形为_Foo__f1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;__f1 run&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f2</span>(<span class="params">self</span>):  <span class="comment"># 定义函数时，会检测函数语法，所以__开头的属性也会变形</span></span><br><span class="line">        self.__f1() <span class="comment">#变形为self._Foo__f1()</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Foo.__N) <span class="comment"># 报错AttributeError:类Foo没有属性__N</span></span><br><span class="line"></span><br><span class="line">obj = Foo()</span><br><span class="line"><span class="built_in">print</span>(obj.__x) <span class="comment"># 报错AttributeError:对象obj没有属性__x</span></span><br></pre></td></tr></table></figure><p>这种变形需要注意的问题是：</p><p>1、在类外部无法直接访问双下滑线开头的属性，但知道了类名和属性名就可以拼出名字：<em>类名`_</em>属性<code>，然后就可以访问了，如</code>Foo. _Foo__N`，所以说这种操作并没有严格意义上地限制外部访问，仅仅只是一种语法意义上的变形。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Foo.__dict__</span><br><span class="line">mappingproxy(&#123;..., <span class="string">&#x27;_Foo__N&#x27;</span>: <span class="number">0</span>, ...&#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.__dict__</span><br><span class="line">&#123;<span class="string">&#x27;_Foo__x&#x27;</span>: <span class="number">10</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Foo._Foo__N</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj._Foo__x</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj._Foo__N</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><p>2、在类内部是可以直接访问双下滑线开头的属性的，比如self.__f1()，因为在类定义阶段类内部双下滑线开头的属性统一发生了变形。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.f2()</span><br><span class="line">__f1 run</span><br></pre></td></tr></table></figure><p>3、变形操作只在类定义阶段发生一次,在类定义之后的赋值操作，不会变形。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Foo.__M=<span class="number">100</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Foo.__dict__</span><br><span class="line">mappingproxy(&#123;..., <span class="string">&#x27;__M&#x27;</span>: <span class="number">100</span>,...&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Foo.__M</span><br><span class="line"><span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.__y=<span class="number">20</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.__dict__</span><br><span class="line">&#123;<span class="string">&#x27;__y&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;_Foo__x&#x27;</span>: <span class="number">10</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.__y</span><br><span class="line"><span class="number">20</span></span><br></pre></td></tr></table></figure><h2 id="开放接口"><a href="#开放接口" class="headerlink" title="开放接口"></a>开放接口</h2><p>定义属性就是为了使用，所以隐藏并不是目的</p><h3 id="隐藏数据属性"><a href="#隐藏数据属性" class="headerlink" title="隐藏数据属性"></a>隐藏数据属性</h3><p>将数据隐藏起来就限制了类外部对数据的直接操作，然后类内应该提供相应的接口来允许类外部间接地操作数据，接口之上可以附加额外的逻辑来对数据的操作进行严格地控制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">class</span> <span class="title class_">Teacher</span>:</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>): <span class="comment">#将名字和年纪都隐藏起来</span></span><br><span class="line"><span class="meta">... </span>        self.__name=name</span><br><span class="line"><span class="meta">... </span>        self.__age=age</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">def</span> <span class="title function_">tell_info</span>(<span class="params">self</span>): <span class="comment">#对外提供访问老师信息的接口</span></span><br><span class="line"><span class="meta">... </span>        <span class="built_in">print</span>(<span class="string">&#x27;姓名:%s,年龄:%s&#x27;</span> %(self.__name,self.__age))</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">def</span> <span class="title function_">set_info</span>(<span class="params">self,name,age</span>): <span class="comment">#对外提供设置老师信息的接口，并附加类型检查的逻辑</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(name,<span class="built_in">str</span>):</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;姓名必须是字符串类型&#x27;</span>)</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(age,<span class="built_in">int</span>):</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;年龄必须是整型&#x27;</span>)</span><br><span class="line"><span class="meta">... </span>        self.__name=name</span><br><span class="line"><span class="meta">... </span>        self.__age=age</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t=Teacher(<span class="string">&#x27;lili&#x27;</span>,<span class="number">18</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.set_info(‘LiLi<span class="string">&#x27;,&#x27;</span><span class="number">19</span><span class="string">&#x27;) # 年龄不为整型，抛出异常</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span></span><br><span class="line"><span class="string">  File &quot;&lt;stdin&gt;&quot;, line 11, in set_info</span></span><br><span class="line"><span class="string">TypeError: 年龄必须是整型</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; t.set_info(&#x27;</span>LiLi<span class="string">&#x27;,19) # 名字为字符串类型，年龄为整形，可以正常设置</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; t.tell_info() # 查看老师的信息</span></span><br><span class="line"><span class="string">姓名:LiLi,年龄:19</span></span><br></pre></td></tr></table></figure><h3 id="隐藏函数属性"><a href="#隐藏函数属性" class="headerlink" title="隐藏函数属性"></a>隐藏函数属性</h3><p>目的是为了隔离复杂度，例如ATM程序的取款功能,该功能有很多其他功能组成，比如插卡、身份认证、输入金额、打印小票、取钱等，而对使用者来说,只需要开发取款这个功能接口即可,其余功能我们都可以隐藏起来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">class</span> <span class="title class_">ATM</span>:</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">def</span> <span class="title function_">__card</span>(<span class="params">self</span>): <span class="comment">#插卡</span></span><br><span class="line"><span class="meta">... </span>        <span class="built_in">print</span>(<span class="string">&#x27;插卡&#x27;</span>)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">def</span> <span class="title function_">__auth</span>(<span class="params">self</span>): <span class="comment">#身份认证</span></span><br><span class="line"><span class="meta">... </span>        <span class="built_in">print</span>(<span class="string">&#x27;用户认证&#x27;</span>)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">def</span> <span class="title function_">__input</span>(<span class="params">self</span>): <span class="comment">#输入金额</span></span><br><span class="line"><span class="meta">... </span>        <span class="built_in">print</span>(<span class="string">&#x27;输入取款金额&#x27;</span>)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">def</span> <span class="title function_">__print_bill</span>(<span class="params">self</span>): <span class="comment">#打印小票</span></span><br><span class="line"><span class="meta">... </span>        <span class="built_in">print</span>(<span class="string">&#x27;打印账单&#x27;</span>)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">def</span> <span class="title function_">__take_money</span>(<span class="params">self</span>): <span class="comment">#取钱</span></span><br><span class="line"><span class="meta">... </span>        <span class="built_in">print</span>(<span class="string">&#x27;取款&#x27;</span>)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">def</span> <span class="title function_">withdraw</span>(<span class="params">self</span>): <span class="comment">#取款功能</span></span><br><span class="line"><span class="meta">... </span>        self.__card()</span><br><span class="line"><span class="meta">... </span>        self.__auth()</span><br><span class="line"><span class="meta">... </span>        self.__<span class="built_in">input</span>()</span><br><span class="line"><span class="meta">... </span>        self.__print_bill()</span><br><span class="line"><span class="meta">... </span>        self.__take_money()</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj=ATM()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.withdraw()</span><br></pre></td></tr></table></figure><p>总结隐藏属性与开放接口，本质就是为了明确地区分内外，类内部可以修改封装内的东西而不影响外部调用者的代码；而类外部只需拿到一个接口，只要接口名、参数不变，则无论设计者如何改变内部实现代码，使用者均无需改变代码。这就提供一个良好的合作基础，只要接口这个基础约定不变，则代码的修改不足为虑。</p><h2 id="property-函数变数据属性"><a href="#property-函数变数据属性" class="headerlink" title="property 函数变数据属性"></a>property 函数变数据属性</h2><p>Python专门提供 了一个装饰器property，可以将类中的函数“伪装成”对象的数据属性，对象在访问该特殊属性时会触发功能的执行，然后将返回值作为本次访问的结果， 例如</p><p>体质指数（BMI）=体重（kg）÷身高^2（m）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">class</span> <span class="title class_">People</span>:</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,weight,height</span>):</span><br><span class="line"><span class="meta">... </span>        self.name=name</span><br><span class="line"><span class="meta">... </span>        self.weight=weight</span><br><span class="line"><span class="meta">... </span>        self.height=height</span><br><span class="line"><span class="meta">... </span>    @<span class="built_in">property</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">def</span> <span class="title function_">bmi</span>(<span class="params">self</span>):</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> self.weight / (self.height**<span class="number">2</span>)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj=People(<span class="string">&#x27;lili&#x27;</span>,<span class="number">75</span>,<span class="number">1.85</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.bmi <span class="comment">#触发方法bmi的执行，将obj自动传给self，执行后返回值作为本次引用的结果</span></span><br><span class="line"><span class="number">21.913805697589478</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.bmi() <span class="comment"># TypeError: &#x27;float&#x27; object is not callable</span></span><br></pre></td></tr></table></figure><p>使用property有效地保证了属性访问的一致性。另外property还提供设置和删除属性的功能，如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">class</span> <span class="title class_">Foo</span>:</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,val</span>):</span><br><span class="line"><span class="meta">... </span>        self.__NAME=val <span class="comment">#将属性隐藏起来</span></span><br><span class="line"><span class="meta">... </span>    @<span class="built_in">property</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">self</span>):</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> self.__NAME</span><br><span class="line"><span class="meta">... </span>    @name.setter</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">self,value</span>):</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(value,<span class="built_in">str</span>):  <span class="comment">#在设定值之前进行类型检查</span></span><br><span class="line"><span class="meta">... </span>            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;%s must be str&#x27;</span> %value)</span><br><span class="line"><span class="meta">... </span>        self.__NAME=value <span class="comment">#通过类型检查后,将值value存放到真实的位置self.__NAME</span></span><br><span class="line"><span class="meta">... </span>    @name.deleter</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">self</span>):</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">raise</span> PermissionError(<span class="string">&#x27;Can not delete&#x27;</span>)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f=Foo(<span class="string">&#x27;lili&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.name</span><br><span class="line">lili</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.name=<span class="string">&#x27;LiLi&#x27;</span> <span class="comment">#触发name.setter装饰器对应的函数name(f,’Egon&#x27;)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.name=<span class="number">123</span> <span class="comment">#触发name.setter对应的的函数name(f,123),抛出异常TypeError</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> f.name <span class="comment">#触发name.deleter对应的函数name(f),抛出异常PermissionError</span></span><br></pre></td></tr></table></figure><h2 id="防止子类覆盖父类"><a href="#防止子类覆盖父类" class="headerlink" title="防止子类覆盖父类"></a>防止子类覆盖父类</h2><p>父类如果不想让子类覆盖自己的方法，可以采用双下划线开头的方式将方法设置为私有的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">class</span> <span class="title class_">Foo</span>:</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">def</span> <span class="title function_">__f1</span>(<span class="params">self</span>): <span class="comment"># 变形为_Foo__fa</span></span><br><span class="line"><span class="meta">... </span>        <span class="built_in">print</span>(<span class="string">&#x27;Foo.f1&#x27;</span>) </span><br><span class="line"><span class="meta">... </span>    <span class="keyword">def</span> <span class="title function_">f2</span>(<span class="params">self</span>):</span><br><span class="line"><span class="meta">... </span>        <span class="built_in">print</span>(<span class="string">&#x27;Foo.f2&#x27;</span>)</span><br><span class="line"><span class="meta">... </span>        self.__f1() <span class="comment"># 变形为self._Foo__fa,因而只会调用自己所在的类中的方法</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">class</span> <span class="title class_">Bar</span>(<span class="title class_ inherited__">Foo</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">def</span> <span class="title function_">__f1</span>(<span class="params">self</span>): <span class="comment"># 变形为_Bar__f1</span></span><br><span class="line"><span class="meta">... </span>        <span class="built_in">print</span>(<span class="string">&#x27;Bar.f1&#x27;</span>)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=Bar()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.f2() <span class="comment">#在父类中找到f2方法，进而调用b._Foo__f1()方法，同样是在父类中找到该方法</span></span><br><span class="line">Foo.f2</span><br><span class="line">Foo.f1</span><br></pre></td></tr></table></figure><h1 id="继承与派生"><a href="#继承与派生" class="headerlink" title="继承与派生"></a>继承与派生</h1><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="初识继承"><a href="#初识继承" class="headerlink" title="初识继承"></a>初识继承</h3><p>什么是继承 </p><p>继承是一种创建新类的方式， 新建的类可以继承一个或多个父类（python支持多继承），父类又可称为基类或超类，新建的类称为派生类或子类。   </p><p>子类会“”遗传”父类的属性，从而解决代码重用问题</p><p>python中类的继承分为：单继承和多继承 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ParentClass1</span>: <span class="comment">#定义父类</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ParentClass2</span>: <span class="comment">#定义父类</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubClass1</span>(<span class="title class_ inherited__">ParentClass1</span>): <span class="comment">#单继承，基类是ParentClass1，派生类是SubClass1</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubClass2</span>(ParentClass1,ParentClass2): <span class="comment">#python支持多继承，用逗号分隔开多个继承的类</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>查看继承 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>SubClass1.__bases__ <span class="comment">#__base__只查看从左到右继承的第一个子类，__bases__则是查看所有继承的父类</span></span><br><span class="line">(&lt;<span class="keyword">class</span> <span class="string">&#x27;__main__.ParentClass1&#x27;</span>&gt;,)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>SubClass2.__bases__</span><br><span class="line">(&lt;<span class="keyword">class</span> <span class="string">&#x27;__main__.ParentClass1&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;__main__.ParentClass2&#x27;</span>&gt;)</span><br></pre></td></tr></table></figure><p>经典类与新式类 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>只有在python2中才分新式类和经典类，python3中统一都是新式类</span><br><span class="line"><span class="number">2.</span>在python2中，没有显式的继承<span class="built_in">object</span>类的类，以及该类的子类，都是经典类</span><br><span class="line"><span class="number">3.</span>在python2中，显式地声明继承<span class="built_in">object</span>的类，以及该类的子类，都是新式类</span><br><span class="line"><span class="number">3.</span>在python3中，无论是否继承<span class="built_in">object</span>，都默认继承<span class="built_in">object</span>，即python3中所有类均为新式类</span><br><span class="line"><span class="comment">#关于新式类与经典类的区别，我们稍后讨论</span></span><br></pre></td></tr></table></figure><p>提示：如果没有指定基类，python3的类会默认继承object类，object是所有python类的基类，它提供了一些常见方法（如<code>__str__</code>）的实现。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ParentClass1.__bases__</span><br><span class="line">(&lt;<span class="keyword">class</span> <span class="string">&#x27;object&#x27;</span>&gt;,)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ParentClass2.__bases__</span><br><span class="line">(&lt;<span class="keyword">class</span> <span class="string">&#x27;object&#x27;</span>&gt;,)</span><br></pre></td></tr></table></figure><h3 id="继承与抽象（先抽象再继承）"><a href="#继承与抽象（先抽象再继承）" class="headerlink" title="继承与抽象（先抽象再继承）"></a>继承与抽象（先抽象再继承）</h3><p>继承描述的是子类与父类之间的关系，是一种什么是什么的关系。要找出这种关系，必须先抽象再继承 </p><p>抽象即抽取类似或者说比较像的部分。</p><p>抽象分成两个层次： </p><p>1.将奥巴马和梅西这俩对象比较像的部分抽取成类； </p><p>2.将人，猪，狗这三个类比较像的部分抽取成父类。</p><p>抽象最主要的作用是划分类别（可以隔离关注点，降低复杂度）</p><p><img src="1036857-20170302102145407-280289124.png" alt="img"></p><p>继承：是基于抽象的结果，通过编程语言去实现它，肯定是先经历抽象这个过程，才能通过继承的方式去表达出抽象的结构。 </p><p>抽象只是分析和设计的过程中，一个动作或者说一种技巧，通过抽象可以得到类</p><p><img src="1036857-20170302062507110-1327024765.png" alt="img"></p><h3 id="继承与重用性"><a href="#继承与重用性" class="headerlink" title="继承与重用性"></a>继承与重用性</h3><p>使用继承来重用代码比较好的例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line">==========================第一部分</span><br><span class="line">例如</span><br><span class="line"></span><br><span class="line">　　猫可以：喵喵叫、吃、喝、拉、撒</span><br><span class="line"></span><br><span class="line">　　狗可以：汪汪叫、吃、喝、拉、撒</span><br><span class="line"></span><br><span class="line">如果我们要分别为猫和狗创建一个类，那么就需要为 猫 和 狗 实现他们所有的功能，伪代码如下：</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">#猫和狗有大量相同的内容</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">猫</span>：</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">喵喵叫</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;喵喵叫&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">吃</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># do something</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">喝</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># do something</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">拉</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># do something</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">撒</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># do something</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">狗</span>：</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">汪汪叫</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;喵喵叫&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">吃</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># do something</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">喝</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># do something</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">拉</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># do something</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">撒</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># do something</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">==========================第二部分</span><br><span class="line">上述代码不难看出，吃、喝、拉、撒是猫和狗都具有的功能，而我们却分别的猫和狗的类中编写了两次。如果使用 继承 的思想，如下实现：</span><br><span class="line"></span><br><span class="line">　　动物：吃、喝、拉、撒</span><br><span class="line"></span><br><span class="line">　　   猫：喵喵叫（猫继承动物的功能）</span><br><span class="line"></span><br><span class="line">　　   狗：汪汪叫（狗继承动物的功能）</span><br><span class="line"></span><br><span class="line">伪代码如下：</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">动物</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">吃</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># do something</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">喝</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># do something</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">拉</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># do something</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">撒</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># do something</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在类后面括号中写入另外一个类名，表示当前类继承另外一个类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">猫</span>(<span class="title class_ inherited__">动物</span>)：</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">喵喵叫</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;喵喵叫&#x27;</span></span><br><span class="line">        </span><br><span class="line"><span class="comment"># 在类后面括号中写入另外一个类名，表示当前类继承另外一个类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">狗</span>(<span class="title class_ inherited__">动物</span>)：</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">汪汪叫</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;喵喵叫&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">==========================第三部分</span><br><span class="line"><span class="comment">#继承的代码实现</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 吃 &quot;</span> %self.name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">drink</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;%s 喝 &quot;</span> %self.name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">shit</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;%s 拉 &quot;</span> %self.name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pee</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;%s 撒 &quot;</span> %self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.breed = <span class="string">&#x27;猫&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">cry</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;喵喵叫&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.breed=<span class="string">&#x27;狗&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">cry</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;汪汪叫&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ######### 执行 #########</span></span><br><span class="line"></span><br><span class="line">c1 = Cat(<span class="string">&#x27;小白家的小黑猫&#x27;</span>)</span><br><span class="line">c1.eat()</span><br><span class="line"></span><br><span class="line">c2 = Cat(<span class="string">&#x27;小黑的小白猫&#x27;</span>)</span><br><span class="line">c2.drink()</span><br><span class="line"></span><br><span class="line">d1 = Dog(<span class="string">&#x27;胖子家的小瘦狗&#x27;</span>)</span><br><span class="line">d1.eat()</span><br></pre></td></tr></table></figure><p> 在开发程序的过程中，如果我们定义了一个类A，然后又想新建立另外一个类B，但是类B的大部分内容与类A的相同时</p><p>我们不可能从头开始写一个类B，这就用到了类的继承的概念。</p><p>通过继承的方式新建类B，让B继承A，B会‘遗传’A的所有属性(数据属性和函数属性)，实现代码重用</p><p>举例: 学生与老师</p><ul><li><p>学生: 有姓名,年龄,性别;老师: 有姓名,年龄,性别</p></li><li><p>学生有选课,老师有给学生打分</p></li><li><p>保存学生与老师对象信息</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    school=<span class="string">&#x27;北大&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age,sex</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">        self.sex=sex</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">choose_course</span>(<span class="params">self,course</span>):    <span class="comment"># 选课   course=课程</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125; choosing course:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(self.name,course))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">save</span>(<span class="params">self</span>):     <span class="comment"># 保存对象</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(self.name),<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            pickle.dump(self,f)  <span class="comment"># dump不是dumps  dump(序列化对象，要保存的文件)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span>:</span><br><span class="line">    school=<span class="string">&#x27;北大&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age,sex</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">        self.sex=sex</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">score</span>(<span class="params">self,stu</span>):    <span class="comment"># 给学生打分  stu=学生对象</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125; is score &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(self.name,stu.name))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">save</span>(<span class="params">self</span>):     <span class="comment"># 保存对象</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(self.name),<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            pickle.dump(self,f)  <span class="comment"># dump不是dumps  dump(序列化对象，要保存的文件)</span></span><br><span class="line"></span><br><span class="line">stu1=Student(<span class="string">&#x27;俞渝&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">11</span>)</span><br><span class="line">tea1=Teacher(<span class="string">&#x27;allen&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">21</span>)</span><br><span class="line"></span><br><span class="line">stu1.choose_course(<span class="string">&#x27;python&#x27;</span>)</span><br><span class="line">tea1.score(stu1)</span><br><span class="line"></span><br><span class="line">stu1.save()</span><br><span class="line">tea1.save()</span><br></pre></td></tr></table></figure><p>从上一段代码中我们可以看出,学生与老师的 name,age,sex,save 都是重复的,那我们是不是可以生成一个父类,让学生与老师去继承这些相似之处呢?</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">People</span>():</span><br><span class="line">    school=<span class="string">&#x27;北大&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age,sex</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">        self.sex=sex</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">save</span>(<span class="params">self</span>):     <span class="comment"># 保存对象</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(self.name),<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            pickle.dump(self,f)  <span class="comment"># dump不是dumps  dump(序列化对象，要保存的文件)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">People</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">choose_course</span>(<span class="params">self,course</span>):    <span class="comment"># 选课   course=课程</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125; choosing course &#123;&#125;&quot;</span>.<span class="built_in">format</span>(self.name,course))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span>(<span class="title class_ inherited__">People</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">score</span>(<span class="params">self,stu</span>):    <span class="comment"># 给学生打分  stu=学生对象</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125; is score &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(self.name,stu.name))</span><br><span class="line"></span><br><span class="line">stu1=Student(<span class="string">&#x27;俞渝&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">11</span>)</span><br><span class="line">tea1=Teacher(<span class="string">&#x27;allen&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">21</span>,<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">stu1.choose_course(<span class="string">&#x27;python&#x27;</span>)</span><br><span class="line">tea1.score(stu1)</span><br><span class="line"></span><br><span class="line">stu1.save()</span><br><span class="line">tea1.save()</span><br></pre></td></tr></table></figure><p>提示：用已经有的类建立一个新的类，这样就重用了已经有的软件中的一部分设置, 大大省了编程工作量，这就是常说的软件重用，不仅可以重用自己的类，也可以继承别人的，比如标准库，来定制新的数据类型，这样就是大大缩短了软件开发周期，对大型软件开发来说，意义重大.</p><h2 id="属性查找-1"><a href="#属性查找-1" class="headerlink" title="属性查找"></a>属性查找</h2><p>有了继承关系，对象在查找属性时，先从对象自己的<code>__dict__</code>中找，如果没有则去子类中找，然后再去父类中找……</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f1</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Foo.f1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f2</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Foo.f2&#x27;</span>)</span><br><span class="line">        self.f1()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bar</span>(<span class="title class_ inherited__">Foo</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f1</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Bar.f1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">b=Bar()</span><br><span class="line">b.f2()</span><br><span class="line">‘’‘</span><br><span class="line">Foo.f2</span><br><span class="line">Bar.f1</span><br><span class="line">’‘’</span><br></pre></td></tr></table></figure><p>b.f2()会先在自己的Bar类中找f2,再去父类Foo中找到f2，找到f2然后先打印Foo.f2,然后执行到self.f1(),即b.f1()，仍会按照：对象本身-&gt;类Bar-&gt;父类Foo的顺序依次找下去，在类Bar中找到f1，因而打印结果为Bar.f1</p><p>父类如果不想让子类覆盖自己的方法，可以采用双下划线开头的方式将方法设置为私有的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__f1</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Foo.f1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f2</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Foo.f2&#x27;</span>)</span><br><span class="line">        self.__f1()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bar</span>(<span class="title class_ inherited__">Foo</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f1</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Bar.f1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">b=Bar()</span><br><span class="line">b.f2()</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Foo.f2</span></span><br><span class="line"><span class="string">Foo.f1</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="继承实现的原理"><a href="#继承实现的原理" class="headerlink" title="继承实现的原理"></a>继承实现的原理</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">G</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">F</span>(<span class="title class_ inherited__">G</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">E</span>(<span class="title class_ inherited__">G</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span>(<span class="title class_ inherited__">G</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>(<span class="title class_ inherited__">F</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>(<span class="title class_ inherited__">E</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(B,C,D):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="comment"># 新式类内置了mro方法可以查看线性列表的内容，经典类没有该内置该方法</span></span><br><span class="line"><span class="built_in">print</span>(A.mro())</span><br><span class="line"><span class="built_in">print</span>(B.mro())</span><br><span class="line"> </span><br><span class="line">[&lt;<span class="keyword">class</span> <span class="string">&#x27;__main__.A&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;__main__.B&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;__main__.E&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;__main__.C&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;__main__.F&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;__main__.D&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;__main__.G&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;object&#x27;</span>&gt;]</span><br><span class="line"></span><br><span class="line">[&lt;<span class="keyword">class</span> <span class="string">&#x27;__main__.B&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;__main__.E&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;__main__.G&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;object&#x27;</span>&gt;]</span><br></pre></td></tr></table></figure><p>MRO列表的构造是通过一个C3线性化算法来实现的，我们无需深究该算法的数学原理,它实际上就是合并所有父类的MRO列表，且在查找属性时，Python会基于MRO列表按照从左到右的顺序依次查找基类,直到找到第一个匹配这个属性的类为止。</p><p>在Python中子类可以同时继承多个父类，在子类继承了多个父类时，经典类与新式类会有不同MRO，分别对应属性的两种查找方式：深度优先和广度优先</p><p><img src="shenduyouxian.png" alt="深度优先"><br><img src="guangduyouxian.png" alt="广度优先"></p><h2 id="派生"><a href="#派生" class="headerlink" title="派生"></a>派生</h2><p>子类可以派生出自己新的属性，在进行属性查找时，子类中的属性名会优先于父类被查找，例如每个老师还有评级这一属性，我们就需要在Teacher类中定义该类自己的<code>__init__</code>覆盖父类的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">People</span>():</span><br><span class="line">    school=<span class="string">&#x27;北大&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age,sex</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">        self.sex=sex</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">save</span>(<span class="params">self</span>):     <span class="comment"># 保存对象</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(self.name),<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            pickle.dump(self,f)  <span class="comment"># dump不是dumps  dump(序列化对象，要保存的文件)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">People</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">choose_course</span>(<span class="params">self,course</span>):    <span class="comment"># 选课   course=课程</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125; choosing course:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(self.name,course))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span>(<span class="title class_ inherited__">People</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age,sex,level</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">        self.sex=sex</span><br><span class="line">        self.level=level</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">score</span>(<span class="params">self,stu</span>):    <span class="comment"># 给学生打分  stu=学生对象</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125; is score &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(self.name,stu.name))</span><br><span class="line"></span><br><span class="line">stu1=Student(<span class="string">&#x27;俞渝&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">11</span>)</span><br><span class="line">tea1=Teacher(<span class="string">&#x27;allen&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">21</span>,<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">stu1.choose_course(<span class="string">&#x27;python&#x27;</span>)</span><br><span class="line">tea1.score(stu1)</span><br><span class="line"></span><br><span class="line">stu1.save()</span><br><span class="line">tea1.save()</span><br></pre></td></tr></table></figure><p>很明显子类Teacher中<strong>init</strong>内的前三行又是在写重复代码，若想在子类派生出的方法内重用父类的功能，有两种实现方式</p><p>方法一：“指名道姓”地调用某一个类的函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span>(<span class="title class_ inherited__">People</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age,sex,level</span>):</span><br><span class="line">        <span class="comment"># People.__init__(self,name,age,sex)  # 在子类派生出的新方法中重用父类的功能，与继承没有关系</span></span><br><span class="line">        self.level=level</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">score</span>(<span class="params">self,stu</span>):    <span class="comment"># 给学生打分  stu=学生对象</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125; is score &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(self.name,stu.name))</span><br></pre></td></tr></table></figure><p>方法二：super()</p><p>调用super()会得到一个特殊的对象，该对象专门用来引用父类的属性，且严格按照MRO规定的顺序向后查找</p><p>提示：在Python2中super的使用需要完整地写成super(自己的类名,self) ,而在python3中可以简写为super()。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span>(<span class="title class_ inherited__">People</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age,sex,level</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(name,age,sex)  <span class="comment"># 在子类派生出的新方法中重用父类的功能，与继承没有关系</span></span><br><span class="line">        self.level=level</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">score</span>(<span class="params">self,stu</span>):    <span class="comment"># 给学生打分  stu=学生对象</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125; is score &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(self.name,stu.name))</span><br></pre></td></tr></table></figure><p>这两种方式的区别是：方式一是跟继承没有关系的，而方式二的super()是依赖于继承的，并且即使没有直接继承关系，super()仍然会按照MRO继续往后查找</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment">#A没有继承B</span></span><br><span class="line"><span class="meta">... </span><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">self</span>):</span><br><span class="line"><span class="meta">... </span>        <span class="built_in">super</span>().test()</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">class</span> <span class="title class_">B</span>:</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">self</span>):</span><br><span class="line"><span class="meta">... </span>        <span class="built_in">print</span>(<span class="string">&#x27;from B&#x27;</span>)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">class</span> <span class="title class_">C</span>(A,B):</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c=C() <span class="comment"># C.mro()结果为 [&lt;class &#x27;__main__.C&#x27;&gt;, &lt;class &#x27;__main__.A&#x27;&gt;, &lt;class &#x27;__main__.B&#x27;&gt;,&lt;class ‘object&#x27;&gt;]</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.test()</span><br><span class="line"><span class="keyword">from</span> B</span><br></pre></td></tr></table></figure><p>c.test()首先找到A下的test方法，执行super().test()会基于MRO列表当前所处的位置继续往后查找，然后在B中找到了test方法并执行。</p><p>关于在子类中重用父类功能的这两种方式，使用任何一种都可以，但是在最新的代码中还是推荐使用super()</p><h2 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h2><p>软件重用的重要方式除了继承之外还有另外一种方式，即：组合 </p><p>组合指的是，在一个类中以另外一个类的对象作为数据属性，称为类的组合</p><blockquote><p>对象属性的值是来自于另外一个类的对象,这就叫类的组合使用;</p><p>组合是用来减少类与类代码冗余的;</p><p>只有类与类之间有从属关系的时候才用继承,否则的话用组合;</p></blockquote><p>在一个类中以另外一个类的对象作为数据属性，称为类的组合。组合与继承都是用来解决代码的重用性问题。不同的是：</p><p>继承是一种“是”的关系，比如老师 是人、学生是人，当类之间有很多相同的之处，应该使用继承；</p><p>而组合则是一种“有”的关系，比如老师有生日，老师有多门课程，当类之间有显著不同，并且较小 的类是较大的类所需要的组件时，应该使用组合，如下示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Course</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,period,price</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.period=period</span><br><span class="line">        self.price=price</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tell_info</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&lt;%s %s %s&gt;&#x27;</span> %(self.name,self.period,self.price))</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Date</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,year,mon,day</span>):</span><br><span class="line">        self.year=year</span><br><span class="line">        self.mon=mon</span><br><span class="line">        self.day=day</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tell_birth</span>(<span class="params">self</span>):</span><br><span class="line">       <span class="built_in">print</span>(<span class="string">&#x27;&lt;%s-%s-%s&gt;&#x27;</span> %(self.year,self.mon,self.day))</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">People</span>:</span><br><span class="line">    school=<span class="string">&#x27;清华大学&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,sex,age</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.sex=sex</span><br><span class="line">        self.age=age</span><br><span class="line"></span><br><span class="line"><span class="comment">#Teacher类基于继承来重用People的代码，基于组合来重用Date类和Course类的代码</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span>(<span class="title class_ inherited__">People</span>): <span class="comment">#老师是人</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,sex,age,title,year,mon,day</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(name,age,sex)</span><br><span class="line">        self.birth=Date(year,mon,day) <span class="comment">#老师有生日</span></span><br><span class="line">        self.courses=[] <span class="comment">#老师有课程，可以在实例化后，往该列表中添加Course类的对象</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">teach</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s is teaching&#x27;</span> %self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">python=Course(<span class="string">&#x27;python&#x27;</span>,<span class="string">&#x27;3mons&#x27;</span>,<span class="number">3000.0</span>)</span><br><span class="line">linux=Course(<span class="string">&#x27;linux&#x27;</span>,<span class="string">&#x27;5mons&#x27;</span>,<span class="number">5000.0</span>)</span><br><span class="line">teacher1=Teacher(<span class="string">&#x27;lili&#x27;</span>,<span class="string">&#x27;female&#x27;</span>,<span class="number">28</span>,<span class="string">&#x27;博士生导师&#x27;</span>,<span class="number">1990</span>,<span class="number">3</span>,<span class="number">23</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># teacher1有两门课程</span></span><br><span class="line">teacher1.courses.append(python)</span><br><span class="line">teacher1.courses.append(linux)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重用Date类的功能</span></span><br><span class="line"><span class="comment"># 老师不属于生日,生日不属于老师,即老师与生日不是从属关系,用组合</span></span><br><span class="line">teacher1.birth.tell_birth()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重用Course类的功能</span></span><br><span class="line"><span class="keyword">for</span> obj <span class="keyword">in</span> teacher1.courses: </span><br><span class="line">    obj.tell_info()</span><br></pre></td></tr></table></figure><p>此时对象teacher1集对象独有的属性、Teacher类中的内容、Course类中的内容于一身（都可以访问到），是一个高度整合的产物</p><p>当类之间有显著不同，并且较小的类是较大的类所需要的组件时，用组合比较好 </p><h2 id="接口与归一化设计"><a href="#接口与归一化设计" class="headerlink" title="接口与归一化设计"></a>接口与归一化设计</h2><h3 id="1-什么是接口"><a href="#1-什么是接口" class="headerlink" title="1.什么是接口"></a>1.什么是接口</h3><p>java中的interface</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">=================第一部分：Java 语言中的接口很好的展现了接口的含义: IAnimal.java</span><br><span class="line">/*</span><br><span class="line">* Java的Interface接口的特征:</span><br><span class="line">* <span class="number">1</span>)是一组功能的集合,而不是一个功能</span><br><span class="line">* <span class="number">2</span>)接口的功能用于交互,所有的功能都是public,即别的对象可操作</span><br><span class="line">* <span class="number">3</span>)接口只定义函数,但不涉及函数实现</span><br><span class="line">* <span class="number">4</span>)这些功能是相关的,都是动物相关的功能,但光合作用就不适宜放到IAnimal里面了 */</span><br><span class="line"></span><br><span class="line">package com.oo.demo;</span><br><span class="line">public interface IAnimal &#123;</span><br><span class="line">    public void eat();</span><br><span class="line">    public void run(); </span><br><span class="line">    public void sleep(); </span><br><span class="line">    public void speak();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">=================第二部分：Pig.java：猪”的类设计,实现了IAnnimal接口 </span><br><span class="line">package com.oo.demo;</span><br><span class="line">public <span class="keyword">class</span> <span class="title class_">Pig</span> implements IAnimal&#123; //如下每个函数都需要详细实现</span><br><span class="line">    public void eat()&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Pig like to eat grass&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void run()&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Pig run: front legs, back legs&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void sleep()&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Pig sleep 16 hours every day&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void speak()&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Pig can not speak&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">=================第三部分：Person2.java</span><br><span class="line">/*</span><br><span class="line">*实现了IAnimal的“人”,有几点说明一下: </span><br><span class="line">* <span class="number">1</span>)同样都实现了IAnimal的接口,但“人”和“猪”的实现不一样,为了避免太多代码导致影响阅读,这里的代码简化成一行,但输出的内容不一样,实际项目中同一接口的同一功能点,不同的类实现完全不一样</span><br><span class="line">* <span class="number">2</span>)这里同样是“人”这个类,但和前面介绍类时给的类“Person”完全不一样,这是因为同样的逻辑概念,在不同的应用场景下,具备的属性和功能是完全不一样的 */</span><br><span class="line"></span><br><span class="line">package com.oo.demo;</span><br><span class="line">public <span class="keyword">class</span> <span class="title class_">Person2</span> implements IAnimal &#123; </span><br><span class="line">    public void eat()&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Person like to eat meat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void run()&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Person run: left leg, right leg&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void sleep()&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Person sleep 8 hours every dat&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void speak()&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hellow world, I am a person&quot;</span>);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">=================第四部分：Tester03.java</span><br><span class="line">package com.oo.demo;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> <span class="title class_">Tester03</span> &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;===This is a person===&quot;</span>); </span><br><span class="line">        IAnimal person = new Person2();</span><br><span class="line">        person.eat();</span><br><span class="line">        person.run();</span><br><span class="line">        person.sleep();</span><br><span class="line">        person.speak();</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;\n===This is a pig===&quot;</span>);</span><br><span class="line">        IAnimal pig = new Pig();</span><br><span class="line">        pig.eat();</span><br><span class="line">        pig.run();</span><br><span class="line">        pig.sleep();</span><br><span class="line">        pig.speak();</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PS:hi boy，给我开个查询接口。。。此时的接口指的是：自己提供给使用者来调用自己功能的方式\方法\入口</p><h3 id="2-为何要用接口"><a href="#2-为何要用接口" class="headerlink" title="2.为何要用接口"></a>2.为何要用接口</h3><p>接口提取了一群类共同的函数，可以把接口当做一个函数的集合。</p><p>然后让子类去实现接口中的函数。</p><p>这么做的意义在于归一化，什么叫归一化，就是只要是基于同一个接口实现的类，那么所有的这些类产生的对象在使用时，从用法上来说都一样。</p><p>归一化的好处在于：</p><ol><li><p>归一化让使用者无需关心对象的类是什么，只需要的知道这些对象都具备某些功能就可以了，这极大地降低了使用者的使用难度。</p></li><li><p>归一化使得高层的外部使用者可以不加区分的处理所有接口兼容的对象集合</p></li></ol><p>2.1：就好象linux的泛文件概念一样，所有东西都可以当文件处理，不必关心它是内存、磁盘、网络还是屏幕（当然，对底层设计者，当然也可以区分出“字符设备”和“块设备”，然后做出针对性的设计：细致到什么程度，视需求而定）。</p><p>2.2：再比如：我们有一个汽车接口，里面定义了汽车所有的功能，然后由本田汽车的类，奥迪汽车的类，大众汽车的类，他们都实现了汽车接口，这样就好办了，大家只需要学会了怎么开汽车，那么无论是本田，还是奥迪，还是大众我们都会开了，开的时候根本无需关心我开的是哪一类车，操作手法（函数调用）都一样</p><h3 id="3-模仿interface"><a href="#3-模仿interface" class="headerlink" title="3.模仿interface"></a>3.模仿interface</h3><p>在python中根本就没有一个叫做interface的关键字，如果非要去模仿接口的概念</p><p>可以借助第三方模块：</p><p><a href="http://pypi.python.org/pypi/zope.interface">http://pypi.python.org/pypi/zope.interface</a></p><p><a href="http://blog.csdn.net/hanhuili/article/details/9389433">twisted</a>的twisted\internet\interface.py里使用zope.interface</p><p>文档<a href="https://zopeinterface.readthedocs.io/en/latest/">https://zopeinterface.readthedocs.io/en/latest/</a></p><p>设计模式：<a href="https://github.com/faif/python-patterns">https://github.com/faif/python-patterns</a></p><p> 也可以使用继承： </p><h3 id="4-继承的两种用途"><a href="#4-继承的两种用途" class="headerlink" title="4.继承的两种用途"></a>4.继承的两种用途</h3><p>一：继承基类的方法，并且做出自己的改变或者扩展（代码重用）：实践中，继承的这种用途意义并不很大，甚至常常是有害的。因为它使得子类与基类出现强耦合。</p><p>二：声明某个子类兼容于某基类，定义一个接口类（模仿java的Interface），接口类中定义了一些接口名（就是函数名）且并未实现接口的功能，子类继承接口类，并且实现接口中的功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Interface</span>:<span class="comment">#定义接口Interface类来模仿接口的概念，python中压根就没有interface关键字来定义一个接口。</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">self</span>): <span class="comment">#定接口函数read</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">write</span>(<span class="params">self</span>): <span class="comment">#定义接口函数write</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Txt</span>(<span class="title class_ inherited__">Interface</span>): <span class="comment">#文本，具体实现read和write</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;文本数据的读取方法&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">write</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;文本数据的读取方法&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sata</span>(<span class="title class_ inherited__">Interface</span>): <span class="comment">#磁盘，具体实现read和write</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;硬盘数据的读取方法&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">write</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;硬盘数据的读取方法&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Process</span>(<span class="title class_ inherited__">Interface</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;进程数据的读取方法&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">write</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;进程数据的读取方法&#x27;</span>)</span><br></pre></td></tr></table></figure><p>上面的代码只是看起来像接口，其实并没有起到接口的作用，子类完全可以不用去实现接口 ，这就用到了抽象类</p><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><h3 id="1-什么是抽象类"><a href="#1-什么是抽象类" class="headerlink" title="1 什么是抽象类"></a>1 什么是抽象类</h3><p>  <em>与java一样，python也有抽象类的概念但是同样需要借助模块实现，<strong>抽象类是一个特殊的类，它的特殊之处在于只能被继承，不能被实例化</strong></em></p><h3 id="2-为什么要有抽象类"><a href="#2-为什么要有抽象类" class="headerlink" title="2 为什么要有抽象类"></a>2 为什么要有抽象类</h3><p>  <em>如果说<strong>类是从</strong>一堆<strong>对象</strong>中抽取相同的内容而来的，那么<strong>抽象类</strong>就<strong>是从</strong>一堆<strong>类</strong>中抽取相同的内容而来的，内容包括数据属性和函数属性。</em></p><p>　 <em>比如我们有香蕉的类，有苹果的类，有桃子的类，从这些类抽取相同的内容就是水果这个抽象的类，你吃水果时，要么是吃一个具体的香蕉，要么是吃一个具体的桃子。。。。。。你永远无法吃到一个叫做水果的东西。</em></p><p>  <em>从设计角度去看，如果类是从现实对象抽象而来的，那么抽象类就是基于类抽象而来的。</em></p><p>　 <em>从实现角度来看，抽象类与普通类的不同之处在于：抽象类中只能有抽象方法（没有实现功能），该类不能被实例化，只能被继承，且子类必须实现抽象方法。这一点与接口有点类似，但其实是不同的，即将揭晓答案</em></p><h3 id="3-在python中实现抽象类"><a href="#3-在python中实现抽象类" class="headerlink" title="3 在python中实现抽象类"></a>3 在python中实现抽象类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#_*_coding:utf-8_*_</span></span><br><span class="line">__author__ = <span class="string">&#x27;dashuju&#x27;</span></span><br><span class="line"><span class="comment">#一切皆文件</span></span><br><span class="line"><span class="keyword">import</span> abc <span class="comment">#利用abc模块实现抽象类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">All_file</span>(metaclass=abc.ABCMeta):</span><br><span class="line">    all_type=<span class="string">&#x27;file&#x27;</span></span><br><span class="line"><span class="meta">    @abc.abstractmethod </span><span class="comment">#定义抽象方法，无需实现功能</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&#x27;子类必须定义读功能&#x27;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abc.abstractmethod </span><span class="comment">#定义抽象方法，无需实现功能</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">write</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&#x27;子类必须定义写功能&#x27;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># class Txt(All_file):</span></span><br><span class="line"><span class="comment">#     pass</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># t1=Txt() #报错,子类没有定义抽象方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Txt</span>(<span class="title class_ inherited__">All_file</span>): <span class="comment">#子类继承抽象类，但是必须定义read和write方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;文本数据的读取方法&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">write</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;文本数据的读取方法&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sata</span>(<span class="title class_ inherited__">All_file</span>): <span class="comment">#子类继承抽象类，但是必须定义read和write方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;硬盘数据的读取方法&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">write</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;硬盘数据的读取方法&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Process</span>(<span class="title class_ inherited__">All_file</span>): <span class="comment">#子类继承抽象类，但是必须定义read和write方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;进程数据的读取方法&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">write</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;进程数据的读取方法&#x27;</span>)</span><br><span class="line"></span><br><span class="line">wenbenwenjian=Txt()</span><br><span class="line"></span><br><span class="line">yingpanwenjian=Sata()</span><br><span class="line"></span><br><span class="line">jinchengwenjian=Process()</span><br><span class="line"></span><br><span class="line"><span class="comment">#这样大家都是被归一化了,也就是一切皆文件的思想</span></span><br><span class="line">wenbenwenjian.read()</span><br><span class="line">yingpanwenjian.write()</span><br><span class="line">jinchengwenjian.read()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(wenbenwenjian.all_type)</span><br><span class="line"><span class="built_in">print</span>(yingpanwenjian.all_type)</span><br><span class="line"><span class="built_in">print</span>(jinchengwenjian.all_type)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">文本数据的读取方法</span></span><br><span class="line"><span class="string">硬盘数据的读取方法</span></span><br><span class="line"><span class="string">进程数据的读取方法</span></span><br><span class="line"><span class="string">file</span></span><br><span class="line"><span class="string">file</span></span><br><span class="line"><span class="string">file</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="4-抽象类与接口"><a href="#4-抽象类与接口" class="headerlink" title="4 抽象类与接口"></a>4 抽象类与接口</h3><p><em>抽象类的本质还是类，指的是一组类的相似性，包括数据属性（如all_type）和函数属性（如read、write），而接口只强调函数属性的相似性。</em></p><p><strong>抽象类是一个介于类和接口直接的一个概念，同时具备类和接口的部分特性，可以用来实现归一化设计 </strong></p><h1 id="多态性与鸭子类型"><a href="#多态性与鸭子类型" class="headerlink" title="多态性与鸭子类型"></a>多态性与鸭子类型</h1><h2 id="多态与多态性"><a href="#多态与多态性" class="headerlink" title="多态与多态性"></a>多态与多态性</h2><p>多态指的是一类事物有多种形态，比如动物有多种形态：猫、狗、猪</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>: <span class="comment">#同一类事物:动物</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">talk</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>(<span class="title class_ inherited__">Animal</span>): <span class="comment">#动物的形态之一:猫</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">talk</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;喵喵喵&#x27;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">Animal</span>): <span class="comment">#动物的形态之二:狗</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">talk</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;汪汪汪&#x27;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pig</span>(<span class="title class_ inherited__">Animal</span>): <span class="comment">#动物的形态之三:猪</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">talk</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;哼哼哼&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#实例化得到三个对象</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cat=Cat()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dog=Dog()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pig=Pig()</span><br></pre></td></tr></table></figure><p><code>多态性指的是可以在不用考虑对象具体类型的情况下而直接使用对象</code>，这就需要在设计时，把对象的使用方法统一成一种：例如cat、dog、pig都是动物,但凡是动物肯定有talk方法，于是我们可以不用考虑它们三者的具体是什么类型的动物,而直接使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>cat.talk()</span><br><span class="line">喵喵喵</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dog.talk()</span><br><span class="line">汪汪汪</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pig.talk()</span><br><span class="line">哼哼哼</span><br></pre></td></tr></table></figure><p>更进一步,我们可以定义一个统一的接口来使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">Talk</span>(<span class="params">animal</span>):</span><br><span class="line"><span class="meta">... </span>    animal.talk()</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Talk(cat)</span><br><span class="line">喵喵喵</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Talk(dog)</span><br><span class="line">汪汪汪</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Talk(pig)</span><br><span class="line">哼哼哼</span><br></pre></td></tr></table></figure><p>Python中一切皆对象，本身就支持多态性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">s=<span class="built_in">list</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,])</span><br><span class="line">l=<span class="built_in">str</span>(<span class="string">&quot;hello word&quot;</span>)</span><br><span class="line">t=<span class="built_in">tuple</span>((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们可以在不考虑三者类型的情况下直接使用统计三个对象的方法</span></span><br><span class="line">s.__len__()</span><br><span class="line">l.__len__()</span><br><span class="line">t.__len__()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python内置了一个统一的接口</span></span><br><span class="line"><span class="built_in">len</span>(s)</span><br><span class="line"><span class="built_in">len</span>(l)</span><br><span class="line"><span class="built_in">len</span>(t)</span><br></pre></td></tr></table></figure><p>多态性的好处在于增强了程序的灵活性和可扩展性，比如通过继承Animal类创建了一个新的类，实例化得到的对象obj，可以使用相同的方式使用obj.talk()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">class</span> <span class="title class_">Wolf</span>(<span class="title class_ inherited__">Animal</span>): <span class="comment">#动物的另外一种形态：狼</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">def</span> <span class="title function_">talk</span>(<span class="params">self</span>):</span><br><span class="line"><span class="meta">... </span>        <span class="built_in">print</span>(<span class="string">&#x27;嗷...&#x27;</span>)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>wolf=Wolf() <span class="comment"># 实例出一头狼</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>wolf.talk() <span class="comment"># 使用者根本无需关心wolf是什么类型而调用talk</span></span><br><span class="line">嗷...</span><br></pre></td></tr></table></figure><p>综上我们得知，多态性的本质在于不同的类中定义有相同的方法名，这样我们就可以不考虑类而统一用一种方式去使用对象，可以通过在父类引入抽象类的概念来硬性限制子类必须有某些方法名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> abc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定metaclass属性将类设置为抽象类，抽象类本身只是用来约束子类的，不能被实例化</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>(metaclass=abc.ABCMeta):</span><br><span class="line"><span class="meta">    @abc.abstractmethod </span><span class="comment"># 该装饰器限制子类必须定义有一个名为talk的方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">talk</span>(<span class="params">self</span>): <span class="comment"># 抽象方法中无需实现具体的功能,主要用来给子类制定标准</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>(<span class="title class_ inherited__">Animal</span>): <span class="comment"># 但凡继承Animal的子类都必须遵循Animal规定的标准</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">talk</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">cat=Cat() <span class="comment"># 若子类中没有一个名为talk的方法则会抛出异常TypeError，无法实例化</span></span><br></pre></td></tr></table></figure><h2 id="鸭子类型"><a href="#鸭子类型" class="headerlink" title="鸭子类型"></a>鸭子类型</h2><blockquote><p>python推崇鸭子类型</p><p>约定性的角度去实现规范的统一,并不是从语法强制性的去限制实现统一,这就是python的鸭子类型</p></blockquote><p>但其实我们完全可以不依赖于继承，只需要制造出外观和行为相同对象，同样可以实现不考虑对象类型而使用对象，这正是Python崇尚的“鸭子类型” （duck  typing）：“如果看起来像、叫声像而且走起路来像鸭子，那么它就是鸭子”。比起继承的方式，鸭子类型在某种程度上实现了程序的松耦合度，如下</p><p><img src="yazi.png" alt="鸭子"><br>eg:     Linux设计的核心思想<code>一切皆文件</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#二者看起来都像文件,因而就可以当文件一样去用，然而它们并没有直接的关系</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Txt</span>: <span class="comment">#Txt类有两个与文件类型同名的方法，即read和write</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">write</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Disk</span>: <span class="comment">#Disk类也有两个与文件类型同名的方法：read和write</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">write</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>eg:     这种方法没有硬性的限制,同样实现了多态性                </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>(<span class="title class_ inherited__">Animal</span>): <span class="comment">#动物的形态之一:猫</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">talk</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;喵喵喵&#x27;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">Animal</span>): <span class="comment">#动物的形态之二:狗</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">talk</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;汪汪汪&#x27;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pig</span>(<span class="title class_ inherited__">Animal</span>): <span class="comment">#动物的形态之三:猪</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">talk</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;哼哼哼&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="静态函数和类函数"><a href="#静态函数和类函数" class="headerlink" title="静态函数和类函数"></a>静态函数和类函数</h1><p>文章前接触到的类成员函数均与实例绑定,即只能通过对象访问不能通过类名访问.</p><p>Python中支持两种基于类名访问成员的函数: 静态函数和类函数,</p><p>他们的不同点是:</p><ol><li>类函数有一个隐形参数cls可以用来获取类信息,而静态函数没有该参数</li><li>静态函数使用装饰器@staticmethod定义</li><li>类函数使用装饰器@classmethod定义</li></ol><h2 id="类函数"><a href="#类函数" class="headerlink" title="类函数"></a>类函数</h2><p>在类中正常定义的函数默认是绑定到对象的，而为某个函数加上装饰器@classmethod后，该函数就绑定到了类。</p><p>我们在之前的章节中已经介绍过对象方法了，本节我们主要介绍类方法。类方法通常用来在<strong>init</strong>的基础上提供额外的初始化实例的方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置文件settings.py的内容</span></span><br><span class="line">HOST=<span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">PORT=<span class="number">3306</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 类方法的应用</span></span><br><span class="line"><span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MySQL</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,host,port</span>):</span><br><span class="line">        self.host=host</span><br><span class="line">        self.port=port</span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">from_conf</span>(<span class="params">cls</span>): <span class="comment"># 从配置文件中读取配置进行初始化</span></span><br><span class="line">        <span class="keyword">return</span> cls(settings.HOST,settings.PORT)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>MySQL.from_conf <span class="comment"># 绑定到类的方法</span></span><br><span class="line">&lt;bound method MySQL.from_conf of &lt;<span class="keyword">class</span> ‘__main__.MySQL<span class="string">&#x27;&gt;&gt;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; conn=MySQL.from_conf() # 调用类方法，自动将类MySQL当作第一个参数传给cls</span></span><br></pre></td></tr></table></figure><p>绑定到类的方法就是专门给类用的，但其实对象也可以调用，只不过自动传入的第一个参数仍然是类，也就是说这种调用是没有意义的，并且容易引起混淆， 这也是Python的对象系统与其他面向对象语言对象系统的区别之一，比如Smalltalk和Ruby中，绑定到类的方法与绑定到对象的方法是严格区分 开的。</p><h2 id="静态函数"><a href="#静态函数" class="headerlink" title="静态函数"></a>静态函数</h2><p>为类中某个函数加上装饰器@staticmethod后，该函数就变成了非绑定方法，也称为静态方法。该方法不与类或对象绑定，类与对象都可以来调用它，但它就是一个普通函数而已，因而没有自动传值那么一说</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MySQL</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,host,port</span>):</span><br><span class="line">        self.<span class="built_in">id</span>=self.create_id()</span><br><span class="line">        self.host=host</span><br><span class="line">        self.port=port</span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_id</span>():</span><br><span class="line">        <span class="keyword">return</span> uuid.uuid1()</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conn=MySQL(‘<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">&#x27;,3306)</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; print(conn.id) #100365f6-8ae0-11e7-a51e-0088653ea1ec</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 类或对象来调用create_id发现都是普通函数，而非绑定到谁的方法</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; MySQL.create_id</span></span><br><span class="line"><span class="string">&lt;function MySQL.create_id at 0x1025c16a8&gt;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; conn.create_id</span></span><br><span class="line"><span class="string">&lt;function MySQL.create_id at 0x1025c16a8&gt;</span></span><br></pre></td></tr></table></figure><p>总结绑定方法与非绑定方法的使用：若类中需要一个功能，该功能的实现代码中需要引用对象则将其定义成对象方法、需要引用类则将其定义成类方法、无需引用类或对象则将其定义成静态方法。</p><h1 id="反射、内置方法"><a href="#反射、内置方法" class="headerlink" title="反射、内置方法"></a>反射、内置方法</h1><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><h3 id="什么是反射"><a href="#什么是反射" class="headerlink" title="什么是反射"></a>什么是反射</h3><blockquote><p>反射的概念是由Smith在1982年首次提出的，主要是指程序可以访问、检测和修改它本身状态或行为的一种能力（自省）。这一概念的提出很快引发了计算机科学领域关于应用反射性的研究。它首先被程序语言的设计领域所采用,并在Lisp和面向对象方面取得了成绩。</p></blockquote><h3 id="反射-1"><a href="#反射-1" class="headerlink" title="反射"></a>反射</h3><p>在Python中，反射指的是通过字符串来操作对象的属性，涉及到四个内置函数的使用（Python中一切皆对象，类和对象都可以用下述四个方法）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,full_name</span>):</span><br><span class="line">        self.full_name = full_name</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">qqq</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">t=Teacher(<span class="string">&#x27;allen&#x27;</span>)</span><br><span class="line"><span class="comment"># hasattr(object,&#x27;name&#x27;)</span></span><br><span class="line"><span class="built_in">hasattr</span>(t,<span class="string">&#x27;full_name&#x27;</span>)  <span class="comment"># 按字符串&#x27;full_name&#x27;判断有无属性t.full_name</span></span><br><span class="line"><span class="comment"># getattr(object,&#x27;name&#x27;,default=None)</span></span><br><span class="line"><span class="built_in">getattr</span>(t,<span class="string">&#x27;qqq&#x27;</span>,<span class="literal">None</span>)   <span class="comment"># 等同于t.full_name,不存在该属性则返回默认值None</span></span><br><span class="line"><span class="comment"># setattr(object,&#x27;name&#x27;,value)</span></span><br><span class="line"><span class="built_in">setattr</span>(t,<span class="string">&#x27;age&#x27;</span>,<span class="number">18</span>)     <span class="comment"># 等同于t,age=18</span></span><br><span class="line"><span class="comment"># delattr(object,&#x27;name&#x27;)</span></span><br><span class="line"><span class="built_in">delattr</span>(t,<span class="string">&#x27;age&#x27;</span>)        <span class="comment"># 等同于del t.age</span></span><br></pre></td></tr></table></figure><p>基于反射可以十分灵活地操作对象属性，比如将用户交互的结果反射到具体功能的执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FtpServer</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">server_forever</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            inp=<span class="built_in">input</span>(<span class="string">&#x27;input your cmd &gt;&gt; : &#x27;</span>)</span><br><span class="line">            cmd,file=inp.split()</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">hasattr</span>(self,cmd):   <span class="comment"># 根据用户输入的cmd，判断对象self有无cmd方法属性</span></span><br><span class="line">                func=<span class="built_in">getattr</span>(self,cmd)  <span class="comment"># 根据字符串cmd，获取对象self对应的方法属性</span></span><br><span class="line">                func(file)  <span class="comment"># 获取到self.cmd 并调用</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;输入错误&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self,file</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Download  &#123;&#125; ...&quot;</span>.<span class="built_in">format</span>(file))</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">self,file</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Uploading  &#123;&#125; ...&#x27;</span>.<span class="built_in">format</span>(file))</span><br><span class="line"></span><br><span class="line">ftp=FtpServer()</span><br><span class="line">ftp.server_forever()</span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="built_in">input</span> your cmd &gt;&gt; : put <span class="number">123</span></span><br><span class="line">Uploading  <span class="number">123</span> ...</span><br><span class="line"><span class="built_in">input</span> your cmd &gt;&gt; : get <span class="number">123</span></span><br><span class="line">&lt;__main__.FtpServer <span class="built_in">object</span> at <span class="number">0x00000000021EA3C8</span>&gt;</span><br><span class="line">Download  <span class="number">123</span> ...</span><br></pre></td></tr></table></figure><h3 id="反射的好处"><a href="#反射的好处" class="headerlink" title="反射的好处"></a>反射的好处</h3><p>好处一：实现可插拔机制</p><p>有俩程序员，一个lili，一个是egon，lili在写程序的时候需要用到egon所写的类，但是egon去跟女朋友度蜜月去了，还没有完成他写的类，lili想到了反射，使用了反射机制lili可以继续完成自己的代码，等egon度蜜月回来后再继续完成类的定义并且去实现lili想要的功能。</p><p>总之反射的好处就是，可以事先定义好接口，接口只有在被完成后才会真正执行，这实现了即插即用，这其实是一种‘后期绑定’，什么意思？即你可以事先把主要的逻辑写好（只定义接口），然后后期再去实现接口的功能</p><p>好处二：动态导入模块（基于反射当前模块成员）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### module_test.py</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;from the test&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">程序目录：</span></span><br><span class="line"><span class="string">    module_test.py</span></span><br><span class="line"><span class="string">    index.py</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">当前文件：</span></span><br><span class="line"><span class="string">    index.py</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> module_test <span class="keyword">as</span> obj</span><br><span class="line"></span><br><span class="line"><span class="comment">#obj.test()</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hasattr</span>(obj,<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">getattr</span>(obj,<span class="string">&#x27;test&#x27;</span>)()复制代码</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">程序目录：</span></span><br><span class="line"><span class="string">    module_test.py</span></span><br><span class="line"><span class="string">    index.py</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">当前文件：</span></span><br><span class="line"><span class="string">    index.py</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> module_test <span class="keyword">as</span> obj</span><br><span class="line"></span><br><span class="line"><span class="comment">#obj.test()</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hasattr</span>(obj,<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">getattr</span>(obj,<span class="string">&#x27;test&#x27;</span>)()</span><br></pre></td></tr></table></figure><h2 id="内置方法"><a href="#内置方法" class="headerlink" title="内置方法"></a>内置方法</h2><p>Python的Class机制内置了很多特殊的方法来帮助使用者高度定制自己的类，这些内置方法都是以双下划线开头和结尾的，会在满足某种条件时自动触发，我们以常用的<code>__str__</code>和<code>__del__</code>为例来简单介绍它们的使用。</p><p><code>__str__</code>方法会在对象被打印时自动触发，print功能打印的就是它的返回值，我们通常基于方法来定制对象的打印信息，该方法必须返回字符串类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Name: &#123;&#125;  Age : &#123;&#125;&quot;</span>.<span class="built_in">format</span>(self.name,self.age)</span><br><span class="line"></span><br><span class="line">s=Student(<span class="string">&#x27;allen&#x27;</span>,<span class="number">18</span>)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"><span class="comment">###</span></span><br><span class="line">Name: allen  Age : <span class="number">18</span></span><br></pre></td></tr></table></figure><p><code>__del__</code>会在对象被删除时自动触发。由于Python自带的垃圾回收机制会自动清理Python程序的资源，所以当一个对象只占用应用程序级资源时，完全没必要为对象定制<code>__del__</code>方法，但在产生一个对象的同时涉及到申请系统资源（比如系统打开的文件、网络连接等）的情况下，关于系统资源的回收，Python的垃圾回收机制便派不上用场了，需要我们为对象定制该方法，用来在对象被删除时自动触发回收系统资源的操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MySQL</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,ip,port</span>):</span><br><span class="line">        self.conn=connect(ip,port) <span class="comment"># 伪代码，发起网络连接，需要占用系统资源</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>):</span><br><span class="line">        self.conn.close() <span class="comment"># 关闭网络连接，回收系统资源</span></span><br><span class="line"></span><br><span class="line">obj=MySQL(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">3306</span>) <span class="comment"># 在对象obj被删除时，自动触发obj.__del__()</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python之旅 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 包 </tag>
            
            <tag> 软件开发目录规范 </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python之旅：常用模块</title>
      <link href="/2019/11/27/Python/Python%E4%B9%8B%E6%97%85/Python%E4%B9%8B%E6%97%85%EF%BC%9A%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/"/>
      <url>/2019/11/27/Python/Python%E4%B9%8B%E6%97%85/Python%E4%B9%8B%E6%97%85%EF%BC%9A%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="time与datetime模块"><a href="#time与datetime模块" class="headerlink" title="time与datetime模块"></a>time与datetime模块</h1><p>在Python中，通常有这几种方式来表示时间：</p><ul><li>时间戳(timestamp)：通常来说，时间戳表示的是从1970年1月1日00:00:00开始按秒计算的偏移量。我们运行“type(time.time())”，返回的是float类型。</li><li>格式化的时间字符串(Format String)</li><li>结构化的时间(struct_time)：struct_time元组共有9个元素共九个元素:(年，月，日，时，分，秒，一年中第几周，一年中第几天，夏令时)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment">#--------------------------我们先以当前时间为准,让大家快速认识三种形式的时间</span></span><br><span class="line"><span class="built_in">print</span>(time.time()) <span class="comment"># 时间戳:1487130156.419527</span></span><br><span class="line"><span class="built_in">print</span>(time.strftime(<span class="string">&quot;%Y-%m-%d %X&quot;</span>)) <span class="comment">#格式化的时间字符串:&#x27;2017-02-15 11:40:53&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(time.localtime()) <span class="comment">#本地时区的struct_time</span></span><br><span class="line"><span class="built_in">print</span>(time.gmtime())    <span class="comment">#UTC时区的struct_time</span></span><br></pre></td></tr></table></figure><p> 格式化字符串的时间格式 ：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">%a    Locale’s abbreviated weekday name.     </span><br><span class="line">%A    Locale’s full weekday name.     </span><br><span class="line">%b    Locale’s abbreviated month name.     </span><br><span class="line">%B    Locale’s full month name.     </span><br><span class="line">%c    Locale’s appropriate date <span class="keyword">and</span> time representation.     </span><br><span class="line">%d    Day of the month <span class="keyword">as</span> a decimal number [01,<span class="number">31</span>].     </span><br><span class="line">%H    Hour (<span class="number">24</span>-hour clock) <span class="keyword">as</span> a decimal number [<span class="number">00</span>,<span class="number">23</span>].     </span><br><span class="line">%I    Hour (<span class="number">12</span>-hour clock) <span class="keyword">as</span> a decimal number [01,<span class="number">12</span>].     </span><br><span class="line">%j    Day of the year <span class="keyword">as</span> a decimal number [001,<span class="number">366</span>].     </span><br><span class="line">%m    Month <span class="keyword">as</span> a decimal number [01,<span class="number">12</span>].     </span><br><span class="line">%M    Minute <span class="keyword">as</span> a decimal number [<span class="number">00</span>,<span class="number">59</span>].     </span><br><span class="line">%p    Locale’s equivalent of either AM <span class="keyword">or</span> PM.    (<span class="number">1</span>)</span><br><span class="line">%S    Second <span class="keyword">as</span> a decimal number [<span class="number">00</span>,<span class="number">61</span>].    (<span class="number">2</span>)</span><br><span class="line">%U    Week number of the year (Sunday <span class="keyword">as</span> the first day of the week) <span class="keyword">as</span> a decimal number [<span class="number">00</span>,<span class="number">53</span>]. All days <span class="keyword">in</span> a new year preceding the first Sunday are considered to be <span class="keyword">in</span> week <span class="number">0.</span>    (<span class="number">3</span>)</span><br><span class="line">%w    Weekday <span class="keyword">as</span> a decimal number [<span class="number">0</span>(Sunday),<span class="number">6</span>].     </span><br><span class="line">%W    Week number of the year (Monday <span class="keyword">as</span> the first day of the week) <span class="keyword">as</span> a decimal number [<span class="number">00</span>,<span class="number">53</span>]. All days <span class="keyword">in</span> a new year preceding the first Monday are considered to be <span class="keyword">in</span> week <span class="number">0.</span>    (<span class="number">3</span>)</span><br><span class="line">%x    Locale’s appropriate date representation.     </span><br><span class="line">%X    Locale’s appropriate time representation.     </span><br><span class="line">%y    Year without century <span class="keyword">as</span> a decimal number [<span class="number">00</span>,<span class="number">99</span>].     </span><br><span class="line">%Y    Year <span class="keyword">with</span> century <span class="keyword">as</span> a decimal number.     </span><br><span class="line">%z    Time zone offset indicating a positive <span class="keyword">or</span> negative time difference <span class="keyword">from</span> UTC/GMT of the form +HHMM <span class="keyword">or</span> -HHMM, where H represents decimal hour digits <span class="keyword">and</span> M represents decimal minute digits [-<span class="number">23</span>:<span class="number">59</span>, +<span class="number">23</span>:<span class="number">59</span>].     </span><br><span class="line">%Z    Time zone name (no characters <span class="keyword">if</span> no time zone exists).     </span><br><span class="line">%%    A literal <span class="string">&#x27;%&#x27;</span> character.</span><br></pre></td></tr></table></figure><p>其中计算机认识的时间只能是’时间戳’格式，而程序员可处理的或者说人类能看懂的时间有: ‘格式化的时间字符串’，’结构化的时间’ ，于是有了下图的转换关系</p><p><img src="1036857-20170215142700722-743334012.png" alt="img"><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#--------------------------按图1转换时间</span></span><br><span class="line"><span class="comment"># localtime([secs])</span></span><br><span class="line"><span class="comment"># 将一个时间戳转换为当前时区的struct_time。secs参数未提供，则以当前时间为准。</span></span><br><span class="line">time.localtime()</span><br><span class="line">time.localtime(<span class="number">1473525444.037215</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gmtime([secs]) 和localtime()方法类似，gmtime()方法是将一个时间戳转换为UTC时区（0时区）的struct_time。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mktime(t) : 将一个struct_time转化为时间戳。</span></span><br><span class="line"><span class="built_in">print</span>(time.mktime(time.localtime()))<span class="comment">#1473525749.0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># strftime(format[, t]) : 把一个代表时间的元组或者struct_time（如由time.localtime()和</span></span><br><span class="line"><span class="comment"># time.gmtime()返回）转化为格式化的时间字符串。如果t未指定，将传入time.localtime()。如果元组中任何一个</span></span><br><span class="line"><span class="comment"># 元素越界，ValueError的错误将会被抛出。</span></span><br><span class="line"><span class="built_in">print</span>(time.strftime(<span class="string">&quot;%Y-%m-%d %X&quot;</span>, time.localtime()))<span class="comment">#2016-09-11 00:49:56</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># time.strptime(string[, format])</span></span><br><span class="line"><span class="comment"># 把一个格式化时间字符串转化为struct_time。实际上它和strftime()是逆操作。</span></span><br><span class="line"><span class="built_in">print</span>(time.strptime(<span class="string">&#x27;2011-05-05 16:37:06&#x27;</span>, <span class="string">&#x27;%Y-%m-%d %X&#x27;</span>))</span><br><span class="line"><span class="comment">#time.struct_time(tm_year=2011, tm_mon=5, tm_mday=5, tm_hour=16, tm_min=37, tm_sec=6,</span></span><br><span class="line"><span class="comment">#  tm_wday=3, tm_yday=125, tm_isdst=-1)</span></span><br><span class="line"><span class="comment">#在这个函数中，format默认为：&quot;%a %b %d %H:%M:%S %Y&quot;。</span></span><br></pre></td></tr></table></figure></p><p><img src="1036857-20170215143428754-2105818567.png" alt="img"><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#--------------------------按图2转换时间</span></span><br><span class="line"><span class="comment"># asctime([t]) : 把一个表示时间的元组或者struct_time表示为这种形式：&#x27;Sun Jun 20 23:21:05 1993&#x27;。</span></span><br><span class="line"><span class="comment"># 如果没有参数，将会将time.localtime()作为参数传入。</span></span><br><span class="line"><span class="built_in">print</span>(time.asctime())<span class="comment">#Sun Sep 11 00:43:43 2016</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ctime([secs]) : 把一个时间戳（按秒计算的浮点数）转化为time.asctime()的形式。如果参数未给或者为</span></span><br><span class="line"><span class="comment"># None的时候，将会默认time.time()为参数。它的作用相当于time.asctime(time.localtime(secs))。</span></span><br><span class="line"><span class="built_in">print</span>(time.ctime())  <span class="comment"># Sun Sep 11 00:46:38 2016</span></span><br><span class="line"><span class="built_in">print</span>(time.ctime(time.time()))  <span class="comment"># Sun Sep 11 00:46:38 2016</span></span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#--------------------------其他用法</span></span><br><span class="line"><span class="comment"># sleep(secs)</span></span><br><span class="line"><span class="comment"># 线程推迟指定的时间运行，单位为秒。</span></span><br></pre></td></tr></table></figure><p><code>datetime模块</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#时间加减</span></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(datetime.datetime.now()) #返回 2016-08-19 12:47:03.941925</span></span><br><span class="line"><span class="comment">#print(datetime.date.fromtimestamp(time.time()) )  # 时间戳直接转成日期格式 2016-08-19</span></span><br><span class="line"><span class="comment"># print(datetime.datetime.now() )</span></span><br><span class="line"><span class="comment"># print(datetime.datetime.now() + datetime.timedelta(3)) #当前时间+3天</span></span><br><span class="line"><span class="comment"># print(datetime.datetime.now() + datetime.timedelta(-3)) #当前时间-3天</span></span><br><span class="line"><span class="comment"># print(datetime.datetime.now() + datetime.timedelta(hours=3)) #当前时间+3小时</span></span><br><span class="line"><span class="comment"># print(datetime.datetime.now() + datetime.timedelta(minutes=30)) #当前时间+30分</span></span><br><span class="line"><span class="comment"># 指定时间的前一天</span></span><br><span class="line"><span class="built_in">print</span>((datetime.datetime.strptime(<span class="string">&#x27;20160311&#x27;</span>,<span class="string">&quot;%Y%m%d&quot;</span>)+datetime.timedelta(-<span class="number">1</span>)).strftime(<span class="string">&#x27;%Y%m%d&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># c_time  = datetime.datetime.now()</span></span><br><span class="line"><span class="comment"># print(c_time.replace(minute=3,hour=2)) #时间替换</span></span><br></pre></td></tr></table></figure><h1 id="random模块"><a href="#random模块" class="headerlink" title="random模块"></a>random模块</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(random.random())<span class="comment">#(0,1)----float    大于0且小于1之间的小数</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(random.randint(<span class="number">1</span>,<span class="number">3</span>))  <span class="comment">#[1,3]    大于等于1且小于等于3之间的整数</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(random.randrange(<span class="number">1</span>,<span class="number">3</span>)) <span class="comment">#[1,3)    大于等于1且小于3之间的整数</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(random.choice([<span class="number">1</span>,<span class="string">&#x27;23&#x27;</span>,[<span class="number">4</span>,<span class="number">5</span>]]))<span class="comment">#1或者23或者[4,5]</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(random.sample([<span class="number">1</span>,<span class="string">&#x27;23&#x27;</span>,[<span class="number">4</span>,<span class="number">5</span>]],<span class="number">2</span>))<span class="comment">#列表元素任意2个组合</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(random.uniform(<span class="number">1</span>,<span class="number">3</span>))<span class="comment">#大于1小于3的小数，如1.927109612082716 </span></span><br><span class="line"></span><br><span class="line">item=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>]</span><br><span class="line">random.shuffle(item) <span class="comment">#打乱item的顺序,相当于&quot;洗牌&quot;</span></span><br><span class="line"><span class="built_in">print</span>(item)</span><br></pre></td></tr></table></figure><p><code>生成随机验证码</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_code</span>(<span class="params">n</span>):</span><br><span class="line">    res=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        s1=<span class="built_in">chr</span>(random.randint(<span class="number">65</span>,<span class="number">90</span>))</span><br><span class="line">        s2=<span class="built_in">str</span>(random.randint(<span class="number">0</span>,<span class="number">9</span>))</span><br><span class="line">        res+=random.choice([s1,s2])</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(make_code(<span class="number">9</span>))</span><br></pre></td></tr></table></figure><h1 id="os模块"><a href="#os模块" class="headerlink" title="os模块"></a>os模块</h1><p>os模块是与操作系统交互的一个接口</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">os.getcwd() 获取当前工作目录，即当前python脚本工作的目录路径</span><br><span class="line">os.chdir(<span class="string">&quot;dirname&quot;</span>)  改变当前脚本工作目录；相当于shell下cd</span><br><span class="line">os.curdir  返回当前目录: (<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">os.pardir  获取当前目录的父目录字符串名：(<span class="string">&#x27;..&#x27;</span>)</span><br><span class="line">os.makedirs(<span class="string">&#x27;dirname1/dirname2&#x27;</span>)    可生成多层递归目录</span><br><span class="line">os.removedirs(<span class="string">&#x27;dirname1&#x27;</span>)    若目录为空，则删除，并递归到上一级目录，如若也为空，则删除，依此类推</span><br><span class="line">os.mkdir(<span class="string">&#x27;dirname&#x27;</span>)    生成单级目录；相当于shell中mkdir dirname</span><br><span class="line">os.rmdir(<span class="string">&#x27;dirname&#x27;</span>)    删除单级空目录，若目录不为空则无法删除，报错；相当于shell中rmdir dirname</span><br><span class="line">os.listdir(<span class="string">&#x27;dirname&#x27;</span>)    列出指定目录下的所有文件和子目录，包括隐藏文件，并以列表方式打印</span><br><span class="line">os.remove()  删除一个文件</span><br><span class="line">os.rename(<span class="string">&quot;oldname&quot;</span>,<span class="string">&quot;newname&quot;</span>)  重命名文件/目录</span><br><span class="line">os.stat(<span class="string">&#x27;path/filename&#x27;</span>)  获取文件/目录信息</span><br><span class="line">os.sep    输出操作系统特定的路径分隔符，win下为<span class="string">&quot;\\&quot;</span>,Linux下为<span class="string">&quot;/&quot;</span></span><br><span class="line">os.linesep    输出当前平台使用的行终止符，win下为<span class="string">&quot;\t\n&quot;</span>,Linux下为<span class="string">&quot;\n&quot;</span></span><br><span class="line">os.pathsep    输出用于分割文件路径的字符串 win下为;,Linux下为:</span><br><span class="line">os.name    输出字符串指示当前使用平台。win-&gt;<span class="string">&#x27;nt&#x27;</span>; Linux-&gt;<span class="string">&#x27;posix&#x27;</span></span><br><span class="line">os.system(<span class="string">&quot;bash command&quot;</span>)  运行shell命令，直接显示</span><br><span class="line">os.popen(command[, mode[, bufsize]]) </span><br><span class="line">    command -- 使用的命令。</span><br><span class="line">    mode -- 模式权限可以是 <span class="string">&#x27;r&#x27;</span>(默认) 或 <span class="string">&#x27;w&#x27;</span>。</span><br><span class="line">    bufsize -- 指明了文件需要的缓冲大小：<span class="number">0</span>意味着无缓冲；<span class="number">1</span>意味着行缓冲；其它正值表示使用参数大小的缓冲（大概值，以字节为单位）。负的bufsize意味着使用系统的默认值，一般来说，对于tty设备，它是行缓冲；对于其它文件，它是全缓冲。如果没有改参数，使用系统的默认值。</span><br><span class="line">os.environ  获取系统环境变量</span><br><span class="line">os.path.abspath(path)  返回path规范化的绝对路径</span><br><span class="line">os.path.split(path)  将path分割成目录和文件名二元组返回</span><br><span class="line">os.path.dirname(path)  返回path的目录。其实就是os.path.split(path)的第一个元素</span><br><span class="line">os.path.basename(path)  返回path最后的文件名。如何path以／或\结尾，那么就会返回空值。即os.path.split(path)的第二个元素</span><br><span class="line">os.path.exists(path)  如果path存在，返回<span class="literal">True</span>；如果path不存在，返回<span class="literal">False</span></span><br><span class="line">os.path.isabs(path)  如果path是绝对路径，返回<span class="literal">True</span></span><br><span class="line">os.path.isfile(path)  如果path是一个存在的文件，返回<span class="literal">True</span>。否则返回<span class="literal">False</span></span><br><span class="line">os.path.isdir(path)  如果path是一个存在的目录，则返回<span class="literal">True</span>。否则返回<span class="literal">False</span></span><br><span class="line">os.path.join(path1[, path2[, ...]])  将多个路径组合后返回，第一个绝对路径之前的参数将被忽略</span><br><span class="line">os.path.getatime(path)  返回path所指向的文件或者目录的最后存取时间</span><br><span class="line">os.path.getmtime(path)  返回path所指向的文件或者目录的最后修改时间</span><br><span class="line">os.path.getsize(path) 返回path的大小</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">在Linux和Mac平台上，该函数会原样返回path，在windows平台上会将路径中所有字符转换为小写，并将所有斜杠转换为饭斜杠。</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.normcase(<span class="string">&#x27;c:/windows\\system32\\&#x27;</span>)   </span><br><span class="line"><span class="string">&#x27;c:\\windows\\system32\\&#x27;</span>   </span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">规范化路径，如..和/</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.normpath(<span class="string">&#x27;c://windows\\System32\\../Temp/&#x27;</span>)   </span><br><span class="line"><span class="string">&#x27;c:\\windows\\Temp&#x27;</span>   </span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=<span class="string">&#x27;/Users/jieli/test1/\\\a1/\\\\aa.py/../..&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(os.path.normpath(a))</span><br><span class="line">/Users/jieli/test1</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">os路径处理</span><br><span class="line"><span class="comment">#方式一：</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment">#具体应用</span></span><br><span class="line"><span class="keyword">import</span> os,sys</span><br><span class="line">possible_topdir = os.path.normpath(os.path.join(</span><br><span class="line">    os.path.abspath(__file__),</span><br><span class="line">    os.pardir, <span class="comment">#上一级</span></span><br><span class="line">    os.pardir,</span><br><span class="line">    os.pardir</span><br><span class="line">))</span><br><span class="line">sys.path.insert(<span class="number">0</span>,possible_topdir)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#方式二：</span></span><br><span class="line">os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))</span><br></pre></td></tr></table></figure><h2 id="python调用Shell脚本"><a href="#python调用Shell脚本" class="headerlink" title="python调用Shell脚本"></a>python调用Shell脚本</h2><p>有两种方法：os.system()和os.popen()</p><p>前者返回值是脚本的退出状态码，后者的返回值是脚本执行过程中的输出内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=os.system(<span class="string">&quot;ls&quot;</span>) <span class="comment"># 直接看到运行结果</span></span><br><span class="line">home  lost+found  mysql  py36.tgz  py.tgz  release  scripts  server.tgz  swapfile1  test3  web</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s <span class="comment"># 返回值为0,表示命令执行成功;非0即不成功</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p=os.popen(<span class="string">&quot;ls&quot;</span>)  <span class="comment"># 返回一个file对象，可以对这个文件对象进行相关的操作</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p</span><br><span class="line">&lt;os._wrap_close <span class="built_in">object</span> at <span class="number">0x2b31da178710</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.readlines()</span><br><span class="line">[<span class="string">&#x27;home\n&#x27;</span>, <span class="string">&#x27;lost+found\n&#x27;</span>, <span class="string">&#x27;mysql\n&#x27;</span>, <span class="string">&#x27;py36.tgz\n&#x27;</span>, <span class="string">&#x27;py.tgz\n&#x27;</span>, <span class="string">&#x27;release\n&#x27;</span>, <span class="string">&#x27;scripts\n&#x27;</span>, <span class="string">&#x27;server.tgz\n&#x27;</span>, <span class="string">&#x27;swapfile1\n&#x27;</span>, <span class="string">&#x27;test3\n&#x27;</span>, <span class="string">&#x27;web\n&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.read() <span class="comment"># 既然是文件对象，使用完就应该关闭,所以为空了</span></span><br><span class="line"><span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p=os.popen(<span class="string">&quot;ls&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.read()</span><br><span class="line"><span class="string">&#x27;home\nlost+found\nmysql\npy36.tgz\npy.tgz\nrelease\nscripts\nserver.tgz\nswapfile1\ntest3\nweb\n&#x27;</span></span><br></pre></td></tr></table></figure><p>os.popen()可以实现一个“管道”，从这个命令获取的值可以继续被使用。因为它返回一个文件对象，可以对这个文件对象进行相关的操作。</p><p>os.popen()知识点梳理:</p><ol><li><p>注意：<strong>返回值是文件对象</strong>，既然是文件对象，使用完就应该关闭！网上搜一下，一大把文章提到这个os.popen都是忘记关闭文件对象的。 所以，推荐的写法是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">with os.popen(command, &quot;r&quot;) as p:</span><br><span class="line">    r = p.read()</span><br></pre></td></tr></table></figure></li><li><p>非阻塞</p><p>通俗的讲，非阻塞就是os.popen不会等cmd命令执行完毕就继续下面的代码了.</p><p>那如何让命令执行完后，再执行下一句呢？</p><p>处理方法是使用read()或readlines()对命令的执行结果进行读操作。</p></li><li><p>完全阻塞</p><p>上面写了该函数是非阻塞的，现在怎么又变成完全阻塞的呢？感觉一头雾水了吧。本质上os.popen是非阻塞的，为了实现阻塞的效果，我们使用read()或readlines()对命令结果进行读，由此产生了阻塞的效果。但是，如果你的命令执行无法退出或进入交互模式，这种“读”将形成完全阻塞的情况，表现的像程序卡住了。</p><p>看下面代码实例1：</p></li></ol><p><img src="image-20200229161849113.png" alt="img"><br>   os.popen执行了ping  127.0.0.1  -t 该命令会一直执行，除非CTRL+C强制退出，因而，执行readlines读取命令输出时会造成卡住。</p><p>   代码实例2：</p><p>   使用os.popen执行sqlplus命令对数据库进行操作的场景，如果sqlplus执行失败，会进入交互模式，如图所示，此时使用readlines()读取执行结果时也会卡死，效果如上图：<br><img src="image-20200229161936251.png" alt="img"><br>   总结</p><p>   os.popen()在大多数场景都是挺好用方便的，但是也有坑！！ 具体应用中，需要注意下。</p><p>   建议：</p><ol><li>在需要读取命令执行结果时，避免在命令无法退出或进入交互模式的场景应用os.popen;</li><li><p>os.popen()无法满足需求时，可以考虑subprocess.Popen();</p><p><a href="http://wangjieyu.cn/2020/01/07/Python/%E5%A5%87%E9%97%BB%E6%9D%82%E8%B0%88/subprocess%E6%A8%A1%E5%9D%97/">http://wangjieyu.cn/2020/01/07/Python/%E5%A5%87%E9%97%BB%E6%9D%82%E8%B0%88/subprocess%E6%A8%A1%E5%9D%97/</a></p><p><a href="http://moyand.gitee.io//2020/01/07/Python/%E5%A5%87%E9%97%BB%E6%9D%82%E8%B0%88/subprocess%E6%A8%A1%E5%9D%97/">http://moyand.gitee.io//2020/01/07/Python/%E5%A5%87%E9%97%BB%E6%9D%82%E8%B0%88/subprocess%E6%A8%A1%E5%9D%97/</a></p></li></ol><h1 id="sys模块"><a href="#sys模块" class="headerlink" title="sys模块"></a>sys模块</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sys.argv           命令行参数<span class="type">List</span>，第一个元素是程序本身路径</span><br><span class="line">sys.exit(n)        退出程序，正常退出时exit(<span class="number">0</span>)</span><br><span class="line">sys.version        获取Python解释程序的版本信息</span><br><span class="line">sys.maxint         最大的Int值</span><br><span class="line">sys.path           返回模块的搜索路径，初始化时使用PYTHONPATH环境变量的值</span><br><span class="line">sys.platform       返回操作系统平台名称</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#=========知识储备==========</span></span><br><span class="line"><span class="comment">#进度条的效果</span></span><br><span class="line">[<span class="comment">#             ]</span></span><br><span class="line">[<span class="comment">##            ]</span></span><br><span class="line">[<span class="comment">###           ]</span></span><br><span class="line">[<span class="comment">####          ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#指定宽度</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;[%-15s]&#x27;</span> %<span class="string">&#x27;#&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;[%-15s]&#x27;</span> %<span class="string">&#x27;##&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;[%-15s]&#x27;</span> %<span class="string">&#x27;###&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;[%-15s]&#x27;</span> %<span class="string">&#x27;####&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印%</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%s%%&#x27;</span> %(<span class="number">100</span>)) <span class="comment">#第二个%号代表取消第一个%的特殊意义</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#可传参来控制宽度</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;[%%-%ds]&#x27;</span> %<span class="number">50</span>) <span class="comment">#[%-50s]</span></span><br><span class="line"><span class="built_in">print</span>((<span class="string">&#x27;[%%-%ds]&#x27;</span> %<span class="number">50</span>) %<span class="string">&#x27;#&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>((<span class="string">&#x27;[%%-%ds]&#x27;</span> %<span class="number">50</span>) %<span class="string">&#x27;##&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>((<span class="string">&#x27;[%%-%ds]&#x27;</span> %<span class="number">50</span>) %<span class="string">&#x27;###&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#=========实现打印进度条函数==========</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">progress</span>(<span class="params">percent,width=<span class="number">50</span></span>):</span><br><span class="line">    <span class="keyword">if</span> percent &gt;= <span class="number">1</span>:</span><br><span class="line">        percent=<span class="number">1</span></span><br><span class="line">    show_str=(<span class="string">&#x27;[%%-%ds]&#x27;</span> %width) %(<span class="built_in">int</span>(width*percent)*<span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\r%s %d%%&#x27;</span> %(show_str,<span class="built_in">int</span>(<span class="number">100</span>*percent)),file=sys.stdout,flush=<span class="literal">True</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#=========应用==========</span></span><br><span class="line">data_size=<span class="number">1025</span></span><br><span class="line">recv_size=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> recv_size &lt; data_size:</span><br><span class="line">    time.sleep(<span class="number">0.1</span>) <span class="comment">#模拟数据的传输延迟</span></span><br><span class="line">    recv_size+=<span class="number">1024</span> <span class="comment">#每次收1024</span></span><br><span class="line"></span><br><span class="line">    percent=recv_size/data_size <span class="comment">#接收的比例</span></span><br><span class="line">    progress(percent,width=<span class="number">70</span>) <span class="comment">#进度条的宽度70</span></span><br></pre></td></tr></table></figure><h1 id="shutil模块"><a href="#shutil模块" class="headerlink" title="shutil模块"></a>shutil模块</h1><p>高级的 文件、文件夹、压缩包 处理模块</p><p><code>shutil.copyfileobj(fsrc, fdst[, length])</code></p><p>将文件内容拷贝到另一个文件中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"> </span><br><span class="line">shutil.copyfileobj(<span class="built_in">open</span>(<span class="string">&#x27;old.xml&#x27;</span>,<span class="string">&#x27;r&#x27;</span>), <span class="built_in">open</span>(<span class="string">&#x27;new.xml&#x27;</span>, <span class="string">&#x27;w&#x27;</span>))</span><br></pre></td></tr></table></figure><p><code>shutil.copyfile(src, dst)</code></p><p>拷贝文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shutil.copyfile(<span class="string">&#x27;f1.log&#x27;</span>, <span class="string">&#x27;f2.log&#x27;</span>) <span class="comment">#目标文件无需存在</span></span><br></pre></td></tr></table></figure><p><code>shutil.copymode(src, dst)</code></p><p>仅拷贝权限。内容、组、用户均不变</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shutil.copymode(<span class="string">&#x27;f1.log&#x27;</span>, <span class="string">&#x27;f2.log&#x27;</span>) <span class="comment">#目标文件必须存在</span></span><br></pre></td></tr></table></figure><p> <code>shutil.copystat(src, dst)</code></p><p>仅拷贝状态的信息，包括：mode bits, atime, mtime, flags</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shutil.copystat(<span class="string">&#x27;f1.log&#x27;</span>, <span class="string">&#x27;f2.log&#x27;</span>) <span class="comment">#目标文件必须存在</span></span><br></pre></td></tr></table></figure><p> <code>shutil.copy(src, dst)</code></p><p>拷贝文件和权限</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"> </span><br><span class="line">shutil.copy(<span class="string">&#x27;f1.log&#x27;</span>, <span class="string">&#x27;f2.log&#x27;</span>)</span><br></pre></td></tr></table></figure><p> <code>shutil.copy2(src, dst)</code></p><p>拷贝文件和状态信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"> </span><br><span class="line">shutil.copy2(<span class="string">&#x27;f1.log&#x27;</span>, <span class="string">&#x27;f2.log&#x27;</span>)</span><br></pre></td></tr></table></figure><p> <code>shutil.ignore_patterns(\*patterns)</code></p><p><code>shutil.copytree(src, dst, symlinks=False, ignore=None)</code></p><p>递归的去拷贝文件夹</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="comment">#目标目录不能存在，注意对folder2目录父级目录要有可写权限，ignore的意思是排除 </span></span><br><span class="line">shutil.copytree(<span class="string">&#x27;folder1&#x27;</span>, <span class="string">&#x27;folder2&#x27;</span>, ignore=shutil.ignore_patterns(<span class="string">&#x27;*.pyc&#x27;</span>, <span class="string">&#x27;tmp*&#x27;</span>)) </span><br></pre></td></tr></table></figure><p><code>拷贝软连接</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line">shutil.copytree(<span class="string">&#x27;f1&#x27;</span>, <span class="string">&#x27;f2&#x27;</span>, symlinks=<span class="literal">True</span>, ignore=shutil.ignore_patterns(<span class="string">&#x27;*.pyc&#x27;</span>, <span class="string">&#x27;tmp*&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">通常的拷贝都把软连接拷贝成硬链接，即对待软连接来说，创建新的文件</span></span><br></pre></td></tr></table></figure><p><code>shutil.rmtree(path[, ignore_errors[, onerror]])</code></p><p>递归的去删除文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"> </span><br><span class="line">shutil.rmtree(<span class="string">&#x27;folder1&#x27;</span>)</span><br></pre></td></tr></table></figure><p><code>shutil.move(src, dst)</code></p><p>递归的去移动文件，它类似mv命令，其实就是重命名。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"> </span><br><span class="line">shutil.move(<span class="string">&#x27;folder1&#x27;</span>, <span class="string">&#x27;folder3&#x27;</span>)</span><br></pre></td></tr></table></figure><p> <code>shutil.make_archive(base_name, format,...)</code></p><p>创建压缩包并返回文件路径，例如：zip、tar</p><p>创建压缩包并返回文件路径，例如：zip、tar</p><ul><li>base_name： 压缩包的文件名，也可以是压缩包的路径。只是文件名时，则保存至当前目录，否则保存至指定路径，<br>如 data_bak            =&gt;保存至当前路径<br>如：/tmp/data_bak =&gt;保存至/tmp/</li><li>format：    压缩包种类，“zip”, “tar”, “bztar”，“gztar”</li><li>root_dir：    要压缩的文件夹路径（默认当前目录）</li><li>owner：    用户，默认当前用户</li><li>group：    组，默认当前组</li><li>logger：    用于记录日志，通常是logging.Logger对象</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将 /data 下的文件打包放置当前程序目录</span></span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line">ret = shutil.make_archive(<span class="string">&quot;data_bak&quot;</span>, <span class="string">&#x27;gztar&#x27;</span>, root_dir=<span class="string">&#x27;/data&#x27;</span>)</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#将 /data下的文件打包放置 /tmp/目录</span></span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line">ret = shutil.make_archive(<span class="string">&quot;/tmp/data_bak&quot;</span>, <span class="string">&#x27;gztar&#x27;</span>, root_dir=<span class="string">&#x27;/data&#x27;</span>) </span><br></pre></td></tr></table></figure><p>shutil 对压缩包的处理是调用 ZipFile 和 TarFile 两个模块来进行的，详细：</p><p><code>zipfile压缩解压缩</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 压缩</span></span><br><span class="line">z = zipfile.ZipFile(<span class="string">&#x27;laxi.zip&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">z.write(<span class="string">&#x27;a.log&#x27;</span>)</span><br><span class="line">z.write(<span class="string">&#x27;data.data&#x27;</span>)</span><br><span class="line">z.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">z = zipfile.ZipFile(<span class="string">&#x27;laxi.zip&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">z.extractall(path=<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">z.close()</span><br></pre></td></tr></table></figure><p><code>tarfile压缩解压缩</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tarfile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 压缩</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t=tarfile.<span class="built_in">open</span>(<span class="string">&#x27;/tmp/allen.tar&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.add(<span class="string">&#x27;/test1/a.py&#x27;</span>,arcname=<span class="string">&#x27;a.bak&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.add(<span class="string">&#x27;/test1/b.py&#x27;</span>,arcname=<span class="string">&#x27;b.bak&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t=tarfile.<span class="built_in">open</span>(<span class="string">&#x27;/tmp/allen.tar&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.extractall(<span class="string">&#x27;/allen&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.close()</span><br></pre></td></tr></table></figure><h1 id="json-amp-pickle模块"><a href="#json-amp-pickle模块" class="headerlink" title="json&amp;pickle模块"></a>json&amp;pickle模块</h1><p>之前我们学习过用eval内置方法可以将一个字符串转成python对象，不过，eval方法是有局限性的，对于普通的数据类型，json.loads和eval都能用，但遇到特殊类型的时候，eval就不管用了,所以eval的重点还是通常用来执行一个字符串表达式，并返回表达式的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">x=<span class="string">&quot;[null,true,false,1]&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">eval</span>(x)) <span class="comment">#报错，无法解析null类型，而json就可以</span></span><br><span class="line"><span class="built_in">print</span>(json.loads(x)) </span><br></pre></td></tr></table></figure><h2 id="什么是序列化？"><a href="#什么是序列化？" class="headerlink" title="什么是序列化？"></a>什么是序列化？</h2><p>我们把对象(变量)从内存中变成可存储或传输的过程称之为序列化，在Python中叫pickling，在其他语言中也被称之为serialization，marshalling，flattening等等，都是一个意思。</p><h2 id="为什么要序列化？"><a href="#为什么要序列化？" class="headerlink" title="为什么要序列化？"></a>为什么要序列化？</h2><p>1：持久保存状态</p><p>需知一个软件/程序的执行就在处理一系列状态的变化，在编程语言中，’状态’会以各种各样有结构的数据类型(也可简单的理解为变量)的形式被保存在内存中。</p><p>内存是无法永久保存数据的，当程序运行了一段时间，我们断电或者重启程序，内存中关于这个程序的之前一段时间的数据（有结构）都被清空了。</p><p>在断电或重启程序之前将程序当前内存中所有的数据都保存下来（保存到文件中），以便于下次程序执行能够从文件中载入之前的数据，然后继续执行，这就是序列化。</p><p>具体的来说，你玩使命召唤闯到了第13关，你保存游戏状态，关机走人，下次再玩，还能从上次的位置开始继续闯关。或如，虚拟机状态的挂起等。</p><p>2：跨平台数据交互</p><p>序列化之后，不仅可以把序列化后的内容写入磁盘，还可以通过网络传输到别的机器上，如果收发的双方约定好实用一种序列化的格式，那么便打破了平台/语言差异化带来的限制，实现了跨平台数据交互。</p><p>反过来，把变量内容从序列化的对象重新读到内存里称之为反序列化，即unpickling。</p><p>如何序列化之json和pickle： </p><h2 id="json"><a href="#json" class="headerlink" title="json"></a>json</h2><p>如果我们要在不同的编程语言之间传递对象，就必须把对象序列化为标准格式，比如XML，但更好的方法是序列化为JSON，因为JSON表示出来就是一个字符串，可以被所有语言读取，也可以方便地存储到磁盘或者通过网络传输。JSON不仅是标准格式，并且比XML更快，而且可以直接在Web页面中读取，非常方便。</p><p>JSON表示的对象就是标准的JavaScript语言的对象，JSON和Python内置的数据类型对应如下：</p><p><img src="877318-20160911105642628-530508765.png" alt="img"><br><img src="1036857-20170215162939035-339680318.png" alt="img"><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="keyword">import</span> json</span><br><span class="line"> <span class="number">2</span>  </span><br><span class="line"> <span class="number">3</span> dic=&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;alvin&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">23</span>,<span class="string">&#x27;sex&#x27;</span>:<span class="string">&#x27;male&#x27;</span>&#125;</span><br><span class="line"> <span class="number">4</span> <span class="built_in">print</span>(<span class="built_in">type</span>(dic))<span class="comment">#&lt;class &#x27;dict&#x27;&gt;</span></span><br><span class="line"> <span class="number">5</span>  </span><br><span class="line"> <span class="number">6</span> j=json.dumps(dic)</span><br><span class="line"> <span class="number">7</span> <span class="built_in">print</span>(<span class="built_in">type</span>(j))<span class="comment">#&lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"> <span class="number">8</span>  </span><br><span class="line"> <span class="number">9</span>  </span><br><span class="line"><span class="number">10</span> f=<span class="built_in">open</span>(<span class="string">&#x27;序列化对象&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="number">11</span> f.write(j)  <span class="comment">#-------------------等价于json.dump(dic,f)</span></span><br><span class="line"><span class="number">12</span> f.close()</span><br><span class="line"><span class="number">13</span> <span class="comment">#-----------------------------反序列化&lt;br&gt;</span></span><br><span class="line"><span class="number">14</span> <span class="keyword">import</span> json</span><br><span class="line"><span class="number">15</span> f=<span class="built_in">open</span>(<span class="string">&#x27;序列化对象&#x27;</span>)</span><br><span class="line"><span class="number">16</span> data=json.loads(f.read())<span class="comment">#  等价于data=json.load(f)</span></span><br></pre></td></tr></table></figure></p><p><code>注意点</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="comment">#dct=&quot;&#123;&#x27;1&#x27;:111&#125;&quot;#json 不认单引号</span></span><br><span class="line"><span class="comment">#dct=str(&#123;&quot;1&quot;:111&#125;)#报错,因为生成的数据还是单引号:&#123;&#x27;one&#x27;: 1&#125;</span></span><br><span class="line"></span><br><span class="line">dct=<span class="string">&#x27;&#123;&quot;1&quot;:&quot;111&quot;&#125;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(json.loads(dct))</span><br><span class="line"></span><br><span class="line"><span class="comment">#conclusion:</span></span><br><span class="line"><span class="comment">#        无论数据是怎样创建的，只要满足json格式，就可以json.loads出来,不一定非要dumps的数据才能loads</span></span><br></pre></td></tr></table></figure><h2 id="pickle"><a href="#pickle" class="headerlink" title="pickle"></a>pickle</h2><p><img src="1036857-20170215164644722-1590025858.png" alt="img"><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="keyword">import</span> pickle</span><br><span class="line"> <span class="number">2</span>  </span><br><span class="line"> <span class="number">3</span> dic=&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;alvin&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">23</span>,<span class="string">&#x27;sex&#x27;</span>:<span class="string">&#x27;male&#x27;</span>&#125;</span><br><span class="line"> <span class="number">4</span>  </span><br><span class="line"> <span class="number">5</span> <span class="built_in">print</span>(<span class="built_in">type</span>(dic))<span class="comment">#&lt;class &#x27;dict&#x27;&gt;</span></span><br><span class="line"> <span class="number">6</span>  </span><br><span class="line"> <span class="number">7</span> j=pickle.dumps(dic)</span><br><span class="line"> <span class="number">8</span> <span class="built_in">print</span>(<span class="built_in">type</span>(j))<span class="comment">#&lt;class &#x27;bytes&#x27;&gt;</span></span><br><span class="line"> <span class="number">9</span>  </span><br><span class="line"><span class="number">10</span>  </span><br><span class="line"><span class="number">11</span> f=<span class="built_in">open</span>(<span class="string">&#x27;序列化对象_pickle&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>)<span class="comment">#注意是w是写入str,wb是写入bytes,j是&#x27;bytes&#x27;</span></span><br><span class="line"><span class="number">12</span> f.write(j)  <span class="comment">#-------------------等价于pickle.dump(dic,f)</span></span><br><span class="line"><span class="number">13</span>  </span><br><span class="line"><span class="number">14</span> f.close()</span><br><span class="line"><span class="number">15</span> <span class="comment">#-------------------------反序列化</span></span><br><span class="line"><span class="number">16</span> <span class="keyword">import</span> pickle</span><br><span class="line"><span class="number">17</span> f=<span class="built_in">open</span>(<span class="string">&#x27;序列化对象_pickle&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line"><span class="number">18</span>  </span><br><span class="line"><span class="number">19</span> data=pickle.loads(f.read())<span class="comment">#  等价于data=pickle.load(f)</span></span><br><span class="line"><span class="number">20</span>  </span><br><span class="line"><span class="number">21</span>  </span><br><span class="line"><span class="number">22</span> <span class="built_in">print</span>(data[<span class="string">&#x27;age&#x27;</span>])   </span><br></pre></td></tr></table></figure></p><p>  Pickle的问题和所有其他编程语言特有的序列化问题一样，就是它只能用于Python，并且可能不同版本的Python彼此都不兼容，因此，只能用Pickle保存那些不重要的数据，不能成功地反序列化也没关系。</p><h2 id="json-amp-pickle-的区别"><a href="#json-amp-pickle-的区别" class="headerlink" title="json&amp;pickle 的区别"></a>json&amp;pickle 的区别</h2><ol><li><p>json是可以在不同语言之间交换数据的，而pickle只在python之间使用。</p></li><li><p>json只能序列化最基本的数据类型，而pickle可以序列化所有的数据类型，包括类，函数都可以序列化。</p></li><li><p>json模块和picle模块都有  dumps、dump、loads、load四种方法，而且用法一样。</p></li></ol><h1 id="shelve模块"><a href="#shelve模块" class="headerlink" title="shelve模块"></a>shelve模块</h1><p> shelve模块比pickle模块简单，只有一个open函数，返回类似字典的对象，可读可写;key必须为字符串，而值可以是python所支持的数据类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> shelve</span><br><span class="line"></span><br><span class="line">f=shelve.<span class="built_in">open</span>(<span class="string">r&#x27;sheve.txt&#x27;</span>)</span><br><span class="line"><span class="comment"># f[&#x27;stu1_info&#x27;]=&#123;&#x27;name&#x27;:&#x27;allen&#x27;,&#x27;age&#x27;:18,&#x27;hobby&#x27;:[&#x27;piao&#x27;,&#x27;smoking&#x27;,&#x27;drinking&#x27;]&#125;</span></span><br><span class="line"><span class="comment"># f[&#x27;stu2_info&#x27;]=&#123;&#x27;name&#x27;:&#x27;gangdan&#x27;,&#x27;age&#x27;:53&#125;</span></span><br><span class="line"><span class="comment"># f[&#x27;school_info&#x27;]=&#123;&#x27;website&#x27;:&#x27;http://www.pypy.org&#x27;,&#x27;city&#x27;:&#x27;beijing&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(f[<span class="string">&#x27;stu1_info&#x27;</span>][<span class="string">&#x27;hobby&#x27;</span>])</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><h1 id="xml模块"><a href="#xml模块" class="headerlink" title="xml模块"></a>xml模块</h1><p>xml是实现不同语言或程序之间进行数据交换的协议，跟json差不多，但json使用起来更简单，不过，古时候，在json还没诞生的黑暗年代，大家只能选择用xml呀，至今很多传统公司如金融行业的很多系统的接口还主要是xml。</p><p>xml的格式如下，就是通过&lt;&gt;节点来区别数据结构的: </p><p><code>xml数据</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span><br><span class="line">&lt;data&gt;</span><br><span class="line">    &lt;country name=<span class="string">&quot;Liechtenstein&quot;</span>&gt;</span><br><span class="line">        &lt;rank updated=<span class="string">&quot;yes&quot;</span>&gt;<span class="number">2</span>&lt;/rank&gt;</span><br><span class="line">        &lt;year&gt;<span class="number">2008</span>&lt;/year&gt;</span><br><span class="line">        &lt;gdppc&gt;<span class="number">141100</span>&lt;/gdppc&gt;</span><br><span class="line">        &lt;neighbor name=<span class="string">&quot;Austria&quot;</span> direction=<span class="string">&quot;E&quot;</span>/&gt;</span><br><span class="line">        &lt;neighbor name=<span class="string">&quot;Switzerland&quot;</span> direction=<span class="string">&quot;W&quot;</span>/&gt;</span><br><span class="line">    &lt;/country&gt;</span><br><span class="line">    &lt;country name=<span class="string">&quot;Singapore&quot;</span>&gt;</span><br><span class="line">        &lt;rank updated=<span class="string">&quot;yes&quot;</span>&gt;<span class="number">5</span>&lt;/rank&gt;</span><br><span class="line">        &lt;year&gt;<span class="number">2011</span>&lt;/year&gt;</span><br><span class="line">        &lt;gdppc&gt;<span class="number">59900</span>&lt;/gdppc&gt;</span><br><span class="line">        &lt;neighbor name=<span class="string">&quot;Malaysia&quot;</span> direction=<span class="string">&quot;N&quot;</span>/&gt;</span><br><span class="line">    &lt;/country&gt;</span><br><span class="line">    &lt;country name=<span class="string">&quot;Panama&quot;</span>&gt;</span><br><span class="line">        &lt;rank updated=<span class="string">&quot;yes&quot;</span>&gt;<span class="number">69</span>&lt;/rank&gt;</span><br><span class="line">        &lt;year&gt;<span class="number">2011</span>&lt;/year&gt;</span><br><span class="line">        &lt;gdppc&gt;<span class="number">13600</span>&lt;/gdppc&gt;</span><br><span class="line">        &lt;neighbor name=<span class="string">&quot;Costa Rica&quot;</span> direction=<span class="string">&quot;W&quot;</span>/&gt;</span><br><span class="line">        &lt;neighbor name=<span class="string">&quot;Colombia&quot;</span> direction=<span class="string">&quot;E&quot;</span>/&gt;</span><br><span class="line">    &lt;/country&gt;</span><br><span class="line">&lt;/data&gt;</span><br></pre></td></tr></table></figure><p>xml协议在各个语言里的都 是支持的，在python中可以用以下模块操作xml：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># print(root.iter(&#x27;year&#x27;)) #全文搜索</span></span><br><span class="line"><span class="comment"># print(root.find(&#x27;country&#x27;)) #在root的子节点找，只找一个</span></span><br><span class="line"><span class="comment"># print(root.findall(&#x27;country&#x27;)) #在root的子节点找，找所有</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</span><br><span class="line"> </span><br><span class="line">tree = ET.parse(<span class="string">&quot;xmltest.xml&quot;</span>)</span><br><span class="line">root = tree.getroot()</span><br><span class="line"><span class="built_in">print</span>(root.tag)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#遍历xml文档</span></span><br><span class="line"><span class="keyword">for</span> child <span class="keyword">in</span> root:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;========&gt;&#x27;</span>,child.tag,child.attrib,child.attrib[<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> child:</span><br><span class="line">        <span class="built_in">print</span>(i.tag,i.attrib,i.text)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#只遍历year 节点</span></span><br><span class="line"><span class="keyword">for</span> node <span class="keyword">in</span> root.<span class="built_in">iter</span>(<span class="string">&#x27;year&#x27;</span>):</span><br><span class="line">    <span class="built_in">print</span>(node.tag,node.text)</span><br><span class="line"><span class="comment">#---------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</span><br><span class="line"> </span><br><span class="line">tree = ET.parse(<span class="string">&quot;xmltest.xml&quot;</span>)</span><br><span class="line">root = tree.getroot()</span><br><span class="line"> </span><br><span class="line"><span class="comment">#修改</span></span><br><span class="line"><span class="keyword">for</span> node <span class="keyword">in</span> root.<span class="built_in">iter</span>(<span class="string">&#x27;year&#x27;</span>):</span><br><span class="line">    new_year=<span class="built_in">int</span>(node.text)+<span class="number">1</span></span><br><span class="line">    node.text=<span class="built_in">str</span>(new_year)</span><br><span class="line">    node.<span class="built_in">set</span>(<span class="string">&#x27;updated&#x27;</span>,<span class="string">&#x27;yes&#x27;</span>)</span><br><span class="line">    node.<span class="built_in">set</span>(<span class="string">&#x27;version&#x27;</span>,<span class="string">&#x27;1.0&#x27;</span>)</span><br><span class="line">tree.write(<span class="string">&#x27;test.xml&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">#删除node</span></span><br><span class="line"><span class="keyword">for</span> country <span class="keyword">in</span> root.findall(<span class="string">&#x27;country&#x27;</span>):</span><br><span class="line">   rank = <span class="built_in">int</span>(country.find(<span class="string">&#x27;rank&#x27;</span>).text)</span><br><span class="line">   <span class="keyword">if</span> rank &gt; <span class="number">50</span>:</span><br><span class="line">     root.remove(country)</span><br><span class="line"> </span><br><span class="line">tree.write(<span class="string">&#x27;output.xml&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在country内添加（append）节点year2</span></span><br><span class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</span><br><span class="line">tree = ET.parse(<span class="string">&quot;a.xml&quot;</span>)</span><br><span class="line">root=tree.getroot()</span><br><span class="line"><span class="keyword">for</span> country <span class="keyword">in</span> root.findall(<span class="string">&#x27;country&#x27;</span>):</span><br><span class="line">    <span class="keyword">for</span> year <span class="keyword">in</span> country.findall(<span class="string">&#x27;year&#x27;</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span>(year.text) &gt; <span class="number">2000</span>:</span><br><span class="line">            year2=ET.Element(<span class="string">&#x27;year2&#x27;</span>)</span><br><span class="line">            year2.text=<span class="string">&#x27;新年&#x27;</span></span><br><span class="line">            year2.attrib=&#123;<span class="string">&#x27;update&#x27;</span>:<span class="string">&#x27;yes&#x27;</span>&#125;</span><br><span class="line">            country.append(year2) <span class="comment">#往country节点下添加子节点</span></span><br><span class="line"></span><br><span class="line">tree.write(<span class="string">&#x27;a.xml.swap&#x27;</span>)</span><br></pre></td></tr></table></figure><p>自己创建xml文档：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">new_xml = ET.Element(<span class="string">&quot;namelist&quot;</span>)</span><br><span class="line">name = ET.SubElement(new_xml,<span class="string">&quot;name&quot;</span>,attrib=&#123;<span class="string">&quot;enrolled&quot;</span>:<span class="string">&quot;yes&quot;</span>&#125;)</span><br><span class="line">age = ET.SubElement(name,<span class="string">&quot;age&quot;</span>,attrib=&#123;<span class="string">&quot;checked&quot;</span>:<span class="string">&quot;no&quot;</span>&#125;)</span><br><span class="line">sex = ET.SubElement(name,<span class="string">&quot;sex&quot;</span>)</span><br><span class="line">sex.text = <span class="string">&#x27;33&#x27;</span></span><br><span class="line">name2 = ET.SubElement(new_xml,<span class="string">&quot;name&quot;</span>,attrib=&#123;<span class="string">&quot;enrolled&quot;</span>:<span class="string">&quot;no&quot;</span>&#125;)</span><br><span class="line">age = ET.SubElement(name2,<span class="string">&quot;age&quot;</span>)</span><br><span class="line">age.text = <span class="string">&#x27;19&#x27;</span></span><br><span class="line"> </span><br><span class="line">et = ET.ElementTree(new_xml) <span class="comment">#生成文档对象</span></span><br><span class="line">et.write(<span class="string">&quot;test.xml&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>,xml_declaration=<span class="literal">True</span>)</span><br><span class="line"> </span><br><span class="line">ET.dump(new_xml) <span class="comment">#打印生成的格式</span></span><br></pre></td></tr></table></figure><h1 id="configparser模块"><a href="#configparser模块" class="headerlink" title="configparser模块"></a>configparser模块</h1><p>配置文件如下： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注释1</span></span><br><span class="line"><span class="comment"># 注释2</span></span><br><span class="line"></span><br><span class="line">[section1]</span><br><span class="line">k1 = v1</span><br><span class="line">k2:v2</span><br><span class="line">user=allen</span><br><span class="line">age=<span class="number">18</span></span><br><span class="line">is_admin=true</span><br><span class="line">salary=<span class="number">31</span></span><br><span class="line">[section2]</span><br><span class="line">k1 = v1</span><br></pre></td></tr></table></figure><h2 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> configparser</span><br><span class="line"></span><br><span class="line">config=configparser.ConfigParser()</span><br><span class="line">config.read(<span class="string">&#x27;a.cfg&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看所有的标题</span></span><br><span class="line">res=config.sections() <span class="comment">#[&#x27;section1&#x27;, &#x27;section2&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看标题section1下所有key=value的key</span></span><br><span class="line">options=config.options(<span class="string">&#x27;section1&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(options) <span class="comment">#[&#x27;k1&#x27;, &#x27;k2&#x27;, &#x27;user&#x27;, &#x27;age&#x27;, &#x27;is_admin&#x27;, &#x27;salary&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看标题section1下所有key=value的(key,value)格式</span></span><br><span class="line">item_list=config.items(<span class="string">&#x27;section1&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(item_list) <span class="comment">#[(&#x27;k1&#x27;, &#x27;v1&#x27;), (&#x27;k2&#x27;, &#x27;v2&#x27;), (&#x27;user&#x27;, &#x27;allen&#x27;), (&#x27;age&#x27;, &#x27;18&#x27;), (&#x27;is_admin&#x27;, &#x27;true&#x27;), (&#x27;salary&#x27;, &#x27;31&#x27;)]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看标题section1下user的值=&gt;字符串格式</span></span><br><span class="line">val=config.get(<span class="string">&#x27;section1&#x27;</span>,<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(val) <span class="comment">#allen</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看标题section1下age的值=&gt;整数格式</span></span><br><span class="line">val1=config.getint(<span class="string">&#x27;section1&#x27;</span>,<span class="string">&#x27;age&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(val1) <span class="comment">#18</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看标题section1下is_admin的值=&gt;布尔值格式</span></span><br><span class="line">val2=config.getboolean(<span class="string">&#x27;section1&#x27;</span>,<span class="string">&#x27;is_admin&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(val2) <span class="comment">#True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看标题section1下salary的值=&gt;浮点型格式</span></span><br><span class="line">val3=config.getfloat(<span class="string">&#x27;section1&#x27;</span>,<span class="string">&#x27;salary&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(val3) <span class="comment">#31.0</span></span><br></pre></td></tr></table></figure><h2 id="改写"><a href="#改写" class="headerlink" title="改写"></a>改写</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> configparser</span><br><span class="line"></span><br><span class="line">config=configparser.ConfigParser()</span><br><span class="line">config.read(<span class="string">&#x27;a.cfg&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除整个标题section2</span></span><br><span class="line">config.remove_section(<span class="string">&#x27;section2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除标题section1下的某个k1和k2</span></span><br><span class="line">config.remove_option(<span class="string">&#x27;section1&#x27;</span>,<span class="string">&#x27;k1&#x27;</span>)</span><br><span class="line">config.remove_option(<span class="string">&#x27;section1&#x27;</span>,<span class="string">&#x27;k2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#判断是否存在某个标题</span></span><br><span class="line"><span class="built_in">print</span>(config.has_section(<span class="string">&#x27;section1&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#判断标题section1下是否有user</span></span><br><span class="line"><span class="built_in">print</span>(config.has_option(<span class="string">&#x27;section1&#x27;</span>,<span class="string">&#x27;&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#添加一个标题</span></span><br><span class="line">config.add_section(<span class="string">&#x27;allen&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#在标题allen下添加name=allen,age=18的配置</span></span><br><span class="line">config.<span class="built_in">set</span>(<span class="string">&#x27;allen&#x27;</span>,<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;allen&#x27;</span>)</span><br><span class="line">config.<span class="built_in">set</span>(<span class="string">&#x27;allen&#x27;</span>,<span class="string">&#x27;age&#x27;</span>,<span class="number">18</span>) <span class="comment">#报错,必须是字符串</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#最后将修改的内容写入文件,完成最终的修改</span></span><br><span class="line">config.write(<span class="built_in">open</span>(<span class="string">&#x27;a.cfg&#x27;</span>,<span class="string">&#x27;w&#x27;</span>))</span><br></pre></td></tr></table></figure><p><code>基于上述方法添加一个ini文档</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> configparser</span><br><span class="line">  </span><br><span class="line">config = configparser.ConfigParser()</span><br><span class="line">config[<span class="string">&quot;DEFAULT&quot;</span>] = &#123;<span class="string">&#x27;ServerAliveInterval&#x27;</span>: <span class="string">&#x27;45&#x27;</span>,</span><br><span class="line">                      <span class="string">&#x27;Compression&#x27;</span>: <span class="string">&#x27;yes&#x27;</span>,</span><br><span class="line">                     <span class="string">&#x27;CompressionLevel&#x27;</span>: <span class="string">&#x27;9&#x27;</span>&#125;</span><br><span class="line">  </span><br><span class="line">config[<span class="string">&#x27;bitbucket.org&#x27;</span>] = &#123;&#125;</span><br><span class="line">config[<span class="string">&#x27;bitbucket.org&#x27;</span>][<span class="string">&#x27;User&#x27;</span>] = <span class="string">&#x27;hg&#x27;</span></span><br><span class="line">config[<span class="string">&#x27;topsecret.server.com&#x27;</span>] = &#123;&#125;</span><br><span class="line">topsecret = config[<span class="string">&#x27;topsecret.server.com&#x27;</span>]</span><br><span class="line">topsecret[<span class="string">&#x27;Host Port&#x27;</span>] = <span class="string">&#x27;50022&#x27;</span>     <span class="comment"># mutates the parser</span></span><br><span class="line">topsecret[<span class="string">&#x27;ForwardX11&#x27;</span>] = <span class="string">&#x27;no&#x27;</span>  <span class="comment"># same here</span></span><br><span class="line">config[<span class="string">&#x27;DEFAULT&#x27;</span>][<span class="string">&#x27;ForwardX11&#x27;</span>] = <span class="string">&#x27;yes&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;example.ini&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> configfile:</span><br><span class="line">   config.write(configfile)</span><br></pre></td></tr></table></figure><h1 id="hashlib模块"><a href="#hashlib模块" class="headerlink" title="hashlib模块"></a>hashlib模块</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、什么叫hash:hash是一种算法（3.x里代替了md5模块和sha模块，主要提供 SHA1, SHA224, SHA256, SHA384, SHA512 ，MD5 算法），该算法接受传入的内容，经过运算得到一串hash值</span></span><br><span class="line"><span class="comment"># 2、hash值的特点是：</span></span><br><span class="line"><span class="comment">#2.1 只要传入的内容一样，得到的hash值必然一样=====&gt;要用明文传输密码文件完整性校验</span></span><br><span class="line"><span class="comment">#2.2 不能由hash值返解成内容=======》把密码做成hash值，不应该在网络传输明文密码</span></span><br><span class="line"><span class="comment">#2.3 只要使用的hash算法不变，无论校验的内容有多大，得到的hash值长度是固定的</span></span><br></pre></td></tr></table></figure><p> hash算法就像一座工厂，工厂接收你送来的原材料（可以用m.update()为工厂运送原材料），经过加工返回的产品就是hash值</p><p><img src="1036857-20180410101832069-1144106861.png" alt="img"><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"> </span><br><span class="line">m=hashlib.md5()<span class="comment"># m=hashlib.sha256()</span></span><br><span class="line"> </span><br><span class="line">m.update(<span class="string">&#x27;hello&#x27;</span>.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(m.hexdigest())  <span class="comment">#5d41402abc4b2a76b9719d911017c592</span></span><br><span class="line"> </span><br><span class="line">m.update(<span class="string">&#x27;alvin&#x27;</span>.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(m.hexdigest())  <span class="comment">#92a7e713c30abbb0319fa07da2a5c4af</span></span><br><span class="line"> </span><br><span class="line">m2=hashlib.md5()</span><br><span class="line">m2.update(<span class="string">&#x27;helloalvin&#x27;</span>.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(m2.hexdigest()) <span class="comment">#92a7e713c30abbb0319fa07da2a5c4af</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">注意：把一段很长的数据update多次，与一次update这段长数据，得到的结果一样</span></span><br><span class="line"><span class="string">但是update多次为校验大文件提供了可能。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></p><p>以上加密算法虽然依然非常厉害，但时候存在缺陷，即：通过撞库可以反解。所以，有必要对加密算法中添加自定义key再来做加密。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"> </span><br><span class="line"><span class="comment"># ######## 256 ########</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">hash</span> = hashlib.sha256(<span class="string">&#x27;898oaFs09f&#x27;</span>.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"><span class="built_in">hash</span>.update(<span class="string">&#x27;alvin&#x27;</span>.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">hash</span>.hexdigest())<span class="comment">#e79e68f070cdedcfe63eaf1a2e92c83b4cfb1b5c6bc452d214c1b7e77cdfd1c7</span></span><br></pre></td></tr></table></figure><p><code>模拟撞库破解密码</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">passwds=[</span><br><span class="line">    <span class="string">&#x27;alex3714&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;alex1313&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;alex94139413&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;alex123456&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;123456alex&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;a123lex&#x27;</span>,</span><br><span class="line">    ]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_passwd_dic</span>(<span class="params">passwds</span>):</span><br><span class="line">    dic=&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> passwd <span class="keyword">in</span> passwds:</span><br><span class="line">        m=hashlib.md5()</span><br><span class="line">        m.update(passwd.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        dic[passwd]=m.hexdigest()</span><br><span class="line">    <span class="keyword">return</span> dic</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">break_code</span>(<span class="params">cryptograph,passwd_dic</span>):</span><br><span class="line">    <span class="keyword">for</span> k,v <span class="keyword">in</span> passwd_dic.items():</span><br><span class="line">        <span class="keyword">if</span> v == cryptograph:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;密码是===&gt;\033[46m%s\033[0m&#x27;</span> %k)</span><br><span class="line"></span><br><span class="line">cryptograph=<span class="string">&#x27;aee949757a2e698417463d47acac93df&#x27;</span></span><br><span class="line">break_code(cryptograph,make_passwd_dic(passwds))</span><br></pre></td></tr></table></figure><p>python 还有一个 hmac 模块，它内部对我们创建 key 和 内容 进行进一步的处理然后再加密:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hmac</span><br><span class="line">h = hmac.new(<span class="string">&#x27;alvin&#x27;</span>.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">h.update(<span class="string">&#x27;hello&#x27;</span>.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span> (h.hexdigest())<span class="comment">#320df9832eab4c038b6c1d7ed73a5940</span></span><br></pre></td></tr></table></figure><p> <code>注意！注意！注意</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#要想保证hmac最终结果一致，必须保证：</span></span><br><span class="line"><span class="comment">#1:hmac.new括号内指定的初始key一样</span></span><br><span class="line"><span class="comment">#2:无论update多少次，校验的内容累加到一起是一样的内容</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> hmac</span><br><span class="line"></span><br><span class="line">h1=hmac.new(<span class="string">b&#x27;allen&#x27;</span>)</span><br><span class="line">h1.update(<span class="string">b&#x27;hello&#x27;</span>)</span><br><span class="line">h1.update(<span class="string">b&#x27;world&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(h1.hexdigest())</span><br><span class="line"></span><br><span class="line">h2=hmac.new(<span class="string">b&#x27;allen&#x27;</span>)</span><br><span class="line">h2.update(<span class="string">b&#x27;helloworld&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(h2.hexdigest())</span><br><span class="line"></span><br><span class="line">h3=hmac.new(<span class="string">b&#x27;allenhelloworld&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(h3.hexdigest())</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">f1bf38d054691688f89dcd34ac3c27f2</span></span><br><span class="line"><span class="string">f1bf38d054691688f89dcd34ac3c27f2</span></span><br><span class="line"><span class="string">bcca84edd9eeb86f30539922b28f3981</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="suprocess模块"><a href="#suprocess模块" class="headerlink" title="suprocess模块"></a>suprocess模块</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  subprocess</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">sh-3.2# ls /Users/allen/Desktop |grep txt$</span></span><br><span class="line"><span class="string">mysql.txt</span></span><br><span class="line"><span class="string">tt.txt</span></span><br><span class="line"><span class="string">事物.txt</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">res1=subprocess.Popen(<span class="string">&#x27;ls /Users/jieli/Desktop&#x27;</span>,shell=<span class="literal">True</span>,stdout=subprocess.PIPE)</span><br><span class="line">res=subprocess.Popen(<span class="string">&#x27;grep txt$&#x27;</span>,shell=<span class="literal">True</span>,stdin=res1.stdout,</span><br><span class="line">                 stdout=subprocess.PIPE)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(res.stdout.read().decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#等同于上面,但是上面的优势在于,一个数据流可以和另外一个数据流交互,可以通过爬虫得到结果然后交给grep</span></span><br><span class="line">res1=subprocess.Popen(<span class="string">&#x27;ls /Users/jieli/Desktop |grep txt$&#x27;</span>,shell=<span class="literal">True</span>,stdout=subprocess.PIPE)</span><br><span class="line"><span class="built_in">print</span>(res1.stdout.read().decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#windows下:</span></span><br><span class="line"><span class="comment"># dir | findstr &#x27;test*&#x27;</span></span><br><span class="line"><span class="comment"># dir | findstr &#x27;txt$&#x27;</span></span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line">res1=subprocess.Popen(<span class="string">r&#x27;dir C:\Users\Administrator\PycharmProjects\test\函数备课&#x27;</span>,shell=<span class="literal">True</span>,stdout=subprocess.PIPE)</span><br><span class="line">res=subprocess.Popen(<span class="string">&#x27;findstr test*&#x27;</span>,shell=<span class="literal">True</span>,stdin=res1.stdout,</span><br><span class="line">                 stdout=subprocess.PIPE)</span><br><span class="line"></span><br><span class="line"><span class="comment">#subprocess使用当前系统默认编码，得到结果为bytes类型，在windows下需要用gbk解码</span></span><br><span class="line"><span class="built_in">print</span>(res.stdout.read().decode(<span class="string">&#x27;gbk&#x27;</span>)) </span><br></pre></td></tr></table></figure><p><a href="https://docs.python.org/3.6/library/subprocess.html?highlight=subprocess#frequently-used-arguments"> 详细参考官网</a></p><h1 id="logging模块"><a href="#logging模块" class="headerlink" title="logging模块"></a>logging模块</h1><h2 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CRITICAL = <span class="number">50</span> <span class="comment">#FATAL = CRITICAL</span></span><br><span class="line">ERROR = <span class="number">40</span></span><br><span class="line">WARNING = <span class="number">30</span> <span class="comment">#WARN = WARNING</span></span><br><span class="line">INFO = <span class="number">20</span></span><br><span class="line">DEBUG = <span class="number">10</span></span><br><span class="line">NOTSET = <span class="number">0</span> <span class="comment">#不设置</span></span><br></pre></td></tr></table></figure><h2 id="默认级别为warning，默认打印到终端"><a href="#默认级别为warning，默认打印到终端" class="headerlink" title="默认级别为warning，默认打印到终端"></a>默认级别为warning，默认打印到终端</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logging.debug(<span class="string">&#x27;调试debug&#x27;</span>)</span><br><span class="line">logging.info(<span class="string">&#x27;消息info&#x27;</span>)</span><br><span class="line">logging.warning(<span class="string">&#x27;警告warn&#x27;</span>)</span><br><span class="line">logging.error(<span class="string">&#x27;错误error&#x27;</span>)</span><br><span class="line">logging.critical(<span class="string">&#x27;严重critical&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">WARNING:root:警告warn</span></span><br><span class="line"><span class="string">ERROR:root:错误error</span></span><br><span class="line"><span class="string">CRITICAL:root:严重critical</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="为logging模块指定全局配置，针对所有logger有效，控制打印到文件中"><a href="#为logging模块指定全局配置，针对所有logger有效，控制打印到文件中" class="headerlink" title="为logging模块指定全局配置，针对所有logger有效，控制打印到文件中"></a>为logging模块指定全局配置，针对所有logger有效，控制打印到文件中</h2><p><code>logging.basicConfig()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">可在logging.basicConfig()函数中通过具体参数来更改logging模块默认行为，可用参数有</span><br><span class="line">filename：用指定的文件名创建FiledHandler（后边会具体讲解handler的概念），这样日志会被存储在指定的文件中。</span><br><span class="line">filemode：文件打开方式，在指定了filename时使用这个参数，默认值为“a”还可指定为“w”。</span><br><span class="line"><span class="built_in">format</span>：指定handler使用的日志显示格式。 </span><br><span class="line">datefmt：指定日期时间格式。 </span><br><span class="line">level：设置rootlogger（后边会讲解具体概念）的日志级别 </span><br><span class="line">stream：用指定的stream创建StreamHandler。可以指定输出到sys.stderr,sys.stdout或者文件，默认为sys.stderr。若同时列出了filename和stream两个参数，则stream参数会被忽略。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#格式</span></span><br><span class="line">%(name)s：Logger的名字，并非用户名，详细查看</span><br><span class="line"></span><br><span class="line">%(levelno)s：数字形式的日志级别</span><br><span class="line"></span><br><span class="line">%(levelname)s：文本形式的日志级别</span><br><span class="line"></span><br><span class="line">%(pathname)s：调用日志输出函数的模块的完整路径名，可能没有</span><br><span class="line"></span><br><span class="line">%(filename)s：调用日志输出函数的模块的文件名</span><br><span class="line"></span><br><span class="line">%(module)s：调用日志输出函数的模块名</span><br><span class="line"></span><br><span class="line">%(funcName)s：调用日志输出函数的函数名</span><br><span class="line"></span><br><span class="line">%(lineno)d：调用日志输出函数的语句所在的代码行</span><br><span class="line"></span><br><span class="line">%(created)f：当前时间，用UNIX标准的表示时间的浮 点数表示</span><br><span class="line"></span><br><span class="line">%(relativeCreated)d：输出日志信息时的，自Logger创建以 来的毫秒数</span><br><span class="line"></span><br><span class="line">%(asctime)s：字符串形式的当前时间。默认格式是 “<span class="number">2003</span>-07-08 <span class="number">16</span>:<span class="number">49</span>:<span class="number">45</span>,<span class="number">896</span>”。逗号后面的是毫秒</span><br><span class="line"></span><br><span class="line">%(thread)d：线程ID。可能没有</span><br><span class="line"></span><br><span class="line">%(threadName)s：线程名。可能没有</span><br><span class="line"></span><br><span class="line">%(process)d：进程ID。可能没有</span><br><span class="line"></span><br><span class="line">%(message)s：用户输出的消息</span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#======介绍</span></span><br><span class="line">可在logging.basicConfig()函数中可通过具体参数来更改logging模块默认行为，可用参数有</span><br><span class="line">filename：用指定的文件名创建FiledHandler（后边会具体讲解handler的概念），这样日志会被存储在指定的文件中。</span><br><span class="line">filemode：文件打开方式，在指定了filename时使用这个参数，默认值为“a”还可指定为“w”。</span><br><span class="line"><span class="built_in">format</span>：指定handler使用的日志显示格式。</span><br><span class="line">datefmt：指定日期时间格式。</span><br><span class="line">level：设置rootlogger（后边会讲解具体概念）的日志级别</span><br><span class="line">stream：用指定的stream创建StreamHandler。可以指定输出到sys.stderr,sys.stdout或者文件，默认为sys.stderr。若同时列出了filename和stream两个参数，则stream参数会被忽略。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">format</span>参数中可能用到的格式化串：</span><br><span class="line">%(name)s Logger的名字</span><br><span class="line">%(levelno)s 数字形式的日志级别</span><br><span class="line">%(levelname)s 文本形式的日志级别</span><br><span class="line">%(pathname)s 调用日志输出函数的模块的完整路径名，可能没有</span><br><span class="line">%(filename)s 调用日志输出函数的模块的文件名</span><br><span class="line">%(module)s 调用日志输出函数的模块名</span><br><span class="line">%(funcName)s 调用日志输出函数的函数名</span><br><span class="line">%(lineno)d 调用日志输出函数的语句所在的代码行</span><br><span class="line">%(created)f 当前时间，用UNIX标准的表示时间的浮 点数表示</span><br><span class="line">%(relativeCreated)d 输出日志信息时的，自Logger创建以 来的毫秒数</span><br><span class="line">%(asctime)s 字符串形式的当前时间。默认格式是 “<span class="number">2003</span>-07-08 <span class="number">16</span>:<span class="number">49</span>:<span class="number">45</span>,<span class="number">896</span>”。逗号后面的是毫秒</span><br><span class="line">%(thread)d 线程ID。可能没有</span><br><span class="line">%(threadName)s 线程名。可能没有</span><br><span class="line">%(process)d 进程ID。可能没有</span><br><span class="line">%(message)s用户输出的消息</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#========使用</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.basicConfig(filename=<span class="string">&#x27;access.log&#x27;</span>,</span><br><span class="line">                    <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s - %(name)s - %(levelname)s -%(module)s:  %(message)s&#x27;</span>,</span><br><span class="line">                    datefmt=<span class="string">&#x27;%Y-%m-%d %H:%M:%S %p&#x27;</span>,</span><br><span class="line">                    level=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">logging.debug(<span class="string">&#x27;调试debug&#x27;</span>)</span><br><span class="line">logging.info(<span class="string">&#x27;消息info&#x27;</span>)</span><br><span class="line">logging.warning(<span class="string">&#x27;警告warn&#x27;</span>)</span><br><span class="line">logging.error(<span class="string">&#x27;错误error&#x27;</span>)</span><br><span class="line">logging.critical(<span class="string">&#x27;严重critical&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#========结果</span></span><br><span class="line">access.log内容:</span><br><span class="line"><span class="number">2017</span>-07-<span class="number">28</span> <span class="number">20</span>:<span class="number">32</span>:<span class="number">17</span> PM - root - DEBUG -test:  调试debug</span><br><span class="line"><span class="number">2017</span>-07-<span class="number">28</span> <span class="number">20</span>:<span class="number">32</span>:<span class="number">17</span> PM - root - INFO -test:  消息info</span><br><span class="line"><span class="number">2017</span>-07-<span class="number">28</span> <span class="number">20</span>:<span class="number">32</span>:<span class="number">17</span> PM - root - WARNING -test:  警告warn</span><br><span class="line"><span class="number">2017</span>-07-<span class="number">28</span> <span class="number">20</span>:<span class="number">32</span>:<span class="number">17</span> PM - root - ERROR -test:  错误error</span><br><span class="line"><span class="number">2017</span>-07-<span class="number">28</span> <span class="number">20</span>:<span class="number">32</span>:<span class="number">17</span> PM - root - CRITICAL -test:  严重critical</span><br><span class="line"></span><br><span class="line">part2: 可以为logging模块指定模块级的配置,即所有logger的配置</span><br></pre></td></tr></table></figure><h2 id="logging模块的Formatter，Handler，Logger，Filter对象"><a href="#logging模块的Formatter，Handler，Logger，Filter对象" class="headerlink" title="logging模块的Formatter，Handler，Logger，Filter对象"></a>logging模块的Formatter，Handler，Logger，Filter对象</h2><p><a href="https://pan.baidu.com/s/1skWyTT7"><strong>原理图：https://pan.baidu.com/s/1skWyTT7</strong></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#logger：产生日志的对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Filter：过滤日志的对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Handler：接收日志然后控制打印到不同的地方，FileHandler用来打印到文件中，StreamHandler用来打印到终端</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Formatter对象：可以定制不同的日志格式对象，然后绑定给不同的Handler对象使用，以此来控制不同的Handler的日志格式</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">critical=50</span></span><br><span class="line"><span class="string">error =40</span></span><br><span class="line"><span class="string">warning =30</span></span><br><span class="line"><span class="string">info = 20</span></span><br><span class="line"><span class="string">debug =10</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="comment">#1、logger对象：负责产生日志，然后交给Filter过滤，然后交给不同的Handler输出</span></span><br><span class="line">logger=logging.getLogger(__file__)</span><br><span class="line"></span><br><span class="line"><span class="comment">#2、Filter对象：不常用，略</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3、Handler对象：接收logger传来的日志，然后控制输出</span></span><br><span class="line">h1=logging.FileHandler(<span class="string">&#x27;t1.log&#x27;</span>) <span class="comment">#打印到文件</span></span><br><span class="line">h2=logging.FileHandler(<span class="string">&#x27;t2.log&#x27;</span>) <span class="comment">#打印到文件</span></span><br><span class="line">h3=logging.StreamHandler() <span class="comment">#打印到终端</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#4、Formatter对象：日志格式</span></span><br><span class="line">formmater1=logging.Formatter(<span class="string">&#x27;%(asctime)s - %(name)s - %(levelname)s -%(module)s:  %(message)s&#x27;</span>,</span><br><span class="line">                    datefmt=<span class="string">&#x27;%Y-%m-%d %H:%M:%S %p&#x27;</span>,)</span><br><span class="line"></span><br><span class="line">formmater2=logging.Formatter(<span class="string">&#x27;%(asctime)s :  %(message)s&#x27;</span>,</span><br><span class="line">                    datefmt=<span class="string">&#x27;%Y-%m-%d %H:%M:%S %p&#x27;</span>,)</span><br><span class="line"></span><br><span class="line">formmater3=logging.Formatter(<span class="string">&#x27;%(name)s %(message)s&#x27;</span>,)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#5、为Handler对象绑定格式</span></span><br><span class="line">h1.setFormatter(formmater1)</span><br><span class="line">h2.setFormatter(formmater2)</span><br><span class="line">h3.setFormatter(formmater3)</span><br><span class="line"></span><br><span class="line"><span class="comment">#6、将Handler添加给logger并设置日志级别</span></span><br><span class="line">logger.addHandler(h1)</span><br><span class="line">logger.addHandler(h2)</span><br><span class="line">logger.addHandler(h3)</span><br><span class="line">logger.setLevel(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#7、测试</span></span><br><span class="line">logger.debug(<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">logger.info(<span class="string">&#x27;info&#x27;</span>)</span><br><span class="line">logger.warning(<span class="string">&#x27;warning&#x27;</span>)</span><br><span class="line">logger.error(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">logger.critical(<span class="string">&#x27;critical&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="Logger与Handler的级别"><a href="#Logger与Handler的级别" class="headerlink" title="Logger与Handler的级别"></a>Logger与Handler的级别</h2><p>logger是第一级过滤，然后才能到handler，我们可以给logger和handler同时设置level，但是需要注意的是 </p><p><code>重要，重要，重要！！！</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Logger <span class="keyword">is</span> also the first to <span class="built_in">filter</span> the message based on a level — <span class="keyword">if</span> you <span class="built_in">set</span> the logger to INFO, <span class="keyword">and</span> <span class="built_in">all</span> handlers to DEBUG, you still won<span class="string">&#x27;t receive DEBUG messages on handlers — they&#x27;</span>ll be rejected by the logger itself. If you <span class="built_in">set</span> logger to DEBUG, but <span class="built_in">all</span> handlers to INFO, you won<span class="string">&#x27;t receive any DEBUG messages either — because while the logger says &quot;ok, process this&quot;, the handlers reject it (DEBUG &lt; INFO).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#验证</span></span><br><span class="line"><span class="string">import logging</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">form=logging.Formatter(&#x27;</span>%(asctime)s - %(name)s - %(levelname)s -%(module)s:  %(message)s<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">                    datefmt=&#x27;</span>%Y-%m-%d %H:%M:%S %p<span class="string">&#x27;,)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ch=logging.StreamHandler()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ch.setFormatter(form)</span></span><br><span class="line"><span class="string"># ch.setLevel(10)</span></span><br><span class="line"><span class="string">ch.setLevel(20)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">l1=logging.getLogger(&#x27;</span>root<span class="string">&#x27;)</span></span><br><span class="line"><span class="string"># l1.setLevel(20)</span></span><br><span class="line"><span class="string">l1.setLevel(10)</span></span><br><span class="line"><span class="string">l1.addHandler(ch)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">l1.debug(&#x27;</span>l1 debug<span class="string">&#x27;)</span></span><br></pre></td></tr></table></figure><h2 id="Logger的继承（了解）"><a href="#Logger的继承（了解）" class="headerlink" title="Logger的继承（了解）"></a>Logger的继承（了解）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">formatter=logging.Formatter(<span class="string">&#x27;%(asctime)s - %(name)s - %(levelname)s -%(module)s:  %(message)s&#x27;</span>,</span><br><span class="line">                    datefmt=<span class="string">&#x27;%Y-%m-%d %H:%M:%S %p&#x27;</span>,)</span><br><span class="line"></span><br><span class="line">ch=logging.StreamHandler()</span><br><span class="line">ch.setFormatter(formatter)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">logger1=logging.getLogger(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">logger2=logging.getLogger(<span class="string">&#x27;root.child1&#x27;</span>)</span><br><span class="line">logger3=logging.getLogger(<span class="string">&#x27;root.child1.child2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">logger1.addHandler(ch)</span><br><span class="line">logger2.addHandler(ch)</span><br><span class="line">logger3.addHandler(ch)</span><br><span class="line">logger1.setLevel(<span class="number">10</span>)</span><br><span class="line">logger2.setLevel(<span class="number">10</span>)</span><br><span class="line">logger3.setLevel(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">logger1.debug(<span class="string">&#x27;log1 debug&#x27;</span>)</span><br><span class="line">logger2.debug(<span class="string">&#x27;log2 debug&#x27;</span>)</span><br><span class="line">logger3.debug(<span class="string">&#x27;log3 debug&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">2017-07-28 22:22:05 PM - root - DEBUG -test:  log1 debug</span></span><br><span class="line"><span class="string">2017-07-28 22:22:05 PM - root.child1 - DEBUG -test:  log2 debug</span></span><br><span class="line"><span class="string">2017-07-28 22:22:05 PM - root.child1 - DEBUG -test:  log2 debug</span></span><br><span class="line"><span class="string">2017-07-28 22:22:05 PM - root.child1.child2 - DEBUG -test:  log3 debug</span></span><br><span class="line"><span class="string">2017-07-28 22:22:05 PM - root.child1.child2 - DEBUG -test:  log3 debug</span></span><br><span class="line"><span class="string">2017-07-28 22:22:05 PM - root.child1.child2 - DEBUG -test:  log3 debug</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p><code>logging配置文件</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">logging配置</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> logging.config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义三种日志输出格式 开始</span></span><br><span class="line"></span><br><span class="line">standard_format = <span class="string">&#x27;[%(asctime)s][%(threadName)s:%(thread)d][task_id:%(name)s][%(filename)s:%(lineno)d]&#x27;</span> \</span><br><span class="line">                  <span class="string">&#x27;[%(levelname)s][%(message)s]&#x27;</span> <span class="comment">#其中name为getlogger指定的名字</span></span><br><span class="line"></span><br><span class="line">simple_format = <span class="string">&#x27;[%(levelname)s][%(asctime)s][%(filename)s:%(lineno)d]%(message)s&#x27;</span></span><br><span class="line"></span><br><span class="line">id_simple_format = <span class="string">&#x27;[%(levelname)s][%(asctime)s] %(message)s&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义日志输出格式 结束</span></span><br><span class="line"></span><br><span class="line">logfile_dir = os.path.dirname(os.path.abspath(__file__))  <span class="comment"># log文件的目录</span></span><br><span class="line"></span><br><span class="line">logfile_name = <span class="string">&#x27;all2.log&#x27;</span>  <span class="comment"># log文件名</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果不存在定义的日志目录就创建一个</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(logfile_dir):</span><br><span class="line">    os.mkdir(logfile_dir)</span><br><span class="line"></span><br><span class="line"><span class="comment"># log文件的全路径</span></span><br><span class="line">logfile_path = os.path.join(logfile_dir, logfile_name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># log配置字典</span></span><br><span class="line">LOGGING_DIC = &#123;</span><br><span class="line">    <span class="string">&#x27;version&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;disable_existing_loggers&#x27;</span>: <span class="literal">False</span>,</span><br><span class="line">    <span class="string">&#x27;formatters&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;standard&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;format&#x27;</span>: standard_format</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;simple&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;format&#x27;</span>: simple_format</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;filters&#x27;</span>: &#123;&#125;,</span><br><span class="line">    <span class="string">&#x27;handlers&#x27;</span>: &#123;</span><br><span class="line">        <span class="comment">#打印到终端的日志</span></span><br><span class="line">        <span class="string">&#x27;console&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>: <span class="string">&#x27;DEBUG&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;logging.StreamHandler&#x27;</span>,  <span class="comment"># 打印到屏幕</span></span><br><span class="line">            <span class="string">&#x27;formatter&#x27;</span>: <span class="string">&#x27;simple&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">#打印到文件的日志,收集info及以上的日志</span></span><br><span class="line">        <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>: <span class="string">&#x27;DEBUG&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;logging.handlers.RotatingFileHandler&#x27;</span>,  <span class="comment"># 保存到文件</span></span><br><span class="line">            <span class="string">&#x27;formatter&#x27;</span>: <span class="string">&#x27;standard&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;filename&#x27;</span>: logfile_path,  <span class="comment"># 日志文件</span></span><br><span class="line">            <span class="string">&#x27;maxBytes&#x27;</span>: <span class="number">1024</span>*<span class="number">1024</span>*<span class="number">5</span>,  <span class="comment"># 日志大小 5M</span></span><br><span class="line">            <span class="string">&#x27;backupCount&#x27;</span>: <span class="number">5</span>,</span><br><span class="line">            <span class="string">&#x27;encoding&#x27;</span>: <span class="string">&#x27;utf-8&#x27;</span>,  <span class="comment"># 日志文件的编码，再也不用担心中文log乱码了</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;loggers&#x27;</span>: &#123;</span><br><span class="line">        <span class="comment">#logging.getLogger(__name__)拿到的logger配置</span></span><br><span class="line">        <span class="string">&#x27;&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;handlers&#x27;</span>: [<span class="string">&#x27;default&#x27;</span>, <span class="string">&#x27;console&#x27;</span>],  <span class="comment"># 这里把上面定义的两个handler都加上，即log数据既写入文件又打印到屏幕</span></span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>: <span class="string">&#x27;DEBUG&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;propagate&#x27;</span>: <span class="literal">True</span>,  <span class="comment"># 向上（更高level的logger）传递</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_my_logging_cfg</span>():</span><br><span class="line">    logging.config.dictConfig(LOGGING_DIC)  <span class="comment"># 导入上面定义的logging配置</span></span><br><span class="line">    logger = logging.getLogger(__name__)  <span class="comment"># 生成一个log实例</span></span><br><span class="line">    logger.info(<span class="string">&#x27;It works!&#x27;</span>)  <span class="comment"># 记录该文件的运行状态</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    load_my_logging_cfg()</span><br></pre></td></tr></table></figure><p> 使用 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">MyLogging Test</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> my_logging  <span class="comment"># 导入自定义的logging配置</span></span><br><span class="line"></span><br><span class="line">logger = logging.getLogger(__name__)  <span class="comment"># 生成logger实例</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">demo</span>():</span><br><span class="line">    logger.debug(<span class="string">&quot;start range... time:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(time.time()))</span><br><span class="line">    logger.info(<span class="string">&quot;中文测试开始。。。&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        logger.debug(<span class="string">&quot;i:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(i))</span><br><span class="line">        time.sleep(<span class="number">0.2</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        logger.debug(<span class="string">&quot;over range... time:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(time.time()))</span><br><span class="line">    logger.info(<span class="string">&quot;中文测试结束。。。&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    my_logging.load_my_logging_cfg()  <span class="comment"># 在你程序文件的入口加载自定义logging配置</span></span><br><span class="line">    demo()</span><br></pre></td></tr></table></figure><p><code>!!!关于如何拿到logger对象的详细解释！！！</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">注意注意注意：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#1、有了上述方式我们的好处是：所有与logging模块有关的配置都写到字典中就可以了，更加清晰，方便管理</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#2、我们需要解决的问题是：</span></span><br><span class="line">    <span class="number">1</span>、从字典加载配置：logging.config.dictConfig(settings.LOGGING_DIC)</span><br><span class="line"></span><br><span class="line">    <span class="number">2</span>、拿到logger对象来产生日志</span><br><span class="line">    logger对象都是配置到字典的loggers 键对应的子字典中的</span><br><span class="line">    按照我们对logging模块的理解，要想获取某个东西都是通过名字，也就是key来获取的</span><br><span class="line">    于是我们要获取不同的logger对象就是</span><br><span class="line">    logger=logging.getLogger(<span class="string">&#x27;loggers子字典的key名&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    但问题是：如果我们想要不同logger名的logger对象都共用一段配置，那么肯定不能在loggers子字典中定义n个key   </span><br><span class="line"> <span class="string">&#x27;loggers&#x27;</span>: &#123;    </span><br><span class="line">        <span class="string">&#x27;l1&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;handlers&#x27;</span>: [<span class="string">&#x27;default&#x27;</span>, <span class="string">&#x27;console&#x27;</span>],  <span class="comment">#</span></span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>: <span class="string">&#x27;DEBUG&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;propagate&#x27;</span>: <span class="literal">True</span>,  <span class="comment"># 向上（更高level的logger）传递</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;l2: &#123;</span></span><br><span class="line"><span class="string">            &#x27;</span>handlers<span class="string">&#x27;: [&#x27;</span>default<span class="string">&#x27;, &#x27;</span>console<span class="string">&#x27; ], </span></span><br><span class="line"><span class="string">            &#x27;</span>level<span class="string">&#x27;: &#x27;</span>DEBUG<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">            &#x27;</span>propagate<span class="string">&#x27;: False,  # 向上（更高level的logger）传递</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        &#x27;</span>l3<span class="string">&#x27;: &#123;</span></span><br><span class="line"><span class="string">            &#x27;</span>handlers<span class="string">&#x27;: [&#x27;</span>default<span class="string">&#x27;, &#x27;</span>console<span class="string">&#x27;],  #</span></span><br><span class="line"><span class="string">            &#x27;</span>level<span class="string">&#x27;: &#x27;</span>DEBUG<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">            &#x27;</span>propagate<span class="string">&#x27;: True,  # 向上（更高level的logger）传递</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">#我们的解决方式是，定义一个空的key</span></span><br><span class="line"><span class="string">    &#x27;</span>loggers<span class="string">&#x27;: &#123;</span></span><br><span class="line"><span class="string">        &#x27;</span><span class="string">&#x27;: &#123;</span></span><br><span class="line"><span class="string">            &#x27;</span>handlers<span class="string">&#x27;: [&#x27;</span>default<span class="string">&#x27;, &#x27;</span>console<span class="string">&#x27;], </span></span><br><span class="line"><span class="string">            &#x27;</span>level<span class="string">&#x27;: &#x27;</span>DEBUG<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">            &#x27;</span>propagate<span class="string">&#x27;: True, </span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">这样我们再取logger对象时</span></span><br><span class="line"><span class="string">logging.getLogger(__name__)，不同的文件__name__不同，这保证了打印日志时标识信息不同，但是拿着该名字去loggers里找key名时却发现找不到，于是默认使用key=&#x27;</span><span class="string">&#x27;的配置</span></span><br></pre></td></tr></table></figure><p>另外一个django的配置，瞄一眼就可以，跟上面的一样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#logging_config.py</span></span><br><span class="line">LOGGING = &#123;</span><br><span class="line">    <span class="string">&#x27;version&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;disable_existing_loggers&#x27;</span>: <span class="literal">False</span>,</span><br><span class="line">    <span class="string">&#x27;formatters&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;standard&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;format&#x27;</span>: <span class="string">&#x27;[%(asctime)s][%(threadName)s:%(thread)d][task_id:%(name)s][%(filename)s:%(lineno)d]&#x27;</span></span><br><span class="line">                      <span class="string">&#x27;[%(levelname)s][%(message)s]&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;simple&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;format&#x27;</span>: <span class="string">&#x27;[%(levelname)s][%(asctime)s][%(filename)s:%(lineno)d]%(message)s&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;collect&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;format&#x27;</span>: <span class="string">&#x27;%(message)s&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;filters&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;require_debug_true&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;()&#x27;</span>: <span class="string">&#x27;django.utils.log.RequireDebugTrue&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;handlers&#x27;</span>: &#123;</span><br><span class="line">        <span class="comment">#打印到终端的日志</span></span><br><span class="line">        <span class="string">&#x27;console&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>: <span class="string">&#x27;DEBUG&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;filters&#x27;</span>: [<span class="string">&#x27;require_debug_true&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;logging.StreamHandler&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;formatter&#x27;</span>: <span class="string">&#x27;simple&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">#打印到文件的日志,收集info及以上的日志</span></span><br><span class="line">        <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>: <span class="string">&#x27;INFO&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;logging.handlers.RotatingFileHandler&#x27;</span>,  <span class="comment"># 保存到文件，自动切</span></span><br><span class="line">            <span class="string">&#x27;filename&#x27;</span>: os.path.join(BASE_LOG_DIR, <span class="string">&quot;xxx_info.log&quot;</span>),  <span class="comment"># 日志文件</span></span><br><span class="line">            <span class="string">&#x27;maxBytes&#x27;</span>: <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">5</span>,  <span class="comment"># 日志大小 5M</span></span><br><span class="line">            <span class="string">&#x27;backupCount&#x27;</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="string">&#x27;formatter&#x27;</span>: <span class="string">&#x27;standard&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;encoding&#x27;</span>: <span class="string">&#x27;utf-8&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">#打印到文件的日志:收集错误及以上的日志</span></span><br><span class="line">        <span class="string">&#x27;error&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>: <span class="string">&#x27;ERROR&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;logging.handlers.RotatingFileHandler&#x27;</span>,  <span class="comment"># 保存到文件，自动切</span></span><br><span class="line">            <span class="string">&#x27;filename&#x27;</span>: os.path.join(BASE_LOG_DIR, <span class="string">&quot;xxx_err.log&quot;</span>),  <span class="comment"># 日志文件</span></span><br><span class="line">            <span class="string">&#x27;maxBytes&#x27;</span>: <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">5</span>,  <span class="comment"># 日志大小 5M</span></span><br><span class="line">            <span class="string">&#x27;backupCount&#x27;</span>: <span class="number">5</span>,</span><br><span class="line">            <span class="string">&#x27;formatter&#x27;</span>: <span class="string">&#x27;standard&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;encoding&#x27;</span>: <span class="string">&#x27;utf-8&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">#打印到文件的日志</span></span><br><span class="line">        <span class="string">&#x27;collect&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>: <span class="string">&#x27;INFO&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;logging.handlers.RotatingFileHandler&#x27;</span>,  <span class="comment"># 保存到文件，自动切</span></span><br><span class="line">            <span class="string">&#x27;filename&#x27;</span>: os.path.join(BASE_LOG_DIR, <span class="string">&quot;xxx_collect.log&quot;</span>),</span><br><span class="line">            <span class="string">&#x27;maxBytes&#x27;</span>: <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">5</span>,  <span class="comment"># 日志大小 5M</span></span><br><span class="line">            <span class="string">&#x27;backupCount&#x27;</span>: <span class="number">5</span>,</span><br><span class="line">            <span class="string">&#x27;formatter&#x27;</span>: <span class="string">&#x27;collect&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;encoding&#x27;</span>: <span class="string">&quot;utf-8&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;loggers&#x27;</span>: &#123;</span><br><span class="line">        <span class="comment">#logging.getLogger(__name__)拿到的logger配置</span></span><br><span class="line">        <span class="string">&#x27;&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;handlers&#x27;</span>: [<span class="string">&#x27;default&#x27;</span>, <span class="string">&#x27;console&#x27;</span>, <span class="string">&#x27;error&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>: <span class="string">&#x27;DEBUG&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;propagate&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">#logging.getLogger(&#x27;collect&#x27;)拿到的logger配置</span></span><br><span class="line">        <span class="string">&#x27;collect&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;handlers&#x27;</span>: [<span class="string">&#x27;console&#x27;</span>, <span class="string">&#x27;collect&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>: <span class="string">&#x27;INFO&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># -----------</span></span><br><span class="line"><span class="comment"># 用法:拿到俩个logger</span></span><br><span class="line"></span><br><span class="line">logger = logging.getLogger(__name__) <span class="comment">#线上正常的日志</span></span><br><span class="line">collect_logger = logging.getLogger(<span class="string">&quot;collect&quot;</span>) <span class="comment">#领导说,需要为领导们单独定制领导们看的日志</span></span><br></pre></td></tr></table></figure><h1 id="re模块"><a href="#re模块" class="headerlink" title="re模块"></a>re模块</h1><h2 id="一：什么是正则？"><a href="#一：什么是正则？" class="headerlink" title="一：什么是正则？"></a>一：什么是正则？</h2><p>正则就是用一些具有特殊含义的符号组合到一起（称为正则表达式）来描述字符或者字符串的方法。或者说：正则就是用来描述一类事物的规则。  （在Python中）它内嵌在Python中，并通过 re 模块实现。正则表达式模式被编译成一系列的字节码，然后由用 C 编写的匹配引擎执行。 </p><p>生活中处处都是正则： </p><p>比如我们描述：4条腿 </p><p>你可能会想到的是四条腿的动物或者桌子，椅子等 </p><p>继续描述：4条腿，活的 </p><p>   就只剩下四条腿的动物这一类了</p><h2 id="二：常用匹配模式-元字符"><a href="#二：常用匹配模式-元字符" class="headerlink" title="二：常用匹配模式(元字符)"></a>二：常用匹配模式(元字符)</h2><p><a href="http://blog.csdn.net/yufenghyc/article/details/51078107">http://blog.csdn.net/yufenghyc/article/details/51078107</a></p><p><img src="1036857-20170529203214461-666088398.png" alt="img"><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># =================================匹配模式=================================</span></span><br><span class="line"><span class="comment">#一对一的匹配</span></span><br><span class="line"><span class="comment"># &#x27;hello&#x27;.replace(old,new)</span></span><br><span class="line"><span class="comment"># &#x27;hello&#x27;.find(&#x27;pattern&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#正则匹配</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment">#\w与\W</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;\w&#x27;</span>,<span class="string">&#x27;hello allen 123&#x27;</span>)) <span class="comment">#[&#x27;h&#x27;, &#x27;e&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;, &#x27;e&#x27;, &#x27;g&#x27;, &#x27;o&#x27;, &#x27;n&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;\W&#x27;</span>,<span class="string">&#x27;hello allen 123&#x27;</span>)) <span class="comment">#[&#x27; &#x27;, &#x27; &#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#\s与\S</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;\s&#x27;</span>,<span class="string">&#x27;hello  allen  123&#x27;</span>)) <span class="comment">#[&#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27; &#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;\S&#x27;</span>,<span class="string">&#x27;hello  allen  123&#x27;</span>)) <span class="comment">#[&#x27;h&#x27;, &#x27;e&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;, &#x27;e&#x27;, &#x27;g&#x27;, &#x27;o&#x27;, &#x27;n&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#\n \t都是空,都可以被\s匹配</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;\s&#x27;</span>,<span class="string">&#x27;hello \n allen \t 123&#x27;</span>)) <span class="comment">#[&#x27; &#x27;, &#x27;\n&#x27;, &#x27; &#x27;, &#x27; &#x27;, &#x27;\t&#x27;, &#x27; &#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#\n与\t</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">r&#x27;\n&#x27;</span>,<span class="string">&#x27;hello allen \n123&#x27;</span>)) <span class="comment">#[&#x27;\n&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">r&#x27;\t&#x27;</span>,<span class="string">&#x27;hello allen\t123&#x27;</span>)) <span class="comment">#[&#x27;\n&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#\d与\D</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;\d&#x27;</span>,<span class="string">&#x27;hello allen 123&#x27;</span>)) <span class="comment">#[&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;\D&#x27;</span>,<span class="string">&#x27;hello allen 123&#x27;</span>)) <span class="comment">#[&#x27;h&#x27;, &#x27;e&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;, &#x27; &#x27;, &#x27;e&#x27;, &#x27;g&#x27;, &#x27;o&#x27;, &#x27;n&#x27;, &#x27; &#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#\A与\Z</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;\Ahe&#x27;</span>,<span class="string">&#x27;hello allen 123&#x27;</span>)) <span class="comment">#[&#x27;he&#x27;],\A==&gt;^</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;123\Z&#x27;</span>,<span class="string">&#x27;hello allen 123&#x27;</span>)) <span class="comment">#[&#x27;he&#x27;],\Z==&gt;$</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#^与$</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;^h&#x27;</span>,<span class="string">&#x27;hello allen 123&#x27;</span>)) <span class="comment">#[&#x27;h&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;3$&#x27;</span>,<span class="string">&#x27;hello allen 123&#x27;</span>)) <span class="comment">#[&#x27;3&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重复匹配：| . | * | ? | .* | .*? | + | &#123;n,m&#125; |</span></span><br><span class="line"><span class="comment">#.</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;a.b&#x27;</span>,<span class="string">&#x27;a1b&#x27;</span>)) <span class="comment">#[&#x27;a1b&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;a.b&#x27;</span>,<span class="string">&#x27;a1b a*b a b aaab&#x27;</span>)) <span class="comment">#[&#x27;a1b&#x27;, &#x27;a*b&#x27;, &#x27;a b&#x27;, &#x27;aab&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;a.b&#x27;</span>,<span class="string">&#x27;a\nb&#x27;</span>)) <span class="comment">#[]</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;a.b&#x27;</span>,<span class="string">&#x27;a\nb&#x27;</span>,re.S)) <span class="comment">#[&#x27;a\nb&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;a.b&#x27;</span>,<span class="string">&#x27;a\nb&#x27;</span>,re.DOTALL)) <span class="comment">#[&#x27;a\nb&#x27;]同上一条意思一样</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#*</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;ab*&#x27;</span>,<span class="string">&#x27;bbbbbbb&#x27;</span>)) <span class="comment">#[]</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;ab*&#x27;</span>,<span class="string">&#x27;a&#x27;</span>)) <span class="comment">#[&#x27;a&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;ab*&#x27;</span>,<span class="string">&#x27;abbbb&#x27;</span>)) <span class="comment">#[&#x27;abbbb&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#?</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;ab?&#x27;</span>,<span class="string">&#x27;a&#x27;</span>)) <span class="comment">#[&#x27;a&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;ab?&#x27;</span>,<span class="string">&#x27;abbb&#x27;</span>)) <span class="comment">#[&#x27;ab&#x27;]</span></span><br><span class="line"><span class="comment">#匹配所有包含小数在内的数字</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;\d+\.?\d*&#x27;</span>,<span class="string">&quot;asdfasdf123as1.13dfa12adsf1asdf3&quot;</span>)) <span class="comment">#[&#x27;123&#x27;, &#x27;1.13&#x27;, &#x27;12&#x27;, &#x27;1&#x27;, &#x27;3&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#.*默认为贪婪匹配</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;a.*b&#x27;</span>,<span class="string">&#x27;a1b22222222b&#x27;</span>)) <span class="comment">#[&#x27;a1b22222222b&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#.*?为非贪婪匹配：推荐使用</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;a.*?b&#x27;</span>,<span class="string">&#x27;a1b22222222b&#x27;</span>)) <span class="comment">#[&#x27;a1b&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#+</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;ab+&#x27;</span>,<span class="string">&#x27;a&#x27;</span>)) <span class="comment">#[]</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;ab+&#x27;</span>,<span class="string">&#x27;abbb&#x27;</span>)) <span class="comment">#[&#x27;abbb&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&#123;n,m&#125;</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;ab&#123;2&#125;&#x27;</span>,<span class="string">&#x27;abbb&#x27;</span>)) <span class="comment">#[&#x27;abb&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;ab&#123;2,4&#125;&#x27;</span>,<span class="string">&#x27;abbb&#x27;</span>)) <span class="comment">#[&#x27;abb&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;ab&#123;1,&#125;&#x27;</span>,<span class="string">&#x27;abbb&#x27;</span>)) <span class="comment">#&#x27;ab&#123;1,&#125;&#x27; ===&gt; &#x27;ab+&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;ab&#123;0,&#125;&#x27;</span>,<span class="string">&#x27;abbb&#x27;</span>)) <span class="comment">#&#x27;ab&#123;0,&#125;&#x27; ===&gt; &#x27;ab*&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#[]</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;a[1*-]b&#x27;</span>,<span class="string">&#x27;a1b a*b a-b&#x27;</span>)) <span class="comment">#[]内的都为普通字符了，且如果-没有被转意的话，应该放到[]的开头或结尾</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;a[^1*-]b&#x27;</span>,<span class="string">&#x27;a1b a*b a-b a=b&#x27;</span>)) <span class="comment">#[]内的^代表的意思是取反，所以结果为[&#x27;a=b&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;a[0-9]b&#x27;</span>,<span class="string">&#x27;a1b a*b a-b a=b&#x27;</span>)) <span class="comment">#[]内的^代表的意思是取反，所以结果为[&#x27;a=b&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;a[a-z]b&#x27;</span>,<span class="string">&#x27;a1b a*b a-b a=b aeb&#x27;</span>)) <span class="comment">#[]内的^代表的意思是取反，所以结果为[&#x27;a=b&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;a[a-zA-Z]b&#x27;</span>,<span class="string">&#x27;a1b a*b a-b a=b aeb aEb&#x27;</span>)) <span class="comment">#[]内的^代表的意思是取反，所以结果为[&#x27;a=b&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#\# print(re.findall(&#x27;a\\c&#x27;,&#x27;a\c&#x27;)) #对于正则来说a\\c确实可以匹配到a\c,但是在python解释器读取a\\c时，会发生转义，然后交给re去执行，所以抛出异常</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">r&#x27;a\\c&#x27;</span>,<span class="string">&#x27;a\c&#x27;</span>)) <span class="comment">#r代表告诉解释器使用rawstring，即原生字符串，把我们正则内的所有符号都当普通字符处理，不要转义</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;a\\\\c&#x27;</span>,<span class="string">&#x27;a\c&#x27;</span>)) <span class="comment">#同上面的意思一样，和上面的结果一样都是[&#x27;a\\c&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#():分组</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;ab+&#x27;</span>,<span class="string">&#x27;ababab123&#x27;</span>)) <span class="comment">#[&#x27;ab&#x27;, &#x27;ab&#x27;, &#x27;ab&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;(ab)+123&#x27;</span>,<span class="string">&#x27;ababab123&#x27;</span>)) <span class="comment">#[&#x27;ab&#x27;]，匹配到末尾的ab123中的ab</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;(?:ab)+123&#x27;</span>,<span class="string">&#x27;ababab123&#x27;</span>)) <span class="comment">#findall的结果不是匹配的全部内容，而是组内的内容,?:可以让结果为匹配的全部内容</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;href=&quot;(.*?)&quot;&#x27;</span>,<span class="string">&#x27;&lt;a href=&quot;http://www.baidu.com&quot;&gt;点击&lt;/a&gt;&#x27;</span>))<span class="comment">#[&#x27;http://www.baidu.com&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;href=&quot;(?:.*?)&quot;&#x27;</span>,<span class="string">&#x27;&lt;a href=&quot;http://www.baidu.com&quot;&gt;点击&lt;/a&gt;&#x27;</span>))<span class="comment">#[&#x27;href=&quot;http://www.baidu.com&quot;&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#|</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;compan(?:y|ies)&#x27;</span>,<span class="string">&#x27;Too many companies have gone bankrupt, and the next one is my company&#x27;</span>))</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ===========================re模块提供的方法介绍===========================</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment">#1</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;alex make love&#x27;</span>) )   <span class="comment">#[&#x27;e&#x27;, &#x27;e&#x27;, &#x27;e&#x27;],返回所有满足匹配条件的结果,放在列表里</span></span><br><span class="line"><span class="comment">#2</span></span><br><span class="line"><span class="built_in">print</span>(re.search(<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;alex make love&#x27;</span>).group()) <span class="comment">#e,只到找到第一个匹配然后返回一个包含匹配信息的对象,该对象可以通过调用group()方法得到匹配的字符串,如果字符串没有匹配，则返回None。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3</span></span><br><span class="line"><span class="built_in">print</span>(re.match(<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;alex make love&#x27;</span>))    <span class="comment">#None,同search,不过在字符串开始处进行匹配,完全可以用search+^代替match</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#4</span></span><br><span class="line"><span class="built_in">print</span>(re.split(<span class="string">&#x27;[ab]&#x27;</span>,<span class="string">&#x27;abcd&#x27;</span>))     <span class="comment">#[&#x27;&#x27;, &#x27;&#x27;, &#x27;cd&#x27;]，先按&#x27;a&#x27;分割得到&#x27;&#x27;和&#x27;bcd&#x27;,再对&#x27;&#x27;和&#x27;bcd&#x27;分别按&#x27;b&#x27;分割</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;===&gt;&#x27;</span>,re.sub(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;alex make love&#x27;</span>)) <span class="comment">#===&gt; Alex mAke love，不指定n，默认替换所有</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;===&gt;&#x27;</span>,re.sub(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;alex make love&#x27;</span>,<span class="number">1</span>)) <span class="comment">#===&gt; Alex make love</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;===&gt;&#x27;</span>,re.sub(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;alex make love&#x27;</span>,<span class="number">2</span>)) <span class="comment">#===&gt; Alex mAke love</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;===&gt;&#x27;</span>,re.sub(<span class="string">&#x27;^(\w+)(.*?\s)(\w+)(.*?\s)(\w+)(.*?)$&#x27;</span>,<span class="string">r&#x27;\5\2\3\4\1&#x27;</span>,<span class="string">&#x27;alex make love&#x27;</span>)) <span class="comment">#===&gt; love make alex</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;===&gt;&#x27;</span>,re.subn(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;alex make love&#x27;</span>)) <span class="comment">#===&gt; (&#x27;Alex mAke love&#x27;, 2),结果带有总共替换的个数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#6</span></span><br><span class="line">obj=re.<span class="built_in">compile</span>(<span class="string">&#x27;\d&#123;2&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(obj.search(<span class="string">&#x27;abc123eeee&#x27;</span>).group()) <span class="comment">#12</span></span><br><span class="line"><span class="built_in">print</span>(obj.findall(<span class="string">&#x27;abc123eeee&#x27;</span>)) <span class="comment">#[&#x27;12&#x27;],重用了obj</span></span><br></pre></td></tr></table></figure><p><code>补充</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 补充一</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&quot;&lt;(?P&lt;tag_name&gt;\w+)&gt;\w+&lt;/(?P=tag_name)&gt;&quot;</span>,<span class="string">&quot;&lt;h1&gt;hello&lt;/h1&gt;&quot;</span>)) <span class="comment">#[&#x27;h1&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(re.search(<span class="string">&quot;&lt;(?P&lt;tag_name&gt;\w+)&gt;\w+&lt;/(?P=tag_name)&gt;&quot;</span>,<span class="string">&quot;&lt;h1&gt;hello&lt;/h1&gt;&quot;</span>).group()) <span class="comment">#&lt;h1&gt;hello&lt;/h1&gt;</span></span><br><span class="line"><span class="built_in">print</span>(re.search(<span class="string">&quot;&lt;(?P&lt;tag_name&gt;\w+)&gt;\w+&lt;/(?P=tag_name)&gt;&quot;</span>,<span class="string">&quot;&lt;h1&gt;hello&lt;/h1&gt;&quot;</span>).groupdict()) <span class="comment">#&lt;h1&gt;hello&lt;/h1&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(re.search(<span class="string">r&quot;&lt;(\w+)&gt;\w+&lt;/(\w+)&gt;&quot;</span>,<span class="string">&quot;&lt;h1&gt;hello&lt;/h1&gt;&quot;</span>).group())</span><br><span class="line"><span class="built_in">print</span>(re.search(<span class="string">r&quot;&lt;(\w+)&gt;\w+&lt;/\1&gt;&quot;</span>,<span class="string">&quot;&lt;h1&gt;hello&lt;/h1&gt;&quot;</span>).group())</span><br><span class="line"></span><br><span class="line"><span class="comment">#补充二</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用|，先匹配的先生效，|左边是匹配小数，而findall最终结果是查看分组，所有即使匹配成功小数也不会存入结果</span></span><br><span class="line"><span class="comment">#而不是小数时，就去匹配(-?\d+)，匹配到的自然就是，非小数的数，在此处即整数</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">r&quot;-?\d+\.\d*|(-?\d+)&quot;</span>,<span class="string">&quot;1-2*(60+(-40.35/5)-(-4*3))&quot;</span>)) <span class="comment">#找出所有整数[&#x27;1&#x27;, &#x27;-2&#x27;, &#x27;60&#x27;, &#x27;&#x27;, &#x27;5&#x27;, &#x27;-4&#x27;, &#x27;3&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#找到所有数字:</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;\D?(\-?\d+\.?\d*)&#x27;</span>,<span class="string">&quot;1-2*(60+(-40.35/5)-(-4*3))&quot;</span>)) <span class="comment"># [&#x27;1&#x27;,&#x27;2&#x27;,&#x27;60&#x27;,&#x27;-40.35&#x27;,&#x27;5&#x27;,&#x27;-4&#x27;,&#x27;3&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#计算器作业参考：http://www.cnblogs.com/wupeiqi/articles/4949995.html</span></span><br><span class="line">expression=<span class="string">&#x27;1-2*((60+2*(-3-40.0/5)*(9-2*5/3+7/3*99/4*2998+10*568/14))-(-4*3)/(16-3*2))&#x27;</span></span><br><span class="line"></span><br><span class="line">content=re.search(<span class="string">&#x27;\(([\-\+\*\/]*\d+\.?\d*)+\)&#x27;</span>,expression).group() <span class="comment">#(-3-40.0/5)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>search与findall</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#为何同样的表达式search与findall却有不同结果:</span></span><br><span class="line"><span class="built_in">print</span>(re.search(<span class="string">&#x27;\(([\+\-\*\/]*\d+\.?\d*)+\)&#x27;</span>,<span class="string">&quot;1-12*(60+(-40.35/5)-(-4*3))&quot;</span>).group()) <span class="comment">#(-40.35/5)</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;\(([\+\-\*\/]*\d+\.?\d*)+\)&#x27;</span>,<span class="string">&quot;1-12*(60+(-40.35/5)-(-4*3))&quot;</span>)) <span class="comment">#[&#x27;/5&#x27;, &#x27;*3&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#看这个例子:(\d)+相当于(\d)(\d)(\d)(\d)...,是一系列分组</span></span><br><span class="line"><span class="built_in">print</span>(re.search(<span class="string">&#x27;(\d)+&#x27;</span>,<span class="string">&#x27;123&#x27;</span>).group()) <span class="comment">#group的作用是将所有组拼接到一起显示出来</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;(\d)+&#x27;</span>,<span class="string">&#x27;123&#x27;</span>)) <span class="comment">#findall结果是组内的结果,且是最后一个组的结果</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#_*_coding:utf-8_*_</span></span><br><span class="line">__author__ = <span class="string">&#x27;Linhaifeng&#x27;</span></span><br><span class="line"><span class="comment">#在线调试工具:tool.oschina.net/regex/#</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">s=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">http://www.baidu.com</span></span><br><span class="line"><span class="string">egon@oldboyedu.com</span></span><br><span class="line"><span class="string">你好</span></span><br><span class="line"><span class="string">010-3141</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#最常规匹配</span></span><br><span class="line">content=<span class="string">&#x27;Hello 123 456 World_This is a Regex Demo&#x27;</span></span><br><span class="line">res=re.match(<span class="string">&#x27;Hello\s\d\d\d\s\d&#123;3&#125;\s\w&#123;10&#125;.*Demo&#x27;</span>,content)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="built_in">print</span>(res.group())</span><br><span class="line"><span class="built_in">print</span>(res.span())</span><br><span class="line"></span><br><span class="line"><span class="comment">#泛匹配</span></span><br><span class="line">content=<span class="string">&#x27;Hello 123 456 World_This is a Regex Demo&#x27;</span></span><br><span class="line">res=re.match(<span class="string">&#x27;^Hello.*Demo&#x27;</span>,content)</span><br><span class="line"><span class="built_in">print</span>(res.group())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#匹配目标,获得指定数据</span></span><br><span class="line"></span><br><span class="line">content=<span class="string">&#x27;Hello 123 456 World_This is a Regex Demo&#x27;</span></span><br><span class="line">res=re.match(<span class="string">&#x27;^Hello\s(\d+)\s(\d+)\s.*Demo&#x27;</span>,content)</span><br><span class="line"><span class="built_in">print</span>(res.group()) <span class="comment">#取所有匹配的内容</span></span><br><span class="line"><span class="built_in">print</span>(res.group(<span class="number">1</span>)) <span class="comment">#取匹配的第一个括号内的内容</span></span><br><span class="line"><span class="built_in">print</span>(res.group(<span class="number">2</span>)) <span class="comment">#去陪陪的第二个括号内的内容</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#贪婪匹配:.*代表匹配尽可能多的字符</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">content=<span class="string">&#x27;Hello 123 456 World_This is a Regex Demo&#x27;</span></span><br><span class="line"></span><br><span class="line">res=re.match(<span class="string">&#x27;^He.*(\d+).*Demo$&#x27;</span>,content)</span><br><span class="line"><span class="built_in">print</span>(res.group(<span class="number">1</span>)) <span class="comment">#只打印6,因为.*会尽可能多的匹配,然后后面跟至少一个数字</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#非贪婪匹配:?匹配尽可能少的字符</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">content=<span class="string">&#x27;Hello 123 456 World_This is a Regex Demo&#x27;</span></span><br><span class="line"></span><br><span class="line">res=re.match(<span class="string">&#x27;^He.*?(\d+).*Demo$&#x27;</span>,content)</span><br><span class="line"><span class="built_in">print</span>(res.group(<span class="number">1</span>)) <span class="comment">#只打印6,因为.*会尽可能多的匹配,然后后面跟至少一个数字</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#匹配模式:.不能匹配换行符</span></span><br><span class="line">content=<span class="string">&#x27;&#x27;&#x27;Hello 123456 World_This</span></span><br><span class="line"><span class="string">is a Regex Demo</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">res=re.match(<span class="string">&#x27;He.*?(\d+).*?Demo$&#x27;</span>,content)</span><br><span class="line"><span class="built_in">print</span>(res) <span class="comment">#输出None</span></span><br><span class="line"></span><br><span class="line">res=re.match(<span class="string">&#x27;He.*?(\d+).*?Demo$&#x27;</span>,content,re.S) <span class="comment">#re.S让.可以匹配换行符</span></span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="built_in">print</span>(res.group(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#转义:\</span></span><br><span class="line"></span><br><span class="line">content=<span class="string">&#x27;price is $5.00&#x27;</span></span><br><span class="line">res=re.match(<span class="string">&#x27;price is $5.00&#x27;</span>,content)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line">res=re.match(<span class="string">&#x27;price is \$5\.00&#x27;</span>,content)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#总结:尽量精简,详细的如下</span></span><br><span class="line">    <span class="comment"># 尽量使用泛匹配模式.*</span></span><br><span class="line">    <span class="comment"># 尽量使用非贪婪模式:.*?</span></span><br><span class="line">    <span class="comment"># 使用括号得到匹配目标:用group(n)去取得结果</span></span><br><span class="line">    <span class="comment"># 有换行符就用re.S:修改模式</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#re.search:会扫描整个字符串,不会从头开始,找到第一个匹配的结果就会返回</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">content=<span class="string">&#x27;Extra strings Hello 123 456 World_This is a Regex Demo Extra strings&#x27;</span></span><br><span class="line"></span><br><span class="line">res=re.match(<span class="string">&#x27;Hello.*?(\d+).*?Demo&#x27;</span>,content)</span><br><span class="line"><span class="built_in">print</span>(res) <span class="comment">#输出结果为None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">content=<span class="string">&#x27;Extra strings Hello 123 456 World_This is a Regex Demo Extra strings&#x27;</span></span><br><span class="line"></span><br><span class="line">res=re.search(<span class="string">&#x27;Hello.*?(\d+).*?Demo&#x27;</span>,content) <span class="comment">#</span></span><br><span class="line"><span class="built_in">print</span>(res.group(<span class="number">1</span>)) <span class="comment">#输出结果为</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#re.search:只要一个结果,匹配演练,</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">content=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;tbody&gt;</span></span><br><span class="line"><span class="string">&lt;tr id=&quot;4766303201494371851675&quot; class=&quot;even &quot;&gt;&lt;td&gt;&lt;div class=&quot;hd&quot;&gt;&lt;span class=&quot;num&quot;&gt;1&lt;/span&gt;&lt;div class=&quot;rk &quot;&gt;&lt;span class=&quot;u-icn u-icn-75&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;rank&quot;&gt;&lt;div class=&quot;f-cb&quot;&gt;&lt;div class=&quot;tt&quot;&gt;&lt;a href=&quot;/song?id=476630320&quot;&gt;&lt;img class=&quot;rpic&quot; src=&quot;http://p1.music.126.net/Wl7T1LBRhZFg0O26nnR2iQ==/19217264230385030.jpg?param=50y50&amp;amp;quality=100&quot;&gt;&lt;/a&gt;&lt;span data-res-id=&quot;476630320&quot; &quot;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">res=re.search(<span class="string">&#x27;&lt;a\shref=.*?&lt;b\stitle=&quot;(.*?)&quot;.*?b&gt;&#x27;</span>,content)</span><br><span class="line"><span class="built_in">print</span>(res.group(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#re.findall:找到符合条件的所有结果</span></span><br><span class="line">res=re.findall(<span class="string">&#x27;&lt;a\shref=.*?&lt;b\stitle=&quot;(.*?)&quot;.*?b&gt;&#x27;</span>,content)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#re.sub:字符串替换</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">content=<span class="string">&#x27;Extra strings Hello 123 456 World_This is a Regex Demo Extra strings&#x27;</span></span><br><span class="line"></span><br><span class="line">content=re.sub(<span class="string">&#x27;\d+&#x27;</span>,<span class="string">&#x27;&#x27;</span>,content)</span><br><span class="line"><span class="built_in">print</span>(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#用\1取得第一个括号的内容</span></span><br><span class="line"><span class="comment">#用法:将123与456换位置</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">content=<span class="string">&#x27;Extra strings Hello 123 456 World_This is a Regex Demo Extra strings&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># content=re.sub(&#x27;(Extra.*?)(\d+)(\s)(\d+)(.*?strings)&#x27;,r&#x27;\1\4\3\2\5&#x27;,content)</span></span><br><span class="line">content=re.sub(<span class="string">&#x27;(\d+)(\s)(\d+)&#x27;</span>,<span class="string">r&#x27;\3\2\1&#x27;</span>,content)</span><br><span class="line"><span class="built_in">print</span>(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">content=<span class="string">&#x27;Extra strings Hello 123 456 World_This is a Regex Demo Extra strings&#x27;</span></span><br><span class="line"></span><br><span class="line">res=re.search(<span class="string">&#x27;Extra.*?(\d+).*strings&#x27;</span>,content)</span><br><span class="line"><span class="built_in">print</span>(res.group(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests,re</span><br><span class="line">respone=requests.get(<span class="string">&#x27;https://book.douban.com/&#x27;</span>).text</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(respone)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;======&#x27;</span>*<span class="number">1000</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;======&#x27;</span>*<span class="number">1000</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;======&#x27;</span>*<span class="number">1000</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;======&#x27;</span>*<span class="number">1000</span>)</span><br><span class="line">res=re.findall(<span class="string">&#x27;&lt;li.*?cover.*?href=&quot;(.*?)&quot;.*?title=&quot;(.*?)&quot;&gt;.*?more-meta.*?author&quot;&gt;(.*?)&lt;/span.*?year&quot;&gt;(.*?)&lt;/span.*?publisher&quot;&gt;(.*?)&lt;/span.*?&lt;/li&gt;&#x27;</span>,respone,re.S)</span><br><span class="line"><span class="comment"># res=re.findall(&#x27;&lt;li.*?cover.*?href=&quot;(.*?)&quot;.*?more-meta.*?author&quot;&gt;(.*?)&lt;/span.*?year&quot;&gt;(.*?)&lt;/span.*?publisher&quot;&gt;(.*?)&lt;/span&gt;.*?&lt;/li&gt;&#x27;,respone,re.S)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s    %s    %s   %s&#x27;</span> %(i[<span class="number">0</span>].strip(),i[<span class="number">1</span>].strip(),i[<span class="number">2</span>].strip(),i[<span class="number">3</span>].strip()))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python之旅 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python之旅：模块与包和目录规范</title>
      <link href="/2019/11/27/Python/Python%E4%B9%8B%E6%97%85/Python%E4%B9%8B%E6%97%85%EF%BC%9A%E6%A8%A1%E5%9D%97%E4%B8%8E%E5%8C%85/"/>
      <url>/2019/11/27/Python/Python%E4%B9%8B%E6%97%85/Python%E4%B9%8B%E6%97%85%EF%BC%9A%E6%A8%A1%E5%9D%97%E4%B8%8E%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h1 id="模块介绍"><a href="#模块介绍" class="headerlink" title="模块介绍"></a>模块介绍</h1><p>在Python中，一个py文件就是一个模块，文件名为xxx.py模块名则是xxx,导入模块可以引用模块中已经写好的功能。如果把开发程序比喻成制造一台电脑，编写模块就像是在制造电脑的零部件，准备好零部件后，剩下的工作就是按照逻辑把它们组装到一起。</p><p>将程序模块化会使得程序的组织结构清晰，维护起来更加方便。比起直接开发一个完整的程序，单独开发一个小的模块也会更加简单，并且程序中的模块与电脑中的零部件稍微不同的是：程序中的模块可以被重复使用。所以总结下来，使用模块既保证了代码的重用性，又增强了程序的结构性和可维护性。另外除了自定义模块外，我们还可以导入使用内置或第三方模块提供的现成功能，这种“拿来主义”极大地提高了程序员的开发效率。</p><p><img src="1825659-20191010165229765-1789922488.jpg" alt="img"># 模块的使用</p><h2 id="import语句"><a href="#import语句" class="headerlink" title="import语句"></a>import语句</h2><p>有如下示范文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#文件名：foo.py</span></span><br><span class="line">x=<span class="number">1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get</span>():</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change</span>():</span><br><span class="line">    <span class="keyword">global</span> x</span><br><span class="line">    x=<span class="number">0</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">self</span>):</span><br><span class="line">       <span class="built_in">print</span>(<span class="string">&#x27;from the func&#x27;</span>)</span><br></pre></td></tr></table></figure><p>要想在另外一个py文件中引用foo.py中的功能，需要使用import foo，首次导入模块会做三件事：</p><p>1、执行源文件代码</p><p>2、产生一个新的名称空间用于存放源文件执行过程中产生的名字</p><p>3、在当前执行文件所在的名称空间中得到一个名字foo，该名字指向新创建的模块名称空间，若要引用模块名称空间中的名字，需要加上该前缀，如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> foo <span class="comment">#导入模块foo</span></span><br><span class="line">a=foo.x <span class="comment">#引用模块foo中变量x的值赋值给当前名称空间中的名字a</span></span><br><span class="line">foo.get() <span class="comment">#调用模块foo的get函数</span></span><br><span class="line">foo.change() <span class="comment">#调用模块foo中的change函数</span></span><br><span class="line">obj=foo.Foo() <span class="comment">#使用模块foo的类Foo来实例化，进一步可以执行obj.func()</span></span><br></pre></td></tr></table></figure><p>加上foo.作为前缀就相当于指名道姓地说明要引用foo名称空间中的名字，所以肯定不会与当前执行文件所在名称空间中的名字相冲突，并且若当前执行文件的名称空间中存在x，执行foo.get()或foo.change()操作的都是源文件中的全局变量x。</p><p>需要强调一点是，第一次导入模块已经将其加载到内存空间了，之后的重复导入会直接引用内存中已存在的模块，不会重复执行文件，通过import sys，打印sys.modules的值可以看到内存中已经加载的模块名。</p><p>提示：</p><blockquote><p>1、在Python中模块也属于第一类对象，可以进行赋值、以数据形式传递以及作为容器类型的元素等操作。</p><p>2、模块名应该遵循小写形式，标准库从python2过渡到python3做出了很多这类调整，比如ConfigParser、Queue、SocketServer全更新为纯小写形式。</p></blockquote><p>用import语句导入多个模块，可以写多行import语句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> module1</span><br><span class="line"><span class="keyword">import</span> module2</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">import</span> moduleN</span><br></pre></td></tr></table></figure><p>还可以在一行导入，用逗号分隔开不同的模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> module1,module2,...,moduleN</span><br></pre></td></tr></table></figure><p>但其实第一种形式更为规范，可读性更强，推荐使用，而且我们导入的模块中可能包含有python内置的模块、第三方的模块、自定义的模块，为了便于明显地区分它们，我们通常在文件的开头导入模块，并且分类导入，一类模块的导入与另外一类的导入用空行隔开，不同类别的导入顺序如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1. python内置模块</span></span><br><span class="line"><span class="comment">#2. 第三方模块</span></span><br><span class="line"><span class="comment">#3. 程序员自定义模块</span></span><br></pre></td></tr></table></figure><p> 当然，我们也可以在函数内导入模块，对比在文件开头导入模块属于全局作用域，在函数内导入的模块则属于局部的作用域。</p><h2 id="from-import-语句"><a href="#from-import-语句" class="headerlink" title="from-import 语句"></a>from-import 语句</h2><p>from…import…与import语句基本一致，唯一不同的是：使用import foo导入模块后，引用模块中的名字都需要加上foo.作为前缀，而使用from foo import x,get,change,Foo则可以在当前执行文件中直接引用模块foo中的名字，如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> foo <span class="keyword">import</span> x,get,change <span class="comment">#将模块foo中的x和get导入到当前名称空间</span></span><br><span class="line">a=x <span class="comment">#直接使用模块foo中的x赋值给a</span></span><br><span class="line">get() <span class="comment">#直接执行foo中的get函数</span></span><br><span class="line">change() <span class="comment">#即便是当前有重名的x，修改的仍然是源文件中的x</span></span><br></pre></td></tr></table></figure><p>无需加前缀的好处是使得我们的代码更加简洁，坏处则是容易与当前名称空间中的名字冲突，如果当前名称空间存在相同的名字，则后定义的名字会覆盖之前定义的名字。</p><p>另外from语句支持from foo import 语法，代表将foo中所有的名字都导入到当前位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> foo <span class="keyword">import</span> * <span class="comment">#把foo中所有的名字都导入到当前执行文件的名称空间中，在当前位置直接可以使用这些名字</span></span><br><span class="line"></span><br><span class="line">a=x</span><br><span class="line">get()</span><br><span class="line">change()</span><br><span class="line">obj=Foo() </span><br></pre></td></tr></table></figure><p>如果我们需要引用模块中的名字过多的话，可以采用上述的导入形式来达到节省代码量的效果，但是需要强调的一点是：只能在模块最顶层使用的方式导入，在函数内则非法，并且的方式会带来一种副作用，即我们无法搞清楚究竟从源文件中导入了哪些名字到当前位置，这极有可能与当前位置的名字产生冲突。模块的编写者可以在自己的文件中定义<strong>all</strong>变量用来控制*代表的意思</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#foo.py</span></span><br><span class="line">__all__=[<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;get&#x27;</span>] <span class="comment">#该列表中所有的元素必须是字符串类型，每个元素对应foo.py中的一个名字</span></span><br><span class="line">x=<span class="number">1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get</span>():</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change</span>():</span><br><span class="line">    <span class="keyword">global</span> x</span><br><span class="line">    x=<span class="number">0</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">self</span>):</span><br><span class="line">       <span class="built_in">print</span>(<span class="string">&#x27;from the func&#x27;</span>)</span><br></pre></td></tr></table></figure><p>这样我们在另外一个文件中使用*导入时，就只能导入<strong>all</strong>定义的名字了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> foo <span class="keyword">import</span> * <span class="comment">#此时的*只代表x和get</span></span><br><span class="line"></span><br><span class="line">x <span class="comment">#可用</span></span><br><span class="line">get() <span class="comment">#可用</span></span><br><span class="line">change() <span class="comment">#不可用</span></span><br><span class="line">Foo() <span class="comment">#不可用</span></span><br></pre></td></tr></table></figure><h2 id="其他导入语法-as"><a href="#其他导入语法-as" class="headerlink" title="其他导入语法(as)"></a>其他导入语法(as)</h2><p>我们还可以在当前位置为导入的模块起一个别名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> foo <span class="keyword">as</span> f <span class="comment">#为导入的模块foo在当前位置起别名f，以后再使用时就用这个别名f</span></span><br><span class="line">f.x</span><br><span class="line">f.get()</span><br></pre></td></tr></table></figure><p>还可以为导入的一个名字起别名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> foo <span class="keyword">import</span> get <span class="keyword">as</span> get_x</span><br><span class="line">get_x()</span><br></pre></td></tr></table></figure><p>通常在被导入的名字过长时采用起别名的方式来精简代码，另外为被导入的名字起别名可以很好地避免与当前名字发生冲突，还有很重要的一点就是：可以保持调用方式的一致性，例如我们有两个模块json和pickle同时实现了load方法，作用是从一个打开的文件中解析出结构化的数据，但解析的格式不同，可以用下述代码有选择性地加载不同的模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> data_format == <span class="string">&#x27;json&#x27;</span>:</span><br><span class="line">    <span class="keyword">import</span> json <span class="keyword">as</span> serialize <span class="comment">#如果数据格式是json，那么导入json模块并命名为serialize</span></span><br><span class="line"><span class="keyword">elif</span> data_format == <span class="string">&#x27;pickle&#x27;</span>:</span><br><span class="line">    <span class="keyword">import</span> pickle <span class="keyword">as</span> serialize <span class="comment">#如果数据格式是pickle，那么导入pickle模块并命名为serialize</span></span><br><span class="line">    </span><br><span class="line">data=serialize.load(fn) <span class="comment">#最终调用的方式是一致的</span></span><br></pre></td></tr></table></figure><h2 id="循环导入问题"><a href="#循环导入问题" class="headerlink" title="循环导入问题"></a>循环导入问题</h2><p>循环导入问题指的是在一个模块加载/导入的过程中导入另外一个模块，而在另外一个模块中又返回来导入第一个模块中的名字，由于第一个模块尚未加载完毕，所以引用失败、抛出异常，究其根源就是在python中，同一个模块只会在第一次导入时执行其内部代码，再次导入该模块时，即便是该模块尚未完全加载完毕也不会去重复执行内部代码</p><p>我们以下述文件为例，来详细分析循环/嵌套导入出现异常的原因以及解决的方案</p><p><code>m1.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;正在导入m1&#x27;</span>)</span><br><span class="line"><span class="keyword">from</span> m2 <span class="keyword">import</span> y</span><br><span class="line"></span><br><span class="line">x=<span class="string">&#x27;m1&#x27;</span></span><br></pre></td></tr></table></figure><p><code>m2.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;正在导入m2&#x27;</span>)</span><br><span class="line"><span class="keyword">from</span> m1 <span class="keyword">import</span> x</span><br><span class="line"></span><br><span class="line">y=<span class="string">&#x27;m2&#x27;</span></span><br></pre></td></tr></table></figure><p><code>run.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> m1</span><br></pre></td></tr></table></figure><p>测试一</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、执行run.py会抛出异常</span></span><br><span class="line">正在导入m1</span><br><span class="line">正在导入m2</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;/Users/linhaifeng/PycharmProjects/pro01/1 aaaa练习目录/aa.py&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">import</span> m1</span><br><span class="line">  File <span class="string">&quot;/Users/linhaifeng/PycharmProjects/pro01/1 aaaa练习目录/m1.py&quot;</span>, line <span class="number">2</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">from</span> m2 <span class="keyword">import</span> y</span><br><span class="line">  File <span class="string">&quot;/Users/linhaifeng/PycharmProjects/pro01/1 aaaa练习目录/m2.py&quot;</span>, line <span class="number">2</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">from</span> m1 <span class="keyword">import</span> x</span><br><span class="line">ImportError: cannot <span class="keyword">import</span> name <span class="string">&#x27;x&#x27;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#2、分析</span></span><br><span class="line">先执行run.py---&gt;执行<span class="keyword">import</span> m1，开始导入m1并运行其内部代码---&gt;打印内容<span class="string">&quot;正在导入m1&quot;</span></span><br><span class="line">---&gt;执行<span class="keyword">from</span> m2 <span class="keyword">import</span> y 开始导入m2并运行其内部代码---&gt;打印内容“正在导入m2”---&gt;执行<span class="keyword">from</span> m1 <span class="keyword">import</span> x,由于m1已经被导入过了，所以不会重新导入，所以直接去m1中拿x，然而x此时并没有存在于m1中，所以报错</span><br></pre></td></tr></table></figure><p>测试二</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、执行文件不等于导入文件，比如执行m1.py不等于导入了m1</span></span><br><span class="line">直接执行m1.py抛出异常</span><br><span class="line">正在导入m1</span><br><span class="line">正在导入m2</span><br><span class="line">正在导入m1</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;/Users/linhaifeng/PycharmProjects/pro01/1 aaaa练习目录/m1.py&quot;</span>, line <span class="number">2</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">from</span> m2 <span class="keyword">import</span> y</span><br><span class="line">  File <span class="string">&quot;/Users/linhaifeng/PycharmProjects/pro01/1 aaaa练习目录/m2.py&quot;</span>, line <span class="number">2</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">from</span> m1 <span class="keyword">import</span> x</span><br><span class="line">  File <span class="string">&quot;/Users/linhaifeng/PycharmProjects/pro01/1 aaaa练习目录/m1.py&quot;</span>, line <span class="number">2</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">from</span> m2 <span class="keyword">import</span> y</span><br><span class="line">ImportError: cannot <span class="keyword">import</span> name <span class="string">&#x27;y&#x27;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#2、分析</span></span><br><span class="line">执行m1.py，打印“正在导入m1”，执行<span class="keyword">from</span> m2 <span class="keyword">import</span> y ，导入m2进而执行m2.py内部代码---&gt;打印<span class="string">&quot;正在导入m2&quot;</span>，执行<span class="keyword">from</span> m1 <span class="keyword">import</span> x，此时m1是第一次被导入，执行m1.py并不等于导入了m1，于是开始导入m1并执行其内部代码---&gt;打印<span class="string">&quot;正在导入m1&quot;</span>，执行<span class="keyword">from</span> m1 <span class="keyword">import</span> y，由于m1已经被导入过了，所以无需继续导入而直接问m2要y，然而y此时并没有存在于m2中所以报错</span><br></pre></td></tr></table></figure><p>解决方案</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方案一：导入语句放到最后，保证在导入时，所有名字都已经加载过</span></span><br><span class="line"><span class="comment"># 文件：m1.py</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;正在导入m1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">x=<span class="string">&#x27;m1&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> m2 <span class="keyword">import</span> y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件：m2.py</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;正在导入m2&#x27;</span>)</span><br><span class="line">y=<span class="string">&#x27;m2&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> m1 <span class="keyword">import</span> x</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件：run.py内容如下，执行该文件，可以正常使用</span></span><br><span class="line"><span class="keyword">import</span> m1</span><br><span class="line"><span class="built_in">print</span>(m1.x)</span><br><span class="line"><span class="built_in">print</span>(m1.y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方案二：导入语句放到函数中，只有在调用函数时才会执行其内部代码</span></span><br><span class="line"><span class="comment"># 文件：m1.py</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;正在导入m1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f1</span>():</span><br><span class="line">    <span class="keyword">from</span> m2 <span class="keyword">import</span> y</span><br><span class="line">    <span class="built_in">print</span>(x,y)</span><br><span class="line"></span><br><span class="line">x = <span class="string">&#x27;m1&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件：m2.py</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;正在导入m2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f2</span>():</span><br><span class="line">    <span class="keyword">from</span> m1 <span class="keyword">import</span> x</span><br><span class="line">    <span class="built_in">print</span>(x,y)</span><br><span class="line"></span><br><span class="line">y = <span class="string">&#x27;m2&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件：run.py内容如下，执行该文件，可以正常使用</span></span><br><span class="line"><span class="keyword">import</span> m1</span><br><span class="line"></span><br><span class="line">m1.f1()</span><br></pre></td></tr></table></figure><p>注意：循环导入问题大多数情况是因为程序设计失误导致，上述解决方案也只是在烂设计之上的无奈之举，在我们的程序中应该尽量避免出现循环/嵌套导入，如果多个模块确实都需要共享某些数据，可以将共享的数据集中存放到某一个地方，然后进行导入</p><h2 id="搜索模块的路径与优先级"><a href="#搜索模块的路径与优先级" class="headerlink" title="搜索模块的路径与优先级"></a>搜索模块的路径与优先级</h2><p>模块其实分为四个通用类别，分别是：</p><p>1、使用纯Python代码编写的py文件</p><p>2、包含一系列模块的包</p><p>3、使用C编写并链接到Python解释器中的内置模块</p><p>4、使用C或C++编译的扩展模块</p><p>在导入一个模块时，如果该模块已加载到内存中，则直接引用，否则会优先查找内置模块，然后按照从左到右的顺序依次检索sys.path中定义的路径，直到找模块对应的文件为止，否则抛出异常。sys.path也被称为模块的搜索路径，它是一个列表类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.path</span><br><span class="line">[<span class="string">&#x27;&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;/Library/Frameworks/Python.framework/Versions/3.5/lib/python35.zip&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5&#x27;</span>,</span><br><span class="line">...,</span><br><span class="line"><span class="string">&#x27;/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages&#x27;</span></span><br></pre></td></tr></table></figure><p>列表中的每个元素其实都可以当作一个目录来看：在列表中会发现有.zip或.egg结尾的文件，二者是不同形式的压缩文件，事实上Python确实支持从一个压缩文件中导入模块，我们也只需要把它们都当成目录去看即可。</p><p>sys.path中的第一个路径通常为空，代表执行文件所在的路径，所以在被导入模块与执行文件在同一目录下时肯定是可以正常导入的，而针对被导入的模块与执行文件在不同路径下的情况，为了确保模块对应的源文件仍可以被找到，需要将源文件foo.py所在的路径添加到sys.path中，假设foo.py所在的路径为/pythoner/projects/</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">r&#x27;/pythoner/projects/&#x27;</span>) <span class="comment">#也可以使用sys.path.insert(……)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> foo <span class="comment">#无论foo.py在何处,我们都可以导入它了</span></span><br></pre></td></tr></table></figure><h2 id="区分py文件的两种用途"><a href="#区分py文件的两种用途" class="headerlink" title="区分py文件的两种用途"></a>区分py文件的两种用途</h2><p>一个Python文件有两种用途，一种被当主程序/脚本执行，另一种被当模块导入，为了区别同一个文件的不同用途，每个py文件都内置了<strong>name</strong>变量，该变量在py文件被当做脚本执行时赋值为“<strong>main</strong>”,在py文件被当做模块导入时赋值为模块名</p><p>作为模块foo.py的开发者，可以在文件末尾基于<strong>name</strong>在不同应用场景下值的不同来控制文件执行不同的逻辑</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#foo.py</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    foo.py被当做脚本执行时运行的代码</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    foo.py被当做模块导入时运行的代码</span><br></pre></td></tr></table></figure><p>通常我们会在if的子代码块中编写针对模块功能的测试代码，这样foo.py在被当做脚本运行时，就会执行测试代码，而被当做模块导入时则不用执行测试代码。</p><h2 id="编写一个规范的模块"><a href="#编写一个规范的模块" class="headerlink" title="编写一个规范的模块"></a>编写一个规范的模块</h2><p>我们在编写py文件时，需要时刻提醒自己，该文件既是给自己用的，也有可能会被其他人使用，因而代码的可读性与易维护性显得十分重要，为此我们在编写一个模块时最好按照统一的规范去编写，如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python #通常只在类unix环境有效,作用是可以使用脚本名来执行，而无需直接调用解释器。</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;The module is used to...&quot;</span> <span class="comment">#模块的文档描述</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys <span class="comment">#导入模块</span></span><br><span class="line"></span><br><span class="line">x=<span class="number">1</span> <span class="comment">#定义全局变量,如果非必须,则最好使用局部变量,这样可以提高代码的易维护性,并且可以节省内存提高性能</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>: <span class="comment">#定义类,并写好类的注释</span></span><br><span class="line">    <span class="string">&#x27;Class Foo is used to...&#x27;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(): <span class="comment">#定义函数,并写好函数的注释</span></span><br><span class="line">    <span class="string">&#x27;Function test is used to…&#x27;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>: <span class="comment">#主程序</span></span><br><span class="line">    test() <span class="comment">#在被当做脚本执行时,执行此处的代码</span></span><br></pre></td></tr></table></figure><h1 id="包"><a href="#包" class="headerlink" title="包"></a>包</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>随着模块数目的增多，把所有模块不加区分地放到一起也是极不合理的，于是Python为我们提供了一种把模块组织到一起的方法，即创建一个包。包就是一个含有<code>__init__.py</code>文件的文件夹，文件夹内可以组织子模块或子包，例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#具体的：包就是一个包含有__init__.py文件的文件夹，所以其实我们创建包的目的就是为了用文件夹将文件/模块组织起来</span></span><br><span class="line">pool/                <span class="comment">#顶级包</span></span><br><span class="line">├── __init__.py     </span><br><span class="line">├── futures          <span class="comment">#子包</span></span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── process.py</span><br><span class="line">│   └── thread.py</span><br><span class="line">└── versions.py      <span class="comment">#子模块</span></span><br></pre></td></tr></table></figure><p>官网解释</p><blockquote><p>Packages are a way of structuring Python’s module namespace by using “dotted module names”</p><p>包是一种通过使用‘.模块名’来组织python模块名称空间的方式。</p></blockquote><p>需要强调的是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1. 在python3中，即使包下没有__init__.py文件，import 包仍然不会报错，而在python2中，包下一定要有该文件，否则import 包报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2. 创建包的目的不是为了运行，而是被导入使用，记住，包只是模块的一种形式而已，包的本质就是一种模块</span></span><br></pre></td></tr></table></figure><h2 id="为何要使用包"><a href="#为何要使用包" class="headerlink" title="为何要使用包"></a><strong>为何要使用包</strong></h2><blockquote><p>包的本质就是一个文件夹，那么文件夹唯一的功能就是将文件组织起来</p><p>随着功能越写越多，我们无法将所以功能都放到一个文件中，于是我们使用模块去组织功能，而随着模块越来越多，我们就需要用文件夹将模块文件组织起来，以此来提高程序的结构性和可维护性</p></blockquote><p>注意事项</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.关于包相关的导入语句也分为import和from ... import ...两种，但是无论哪种，无论在什么位置，在导入时都必须遵循一个原则：凡是在导入时带点的，点的左边都必须是一个包，否则非法。可以带有一连串的点，如item.subitem.subsubitem,但都必须遵循这个原则。但对于导入后，在使用时就没有这种限制了，点的左边可以是包,模块，函数，类(它们都可以用点的方式调用自己的属性)。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2、import导入文件时，产生名称空间中的名字来源于文件，import 包，产生的名称空间的名字同样来源于文件，即包下的__init__.py，导入包本质就是在导入该文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3、包A和包B下有同名模块也不会冲突，如A.a与B.a来自俩个命名空间</span></span><br></pre></td></tr></table></figure><h1 id="包的使用"><a href="#包的使用" class="headerlink" title="包的使用"></a>包的使用</h1><p><img src="1825659-20191010170149475-1522800597.jpg" alt="img"></p><p>接下来我们就以包pool为例来介绍包的使用，包内各文件内容如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># process.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProcessPoolExecutor</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,max_workers</span>):</span><br><span class="line">        self.max_workers=max_workers</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">submit</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;ProcessPool submit&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># thread.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadPoolExecutor</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, max_workers</span>):</span><br><span class="line">        self.max_workers = max_workers</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">submit</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;ThreadPool submit&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># versions.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;check versions’)</span></span><br><span class="line"><span class="string">          </span></span><br><span class="line"><span class="string"># __init__.py文件内容均为空</span></span><br></pre></td></tr></table></figure><h2 id="导入包与init-py"><a href="#导入包与init-py" class="headerlink" title="导入包与init.py"></a>导入包与<strong>init</strong>.py</h2><p>包属于模块的一种，因而包以及包内的模块均是用来被导入使用的，而绝非被直接执行，首次导入包（如import pool）同样会做三件事：</p><p>1、执行包下的<strong>init</strong>.py文件</p><p>2、产生一个新的名称空间用于存放<strong>init</strong>.py执行过程中产生的名字</p><p>3、在当前执行文件所在的名称空间中得到一个名字pool，该名字指向<strong>init</strong>.py的名称空间，例如pool.xxx和pool.yyy中的xxx和yyy都是来自于pool下的<strong>init</strong>.py，也就是说导入包时并不会导入包下所有的子模块与子包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pool</span><br><span class="line"></span><br><span class="line">pool.versions.check() <span class="comment">#抛出异常AttributeError</span></span><br><span class="line">pool.futures.process.ProcessPoolExecutor(<span class="number">3</span>) <span class="comment">#抛出异常AttributeError</span></span><br></pre></td></tr></table></figure><p>pool.versions.check()要求pool下有名字versions，进而pool.versions下有名字check。pool.versions下已经有名字check了，所以问题出在pool下没有名字versions，这就需要在pool下的<strong>init</strong>.py中导入模块versions</p><h2 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>关于包相关的导入语句也分为<span class="keyword">import</span>和<span class="keyword">from</span> ... <span class="keyword">import</span> ...两种，但是无论哪种，无论在什么位置，在导入时都必须遵循一个原则：凡是在导入时带点的，点的左边都必须是一个包，否则非法。可以带有一连串的点，如<span class="keyword">import</span> 顶级包.子包.子模块,但都必须遵循这个原则。但对于导入后，在使用时就没有这种限制了，点的左边可以是包,模块，函数，类(它们都可以用点的方式调用自己的属性)。</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、包A和包B下有同名模块也不会冲突，如A.a与B.a来自俩个命名空间</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、<span class="keyword">import</span>导入文件时，产生名称空间中的名字来源于文件，<span class="keyword">import</span> 包，产生的名称空间的名字同样来源于文件，即包下的__init__.py，导入包本质就是在导入该文件</span><br></pre></td></tr></table></figure><h2 id="绝对导入与相对导入"><a href="#绝对导入与相对导入" class="headerlink" title="绝对导入与相对导入"></a>绝对导入与相对导入</h2><p>针对包内的模块之间互相导入，导入的方式有两种</p><p>1、绝对导入：以顶级包为起始</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#pool下的__init__.py</span></span><br><span class="line"><span class="keyword">from</span> pool <span class="keyword">import</span> versions</span><br></pre></td></tr></table></figure><p>2、相对导入：.代表当前文件所在的目录，..代表当前目录的上一级目录，依此类推</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#pool下的__init__.py</span></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> versions</span><br></pre></td></tr></table></figure><p>同理，针对pool.futures.process.ProcessPoolExecutor(3)，则需要</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#操作pool下的__init__.py，保证pool.futures</span></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> futures <span class="comment">#或from pool import futures</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#操作futrues下的__init__.py，保证pool.futures.process</span></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> process <span class="comment">#或from pool.futures import process</span></span><br></pre></td></tr></table></figure><p>在包内使用相对导入还可以跨目录导入模块，比如thread.py中想引用versions.py的名字check</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>也能使用绝对导入，导入过程中同样会依次执行包下的__init__.py,只是基于<span class="keyword">import</span>导入的结果，使用时必须加上该前缀</span><br></pre></td></tr></table></figure><p>例1：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pool.futures <span class="comment">#拿到名字pool.futures指向futures下的__init__.py</span></span><br><span class="line"></span><br><span class="line">pool.futures.xxx <span class="comment">#要求futures下的__init__.py中必须有名字xxx </span></span><br></pre></td></tr></table></figure><p>例2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pool.futures.thread <span class="comment">#拿到名字pool.futures.thread指向thread.py</span></span><br><span class="line"></span><br><span class="line">thread_pool=pool.futures.thread.ThreadPoolExecutor(<span class="number">3</span>)</span><br><span class="line">thread_pool.submit()</span><br></pre></td></tr></table></figure><p>相对导入只能用from module import symbol的形式,import ..versions语法是不对的，且symbol只能是一个明确的名字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pool <span class="keyword">import</span> futures.process <span class="comment">#语法错误</span></span><br><span class="line"><span class="keyword">from</span> pool.futures <span class="keyword">import</span> process <span class="comment">#语法正确</span></span><br></pre></td></tr></table></figure><p>针对包内部模块之间的相互导入推荐使用相对导入，需要特别强调：</p><p>1、相对导入只能在包内部使用，用相对导入不同目录下的模块是非法的</p><p>2、无论是import还是from-import，但凡是在导入时带点的，点的左边必须是包,否则语法错误</p><h2 id="绝对导入与相对导入总结"><a href="#绝对导入与相对导入总结" class="headerlink" title="绝对导入与相对导入总结"></a>绝对导入与相对导入总结</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">绝对导入与相对导入</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绝对导入: 以执行文件的sys.path为起始点开始导入,称之为绝对导入</span></span><br><span class="line"><span class="comment">#        优点: 执行文件与被导入的模块中都可以使用</span></span><br><span class="line"><span class="comment">#        缺点: 所有导入都是以sys.path为起始点,导入麻烦</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 相对导入: 参照当前所在文件的文件夹为起始开始查找,称之为相对导入</span></span><br><span class="line"><span class="comment">#        符号: .代表当前所在文件的文件加,..代表上一级文件夹,...代表上一级的上一级文件夹</span></span><br><span class="line"><span class="comment">#        优点: 导入更加简单</span></span><br><span class="line"><span class="comment">#        缺点: 只能在导入包中的模块时才能使用</span></span><br><span class="line">　　　　  <span class="comment">#注意:</span></span><br><span class="line">　　　　　　　　<span class="number">1.</span> 相对导入只能用于包内部模块之间的相互导入,导入者与被导入者都必须存在于一个包内</span><br><span class="line">　　　　　　　　<span class="number">2.</span> attempted relative <span class="keyword">import</span> beyond top-level package <span class="comment"># 试图在顶级包之外使用相对导入是错误的,言外之意,必须在顶级包内使用相对导入,每增加一个.代表跳到上一级文件夹,而上一级不应该超出顶级包</span></span><br></pre></td></tr></table></figure><h2 id="包的分发（了解）"><a href="#包的分发（了解）" class="headerlink" title="包的分发（了解）"></a>包的分发（了解）</h2><p><a href="https://packaging.python.org/distributing/">https://packaging.python.org/distributing/</a></p><p><img src="1825659-20191010170309874-2046458841.jpg" alt="img"></p><h2 id="from-包-import"><a href="#from-包-import" class="headerlink" title="from 包 import *"></a>from 包 import *</h2><p> 在使用包时同样支持from pool.futures import <em> ，毫无疑问</em>代表的是futures下<strong>init</strong>.py中所有的名字，通用是用变量<strong>all</strong>来控制*代表的意思</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#futures下的__init__.py</span></span><br><span class="line">__all__=[<span class="string">&#x27;process&#x27;</span>,<span class="string">&#x27;thread&#x27;</span>]</span><br></pre></td></tr></table></figure><p> 最后说明一点，包内部的目录结构通常是包的开发者为了方便自己管理和维护代码而创建的，这种目录结构对包的使用者往往是无用的，此时通过操作<strong>init</strong>.py可以“隐藏”包内部的目录结构，降低使用难度，比如想要让使用者直接使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pool</span><br><span class="line"></span><br><span class="line">pool.check()</span><br><span class="line">pool.ProcessPoolExecutor(<span class="number">3</span>)</span><br><span class="line">pool.ThreadPoolExecutor(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>需要操作pool下的<strong>init</strong>.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .versions <span class="keyword">import</span> check</span><br><span class="line"><span class="keyword">from</span> .futures.process <span class="keyword">import</span> ProcessPoolExecutor</span><br><span class="line"><span class="keyword">from</span> .futures.thread <span class="keyword">import</span> ThreadPoolExecutor</span><br></pre></td></tr></table></figure><h1 id="软件开发目录规范"><a href="#软件开发目录规范" class="headerlink" title="软件开发目录规范"></a>软件开发目录规范</h1><p><img src="1825659-20191010170549761-2059762937.jpg" alt="img">为了提高程序的可读性与可维护性，我们应该为软件设计良好的目录结构，这与规范的编码风格同等重要。软件的目录规范并无硬性标准，只要清晰可读即可，假设你的软件名为foo，笔者推荐目录结构如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Foo/</span><br><span class="line">|-- core/</span><br><span class="line">|   |-- core.py</span><br><span class="line">|</span><br><span class="line">|-- api/</span><br><span class="line">|   |-- api.py</span><br><span class="line">|</span><br><span class="line">|-- db/</span><br><span class="line">|   |-- db_handle.py</span><br><span class="line">|</span><br><span class="line">|-- lib/</span><br><span class="line">|   |-- common.py</span><br><span class="line">|</span><br><span class="line">|-- conf/</span><br><span class="line">|   |-- settings.py</span><br><span class="line">|</span><br><span class="line">|-- run.py</span><br><span class="line">|-- setup.py</span><br><span class="line">|-- requirements.txt</span><br><span class="line">|-- README</span><br></pre></td></tr></table></figure><div class="note info flat"><h3 id="简要解释"><a href="#简要解释" class="headerlink" title="简要解释"></a>简要解释</h3><ul><li><p>core/: 存放业务逻辑相关代码</p></li><li><p>api/: 存放接口文件，接口主要用于为业务逻辑提供数据操作。</p></li><li><p>db/: 存放操作数据库相关文件，主要用于与数据库交互</p></li><li><p>lib/: 存放程序中常用的自定义模块</p></li><li><p>conf/: 存放配置文件</p></li><li><p>run.py: 程序的启动文件，一般放在项目的根目录下，因为在运行时会默认将运行文件所在的文件夹作为sys.path的第一个路径，这样就省去了处理环境变量的步骤</p></li><li><p>setup.py: 安装、部署、打包的脚本。</p></li><li><p>requirements.txt: 存放软件依赖的外部Python包列表。</p></li><li><p>README: 项目说明文件</p></li></ul></div><p>  内容，比如LICENSE.txt,ChangeLog.txt文件等，主要是在项目需要开源时才会用到，请读者自行查阅。</p><p>关于README的内容，这个应该是每个项目都应该有的一个文件，目的是能简要描述该项目的信息，让读者快速了解这个项目。它需要说明以下几个事项:</p><div class="note success flat"><h3 id="README事项"><a href="#README事项" class="headerlink" title="README事项"></a>README事项</h3><ul><li><p>软件定位，软件的基本功能；</p></li><li><p>运行代码的方法: 安装环境、启动命令等；</p></li><li><p>简要的使用说明；</p></li><li><p>代码目录结构说明，更详细点可以说明软件的基本原理；</p></li><li><p>常见问题说明。</p></li></ul></div><p>关于setup.py和requirements.txt：</p><p><img src="1825659-20191010170620766-1443074818.gif" alt="img"></p><p>一般来说，用setup.py来管理代码的打包、安装、部署问题。业界标准的写法是用Python流行的打包工具setuptools来管理这些事情，这种方式普遍应用于开源项目中。不过这里的核心思想不是用标准化的工具来解决这些问题，而是说，一个项目一定要有一个安装部署工具，能快速便捷的在一台新机器上将环境装好、代码部署好和将程序运行起来。</p><p>requirements.txt文件的存在是为了方便开发者维护软件的依赖库。我们需要将开发过程中依赖库的信息添加进该文件中，避免在 setup.py安装依赖时漏掉软件包，同时也方便了使用者明确项目引用了哪些Python包。</p><p>这个文件的格式是每一行包含一个包依赖的说明，通常是flask&gt;=0.10这种格式，要求是这个格式能被pip识别，这样就可以简单的通过 pip install -r requirements.txt来把所有Python依赖库都装好了，具体格式参照<a href="https://pip.readthedocs.io/en/1.1/requirements.html">https://pip.readthedocs.io/en/1.1/requirements.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Python之旅 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模块 </tag>
            
            <tag> 包 </tag>
            
            <tag> 软件开发目录规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序员该如何应对中年危机？</title>
      <link href="/2019/11/26/book/%E7%A8%8B%E5%BA%8F%E5%91%98%E8%AF%A5%E5%A6%82%E4%BD%95%E5%BA%94%E5%AF%B9%E4%B8%AD%E5%B9%B4%E5%8D%B1%E6%9C%BA/"/>
      <url>/2019/11/26/book/%E7%A8%8B%E5%BA%8F%E5%91%98%E8%AF%A5%E5%A6%82%E4%BD%95%E5%BA%94%E5%AF%B9%E4%B8%AD%E5%B9%B4%E5%8D%B1%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前文：这几天突然被        &lt;&lt;网易“暴力裁员”刷屏！&gt;&gt;       想想自己也是搞这一行，吃的也是年轻饭啊。新技术更新迭代很快，熬夜加班严重，身体满负荷运转，自己的中年应该怎么办呢？</p></blockquote><p>人到中年，可能会面临家庭、健康、事业等的中年危机，作为程序员，该如何提前准备呢？</p><p>近日，某互联网公司员工发帖称自己被公司裁员，该员工自述14年从上海交大毕业后就进入该企业工作。</p><p>5年里，除了某段时间经常在后半夜两三点钟下班，主管说第二天早上可以请病假晚到一会儿之外，请病假的次数屈指可数，但因病被确诊为扩张型心肌病。后绩效被主管评为 D，遂被辞退。经过多次交涉，公司不给赔偿金，并威胁如果得要赔偿金后会对下一份工作不利，影响前途，多次交涉无果被保安赶出公司。</p><p>近些年类似的案例屡见不鲜，去年中兴员工跳楼事件引发广泛讨论。据说是给父母买了房，背负了几百万的房贷，一个人要养活两个孩子，老婆不上班，还有几个老人需要赡养，突然接到被公司辞退的通知，心理无法承受，跳楼自杀。</p><p>马上又到年底了，随着经济环境的恶化，企业盈利困难，裁员还会一浪接一浪的出现在新闻媒体上，就在几天前，就被爆出多家互联网金融公司裁员，例如最近 51 信用卡、呆萝卜、懒投资等等。</p><p><img src="1.jpg" alt="img"></p><h1 id="认清裁员的真相"><a href="#认清裁员的真相" class="headerlink" title="认清裁员的真相"></a>认清裁员的真相</h1><p>我相信大多数被裁的都是普通人，虽然牛人也会被裁员，例如乔布斯、陆奇这样的公司高管，但是凭借他们的能力，东山再起的可能性是要比普通人强上千百倍的，那么，我们普通人应该如何面对这场危机呢？</p><p>首先，我觉得大家要认清一个事实，哪怕公司福利在好，在怎么人性化，公司也不是你家，公司存在的目的是为了赚钱的，因此裁员这个事情是最正常不过了。</p><p>比如说你生病了，那么公司对你的预期就降低，公司有权利选择不让你继续干下去。法律是规定要给赔偿金的，但是现实中有的公司会给，有的公司你不要就不给，这个需要自己去争取，当然我是鄙视那些裁员不给赔偿金的公司。</p><p>很多人觉得稳定就是找一份高薪、优秀的公司然后一直干下去，亦或者只要努力工作，公司就会给升职加薪，我不知道现在还有多少人拥有这么幼稚的想法。</p><p>其次我认为大家要把工作当成是一种投资，投资的目的是把风险将到最低，收益达到最大，既然投资就有风险，这里面的风险就包含：</p><ul><li>大环境不好，整个行业都出现问题，比如最近的互联网金融裁员。</li><li>公司或所在项目经营困难，难以维继，被迫裁员。</li><li>自身能力问题，被裁员。</li></ul><p>不论哪一种原因被裁员，如果你恰好被裁，而你的收入来源主要是工资性收入，那你一定会面临非常大的压力。在恐怖点，你还上有老下有小，甚至背负着房贷。那压力会更大。那可有化解之法？</p><p><img src="2.jpg" alt="img"></p><h1 id="做一个斜杠青年"><a href="#做一个斜杠青年" class="headerlink" title="做一个斜杠青年"></a>做一个斜杠青年</h1><p>事实上，很多人都在开始行动，把自己变成一个“斜杠青年”，“斜杠青年”是一个新概念，来源于英文“Slash”，其概念出自《纽约时报》专栏作家麦瑞克·阿尔伯撰写的书籍《双重职业》。越来越多的年轻人不再满足“专一职业”的生活方式，而是选择能够拥有多重职业和身份的多元生活。</p><p>这就好比买股票，假设你有 100 万，你只买一只股票，那么当这只股票涨的很厉害的时候，你当然可以赚很多，而当行情不好，股票跌的时候，你也会亏的很厉害，那么最正确的做法就是分散投资，你可以选择：</p><ul><li>只买一只股票，比如 100 万全部买某企业的股票。</li><li>买不同的股票，最好是不同行业的白马股。（当股市不景气，你会被套牢）</li><li>买不同的股票，最好是不同行业的白马股，同时还去投资一些其他资产，比如一二线城市的房产，另外在购买一些黄金、国债，甚至国外优质股票等等方式分散风险。（当股市不景气，你可能会在其他投资产品上赚取利润，比如最近几年的房地产行业）</li></ul><p>显然第三种方式更能够分散风险，这也像在做架构时要考虑双活、异地多活、高可用。不能把鸡蛋放在一个篮子里面。</p><p>有人肯定会说，你说的轻巧，一天上班都累得要死，尤其是我们 IT 行业，经常加班，根本没有自己的时间，好不容易周末当然是要好好休息休息，哪有时间搞副业。可是你想过没有，你整天加班的状态完全就是不健康的，你应该做的就是尽力摆脱这种变态的工作方式。另外，你说做副业，不会又是骗人去做什么刷单、做微商卖狗皮膏药吧。</p><p>当然不是，我认为没有时间是你自认为的，有很多普通人有大把时间在刷抖音、追剧，就是没时间来学习提升自己或者锻炼自己的身体。</p><p><img src="3.jpg" alt="img"></p><h1 id="怎么做一个斜杠青年"><a href="#怎么做一个斜杠青年" class="headerlink" title="怎么做一个斜杠青年"></a>怎么做一个斜杠青年</h1><h2 id="1、避免做重复性的机械性的工作"><a href="#1、避免做重复性的机械性的工作" class="headerlink" title="1、避免做重复性的机械性的工作"></a>1、避免做重复性的机械性的工作</h2><p>如果你现在的工作内容非常的枯燥和重复，那你要小心了，这是不好的征兆，这意味着你的可替代性很强。</p><p>一旦你的可替代性很强，那么意味着你被裁的几率就会大大提高。你可以选择主动点跟领导申请去做一些有挑战性的事情，哪怕暂时不赚钱，也要去做，只有在不确定的事情里面你才能获得更多更大的成长机会。否则你就是温水里的青蛙，总有一天水开了你就……</p><h2 id="2、发挥自己的特长"><a href="#2、发挥自己的特长" class="headerlink" title="2、发挥自己的特长"></a>2、发挥自己的特长</h2><p>每个人都有自己的特长，比如你是一名程序员，除了代码写得好，还文章写得好，口才也较好，还会画画……</p><p>你就可以发挥自己的特长，比如开设公众号，通过绘画的方式秒回程序员的日常，例如《神秘的程序员们》的作者就靠着专栏拥有很多的粉丝。</p><p>如果你代码写得好，语言表达也很好，你可以去兼职教课，帮助更多新手程序员成长。</p><p>在这个过程中，需要你坚持，可能一开始你不会赚很多钱，但是你可以在这个过程中不断完善不断扩大自己的影响力，让更多人喜欢你，把自己打造成一个大 IP，岂不是比你给人打工赚点死工资来的稳定多了。我身边很多人靠着副业赚取的收入就比主业高几倍的大有人在。</p><h2 id="3、不断的学习"><a href="#3、不断的学习" class="headerlink" title="3、不断的学习"></a>3、不断的学习</h2><p>这个无需多言，只有不断地吸收新知识，你才不会被社会淘汰。</p><blockquote><p>以上是要和大家分享的一些心得，希望各位能够在未来的路上越走越远，越走越宽敞。</p><p>声明：本文系作者独立观点，不代表程序人生立场。</p></blockquote><p><img src="end.jpg" alt="img"></p><h1 id="阿里腾讯京东这些员工保障了解一下"><a href="#阿里腾讯京东这些员工保障了解一下" class="headerlink" title="阿里腾讯京东这些员工保障了解一下"></a><strong>阿里腾讯京东这些员工保障了解一下</strong></h1><h2 id="京东"><a href="#京东" class="headerlink" title="京东"></a>京东</h2><p><strong>员工遭遇不幸，公司负责孩子学习和生活费用到22岁</strong><br><strong>凡是在京东工作满五年以上的员工，如果遭遇重大疾病，公司都将承担其全部医疗费用</strong> </p><h2 id="阿里"><a href="#阿里" class="headerlink" title="阿里"></a>阿里</h2><p><strong>员工及家庭（配偶、子女）重疾、残疾或身故，援助最高20万</strong></p><p><strong>分为财富、生活平衡、健康保障三方面</strong></p><p> <code>财富方面</code>，除了基本的社保、缴纳最高比例的住房公积金外，还有蒲公英计划、彩虹计划、iHome置业计划、小额贷款几大福利。 </p><p><code>蒲公英计划</code>：阿里秉着“我为人人、人人为我”的互助精神，设立阿里自己的公益基金，将在员工及家庭（配偶、子女）面临重疾、残疾或身故的时候给予最高20万的经济援助。</p><p><code>彩虹计划</code>：为了帮助那些遭遇重大自然灾害、突发事件或重大疾病等不幸，而导致有较大生活困难的阿里人，阿里巴巴将给予一次最高5万无偿的援助金，与员工及家人一起共度难关。</p><p><code>iHome置业计划</code>：可以帮员工分担首付的压力，最高可申请贷款<em>30</em>万，圆一个住房梦。</p><p><code>小额贷款</code>：在员工结婚、装修、买车、旅行、培训等综合性消费需要贷款时，与商业银行协议提供优惠的小额消费贷款，解决员工临时的资金困难；利率打8-8.5折，无抵押，手续简单，时间短。</p><p> <code>健康保障方面</code>，除了为阿里人提供一年一度的身体健康检查外，同时还为家属提供了阿里折扣价；特聘请资深全科医学专家、国家级心理咨询师，在阿里人有需要的时候提供一对一的电话咨询和辅导；公司为阿里人购买了综合医疗保险，门急诊及住院费用可以根据药品种类按相应的比例进行报销，减轻员工医疗负担；一旦确诊重大疾病，阿里将最大程度帮助员工解决就医通道、疾病解读、预后评估等生理协助；并有资深心理专家为员工及家人共铸心理桥梁，共度生命难关。 </p><h2 id="腾讯"><a href="#腾讯" class="headerlink" title="腾讯"></a>腾讯</h2><p><strong>过世员工的家属可以领半薪十年，每个孩子增加12个月薪</strong> </p><p> 2012年，谷歌推出“死后福利”——谷歌员工因意外去世后，其配偶可以在10年之内继续领取去世员工生前50%的薪水。 </p><p>而在腾讯，过世员工的家属同样可以领半薪十年。不一样的是，如果该员工有孩子，每多一个孩子额度会有额外增加，每个孩子增加12个月薪。</p><p>在具体发放上，一部分是一次支付，因为发生不幸时，家人会需要用钱；另一部分，腾讯会通过信托公司处理。</p>]]></content>
      
      
      <categories>
          
          <category> Book </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 短文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python之旅：三元表达式、列表推导式、生成器表达式、递归、匿名函数、内置函数、异常处理</title>
      <link href="/2019/10/31/Python/Python%E4%B9%8B%E6%97%85/Python%E4%B9%8B%E6%97%85%EF%BC%9A%E4%B8%89%E5%85%83%E8%A1%A8%E8%BE%BE%E5%BC%8F%E3%80%81%E5%88%97%E8%A1%A8%E6%8E%A8%E5%AF%BC%E5%BC%8F%E3%80%81%E7%94%9F%E6%88%90%E5%99%A8%E8%A1%A8%E8%BE%BE%E5%BC%8F%E3%80%81%E9%80%92%E5%BD%92%E3%80%81%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%E3%80%81%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/"/>
      <url>/2019/10/31/Python/Python%E4%B9%8B%E6%97%85/Python%E4%B9%8B%E6%97%85%EF%BC%9A%E4%B8%89%E5%85%83%E8%A1%A8%E8%BE%BE%E5%BC%8F%E3%80%81%E5%88%97%E8%A1%A8%E6%8E%A8%E5%AF%BC%E5%BC%8F%E3%80%81%E7%94%9F%E6%88%90%E5%99%A8%E8%A1%A8%E8%BE%BE%E5%BC%8F%E3%80%81%E9%80%92%E5%BD%92%E3%80%81%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%E3%80%81%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="三元表达式"><a href="#三元表达式" class="headerlink" title="三元表达式"></a>三元表达式</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&#x27;allen&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;验证失败&#x27;</span>) <span class="keyword">if</span> name!=<span class="string">&#x27;allen&#x27;</span> <span class="keyword">else</span> <span class="built_in">print</span>(<span class="string">&#x27;验证成功&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a><strong>列表推导式</strong></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 优点：方便，改变了编程习惯，可称之为声明式编程</span></span><br><span class="line"><span class="comment"># 示例一：</span></span><br><span class="line">test_list=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    test_list.append(<span class="string">&#x27;test_%s&#x27;</span> %i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用三元表达式</span></span><br><span class="line">test_list=[<span class="string">&#x27;test_%s&#x27;</span> %i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span>(test_list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例二：</span></span><br><span class="line">res=[<span class="string">&#x27;test_&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(item+item1) <span class="keyword">for</span> item <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>) <span class="keyword">if</span> item==<span class="number">3</span></span><br><span class="line">     <span class="keyword">for</span> item1 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">66</span>) <span class="keyword">if</span> item1==<span class="number">10</span></span><br><span class="line">]</span><br><span class="line"><span class="comment"># [&#x27;test_13&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复杂一般用不着，可读性差</span></span><br><span class="line">res=[itemN <span class="keyword">for</span> item1 <span class="keyword">in</span> iterable1 <span class="keyword">if</span> item1</span><br><span class="line"><span class="keyword">for</span> item2 <span class="keyword">in</span> iterable2 <span class="keyword">if</span> item2</span><br><span class="line">...</span><br><span class="line"><span class="keyword">for</span> itemN <span class="keyword">in</span> iterableN <span class="keyword">if</span> itemN</span><br><span class="line">]</span><br><span class="line"><span class="comment"># 类似于</span></span><br><span class="line">res=[]</span><br><span class="line"><span class="keyword">for</span> item1 <span class="keyword">in</span> iterable1:</span><br><span class="line">    <span class="keyword">if</span> item1:</span><br><span class="line">        <span class="keyword">for</span> item2 <span class="keyword">in</span> iterable2:</span><br><span class="line">            <span class="keyword">if</span> item2</span><br><span class="line">                ...</span><br><span class="line">                <span class="keyword">for</span> itemN <span class="keyword">in</span> iterableN:</span><br><span class="line">                    <span class="keyword">if</span> itemN:</span><br><span class="line">                        res.append(itemN)</span><br></pre></td></tr></table></figure><h1 id="生成器表达式"><a href="#生成器表达式" class="headerlink" title="生成器表达式"></a>生成器表达式</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、把列表推导式的[]换成()就是生成器表达式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2、示例：生一筐鸡蛋变成给你一只老母鸡，用的时候就下蛋，这也是生成器的特性</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>chicken=(<span class="string">&#x27;鸡蛋%s&#x27;</span> %i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>chicken</span><br><span class="line">&lt;generator <span class="built_in">object</span> &lt;genexpr&gt; at <span class="number">0x10143f200</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(chicken)</span><br><span class="line"><span class="string">&#x27;鸡蛋0&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(chicken) <span class="comment">#因chicken可迭代，因而可以转成列表</span></span><br><span class="line">[<span class="string">&#x27;鸡蛋1&#x27;</span>, <span class="string">&#x27;鸡蛋2&#x27;</span>, <span class="string">&#x27;鸡蛋3&#x27;</span>, <span class="string">&#x27;鸡蛋4&#x27;</span>,]</span><br><span class="line"></span><br><span class="line"><span class="comment">#3、优点：省内存，一次只产生一个值在内存中</span></span><br></pre></td></tr></table></figure><h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><h2 id="递归调用的定义"><a href="#递归调用的定义" class="headerlink" title="递归调用的定义"></a>递归调用的定义</h2><blockquote><p> 递归函数 recursion：函数直接或间接的调用自身，是python算法中比较核心的概念。</p><p>递归函数必须具备以下3个特点：</p><p>1.直接或者间接调用自身  </p><p>2.具有结束条件，防止递归外溢  </p><p>3.代码规模逐渐减少 </p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 递归调用是函数嵌套调用的一种特殊形式，函数在调用时，直接或间接调用了自身，就是递归调用</span></span><br><span class="line"><span class="comment"># 直接调用本身</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;from f1&#x27;</span>)</span><br><span class="line">    f1()</span><br><span class="line">f1()</span><br><span class="line"></span><br><span class="line"><span class="comment">#间接调用本身</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;from f1&#x27;</span>)</span><br><span class="line">    f2()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f2</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;from f2&#x27;</span>)</span><br><span class="line">    f1()</span><br><span class="line">f1()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数会产生局部的名称空间，占用内存，因为上述这种调用会无需调用本身，python解释器的内存管理机制为了防止其无限制占用内存，对函数的递归调用做了最大的层级限制</span></span><br><span class="line"><span class="comment"># 四 可以修改递归最大深度</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.getrecursionlimit()</span><br><span class="line">sys.setrecursionlimit(<span class="number">2000</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f1</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;from f1&#x27;</span>,n)</span><br><span class="line">    f1(n+<span class="number">1</span>)</span><br><span class="line">f1(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 虽然可以设置，但是因为不是尾递归，仍然要保存栈，内存大小一定，不可能无限递归，而且无限制地递归调用本身是毫无意义的，递归应该分为两个明确的阶段，回溯与递推</span></span><br></pre></td></tr></table></figure><h2 id="递推与回溯"><a href="#递推与回溯" class="headerlink" title="递推与回溯"></a>递推与回溯</h2><blockquote><p>递归的递推：递归每一次都是基于上一次进行下一次的执行。</p><p>递归的回溯：当遇到终止条件，则从最后往回一级一级的把值返回来。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 递归递推</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">age</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">18</span></span><br><span class="line"><span class="keyword">return</span> age(n –<span class="number">1</span>) + <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(age(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#age(5) = age(4) +2    第一次进入</span></span><br><span class="line"><span class="comment">#age(4) = age(3) +2    第二次进入</span></span><br><span class="line"><span class="comment">#age(3) = age(2) +2    第三次进入</span></span><br><span class="line"><span class="comment">#age(2) = age(1) +2    第四次进入</span></span><br><span class="line"><span class="comment">#age(1) = 18          第五次进入，此时达到结束的条件，递归终止</span></span><br><span class="line"></span><br><span class="line">这是一个典型的递归递推算法，它的每一次执行都是基于上一次的结果。</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fx</span>(<span class="params">n</span>):</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&quot;递归进入第&quot;</span>,n,<span class="string">&quot;层&quot;</span>)</span><br><span class="line">   <span class="keyword">if</span> n == <span class="number">3</span>:</span><br><span class="line">       <span class="keyword">return</span> n</span><br><span class="line">   fx(n + <span class="number">1</span>)</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&quot;递归退出第&quot;</span>,n,<span class="string">&quot;层&quot;</span>)</span><br><span class="line">fx(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;程序结束&quot;</span>)</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">递归进入第 <span class="number">1</span> 层</span><br><span class="line">递归进入第 <span class="number">2</span> 层</span><br><span class="line">递归进入第 <span class="number">3</span> 层</span><br><span class="line">递归退出第 <span class="number">2</span> 层</span><br><span class="line">递归退出第 <span class="number">1</span> 层</span><br><span class="line">程序结束</span><br><span class="line"></span><br><span class="line">这是一个典型的递归回溯算法，满足终止条件时，一级一级的把值返回来。</span><br></pre></td></tr></table></figure><blockquote><p> 总结：</p><p> 递归必须要有一个明确的结束条件, 否则就变成死循环导致栈溢出，以上两例都是以“if”语句作为结束条件的。每递归一次要解决一些事情，否则就失去了递归的意义。 </p><p> python中的递归效率低且没有尾递归优化</p><p> python中的递归效率低，需要在进入下一次递归时保留当前的状态，在其他语言中可以有解决方法：尾递归优化，即在函数的最后一步（而非最后一行)调用自己。<br> 但是python又没有尾递归，且对递归层级做了限制</p><p> 递归效率不高，递归层次过多会导致栈溢出（在计算机中，函数调用是通过栈（stack）这种数据结构实现的，每当进入一个函数调用，栈就会加一层栈帧，每当函数返回，栈就会减一层栈帧。由于栈的大小不是无限的，所以，递归调用的次数过多，会导致栈溢出）</p></blockquote><h1 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h1><p> 想从一个按照从小到大排列的数字列表中找到指定的数字，遍历的效率太低，用二分法（算法的一种，算法是解决问题的方法）可以极大低缩小问题规模 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实现类似于in的效果</span></span><br><span class="line">l=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">10</span>,<span class="number">30</span>,<span class="number">33</span>,<span class="number">99</span>,<span class="number">101</span>,<span class="number">200</span>,<span class="number">301</span>,<span class="number">311</span>,<span class="number">402</span>,<span class="number">403</span>,<span class="number">500</span>,<span class="number">900</span>,<span class="number">1000</span>] <span class="comment">#从小到大排列的数字列表</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">n,l</span>):</span><br><span class="line">    <span class="built_in">print</span>(l)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(l) == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;not exists&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    mid_index=<span class="built_in">len</span>(l) // <span class="number">2</span>   </span><br><span class="line">    <span class="comment"># [1,2,10,30,33,99,101,200,301,311,402,403,500,900,1000] // 2</span></span><br><span class="line">    <span class="comment"># [1,2,10,30,33,99,101] // 2</span></span><br><span class="line">    <span class="keyword">if</span> n &gt; l[mid_index]:  <span class="comment"># n&gt;l[7]==3&gt;200</span></span><br><span class="line">        <span class="comment">#in the right</span></span><br><span class="line">        l=l[mid_index+<span class="number">1</span>:] <span class="comment"># l=l[8] l=[301,311,402,403,500,900,1000]</span></span><br><span class="line">        search(n,l)       <span class="comment"># search(3,[301,311,402,403,500,900,1000])</span></span><br><span class="line">    <span class="keyword">elif</span> n &lt; l[mid_index]: <span class="comment"># n&lt;l[7]==3&lt;200</span></span><br><span class="line">        <span class="comment">#in the left</span></span><br><span class="line">        l=l[:mid_index]  <span class="comment"># l=l[:7] l=[1,2,10,30,33,99,101]</span></span><br><span class="line">        search(n,l)     <span class="comment"># search(3,[1,2,10,30,33,99,101])</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;find it&#x27;</span>)</span><br><span class="line"></span><br><span class="line">search(<span class="number">3</span>,l)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实现类似于l.index(30)的效果</span></span><br><span class="line">l=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">10</span>,<span class="number">30</span>,<span class="number">33</span>,<span class="number">99</span>,<span class="number">101</span>,<span class="number">200</span>,<span class="number">301</span>,<span class="number">402</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">num,l,start=<span class="number">0</span>,stop=<span class="built_in">len</span>(<span class="params">l</span>)-<span class="number">1</span></span>):  <span class="comment"># search(301,[1,2,10,30,33,99,101,200,301,402],0,9)</span></span><br><span class="line">    <span class="keyword">if</span> start &lt;= stop:   <span class="comment">#  0&lt;=9</span></span><br><span class="line">        mid=start+(stop-start)//<span class="number">2</span>  <span class="comment"># mid=0+(9-0)//2</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;start:[%s] stop:[%s] mid:[%s] mid_val:[%s]&#x27;</span> %(start,stop,mid,l[mid]))</span><br><span class="line">        <span class="keyword">if</span> num &gt; l[mid]:</span><br><span class="line">            start=mid+<span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> num &lt; l[mid]:</span><br><span class="line">            stop=mid-<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;find it&#x27;</span>,mid)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        search(num,l,start,stop)</span><br><span class="line">    <span class="keyword">else</span>: <span class="comment">#如果stop &gt; start则意味着列表实际上已经全部切完，即切为空</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;not exists&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">search(<span class="number">301</span>,l)</span><br></pre></td></tr></table></figure><h1 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 匿名就是没有名字</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">x,y,z=<span class="number">1</span></span>):</span><br><span class="line">    <span class="keyword">return</span> x+y+z</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匿名</span></span><br><span class="line"><span class="keyword">lambda</span> x,y,z=<span class="number">1</span>:x+y+z <span class="comment">#与函数有相同的作用域，但是匿名意味着引用计数为0，使用一次就释放，除非让其有名字</span></span><br><span class="line">func=<span class="keyword">lambda</span> x,y,z=<span class="number">1</span>:x+y+z </span><br><span class="line">func(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>) <span class="comment"># 6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#让其有名字就没有意义</span></span><br><span class="line"><span class="comment"># 常规函数换算成匿名函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">x,y,z=<span class="number">1</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(x+y+z)</span><br><span class="line">func(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>((<span class="keyword">lambda</span> x,y,z=<span class="number">1</span>:x+y+z)(<span class="number">2</span>,<span class="number">3</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#有名函数与匿名函数的对比</span></span><br><span class="line">有名函数：循环使用，保存了名字，通过名字就可以重复引用函数功能</span><br><span class="line">匿名函数：一次性使用，随时随时定义</span><br><span class="line">应用：<span class="built_in">max</span>，<span class="built_in">min</span>，<span class="built_in">sorted</span>,<span class="built_in">map</span>,reduce,<span class="built_in">filter</span></span><br></pre></td></tr></table></figure><h2 id="lambda-代码示例"><a href="#lambda-代码示例" class="headerlink" title="lambda 代码示例"></a>lambda 代码示例</h2><blockquote><p>将lambda函数传递给一个另外一个函数call_func()进行处理的过程，在call_func中首先通过datetime包中的datetime.now()打印时间。然后调用被传递的函数。不仅lambda函数可以作为参数传递给其他函数，普通函数也可以当做参数传递</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">namedFync</span>(<span class="params">a</span>):</span><br><span class="line">     <span class="keyword">return</span> <span class="string">&quot;I&#x27;m named function with param &#123;&#125;&quot;</span>.<span class="built_in">format</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">call_func</span>(<span class="params">func,param</span>):</span><br><span class="line">     <span class="built_in">print</span>(datetime.datetime.now())</span><br><span class="line">     <span class="comment"># print(namedFync(&#x27;hello&#x27;))</span></span><br><span class="line">     <span class="comment"># func=lambda x:x*2,param=9; print((lambda x:x*2)(9))</span></span><br><span class="line">     <span class="comment"># func=lambda y:y*y,param=-4; print((lambda y:y*y)(-4))</span></span><br><span class="line">     <span class="built_in">print</span>(func(param))</span><br><span class="line">     <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    call_func(namedFync,<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">    call_func(<span class="keyword">lambda</span> x:x*<span class="number">2</span>,<span class="number">9</span>)</span><br><span class="line">    call_func(<span class="keyword">lambda</span> y:y*y,-<span class="number">4</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment">################### 结果如下 ####################</span></span><br><span class="line"><span class="number">2019</span>-<span class="number">12</span>-<span class="number">26</span> <span class="number">13</span>:<span class="number">57</span>:<span class="number">45.356044</span></span><br><span class="line">I<span class="string">&#x27;m named function with param hello</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2019-12-26 13:57:45.356044</span></span><br><span class="line"><span class="string">18</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2019-12-26 13:57:45.356044</span></span><br><span class="line"><span class="string">16</span></span><br></pre></td></tr></table></figure><h1 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#注意：内置函数id()可以返回一个对象的身份，返回值为整数。这个整数通常对应与该对象在内存中的位置，但这与python的具体实现有关，不应该作为对身份的定义，即不够精准，最精准的还是以内存地址为准。is运算符用于比较两个对象的身份，等号比较两个对象的值，内置函数type()则返回一个对象的类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#更多内置函数：https://docs.python.org/3/library/functions.html?highlight=built#ascii </span></span><br></pre></td></tr></table></figure><p><img src="1036857-20170923132347540-1213107296.png" alt="img">## format</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#字符串可以提供的参数 &#x27;s&#x27; None</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">format</span>(<span class="string">&#x27;some string&#x27;</span>,<span class="string">&#x27;s&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;some string&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">format</span>(<span class="string">&#x27;some string&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;some string&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#整形数值可以提供的参数有 &#x27;b&#x27; &#x27;c&#x27; &#x27;d&#x27; &#x27;o&#x27; &#x27;x&#x27; &#x27;X&#x27; &#x27;n&#x27; None</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">format</span>(<span class="number">3</span>,<span class="string">&#x27;b&#x27;</span>) <span class="comment">#转换成二进制</span></span><br><span class="line"><span class="string">&#x27;11&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">format</span>(<span class="number">97</span>,<span class="string">&#x27;c&#x27;</span>) <span class="comment">#转换unicode成字符</span></span><br><span class="line"><span class="string">&#x27;a&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">format</span>(<span class="number">11</span>,<span class="string">&#x27;d&#x27;</span>) <span class="comment">#转换成10进制</span></span><br><span class="line"><span class="string">&#x27;11&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">format</span>(<span class="number">11</span>,<span class="string">&#x27;o&#x27;</span>) <span class="comment">#转换成8进制</span></span><br><span class="line"><span class="string">&#x27;13&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">format</span>(<span class="number">11</span>,<span class="string">&#x27;x&#x27;</span>) <span class="comment">#转换成16进制 小写字母表示</span></span><br><span class="line"><span class="string">&#x27;b&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">format</span>(<span class="number">11</span>,<span class="string">&#x27;X&#x27;</span>) <span class="comment">#转换成16进制 大写字母表示</span></span><br><span class="line"><span class="string">&#x27;B&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">format</span>(<span class="number">11</span>,<span class="string">&#x27;n&#x27;</span>) <span class="comment">#和d一样</span></span><br><span class="line"><span class="string">&#x27;11&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">format</span>(<span class="number">11</span>) <span class="comment">#默认和d一样</span></span><br><span class="line"><span class="string">&#x27;11&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#浮点数可以提供的参数有 &#x27;e&#x27; &#x27;E&#x27; &#x27;f&#x27; &#x27;F&#x27; &#x27;g&#x27; &#x27;G&#x27; &#x27;n&#x27; &#x27;%&#x27; None</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">format</span>(<span class="number">314159267</span>,<span class="string">&#x27;e&#x27;</span>) <span class="comment">#科学计数法，默认保留6位小数</span></span><br><span class="line"><span class="string">&#x27;3.141593e+08&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">format</span>(<span class="number">314159267</span>,<span class="string">&#x27;0.2e&#x27;</span>) <span class="comment">#科学计数法，指定保留2位小数</span></span><br><span class="line"><span class="string">&#x27;3.14e+08&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">format</span>(<span class="number">314159267</span>,<span class="string">&#x27;0.2E&#x27;</span>) <span class="comment">#科学计数法，指定保留2位小数，采用大写E表示</span></span><br><span class="line"><span class="string">&#x27;3.14E+08&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">format</span>(<span class="number">314159267</span>,<span class="string">&#x27;f&#x27;</span>) <span class="comment">#小数点计数法，默认保留6位小数</span></span><br><span class="line"><span class="string">&#x27;314159267.000000&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">format</span>(<span class="number">3.14159267000</span>,<span class="string">&#x27;f&#x27;</span>) <span class="comment">#小数点计数法，默认保留6位小数</span></span><br><span class="line"><span class="string">&#x27;3.141593&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">format</span>(<span class="number">3.14159267000</span>,<span class="string">&#x27;0.8f&#x27;</span>) <span class="comment">#小数点计数法，指定保留8位小数</span></span><br><span class="line"><span class="string">&#x27;3.14159267&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">format</span>(<span class="number">3.14159267000</span>,<span class="string">&#x27;0.10f&#x27;</span>) <span class="comment">#小数点计数法，指定保留10位小数</span></span><br><span class="line"><span class="string">&#x27;3.1415926700&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">format</span>(<span class="number">3.14e+1000000</span>,<span class="string">&#x27;F&#x27;</span>)  <span class="comment">#小数点计数法，无穷大转换成大小字母</span></span><br><span class="line"><span class="string">&#x27;INF&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#g的格式化比较特殊，假设p为格式中指定的保留小数位数，先尝试采用科学计数法格式化，得到幂指数exp，如果-4&lt;=exp&lt;p，则采用小数计数法，并保留p-1-exp位小数，否则按小数计数法计数，并按p-1保留小数位数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">format</span>(<span class="number">0.00003141566</span>,<span class="string">&#x27;.1g&#x27;</span>) <span class="comment">#p=1,exp=-5 ==》 -4&lt;=exp&lt;p不成立，按科学计数法计数，保留0位小数点</span></span><br><span class="line"><span class="string">&#x27;3e-05&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">format</span>(<span class="number">0.00003141566</span>,<span class="string">&#x27;.2g&#x27;</span>) <span class="comment">#p=1,exp=-5 ==》 -4&lt;=exp&lt;p不成立，按科学计数法计数，保留1位小数点</span></span><br><span class="line"><span class="string">&#x27;3.1e-05&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">format</span>(<span class="number">0.00003141566</span>,<span class="string">&#x27;.3g&#x27;</span>) <span class="comment">#p=1,exp=-5 ==》 -4&lt;=exp&lt;p不成立，按科学计数法计数，保留2位小数点</span></span><br><span class="line"><span class="string">&#x27;3.14e-05&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">format</span>(<span class="number">0.00003141566</span>,<span class="string">&#x27;.3G&#x27;</span>) <span class="comment">#p=1,exp=-5 ==》 -4&lt;=exp&lt;p不成立，按科学计数法计数，保留0位小数点，E使用大写</span></span><br><span class="line"><span class="string">&#x27;3.14E-05&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">format</span>(<span class="number">3.1415926777</span>,<span class="string">&#x27;.1g&#x27;</span>) <span class="comment">#p=1,exp=0 ==》 -4&lt;=exp&lt;p成立，按小数计数法计数，保留0位小数点</span></span><br><span class="line"><span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">format</span>(<span class="number">3.1415926777</span>,<span class="string">&#x27;.2g&#x27;</span>) <span class="comment">#p=1,exp=0 ==》 -4&lt;=exp&lt;p成立，按小数计数法计数，保留1位小数点</span></span><br><span class="line"><span class="string">&#x27;3.1&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">format</span>(<span class="number">3.1415926777</span>,<span class="string">&#x27;.3g&#x27;</span>) <span class="comment">#p=1,exp=0 ==》 -4&lt;=exp&lt;p成立，按小数计数法计数，保留2位小数点</span></span><br><span class="line"><span class="string">&#x27;3.14&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">format</span>(<span class="number">0.00003141566</span>,<span class="string">&#x27;.1n&#x27;</span>) <span class="comment">#和g相同</span></span><br><span class="line"><span class="string">&#x27;3e-05&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">format</span>(<span class="number">0.00003141566</span>,<span class="string">&#x27;.3n&#x27;</span>) <span class="comment">#和g相同</span></span><br><span class="line"><span class="string">&#x27;3.14e-05&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">format</span>(<span class="number">0.00003141566</span>) <span class="comment">#和g相同</span></span><br><span class="line"><span class="string">&#x27;3.141566e-05&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="lambda与内置函数结合使用"><a href="#lambda与内置函数结合使用" class="headerlink" title="lambda与内置函数结合使用"></a>lambda与内置函数结合使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">字典的运算：最小值，最大值，排序</span><br><span class="line">salaries=&#123;</span><br><span class="line">    <span class="string">&#x27;allen&#x27;</span>:<span class="number">3000</span>,</span><br><span class="line">    <span class="string">&#x27;alex&#x27;</span>:<span class="number">100000000</span>,</span><br><span class="line">    <span class="string">&#x27;wupeiqi&#x27;</span>:<span class="number">10000</span>,</span><br><span class="line">    <span class="string">&#x27;yuanhao&#x27;</span>:<span class="number">2000</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">迭代字典，取得是key，因而比较的是key的最大和最小值</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">max</span>(salaries)</span><br><span class="line"><span class="string">&#x27;yuanhao&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">min</span>(salaries)</span><br><span class="line"><span class="string">&#x27;alex&#x27;</span></span><br><span class="line"></span><br><span class="line">可以取values，来比较</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">max</span>(salaries.values())</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">min</span>(salaries.values())</span><br><span class="line">但通常我们都是想取出，工资最高的那个人名，即比较的是salaries的值，得到的是键</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">max</span>(salaries,key=<span class="keyword">lambda</span> k:salary[k])</span><br><span class="line"><span class="string">&#x27;alex&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">min</span>(salaries,key=<span class="keyword">lambda</span> k:salary[k])</span><br><span class="line"><span class="string">&#x27;yuanhao&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">也可以通过<span class="built_in">zip</span>的方式实现</span><br><span class="line">salaries_and_names=<span class="built_in">zip</span>(salaries.values(),salaries.keys())</span><br><span class="line"></span><br><span class="line">先比较值，值相同则比较键</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">max</span>(salaries_and_names)</span><br><span class="line">(<span class="number">100000000</span>, <span class="string">&#x27;alex&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">salaries_and_names是迭代器，因而只能访问一次</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">min</span>(salaries_and_names)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ValueError: <span class="built_in">min</span>() arg <span class="keyword">is</span> an empty sequence</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">sorted</span>(iterable，key=<span class="literal">None</span>,reverse=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">！！！<span class="keyword">lambda</span>与内置函数结合使用！！！</span><br></pre></td></tr></table></figure><h2 id="eval与exec"><a href="#eval与exec" class="headerlink" title="eval与exec"></a>eval与exec</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、语法</span></span><br><span class="line"><span class="comment"># eval(str,[,globasl[,locals]])</span></span><br><span class="line"><span class="comment"># exec(str,[,globasl[,locals]])</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2、区别</span></span><br><span class="line"><span class="comment">#示例一：</span></span><br><span class="line">s=<span class="string">&#x27;1+2+3&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">eval</span>(s)) <span class="comment">#eval用来执行表达式，并返回表达式执行的结果</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">exec</span>(s)) <span class="comment">#exec用来执行语句，不会返回任何值</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">None</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#示例二：</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">eval</span>(<span class="string">&#x27;1+2+x&#x27;</span>,&#123;<span class="string">&#x27;x&#x27;</span>:<span class="number">3</span>&#125;,&#123;<span class="string">&#x27;x&#x27;</span>:<span class="number">30</span>&#125;)) <span class="comment">#返回33</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">exec</span>(<span class="string">&#x27;1+2+x&#x27;</span>,&#123;<span class="string">&#x27;x&#x27;</span>:<span class="number">3</span>&#125;,&#123;<span class="string">&#x27;x&#x27;</span>:<span class="number">30</span>&#125;)) <span class="comment">#返回None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(eval(&#x27;for i in range(10):print(i)&#x27;)) #语法错误，eval不能执行表达式</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">exec</span>(<span class="string">&#x27;for i in range(10):print(i)&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">eval</span>与<span class="built_in">exec</span></span><br></pre></td></tr></table></figure><h2 id="complie（了解即可）"><a href="#complie（了解即可）" class="headerlink" title="complie（了解即可）"></a>complie（了解即可）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">compile</span>(<span class="built_in">str</span>,filename,kind)</span><br><span class="line"><span class="comment"># filename:用于追踪str来自于哪个文件，如果不想追踪就可以不定义</span></span><br><span class="line"><span class="comment"># kind可以是：single代表一条语句，exec代表一组语句，eval代表一个表达式</span></span><br><span class="line">s=<span class="string">&#x27;for i in range(10):print(i)&#x27;</span></span><br><span class="line">code=<span class="built_in">compile</span>(s,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;exec&#x27;</span>)</span><br><span class="line"><span class="built_in">exec</span>(code)</span><br><span class="line"></span><br><span class="line">s=<span class="string">&#x27;1+2+3&#x27;</span></span><br><span class="line">code=<span class="built_in">compile</span>(s,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;eval&#x27;</span>)</span><br><span class="line"><span class="built_in">eval</span>(code)</span><br></pre></td></tr></table></figure><h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><div class="note success flat"><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>异常处理是编程语言中的一种机制，用于处理软件或信息系统中出现的异常状况（即超出程序正常执行的某些特殊条件）。</p><p>异常处理（又称错误处理）功能提供了处理程序运行时出现的任何意外或异常情况而不会使整个程序机制崩溃的方法。</p><p>Python异常处理使用<code>try</code>,<code>catch</code>,<code>else</code>,<code>finally</code>关键字来尝试可能未成功的操作、处理失败及正常情况，以及在事后情理资源。</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 监测可能会发生异常的模块</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">&lt;语句&gt;        <span class="comment">#运行别的代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第1种捕获一种异常</span></span><br><span class="line"><span class="keyword">except</span> Exception1:</span><br><span class="line">&lt;语句&gt;        <span class="comment">#如果在try部份引发了Exception1异常,则执行这个语句</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第2种捕获多种异常</span></span><br><span class="line"><span class="keyword">except</span>(Exception2,Exception3,Exception4)</span><br><span class="line"><span class="comment">#如果在try部份引发了Exception2 or Exception3 or Exception4异常,则执行这个语句</span></span><br><span class="line">&lt;语句&gt;        </span><br><span class="line"></span><br><span class="line"><span class="comment"># 第3种捕获异常转换为一个变量</span></span><br><span class="line"><span class="keyword">except</span> Exception5 <span class="keyword">as</span> e:</span><br><span class="line"><span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第4种捕获多种异常转换为一个变量</span></span><br><span class="line"><span class="keyword">except</span> (Exception6,Exception7,Exception8) <span class="keyword">as</span> e:</span><br><span class="line"><span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第5种捕获任何异常</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">&lt;语句&gt;  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 当没有异常时的处理(可选快)</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">&lt;语句&gt;  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 无论是否出现异常，最后都要做的处理(可选快)</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">&lt;语句&gt;  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 每种except形式可以被定义多次，当try块中发现异常时，系统从上到下逐个检查except块。当发现满足发生异常定义的except块时，进入该块进行处理，并忽略其他except块</span></span><br></pre></td></tr></table></figure><h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">     <span class="built_in">print</span>(<span class="number">1</span>+<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> (Exception,TypeError) <span class="keyword">as</span> e:</span><br><span class="line">     <span class="built_in">print</span>(e)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">     <span class="built_in">print</span>(<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">################ 结果：###############</span></span><br><span class="line">unsupported operand <span class="built_in">type</span>(s) <span class="keyword">for</span> +: <span class="string">&#x27;int&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;str&#x27;</span></span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><h2 id="raise显示引发异常"><a href="#raise显示引发异常" class="headerlink" title="raise显示引发异常"></a>raise显示引发异常</h2><p>有关于python里raise显示引发异常的方法:</p><ul><li>当程序出错时,python会自动触发异常,也可以通过raise显示引发异常</li><li>一旦执行了raise语句,raise之后的语句不在执行</li><li>如果加入了try,except,那么except里的语句会被执行</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">mye</span>(<span class="params"> level </span>):</span><br><span class="line">    <span class="keyword">if</span> level &lt; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&quot;Invalid level!&quot;</span>)</span><br><span class="line">        <span class="comment"># 触发异常后，后面的代码就不会再执行</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    mye(<span class="number">0</span>)            <span class="comment"># 触发异常</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>,err)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 执行以上代码，输出结果为：</span></span><br><span class="line"><span class="number">1</span> Invalid level!</span><br></pre></td></tr></table></figure><h2 id="python标准异常"><a href="#python标准异常" class="headerlink" title="python标准异常"></a>python标准异常</h2><div class="table-container"><table><thead><tr><th style="text-align:left">异常名称</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"></td><td style="text-align:left"></td></tr><tr><td style="text-align:left">BaseException</td><td style="text-align:left">所有异常的基类</td></tr><tr><td style="text-align:left">SystemExit</td><td style="text-align:left">解释器请求退出</td></tr><tr><td style="text-align:left">KeyboardInterrupt</td><td style="text-align:left">用户中断执行(通常是输入^C)</td></tr><tr><td style="text-align:left">Exception</td><td style="text-align:left">常规错误的基类</td></tr><tr><td style="text-align:left">StopIteration</td><td style="text-align:left">迭代器没有更多的值</td></tr><tr><td style="text-align:left">GeneratorExit</td><td style="text-align:left">生成器(generator)发生异常来通知退出</td></tr><tr><td style="text-align:left">StandardError</td><td style="text-align:left">所有的内建标准异常的基类</td></tr><tr><td style="text-align:left">ArithmeticError</td><td style="text-align:left">所有数值计算错误的基类</td></tr><tr><td style="text-align:left">FloatingPointError</td><td style="text-align:left">浮点计算错误</td></tr><tr><td style="text-align:left">OverflowError</td><td style="text-align:left">数值运算超出最大限制</td></tr><tr><td style="text-align:left">ZeroDivisionError</td><td style="text-align:left">除(或取模)零 (所有数据类型)</td></tr><tr><td style="text-align:left">AssertionError</td><td style="text-align:left">断言语句失败</td></tr><tr><td style="text-align:left">AttributeError</td><td style="text-align:left">对象没有这个属性</td></tr><tr><td style="text-align:left">EOFError</td><td style="text-align:left">没有内建输入,到达EOF 标记</td></tr><tr><td style="text-align:left">EnvironmentError</td><td style="text-align:left">操作系统错误的基类</td></tr><tr><td style="text-align:left">IOError</td><td style="text-align:left">输入/输出操作失败</td></tr><tr><td style="text-align:left">OSError</td><td style="text-align:left">操作系统错误</td></tr><tr><td style="text-align:left">WindowsError</td><td style="text-align:left">系统调用失败</td></tr><tr><td style="text-align:left">ImportError</td><td style="text-align:left">导入模块/对象失败</td></tr><tr><td style="text-align:left">LookupError</td><td style="text-align:left">无效数据查询的基类</td></tr><tr><td style="text-align:left">IndexError</td><td style="text-align:left">序列中没有此索引(index)</td></tr><tr><td style="text-align:left">KeyError</td><td style="text-align:left">映射中没有这个键</td></tr><tr><td style="text-align:left">MemoryError</td><td style="text-align:left">内存溢出错误(对于Python 解释器不是致命的)</td></tr><tr><td style="text-align:left">NameError</td><td style="text-align:left">未声明/初始化对象 (没有属性)</td></tr><tr><td style="text-align:left">UnboundLocalError</td><td style="text-align:left">访问未初始化的本地变量</td></tr><tr><td style="text-align:left">ReferenceError</td><td style="text-align:left">弱引用(Weak reference)试图访问已经垃圾回收了的对象</td></tr><tr><td style="text-align:left">RuntimeError</td><td style="text-align:left">一般的运行时错误</td></tr><tr><td style="text-align:left">NotImplementedError</td><td style="text-align:left">尚未实现的方法</td></tr><tr><td style="text-align:left">SyntaxError</td><td style="text-align:left">Python 语法错误</td></tr><tr><td style="text-align:left">IndentationError</td><td style="text-align:left">缩进错误</td></tr><tr><td style="text-align:left">TabError</td><td style="text-align:left">Tab 和空格混用</td></tr><tr><td style="text-align:left">SystemError</td><td style="text-align:left">一般的解释器系统错误</td></tr><tr><td style="text-align:left">TypeError</td><td style="text-align:left">对类型无效的操作</td></tr><tr><td style="text-align:left">ValueError</td><td style="text-align:left">传入无效的参数</td></tr><tr><td style="text-align:left">UnicodeError</td><td style="text-align:left">Unicode 相关的错误</td></tr><tr><td style="text-align:left">UnicodeDecodeError</td><td style="text-align:left">Unicode 解码时的错误</td></tr><tr><td style="text-align:left">UnicodeEncodeError</td><td style="text-align:left">Unicode 编码时错误</td></tr><tr><td style="text-align:left">UnicodeTranslateError</td><td style="text-align:left">Unicode 转换时错误</td></tr><tr><td style="text-align:left">Warning</td><td style="text-align:left">警告的基类</td></tr><tr><td style="text-align:left">DeprecationWarning</td><td style="text-align:left">关于被弃用的特征的警告</td></tr><tr><td style="text-align:left">FutureWarning</td><td style="text-align:left">关于构造将来语义会有改变的警告</td></tr><tr><td style="text-align:left">OverflowWarning</td><td style="text-align:left">旧的关于自动提升为长整型(long)的警告</td></tr><tr><td style="text-align:left">PendingDeprecationWarning</td><td style="text-align:left">关于特性将会被废弃的警告</td></tr><tr><td style="text-align:left">RuntimeWarning</td><td style="text-align:left">可疑的运行时行为(runtime behavior)的警告</td></tr><tr><td style="text-align:left">SyntaxWarning</td><td style="text-align:left">可疑的语法的警告</td></tr><tr><td style="text-align:left">UserWarning</td><td style="text-align:left">用户代码生成的警告</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> Python之旅 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 函数 </tag>
            
            <tag> 三元表达式 </tag>
            
            <tag> 列表推导式 </tag>
            
            <tag> 生成器表达式 </tag>
            
            <tag> 递归 </tag>
            
            <tag> 匿名函数 </tag>
            
            <tag> 二分法 </tag>
            
            <tag> 内置函数 </tag>
            
            <tag> 异常处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python之旅：迭代器、生成器、面向过程编程</title>
      <link href="/2019/10/15/Python/Python%E4%B9%8B%E6%97%85/Python%E4%B9%8B%E6%97%85%EF%BC%9A%E8%BF%AD%E4%BB%A3%E5%99%A8%E3%80%81%E7%94%9F%E6%88%90%E5%99%A8%E3%80%81%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B%E7%BC%96%E7%A8%8B/"/>
      <url>/2019/10/15/Python/Python%E4%B9%8B%E6%97%85/Python%E4%B9%8B%E6%97%85%EF%BC%9A%E8%BF%AD%E4%BB%A3%E5%99%A8%E3%80%81%E7%94%9F%E6%88%90%E5%99%A8%E3%80%81%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h1><h2 id="迭代器概念"><a href="#迭代器概念" class="headerlink" title="迭代器概念"></a>迭代器概念</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#迭代器即迭代的工具，那什么是迭代呢？</span></span><br><span class="line"><span class="comment">#迭代是一个重复的过程，每次重复即一次迭代，并且每次迭代的结果都是下一次迭代的初始值</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>: <span class="comment">#只是单纯地重复，因而不是迭代</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;===&gt;&#x27;</span>) </span><br><span class="line">    </span><br><span class="line">l=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">count=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> count &lt; <span class="built_in">len</span>(l): <span class="comment">#迭代</span></span><br><span class="line">    <span class="built_in">print</span>(l[count])</span><br><span class="line">    count+=<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="可迭代对象、迭代器对象"><a href="#可迭代对象、迭代器对象" class="headerlink" title="可迭代对象、迭代器对象"></a>可迭代对象、迭代器对象</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、为何要有迭代器？</span></span><br><span class="line">对于序列类型：字符串、列表、元组，我们可以使用索引的方式迭代取出其包含的元素。但对于字典、集合、文件等类型是没有索引的，若还想取出其内部包含的元素，则必须找出一种不依赖于索引的迭代方式，这就是迭代器</span><br><span class="line"><span class="comment">#2、什么是可迭代对象？</span></span><br><span class="line">字面意思分析：可以重复的迭代的实实在在的东西。</span><br><span class="line">专业角度: 内部含有<span class="string">&#x27;__iter__&#x27;</span>方法的对象，就是可迭代对象。</span><br><span class="line">可迭代对象指的是内置有__iter__方法的对象，即obj.__iter__，如下</span><br><span class="line"><span class="string">&#x27;hello&#x27;</span>.__iter__</span><br><span class="line">(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>).__iter__</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].__iter__</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>&#125;.__iter__</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>&#125;.__iter__</span><br><span class="line"><span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>).__iter__</span><br><span class="line"></span><br><span class="line"><span class="comment">#3、什么是迭代器对象？</span></span><br><span class="line">字面意思：可以重复迭代的工具。</span><br><span class="line">专业角度： 内部含有<span class="string">&#x27;__iter__&#x27;</span>并且含有<span class="string">&quot;__next__&quot;</span>方法的对象，就是迭代器</span><br><span class="line">可迭代对象执行obj.__iter__()得到的结果就是迭代器对象</span><br><span class="line">而迭代器对象指的是即内置有__iter__又内置有__next__方法的对象</span><br><span class="line"></span><br><span class="line">文件类型是迭代器对象</span><br><span class="line"><span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>).__iter__()</span><br><span class="line"><span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>).__next__()</span><br><span class="line"></span><br><span class="line"><span class="comment">#4、注意：</span></span><br><span class="line">迭代器对象一定是可迭代对象，而可迭代对象不一定是迭代器对象</span><br></pre></td></tr></table></figure><h2 id="迭代对象的使用"><a href="#迭代对象的使用" class="headerlink" title="迭代对象的使用"></a>迭代对象的使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">dic=&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;</span><br><span class="line">iter_dic=dic.__iter__() <span class="comment">#得到迭代器对象，迭代器对象即有__iter__又有__next__，但是：迭代器.__iter__()得到的仍然是迭代器本身</span></span><br><span class="line">iter_dic.__iter__() <span class="keyword">is</span> iter_dic <span class="comment">#True</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(iter_dic.__next__()) <span class="comment">#等同于next(iter_dic)</span></span><br><span class="line"><span class="built_in">print</span>(iter_dic.__next__()) <span class="comment">#等同于next(iter_dic)</span></span><br><span class="line"><span class="built_in">print</span>(iter_dic.__next__()) <span class="comment">#等同于next(iter_dic)</span></span><br><span class="line"><span class="comment"># print(iter_dic.__next__()) #抛出异常StopIteration，或者说结束标志</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#有了迭代器，我们就可以不依赖索引迭代取值了</span></span><br><span class="line">iter_dic=dic.__iter__()</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        k=<span class="built_in">next</span>(iter_dic)</span><br><span class="line">        <span class="built_in">print</span>(dic[k])</span><br><span class="line">    <span class="keyword">except</span> StopIteration:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">#这么写太丑陋了，需要我们自己捕捉异常，控制next，python这么牛逼，能不能帮我解决呢？能，请看for循环</span></span><br></pre></td></tr></table></figure><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#基于for循环，我们可以完全不再依赖索引去取值了</span></span><br><span class="line">dic=&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> dic:</span><br><span class="line">    <span class="built_in">print</span>(dic[k])</span><br><span class="line"></span><br><span class="line"><span class="comment">#for循环的工作原理</span></span><br><span class="line"><span class="comment">#1：执行in后对象的dic.__iter__()方法，得到一个迭代器对象iter_dic</span></span><br><span class="line"><span class="comment">#2: 执行next(iter_dic),将得到的值赋值给k,然后执行循环体代码</span></span><br><span class="line"><span class="comment">#3: 重复过程2，直到捕捉到异常StopIteration,结束循环</span></span><br></pre></td></tr></table></figure><h2 id="迭代器的优缺点"><a href="#迭代器的优缺点" class="headerlink" title="迭代器的优缺点"></a>迭代器的优缺点</h2><blockquote><p>优点：</p><ul><li>提供一种统一的、不依赖于索引的迭代方式</li><li>惰性计算，节省内存</li></ul><p>缺点：</p><ul><li>无法获取长度（只有在next完毕才知道到底有几个值）</li><li>一次性的，只能往后走，不能往前退</li></ul></blockquote><h1 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h1><h2 id="生成器介绍"><a href="#生成器介绍" class="headerlink" title="生成器介绍"></a>生成器介绍</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成器：</span></span><br><span class="line"><span class="comment"># 函数内包含有yield关键字，</span></span><br><span class="line"><span class="comment"># 再调用函数，就不会执行函数体代码，拿到的返回值就是一个生成器对象</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;====&gt;first&#x27;</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;====&gt;second&#x27;</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;====&gt;third&#x27;</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;====&gt;end&#x27;</span>)</span><br><span class="line"></span><br><span class="line">obj=func()</span><br><span class="line"><span class="built_in">print</span>(obj) <span class="comment"># &lt;generator object func at 0x0000000002170FC0&gt;</span></span><br><span class="line"><span class="comment"># 生成器本质就是迭代器，也就是说生成器的玩法其实就是迭代器的玩法</span></span><br><span class="line"><span class="built_in">print</span>(obj.__iter__() <span class="keyword">is</span> obj) <span class="comment"># &gt;&gt; True; </span></span><br><span class="line"><span class="built_in">print</span>(obj.__next__())</span><br><span class="line"><span class="built_in">print</span>(obj.__next__())</span><br><span class="line"><span class="built_in">print</span>(obj.__next__())</span><br><span class="line"><span class="comment"># ====&gt;first</span></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># ====&gt;second</span></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"><span class="comment"># ====&gt;third</span></span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="built_in">print</span>(obj.__next__()) <span class="comment"># 此时迭代对象已经没有值了就会停止迭代StopIteration</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="生成器就是迭代器"><a href="#生成器就是迭代器" class="headerlink" title="生成器就是迭代器"></a>生成器就是迭代器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">obj.__iter__</span><br><span class="line">obj.__next__</span><br><span class="line"><span class="comment">#2、所以生成器就是迭代器，因此可以这么取值</span></span><br><span class="line">res=<span class="built_in">next</span>(obj)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><h2 id="实例演示"><a href="#实例演示" class="headerlink" title="实例演示"></a>实例演示</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实例1：for循环迭代</span></span><br><span class="line"><span class="comment"># 1、iter_obj=obj.__iter__()，拿到迭代器</span></span><br><span class="line"><span class="comment"># 2、出发iter_obj.__next__()，拿到该方法的返回值，赋值给item</span></span><br><span class="line"><span class="comment"># 3、周而复始，直到函数内不在有yield，即取值完毕</span></span><br><span class="line"><span class="comment"># 4、for会检测到StopIteration异常，结束循环</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;====&gt;first&#x27;</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;====&gt;second&#x27;</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;====&gt;third&#x27;</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;====&gt;end&#x27;</span>)</span><br><span class="line"></span><br><span class="line">obj = func()</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> obj:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例2：用工具实现一个无穷数字</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_range</span>():</span><br><span class="line">    n=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">yield</span> n</span><br><span class="line">        n+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">res=my_range()</span><br><span class="line"><span class="built_in">print</span>(res.__next__())  <span class="comment"># 执行到 yield 0</span></span><br><span class="line"><span class="built_in">print</span>(res.__next__())  <span class="comment"># 继续往下走n+=1 在到yield 1</span></span><br><span class="line"><span class="built_in">print</span>(res.__next__())  <span class="comment"># 执行到 yield 2</span></span><br><span class="line"><span class="built_in">print</span>(res.__next__())  <span class="comment"># 以此类推</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例3：模仿rang</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_range</span>(<span class="params">start,stop,stemp=<span class="number">2</span></span>):</span><br><span class="line">    n=start</span><br><span class="line">    <span class="keyword">while</span> n&lt;stop:</span><br><span class="line">        <span class="keyword">yield</span> n</span><br><span class="line">        n+=stemp</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> my_range(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span>(r)</span><br></pre></td></tr></table></figure><h2 id="表达式yield的应用"><a href="#表达式yield的应用" class="headerlink" title="表达式yield的应用"></a>表达式yield的应用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模拟上菜</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125; 准备吃饭了&#x27;</span>.<span class="built_in">format</span>(name))</span><br><span class="line">    food_list=[]</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 第一次__next__ 停在这 yield收到值为 None； food=yield=None</span></span><br><span class="line">        <span class="comment"># 第二次__next__ 停在这 yield收到值为 红烧肉；food=yield=红烧肉</span></span><br><span class="line">        <span class="comment"># 第三次__next__ 停在这 yield收到值为 大盘鸡；food=yield=大盘鸡</span></span><br><span class="line">        food=<span class="keyword">yield</span> food_list <span class="comment"># 每次执行到把food_list返回去</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125; 吃了 &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(name,food))</span><br><span class="line">        food_list.append(food)</span><br><span class="line"><span class="comment"># 1、 必须初始化以此，让函数停在yield的位置</span></span><br><span class="line">ff=eat(<span class="string">&#x27;刘清政&#x27;</span>)</span><br><span class="line">ff.__next__()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、 接下来就是上菜</span></span><br><span class="line"><span class="comment"># send 有两个方面功能</span></span><br><span class="line"><span class="comment"># 1： 给yield传值</span></span><br><span class="line"><span class="comment"># 2： 同__next__的功能</span></span><br><span class="line"><span class="built_in">print</span>(ff.send(<span class="string">&#x27;红烧肉&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(ff.send(<span class="string">&#x27;大盘鸡&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(ff.send(<span class="string">&#x27;大米&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">###  输出如下  ###</span></span><br><span class="line">刘清政 准备吃饭了</span><br><span class="line">刘清政 吃了 红烧肉</span><br><span class="line">[<span class="string">&#x27;红烧肉&#x27;</span>]</span><br><span class="line">刘清政 吃了 大盘鸡</span><br><span class="line">[<span class="string">&#x27;红烧肉&#x27;</span>, <span class="string">&#x27;大盘鸡&#x27;</span>]</span><br><span class="line">刘清政 吃了 大米</span><br><span class="line">[<span class="string">&#x27;红烧肉&#x27;</span>, <span class="string">&#x27;大盘鸡&#x27;</span>, <span class="string">&#x27;大米&#x27;</span>]</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><div class="note info flat"><p>总结yield：</p><p>1、为我们提供了一种自定义迭代器的方式，<br> 可以在函数内用yield关键字，调用函数拿到的结果就是一个生成器，生成器就是迭代器</p><p>2、yield可以像return一样用于返回值，区别是return只能返回一次值，而yield可返回多次<br> 因为yield可以保存函数执行的状态</p></div><h1 id="面向过程编程"><a href="#面向过程编程" class="headerlink" title="面向过程编程"></a>面向过程编程</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、首先强调：面向过程编程绝对不是用函数编程这么简单，面向过程是一种编程思路、思想，而编程思路是不依赖于具体的语言或语法的。言外之意是即使我们不依赖于函数，也可以基于面向过程的思想编写程序</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2、定义</span></span><br><span class="line">面向过程的核心是过程二字，过程指的是解决问题的步骤，即先干什么再干什么</span><br><span class="line"></span><br><span class="line">基于面向过程设计程序就好比在设计一条流水线，是一种机械式的思维方式</span><br><span class="line"></span><br><span class="line"><span class="comment">#3、优点：复杂的问题流程化，进而简单化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#4、缺点：可扩展性差，修改流水线的任意一个阶段，都会牵一发而动全身</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#5、应用：扩展性要求不高的场景，典型案例如linux内核，git，httpd</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#6、举例</span></span><br><span class="line">流水线<span class="number">1</span>：</span><br><span class="line">用户输入用户名、密码---&gt;用户验证---&gt;欢迎界面</span><br><span class="line"></span><br><span class="line">流水线<span class="number">2</span>：</span><br><span class="line">用户输入sql---&gt;sql解析---&gt;执行功能</span><br></pre></td></tr></table></figure><p>  ps：函数的参数传入，是函数吃进去的食物，而函数return的返回值，是函数拉出来的结果，面向过程的思路就是，把程序的执行当做一串首尾相连的功能，该功能可以是函数的形式，然后一个函数吃，拉出的东西给另外一个函数吃，另外一个函数吃了再继续拉给下一个函数吃。。。 </p><p> 示例:复杂的问题变得简单,但扩展功能 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、步骤一：拿到用户输入的合法的信息：用户名、密码、余额、年龄</span></span><br><span class="line">db_path=<span class="string">&#x27;db.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_uname</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        uname=<span class="built_in">input</span>(<span class="string">&#x27;用户名&gt;&gt;：&#x27;</span>).strip()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> uname.isalpha():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;\033[45m用户名必须为英文字母...\033[0m&#x27;</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;%s&#x27;</span> %db_path,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">                uinfo=line.strip(<span class="string">&#x27;\n&#x27;</span>).split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">                <span class="keyword">if</span> uname == uinfo[<span class="number">0</span>]:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;\033[45m用户名已存在...\033[0m&#x27;</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> uname</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_pwd</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        pwd1=<span class="built_in">input</span>(<span class="string">&#x27;请输入密码&gt;&gt;: &#x27;</span>).strip()</span><br><span class="line">        pwd2=<span class="built_in">input</span>(<span class="string">&#x27;再次输入密码&gt;&gt;: &#x27;</span>).strip()</span><br><span class="line">        <span class="keyword">if</span> pwd1 == pwd2:</span><br><span class="line">            <span class="keyword">return</span> pwd1</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;\033[45m两次输入的密码不一致，请重新输入...\033[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_bal</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        bal=<span class="built_in">input</span>(<span class="string">&#x27;请输入余额: &#x27;</span>).strip()</span><br><span class="line">        <span class="keyword">if</span> bal.isdigit():</span><br><span class="line">            <span class="comment"># bal=int(bal)</span></span><br><span class="line">            <span class="keyword">return</span> bal</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;\033[45m钱必须是数字，傻叉...\033[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_age</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2、步骤二：写入文件</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">file_hanle</span>(<span class="params">uname,pwd,bal,age</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;%s&#x27;</span> %db_path,<span class="string">&#x27;a&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">&#x27;%s,%s,%s,%s\n&#x27;</span> %(uname,pwd,bal,age))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注册功能</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>():</span><br><span class="line">    <span class="comment">#步骤1：</span></span><br><span class="line">    uname=get_uname() <span class="comment">#拿到合法的用户名</span></span><br><span class="line">    pwd=get_pwd() <span class="comment">#拿到合法的密码</span></span><br><span class="line">    bal=get_bal() <span class="comment">#拿到合法的余额</span></span><br><span class="line">    <span class="comment">#步骤2：</span></span><br><span class="line">    file_hanle(uname,pwd,bal) <span class="comment">#写入文件</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python之旅 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 函数 </tag>
            
            <tag> 迭代器 </tag>
            
            <tag> 生成器 </tag>
            
            <tag> 面向过程编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WIN10连接不了VPxN，不能建立到远程计算机的连接，因此用于此连接的端口已关闭</title>
      <link href="/2019/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA/WIN10%E8%BF%9E%E6%8E%A5%E4%B8%8D%E4%BA%86VPX%EF%BC%8C%E4%B8%8D%E8%83%BD%E5%BB%BA%E7%AB%8B%E5%88%B0%E8%BF%9C%E7%A8%8B%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E8%BF%9E%E6%8E%A5%EF%BC%8C%E5%9B%A0%E6%AD%A4%E7%94%A8%E4%BA%8E%E6%AD%A4%E8%BF%9E%E6%8E%A5%E7%9A%84%E7%AB%AF%E5%8F%A3%E5%B7%B2%E5%85%B3%E9%97%AD/"/>
      <url>/2019/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA/WIN10%E8%BF%9E%E6%8E%A5%E4%B8%8D%E4%BA%86VPX%EF%BC%8C%E4%B8%8D%E8%83%BD%E5%BB%BA%E7%AB%8B%E5%88%B0%E8%BF%9C%E7%A8%8B%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E8%BF%9E%E6%8E%A5%EF%BC%8C%E5%9B%A0%E6%AD%A4%E7%94%A8%E4%BA%8E%E6%AD%A4%E8%BF%9E%E6%8E%A5%E7%9A%84%E7%AB%AF%E5%8F%A3%E5%B7%B2%E5%85%B3%E9%97%AD/</url>
      
        <content type="html"><![CDATA[<p>Q:</p><p>公司用的是PPTP搭建的VPxN，公司win7可以连接，win10却报错不能建立到远程计算机的连接，因此…<br>port user password都ok，那问题就出在win10本身了。</p><p>A:</p><p>以下为步骤：</p><p>1，以管理员身份运行CMD，输入netsh int ip reset 重置ip协议（我感觉这个步骤不一定有用，之前单独运行它并重启电脑并没有奏效，但是本着完全重现操作的原则还是写了上来）</p><p>2，打开设备管理器—网络适配器，将你的物理网卡全部卸载（我没有选勾选删除驱动文件），将WAN Miniport 开头的设备全部卸载</p><p><img src="shipei.PNG" alt="适配器"><br>3，重启电脑后，VPxN应该可以使用了</p><p>推测这个BUG还是和WAN Miniport的驱动或设置有关，运行网络诊断之后出了问题</p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VPxN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人都是逼出来的</title>
      <link href="/2019/10/06/book/%E4%BA%BA%E9%83%BD%E6%98%AF%E9%80%BC%E5%87%BA%E6%9D%A5%E7%9A%84/"/>
      <url>/2019/10/06/book/%E4%BA%BA%E9%83%BD%E6%98%AF%E9%80%BC%E5%87%BA%E6%9D%A5%E7%9A%84/</url>
      
        <content type="html"><![CDATA[<h1 id="逼自己-在安逸的时候———对自己狠一点"><a href="#逼自己-在安逸的时候———对自己狠一点" class="headerlink" title="逼自己,在安逸的时候———对自己狠一点"></a>逼自己,在安逸的时候———对自己狠一点</h1><h2 id="每天逼自己前进一步-每天就离梦想更近一步"><a href="#每天逼自己前进一步-每天就离梦想更近一步" class="headerlink" title="每天逼自己前进一步,每天就离梦想更近一步"></a>每天逼自己前进一步,每天就离梦想更近一步</h2><p>不断进步的过程就是一个不断肯定自我的过程.今天进步一点点,明天也进步一点点,不断的对自己进行肯定,你就能积累一种超凡的技巧与能力,获得强大的内心力量,获得更多的资源和平台,从而进入卓越者的行列.</p><p>量的积累若不够,便永远无法达到质的飞跃.成功不是偶然的,需要付出努力与坚持.恰如烧水<code>99度的热水</code>和<code>100度的开水</code>就是不一样的.只差1度也不是开水,你必须坚持跨出那一步,才能获得真正的成功.</p><h2 id="再多的高瞻远瞩-也比不上抓住一个最近的目标"><a href="#再多的高瞻远瞩-也比不上抓住一个最近的目标" class="headerlink" title="再多的高瞻远瞩,也比不上抓住一个最近的目标"></a>再多的<code>高瞻远瞩</code>,也比不上抓住一个最近的目标</h2><p>远处的风景是梦想,近处的风景是理想.相比于虚无缥缈的东西,我们更应该逼迫自己抓住眼前的一切.</p><p>梦想又远又近,只有离我们最近的那个梦想才是现实的.巨商大多都是从底层做起的,有做过卖报童,有做过小商贩,还有做过电焊工.但是,他们的一个共性是,不管做什么,都耐心的把手上的工作做好,在平凡的岗位中取得出色的成绩.</p><p>如果一味的好高骛远,盲目的将眼光盯在虚幻的目标上,忽视眼前的工作,只会让人疲于应付,最终一事无成.逼迫自己做力所能及的事情,就是简单而有效的原则.若失去了一切,我们确实可以从头再来,但我们的生命有限,未必有大把的时间重新起跑.</p><h1 id="逼自己-在懈怠的时候"><a href="#逼自己-在懈怠的时候" class="headerlink" title="逼自己,在懈怠的时候"></a>逼自己,在懈怠的时候</h1><h2 id="这世上没有毫无理由的横空出世"><a href="#这世上没有毫无理由的横空出世" class="headerlink" title="这世上没有毫无理由的横空出世"></a>这世上没有毫无理由的横空出世</h2><p>生活中总有太多的不完美,但很多时候,只要我们愿意逼迫自己去做一些改变,哪怕只是微笑的,不起眼的小细节,当我们可以在这些小细节上做到尽善尽美的时候,生活也会发生令人惊讶的变化,甚至给我们带来意想不到的惊喜.</p><p>想获得成功,就得重视每一个细节,将所有事情做到尽善尽美.正所谓<code>失之毫厘,差之千里</code>.如果不注重细节,那么不管你付出多少热情,也将难以敲响成功的钟声.</p><p>任何成功都是有迹可循的.每个庞大的事物都是由无数个小细节组合起来的,忽视细节,失败就会自动出现.要想取得成就并不难,只要具备强烈的责任感,创造完美的细节管理,终有一天会成功.</p><h2 id="逞强很累-但是不逞强更累"><a href="#逞强很累-但是不逞强更累" class="headerlink" title="逞强很累,但是不逞强更累"></a>逞强很累,但是不逞强更累</h2><p>工作太累,工资太低,领导不厚道……</p><p>在我们的生活中,不管面对多么糟糕的情况,首先想想,它是不是有好的可能,是不是有向好的方向发展的可能.很多时候,其实只要咬牙坚持下去,事情自然会朝着你想要的方向转换.</p><p>逞强很累,但是不逞强,你只会更累.人生于世,无论到了哪里,都会遇到阴天,遭遇狂风暴雨.重要的是,你用什么样的心态来看待这一切,敢不敢在雨中也拼命的奔跑.若你足够的勇敢,那么请相信,全世界都会为你的疯狂让路!</p><h2 id="你的时间用在哪里-你的成就就在哪里"><a href="#你的时间用在哪里-你的成就就在哪里" class="headerlink" title="你的时间用在哪里,你的成就就在哪里"></a>你的时间用在哪里,你的成就就在哪里</h2><p>青春有限,时间有限,你将时间用在哪里,你的成就便诞生于哪里.别总三心二意,时间经不起挥霍,只有瞄准一个既定目标,将所有时间都投射到同一个点上,才能厚积薄发,让成就在充足的养分中诞生出来.看清自己的心吧,问问自己的真正的需要的是什么,根据自己的需要制定一个目标,然后朝着这个目标前进,总有一天,你会发现,远在天边的重点已经背踩在脚下.</p><h2 id="成功最大的敌人-名字叫做“惰性思维”"><a href="#成功最大的敌人-名字叫做“惰性思维”" class="headerlink" title="成功最大的敌人,名字叫做“惰性思维”"></a>成功最大的敌人,名字叫做“惰性思维”</h2><p>行为上的懒惰,让人错事良机,陷入被动.而思维上的惰性,则会让我们变得固步自封,冥顽不化.所以,我们不仅要克服行为上的懒惰,更要克服惰性思维.</p><p>明天的苦难并不可怕,不愿面向明天才是真正的可怕.什么都拖到以后,却又被未来的险阻吓到,那么时间在前进,你却在倒退.</p><p>有人说,组织人们前行的不是远方的大石头,而是自己鞋里的小石子,而这颗小石子就是惰性思维.让我们行动起来,搬走心中的那块石头,它没有你想象的那么重.</p><h2 id="努力到无能为力-拼搏到感动自己"><a href="#努力到无能为力-拼搏到感动自己" class="headerlink" title="努力到无能为力,拼搏到感动自己"></a>努力到无能为力,拼搏到感动自己</h2><p>成功总是太诱人,有些人一直很自信,也曾全身心的投入过,认真的努力过,但他们最终还是没能抵达理想的重点.不是命运的不公,也不是天意弄人,他们和成功之间的距离其实只有一步之遥,可惜他们没能在绝望的时候在坚持一下,而是鬼使神差的松懈了下来,选择了放弃.等到真正的醒悟了,已经太迟,没有岁月可回头.</p><p>有时候,成功的确需要艰辛的努力,但更需要的是不懈的追求和耐心,你得逼自己努力带无能为力,拼搏到感动自己.</p><p>　　<strong>马云说：“今天很残酷，明天更残酷，后天很美好，但是绝大多数人死在明天晚上，见不着后天的太阳，所以每个人不要放弃今天！”</strong></p><p>耐心是不轻易放弃的“恒心”于“决心”.开始的时候,每个人都能信誓旦旦的保证自己可以坚持到最后,但时间最能消磨人的意志,外部环境千变万化,大部分人无法在变化中一如既往地坚持.但若想成功,就必须具备在任何情况下都耐的住寂寞,耐得住痛苦的能力.只有把控自己,才能不管世界如何变迁,一直坚持自己的步伐,最终走向成功.</p><h2 id="生活就像谈恋爱-你越热情-它越疯狂"><a href="#生活就像谈恋爱-你越热情-它越疯狂" class="headerlink" title="生活就像谈恋爱,你越热情,它越疯狂"></a>生活就像谈恋爱,你越热情,它越疯狂</h2><p>不爱自己的生活,厌弃自己的工作,这样并不能让你摆脱现状,只会让你沉溺在一种无法摆脱的消极情绪中,让你对一切都失去信心,产生怀疑,想要迎来改变,你唯一能做的就是逼迫自己去努力,去拼搏,去重塑对生活的热情.</p><p>事实上,对于生活的热情是我们每个人都拥有的.只是在日复一日的平淡日子里,这些热情被慢慢地消耗、磨损、抵消.而失去热情的我们,最终只能变得疲惫不堪、无可奈何、气急败坏在难有平静的时候.也哪有从容的时候</p><p>生活的不如意或许是我们无法改变的,但却可以控制自己的心态.遭遇失败时,我们会低落,会痛苦,但千万记住,别因为低落就懈怠了自己,坠入自暴自弃的深渊.热情虽然不是解决问题的手段,但是能让你打起精神来面对问题,有力气逼迫自己和命运抗争.</p><h2 id="人心很小-装的太多反而让你一无所有"><a href="#人心很小-装的太多反而让你一无所有" class="headerlink" title="人心很小,装的太多反而让你一无所有"></a>人心很小,装的太多反而让你一无所有</h2><p>每个人的精力都是有限的,没有人能够一心二用,若想实现理想,就要将小目标排序,一个个的完成,而不是同时兼顾.</p><p>其实过程和我们实现理想的过程差不多.理想对于我们而言是遥远的,所以要将大目标分成多个小目标,一步一步的走下去实现.但是分割目标之后,有些人却做错了下一步,那就是没有给目标分等级,以至于不知道从何下手,怀揣着无数个小目标,把自己弄乱了.就像掰玉米的熊瞎子一样,拾起一个就丢了上一个.</p><p>人生是一场旅行,一路上背负的东西会不断累加,如果不懂的整理和取舍,那么终有一天,我们会失去前进的勇气和力气.所以我们要尽可能的减少负担,这样才能将更多的精力投入到前行的路上.</p><p>不要想自己自己的目标有多远大,也不要考虑为了完成这个目标需要做多少多少事,只要做好眼前的一件事,做好一个小目标,一点点积累,最终成功一定会被你踩在脚底下.唯有那时你才发现,那些复杂而繁琐的事情早已在你的一点点努力下完成了.</p><p>没有一天可以造出一座罗马城,把它分成一件件小事,日积月累罗马必定会造出来.</p><p>什么事情都不是一蹴而就的,设定一个不太难实现的小目标,无形中就让自己长久的坚持下去的动力变得强大起来.这样我们就会因为一个小目标的简单易行而感到压力减轻,也正是因为感到应对自如,我们才会发现自己渴望去做生活中其他需要改变的事情.当实现一个小目标后,就会有一种更加积极的强化力量来逼迫我们沿着通向最终远大目标的道路不断前进.</p><p>心系太多反而会让你一无所有,打消你的积极性,不如将一切看得简单点,只记得眼前该做的事,这样你才不会觉得疲累,才不会因为难度太大而半途放弃.</p><h2 id="脚踏实地"><a href="#脚踏实地" class="headerlink" title="脚踏实地"></a>脚踏实地</h2><p>脚踏实地,然后仰望星空,让自己一步步往高处攀爬.说起来只是一句话,做起来并不容易.努力和突破并不是一件多么浪漫的事,因为它本身就没有浪漫成分,没有巨大的激情,甚至可能永远不会有鲜花和掌声.它是种子在泥土深处萌发的孤独和努力,是在道路上留下的艰深的足迹,是迫使自己直面自己所有的缺点不足的痛苦挣扎.因为拥有这样的一股力量,我们才能跳脱出狭隘的天地,看到更广阔的世界,树立更远大的目标.</p><p>破茧成蝶中的艰辛,告诉我们脚踏实地,欲速则不达.</p>]]></content>
      
      
      <categories>
          
          <category> Book </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读后感 </tag>
            
            <tag> 短文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git error 总结</title>
      <link href="/2019/10/06/error/git%20error%20%E6%80%BB%E7%BB%93/"/>
      <url>/2019/10/06/error/git%20error%20%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="Sourcetree-在push代码时候弹出Password-Required"><a href="#Sourcetree-在push代码时候弹出Password-Required" class="headerlink" title="Sourcetree 在push代码时候弹出Password Required"></a>Sourcetree 在push代码时候弹出Password Required</h1><p>在用Sourcetree进行代码管理时，公司的账号老是弹窗提示需要输入密码，但是输入密码又没有任何用,经过一番摸索，找到了一个解决办法，现在分享给大家，如果你有更好的解决方法</p><p><img src="70.png" alt="img"><br>解决办法</p><p>打开【偏好设置】-&gt; 【高级】-&gt; 对存在的当前用户进行移除</p><p>这样的话push时会让你输入用户名和密码，在次输入就可以了，目前没有啥好办法，暂时先这样解决了</p><p><img src="71.png" alt="img"><br>最新方法<br>1、在终端（terminal）打开你的工程目录<br>2、输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config credential.helper store</span><br></pre></td></tr></table></figure><p>3、拉取代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure><p>4、输入用户名密码,后面就不会再提示了，搞定<br>5、参考<br><a href="http://zhige.me/2019/01/28/2019/01/sourcetree_password_required/#more">http://zhige.me/2019/01/28/2019/01/sourcetree_password_required/#more</a></p><h1 id="ssh-port-22-Operation-timed-out"><a href="#ssh-port-22-Operation-timed-out" class="headerlink" title="ssh port 22: Operation timed out"></a>ssh port 22: Operation timed out</h1><p>Q:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ssh: connect to host gitee.com port <span class="number">22</span>: Operation timed out</span><br><span class="line">fatal: Could <span class="keyword">not</span> read <span class="keyword">from</span> remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights</span><br><span class="line"><span class="keyword">and</span> the repository exists.</span><br><span class="line">FATAL Something<span class="string">&#x27;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html</span></span><br><span class="line"><span class="string">Error: Spawn failed</span></span><br><span class="line"><span class="string">    at ChildProcess.task.on.code (/Users/moyan/All/GitStorehouse/Hexo/node_modules/hexo-deployer-git/node_modules/hexo-util/lib/spawn.js:51:21)</span></span><br><span class="line"><span class="string">    at emitTwo (events.js:126:13)</span></span><br><span class="line"><span class="string">    at ChildProcess.emit (events.js:214:7)</span></span><br><span class="line"><span class="string">    at Process.ChildProcess._handle.onexit (internal/child_process.js:198:12)</span></span><br></pre></td></tr></table></figure><p>A:</p><p>把git@gitee.com:name/name.git换成<a href="https://gitee.com/name/name.git">https://gitee.com/name/name.git</a></p>]]></content>
      
      
      <categories>
          
          <category> Errors </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm error</title>
      <link href="/2019/10/06/error/npm%20error/"/>
      <url>/2019/10/06/error/npm%20error/</url>
      
        <content type="html"><![CDATA[<h1 id="npm-ERR-A-complete-log-of-this-run-can-be-found-in"><a href="#npm-ERR-A-complete-log-of-this-run-can-be-found-in" class="headerlink" title="npm ERR! A complete log of this run can be found in:"></a>npm ERR! A complete log of this run can be found in:</h1><p>Q: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm ERR! Unexpected end of JSON <span class="built_in">input</span> <span class="keyword">while</span> parsing near <span class="string">&#x27;...hZ3yMhAU8CwbLGBDYZTXS&#x27;</span></span><br><span class="line"></span><br><span class="line">npm ERR! A complete log of this run can be found <span class="keyword">in</span>:</span><br><span class="line">npm ERR!     /Users/moyan/.npm/_logs/<span class="number">2019</span>-<span class="number">10</span>-08T01_36_12_540Z-debug.log</span><br></pre></td></tr></table></figure><p>A:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 提供的一些解决办法,但是仍没有解决</span></span><br><span class="line">npm报错，这时需要全局更新npm</span><br><span class="line">npm i</span><br><span class="line">npm g</span><br><span class="line">解决！</span><br><span class="line"></span><br><span class="line">或者使用淘宝镜像：</span><br><span class="line">cnpm i</span><br><span class="line">cnpm g</span><br><span class="line">解决！</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后看到了一段清除npm缓存的命令,运行之后果然成功了</span></span><br><span class="line">npm cache clean --force</span><br></pre></td></tr></table></figure><h1 id="npm-install-报错"><a href="#npm-install-报错" class="headerlink" title="npm install 报错"></a>npm install 报错</h1><p>Q:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt; fsevents@<span class="number">1.2</span><span class="number">.9</span> install /Users/moyan/All/GitStorehouse/Hexo/node_modules/fsevents</span><br><span class="line">&gt; node install</span><br><span class="line"></span><br><span class="line">node-pre-gyp WARN Using needle <span class="keyword">for</span> node-pre-gyp https download</span><br><span class="line">node-pre-gyp WARN Pre-built binaries <span class="keyword">not</span> installable <span class="keyword">for</span> fsevents@<span class="number">1.2</span><span class="number">.9</span> <span class="keyword">and</span> node@<span class="number">8.11</span><span class="number">.3</span> (node-v57 ABI, unknown) (falling back to source <span class="built_in">compile</span> <span class="keyword">with</span> node-gyp)</span><br><span class="line">node-pre-gyp WARN Hit error EACCES: permission denied, mkdir <span class="string">&#x27;/Users/moyan/All/GitStorehouse/Hexo/node_modules/fsevents/lib&#x27;</span></span><br><span class="line">gyp ERR! configure error</span><br><span class="line">gyp ERR! stack Error: EACCES: permission denied, mkdir <span class="string">&#x27;/Users/moyan/All/GitStorehouse/Hexo/node_modules/fsevents/build&#x27;</span></span><br><span class="line">gyp ERR! System Darwin <span class="number">18.7</span><span class="number">.0</span></span><br><span class="line">gyp ERR! command <span class="string">&quot;/usr/local/bin/node&quot;</span> <span class="string">&quot;/usr/local/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js&quot;</span> <span class="string">&quot;configure&quot;</span> <span class="string">&quot;--fallback-to-build&quot;</span> <span class="string">&quot;--module=/Users/moyan/All/GitStorehouse/Hexo/node_modules/fsevents/lib/binding/Release/node-v57-darwin-x64/fse.node&quot;</span> <span class="string">&quot;--module_name=fse&quot;</span> <span class="string">&quot;--module_path=/Users/moyan/All/GitStorehouse/Hexo/node_modules/fsevents/lib/binding/Release/node-v57-darwin-x64&quot;</span> <span class="string">&quot;--napi_version=3&quot;</span> <span class="string">&quot;--node_abi_napi=napi&quot;</span> <span class="string">&quot;--napi_build_version=0&quot;</span> <span class="string">&quot;--node_napi_label=node-v57&quot;</span> <span class="string">&quot;--python=python2.7&quot;</span></span><br><span class="line">gyp ERR! cwd /Users/moyan/All/GitStorehouse/Hexo/node_modules/fsevents</span><br><span class="line">gyp ERR! node -v v8<span class="number">.11</span><span class="number">.3</span></span><br><span class="line">gyp ERR! node-gyp -v v3<span class="number">.6</span><span class="number">.2</span></span><br><span class="line">gyp ERR! <span class="keyword">not</span> ok</span><br><span class="line">node-pre-gyp ERR! build error</span><br><span class="line">node-pre-gyp ERR! stack Error: Failed to execute <span class="string">&#x27;/usr/local/bin/node /usr/local/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js configure --fallback-to-build --module=/Users/moyan/All/GitStorehouse/Hexo/node_modules/fsevents/lib/binding/Release/node-v57-darwin-x64/fse.node --module_name=fse --module_path=/Users/moyan/All/GitStorehouse/Hexo/node_modules/fsevents/lib/binding/Release/node-v57-darwin-x64 --napi_version=3 --node_abi_napi=napi --napi_build_version=0 --node_napi_label=node-v57 --python=python2.7&#x27;</span> (<span class="number">1</span>)</span><br><span class="line">node-pre-gyp ERR! stack     at ChildProcess.&lt;anonymous&gt; (/Users/moyan/All/GitStorehouse/Hexo/node_modules/fsevents/node_modules/node-pre-gyp/lib/util/<span class="built_in">compile</span>.js:<span class="number">83</span>:<span class="number">29</span>)</span><br><span class="line">node-pre-gyp ERR! stack     at emitTwo (events.js:<span class="number">126</span>:<span class="number">13</span>)</span><br><span class="line">node-pre-gyp ERR! stack     at ChildProcess.emit (events.js:<span class="number">214</span>:<span class="number">7</span>)</span><br><span class="line">node-pre-gyp ERR! stack     at maybeClose (internal/child_process.js:<span class="number">925</span>:<span class="number">16</span>)</span><br><span class="line">node-pre-gyp ERR! stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:<span class="number">209</span>:<span class="number">5</span>)</span><br><span class="line">node-pre-gyp ERR! System Darwin <span class="number">18.7</span><span class="number">.0</span></span><br><span class="line">node-pre-gyp ERR! command <span class="string">&quot;/usr/local/bin/node&quot;</span> <span class="string">&quot;/Users/moyan/All/GitStorehouse/Hexo/node_modules/fsevents/node_modules/node-pre-gyp/bin/node-pre-gyp&quot;</span> <span class="string">&quot;install&quot;</span> <span class="string">&quot;--fallback-to-build&quot;</span></span><br><span class="line">node-pre-gyp ERR! cwd /Users/moyan/All/GitStorehouse/Hexo/node_modules/fsevents</span><br><span class="line">node-pre-gyp ERR! node -v v8<span class="number">.11</span><span class="number">.3</span></span><br><span class="line">node-pre-gyp ERR! node-pre-gyp -v v0<span class="number">.12</span><span class="number">.0</span></span><br><span class="line">node-pre-gyp ERR! <span class="keyword">not</span> ok</span><br><span class="line">Failed to execute <span class="string">&#x27;/usr/local/bin/node /usr/local/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js configure --fallback-to-build --module=/Users/moyan/All/GitStorehouse/Hexo/node_modules/fsevents/lib/binding/Release/node-v57-darwin-x64/fse.node --module_name=fse --module_path=/Users/moyan/All/GitStorehouse/Hexo/node_modules/fsevents/lib/binding/Release/node-v57-darwin-x64 --napi_version=3 --node_abi_napi=napi --napi_build_version=0 --node_napi_label=node-v57 --python=python2.7&#x27;</span> (<span class="number">1</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 没权限的加sudo执行,还是报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方案一 升级npm</span></span><br><span class="line">npm install -g npm</span><br><span class="line"><span class="comment"># 方案二</span></span><br><span class="line">npm install --unsafe-perm</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Errors </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在hexo博客中加入豆瓣读书电影的功能</title>
      <link href="/2019/10/03/%E6%95%99%E7%A8%8B/Hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%8A%A0%E5%85%A5%E8%B1%86%E7%93%A3%E8%AF%BB%E4%B9%A6%E5%8A%9F%E8%83%BD/"/>
      <url>/2019/10/03/%E6%95%99%E7%A8%8B/Hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%8A%A0%E5%85%A5%E8%B1%86%E7%93%A3%E8%AF%BB%E4%B9%A6%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<p>在Hexo博客个性化定制中，加入豆瓣读书界面是一个很不错的功能，<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fbestzuo.cn%2Fbooks%2F">可以进入我的个人阅读界面查看效果</a>，那么我是怎么做到的呢？其实很简单，我们只需要加入一个<code>hexo-douban</code>模块即可。</p><p>博客原文链接：<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fbestzuo.cn%2Fposts%2Fhexo-douban.html">https://bestzuo.cn/posts/hexo-douban.html</a></p><p>hexo-douban的Github链接：<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fmythsman%2Fhexo-douban">hexo-douban的Github地址</a></p><h2 id="安装模块依赖"><a href="#安装模块依赖" class="headerlink" title="安装模块依赖"></a>安装模块依赖</h2><p>我们使用时可以先安装依赖模块，在<code>GitBash</code>中使用以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install hexo-douban --save</span></span><br></pre></td></tr></table></figure><h2 id="站点配置文件中添加配置"><a href="#站点配置文件中添加配置" class="headerlink" title="站点配置文件中添加配置"></a>站点配置文件中添加配置</h2><p>然后我们再在Hexo站点根目录配置文件<code>_config.xml</code>中的末尾添加如下配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">douban:</span></span><br><span class="line">  <span class="attr">user:</span> <span class="string">mythsman</span></span><br><span class="line">  <span class="attr">builtin:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">book:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">&#x27;This is my book title&#x27;</span></span><br><span class="line">    <span class="attr">quote:</span> <span class="string">&#x27;This is my book quote&#x27;</span></span><br><span class="line">  <span class="attr">movie:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">&#x27;This is my movie title&#x27;</span></span><br><span class="line">    <span class="attr">quote:</span> <span class="string">&#x27;This is my movie quote&#x27;</span></span><br><span class="line">  <span class="attr">game:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">&#x27;This is my game title&#x27;</span></span><br><span class="line">    <span class="attr">quote:</span> <span class="string">&#x27;This is my game quote&#x27;</span></span><br><span class="line">  <span class="attr">timeout:</span> <span class="number">10000</span> </span><br></pre></td></tr></table></figure><p>上面参数说明：</p><ul><li><strong>user</strong>: 你的豆瓣ID.打开豆瓣，登入账户，然后在右上角点击 “个人主页” ，这时候地址栏的URL大概是这样：”<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.douban.com%2Fpeople%2Fxxxxxx%2F">https://www.douban.com/people/xxxxxx/</a>“ ，其中的”xxxxxx”就是你的个人ID了。</li><li><strong>builtin</strong>: 是否将生成页面的功能嵌入<code>hexo s</code>和<code>hexo g</code>中，默认是<code>false</code>,另一可选项为<code>true</code>(1.x.x版本新增配置项)。</li><li><strong>title</strong>: 该页面的标题.</li><li><strong>quote</strong>: 写在页面开头的一段话,支持html语法.</li><li><strong>timeout</strong>: 爬取数据的超时时间，默认是 10000ms ,如果在使用时发现报了超时的错(ETIMEOUT)可以把这个数据设置的大一点。</li></ul><p>由于<code>hexo-douban</code> 是默认抓取豆瓣读书、豆瓣电影以及豆瓣游戏的，如果只想要其中一部分，可以把其它部分在上述配置文件中去掉即可。</p><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>那么我们如何去使用这个呢？</p><p>我们只需要在<code>GitBash</code>中输入以下命令：<code>hexo clean &amp;&amp; hexo douban -bgm &amp;&amp; hexo g &amp;&amp; hexo s</code>即可，注意其中开启hexo-douban的命令中，<code>-bgm</code>代表的是book、game、movie三个参数，如果只需要其中的一部分就只带你想要的那些参数。</p><p>另外注意的是，由于<code>hexo douban</code>的简写也是<code>hexo d</code>，与<code>hexo deploy</code>的简写指令<code>hexo d</code>冲突，因此在进行二者部署的时候，只能都打全名而不能打简写形式。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>上面都没问题之后，我们只需要在站点目录下测试<code>http://localhost:4000/books</code>或者<code>http://localhost:4000/movies</code>等，如果看到页面了就说明成功了。</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>如果上述都没有问题，我们就可以在菜单栏中添加按钮了，打开主题配置文件<code>_config.xml</code>，找到菜单按钮，可以选择性的添加下面内容：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives</span></span><br><span class="line">  <span class="attr">books:</span> <span class="string">/books</span>     <span class="comment"># 这是链接到books页面</span></span><br><span class="line">  <span class="attr">movies:</span> <span class="string">/movies</span>   <span class="comment">#  这是链接到movies页面</span></span><br><span class="line">  <span class="attr">games:</span> <span class="string">/games</span>   <span class="comment"># 这是链接到games页面</span></span><br></pre></td></tr></table></figure><p>注意添加完成之后按钮并不是中文的，这是由于在<code>languages</code>文件夹下面的<code>zh-CN</code>（中文语言配置文件）没有添加上述对应的中文参数信息，所以我们需要主动添加。</p><p>语言文件夹在你的主题配置文件夹下面，比如我的是使用的next主题，则是在<code>E:\blog\hexo\themes\next\languages</code>目录下，找到<code>zh-CN</code>文件，在menu菜单下添加：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">books:</span> <span class="string">阅读</span></span><br><span class="line">  <span class="attr">movies:</span> <span class="string">电影</span></span><br><span class="line">  <span class="attr">games:</span> <span class="string">游戏</span></span><br></pre></td></tr></table></figure><p>即可完成中文化自定义菜单。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql多表查询</title>
      <link href="/2019/09/19/database/Mysql%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/"/>
      <url>/2019/09/19/database/Mysql%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<p>现在有个两个表查询显示出你需要的字段以及条件</p><p><img src="1568822311778.png" alt="img"><br><img src="1568822604756.png" alt="img"><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SELECT flatzone.SID,flatzone.IDX,zonelist.`NAME`,flatzone.DOMAINNAME -- 要显示的字段</span><br><span class="line">FROM flatzone -- 来自哪个表</span><br><span class="line">INNER JOIN zonelist on flatzone.ZONE=zonelist.ZONE -- 关联的表以及必须条件</span><br><span class="line">WHERE flatzone.SID&gt;=<span class="number">10001</span> -- 条件筛选</span><br><span class="line"><span class="keyword">and</span> flatzone.SID&lt;=<span class="number">10006</span></span><br><span class="line">GROUP BY flatzone.SID -- 分组去重</span><br><span class="line">ORDER BY SID -- 排序</span><br><span class="line">;</span><br><span class="line"><span class="comment"># 其他左查询以及又查询自行百度</span></span><br></pre></td></tr></table></figure></p><p><img src="1568822645176.png" alt="img"></p><p>借鉴与：<a href="https://segmentfault.com/q/1010000012841241">https://segmentfault.com/q/1010000012841241</a></p><p>题外话：导出表结构以及数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysqldump datebases teble &gt; zz.sql <span class="comment"># 表结构and数据</span></span><br><span class="line"><span class="comment"># -t 表数据</span></span><br><span class="line"><span class="comment"># -d 表结构</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> database </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql多表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python之旅：函数对象、函数嵌套、名称空间与作用域、装饰器</title>
      <link href="/2019/09/03/Python/Python%E4%B9%8B%E6%97%85/Python%E4%B9%8B%E6%97%85%EF%BC%9A%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1%E3%80%81%E5%87%BD%E6%95%B0%E5%B5%8C%E5%A5%97%E3%80%81%E5%90%8D%E7%A7%B0%E7%A9%BA%E9%97%B4%E4%B8%8E%E4%BD%9C%E7%94%A8%E5%9F%9F%E3%80%81%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
      <url>/2019/09/03/Python/Python%E4%B9%8B%E6%97%85/Python%E4%B9%8B%E6%97%85%EF%BC%9A%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1%E3%80%81%E5%87%BD%E6%95%B0%E5%B5%8C%E5%A5%97%E3%80%81%E5%90%8D%E7%A7%B0%E7%A9%BA%E9%97%B4%E4%B8%8E%E4%BD%9C%E7%94%A8%E5%9F%9F%E3%80%81%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="一-函数对象"><a href="#一-函数对象" class="headerlink" title="一 函数对象"></a>一 函数对象</h1><h2 id="一-函数是第一类对象，即函数可以当作数据传递"><a href="#一-函数是第一类对象，即函数可以当作数据传递" class="headerlink" title="一 函数是第一类对象，即函数可以当作数据传递"></a>一 函数是第一类对象，即函数可以当作数据传递</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1 可以被引用</span></span><br><span class="line"><span class="comment">#2 可以当作参数传递</span></span><br><span class="line"><span class="comment">#3 返回值可以是函数</span></span><br><span class="line"><span class="comment">#3 可以当作容器类型的元素</span></span><br></pre></td></tr></table></figure><h2 id="二-利用该特性，优雅的取代多分支的if"><a href="#二-利用该特性，优雅的取代多分支的if" class="headerlink" title="二 利用该特性，优雅的取代多分支的if"></a>二 利用该特性，优雅的取代多分支的if</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bar</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;bar&#x27;</span>)</span><br><span class="line"></span><br><span class="line">dic=&#123;</span><br><span class="line">    <span class="string">&#x27;foo&#x27;</span>:foo,</span><br><span class="line">    <span class="string">&#x27;bar&#x27;</span>:bar,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    choice=<span class="built_in">input</span>(<span class="string">&#x27;&gt;&gt;: &#x27;</span>).strip()</span><br><span class="line">    <span class="keyword">if</span> choice <span class="keyword">in</span> dic:</span><br><span class="line">        dic[choice]()</span><br></pre></td></tr></table></figure><h1 id="二-函数嵌套"><a href="#二-函数嵌套" class="headerlink" title="二 函数嵌套"></a>二 函数嵌套</h1><h2 id="一-函数的嵌套调用"><a href="#一-函数的嵌套调用" class="headerlink" title="一 函数的嵌套调用"></a>一 函数的嵌套调用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">max</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="keyword">return</span> x <span class="keyword">if</span> x &gt; y <span class="keyword">else</span> y</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">max4</span>(<span class="params">a,b,c,d</span>):</span><br><span class="line">    res1=<span class="built_in">max</span>(a,b)</span><br><span class="line">    res2=<span class="built_in">max</span>(res1,c)</span><br><span class="line">    res3=<span class="built_in">max</span>(res2,d)</span><br><span class="line">    <span class="keyword">return</span> res3</span><br><span class="line"><span class="built_in">print</span>(max4(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br></pre></td></tr></table></figure><h2 id="二-函数的嵌套定义"><a href="#二-函数的嵌套定义" class="headerlink" title="二 函数的嵌套定义"></a>二 函数的嵌套定义</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f1</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f2</span>():</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">f3</span>():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;from f3&#x27;</span>)</span><br><span class="line">        f3()</span><br><span class="line">    f2()</span><br><span class="line"></span><br><span class="line">f1()</span><br><span class="line">f3() <span class="comment">#报错，为何？请看下一小节</span></span><br></pre></td></tr></table></figure><h1 id="三-名称空间与作用域"><a href="#三-名称空间与作用域" class="headerlink" title="三 名称空间与作用域"></a>三 名称空间与作用域</h1><h2 id="一-什么是名称空间？"><a href="#一-什么是名称空间？" class="headerlink" title="一 什么是名称空间？"></a>一 什么是名称空间？</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#名称空间：存放名字的地方，三种名称空间，（之前遗留的问题x=1，1存放于内存中，那名字x存放在哪里呢？名称空间正是存放名字x与1绑定关系的地方）</span></span><br></pre></td></tr></table></figure><h2 id="二-名称空间的加载顺序"><a href="#二-名称空间的加载顺序" class="headerlink" title="二 名称空间的加载顺序"></a>二 名称空间的加载顺序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python test.py</span><br><span class="line"><span class="comment">#1、python解释器先启动，因而首先加载的是：内置名称空间</span></span><br><span class="line"><span class="comment">#2、执行test.py文件，然后以文件为基础，加载全局名称空间</span></span><br><span class="line"><span class="comment">#3、在执行文件的过程中如果调用函数，则临时产生局部名称空间</span></span><br></pre></td></tr></table></figure><h2 id="三-名字的查找顺序"><a href="#三-名字的查找顺序" class="headerlink" title="三 名字的查找顺序"></a>三 名字的查找顺序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">局部名称空间---&gt;全局名称空间---&gt;内置名称空间</span><br><span class="line"></span><br><span class="line"><span class="comment">#需要注意的是：在全局无法查看局部的，在局部可以查看全局的，如下示例</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># max=1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f1</span>():</span><br><span class="line">    <span class="comment"># max=2</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f2</span>():</span><br><span class="line">        <span class="comment"># max=3</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">max</span>)</span><br><span class="line">    f2()</span><br><span class="line">f1()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>) </span><br></pre></td></tr></table></figure><h2 id="四-作用域"><a href="#四-作用域" class="headerlink" title="四 作用域"></a>四 作用域</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、作用域即范围</span></span><br><span class="line">       - 全局范围（内置名称空间与全局名称空间属于该范围）：全局存活，全局有效</span><br><span class="line">　     - 局部范围（局部名称空间属于该范围）：临时存活，局部有效</span><br><span class="line"><span class="comment">#2、作用域关系是在函数定义阶段就已经固定的，与函数的调用位置无关，如下</span></span><br><span class="line">x=<span class="number">1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f1</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f2</span>():</span><br><span class="line">        <span class="built_in">print</span>(x)</span><br><span class="line">    <span class="keyword">return</span> f2</span><br><span class="line">x=<span class="number">100</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f3</span>(<span class="params">func</span>):</span><br><span class="line">    x=<span class="number">2</span></span><br><span class="line">    func()</span><br><span class="line">x=<span class="number">10000</span></span><br><span class="line">f3(f1())</span><br><span class="line"></span><br><span class="line"><span class="comment">#3、查看作用域：globals(),locals()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">LEGB 代表名字查找顺序: <span class="built_in">locals</span> -&gt; enclosing function -&gt; <span class="built_in">globals</span> -&gt; __builtins__</span><br><span class="line"><span class="built_in">locals</span> 是函数内的名字空间，包括局部变量和形参</span><br><span class="line">enclosing 外部嵌套函数的名字空间（闭包中常见）</span><br><span class="line"><span class="built_in">globals</span> 全局变量，函数定义所在模块的名字空间</span><br><span class="line">builtins 内置模块的名字空间</span><br></pre></td></tr></table></figure><h2 id="五-global与nonlocal关键字"><a href="#五-global与nonlocal关键字" class="headerlink" title="五 global与nonlocal关键字"></a>五 global与nonlocal关键字</h2><h2 id="关键字global"><a href="#关键字global" class="headerlink" title="关键字global"></a>关键字global</h2><p>Python里只有2种作用域：全局作用域和局部作用域。全局作用域是指当前代码所在模块的作用域，局部作用域是指当前函数或方法所在的作用域。局部作用域里的代码可以读外部作用域（包括全局作用域）里的变量，但不能更改它。如果想更改它，这里就要使用global关键字了</p><h2 id="关键字nonlocal"><a href="#关键字nonlocal" class="headerlink" title="关键字nonlocal"></a>关键字nonlocal</h2><p>在<code>Python 2.x</code>中，闭包只能读外部函数的变量，而不能改写它。为了解决这个问题，<code>Python 3.x</code>引入了nonlocal关键字，在闭包内用nonlocal声明变量，就可以让解释器在外层函数中查找变量名。</p><p>注意：关键字nonlocal:是<code>python3.X</code>中出现的,所以在<code>python2.x</code>中无法直接使用.</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>关键字nonlocal的作用与关键字global类似，使用nonlocal关键字可以在一个嵌套的函数中修改嵌套作用域中的变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实例1 global 应用</span></span><br><span class="line">name = <span class="string">&#x27;pythontab&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="keyword">global</span> name</span><br><span class="line">    name = <span class="string">&#x27;pythontab.com&#x27;</span></span><br><span class="line">func()</span><br><span class="line"><span class="built_in">print</span>(name) <span class="comment"># pythontab.com</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例2 nonlocal error</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>():</span><br><span class="line">    name= <span class="string">&#x27;pythontab.com&#x27;</span></span><br><span class="line">    <span class="keyword">nonlocal</span> name</span><br><span class="line">foo() </span><br><span class="line"><span class="comment"># SyntaxError: name &#x27;name&#x27; is assigned to before nonlocal declaration</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例3 nonlocal 应用</span></span><br><span class="line">count = <span class="number">1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">a</span>():</span><br><span class="line">    count = <span class="string">&#x27;a函数里面&#x27;</span>  <span class="comment">#如果不事先声明，那么函数b中的nonlocal就会报错</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">b</span>():</span><br><span class="line">        <span class="keyword">nonlocal</span> count</span><br><span class="line">        <span class="built_in">print</span>(count) <span class="comment"># a函数里面</span></span><br><span class="line">        count = <span class="number">2</span></span><br><span class="line">    b()</span><br><span class="line">    <span class="built_in">print</span>(count)  <span class="comment"># 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    a() <span class="comment"># 1</span></span><br><span class="line">    <span class="built_in">print</span>(count)</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>主要区别有以下两点：</p><ol><li><p>两者的功能不同。global关键字修饰变量后标识该变量是全局变量，对该变量进行修改就是修改全局变量，而nonlocal关键字修饰变量后标识该变量是上一级函数中的局部变量，如果上一级函数中不存在该局部变量，nonlocal位置会发生错误（最上层的函数使用nonlocal修饰变量必定会报错）。</p></li><li><p>两者使用的范围不同。global关键字可以用在任何地方，包括最上层函数中和嵌套函数中，即使之前未定义该变量，global修饰后也可以直接使用，而nonlocal关键字只能用于嵌套函数中，并且外层函数中定义了相应的局部变量，否则会发生错误。</p></li></ol><h1 id="四-闭包函数"><a href="#四-闭包函数" class="headerlink" title="四 闭包函数"></a>四 闭包函数</h1><h2 id="一-什么是闭包？"><a href="#一-什么是闭包？" class="headerlink" title="一 什么是闭包？"></a>一 什么是闭包？</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#内部函数包含对外部作用域而非全局作用域的引用</span></span><br><span class="line"><span class="comment">#提示：之前我们都是通过参数将外部的值传给函数，闭包提供了另外一种思路，包起来喽，包起呦，包起来哇</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">counter</span>():</span><br><span class="line">    n=<span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">incr</span>():</span><br><span class="line">        <span class="keyword">nonlocal</span> n </span><br><span class="line">        x=n</span><br><span class="line">        n+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">return</span> incr</span><br><span class="line"></span><br><span class="line">c=counter()</span><br><span class="line"><span class="built_in">print</span>(c()) <span class="comment"># 0</span></span><br><span class="line"><span class="built_in">print</span>(c()) <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(c()) <span class="comment"># 2</span></span><br><span class="line"><span class="built_in">print</span>(c.__closure__[<span class="number">0</span>].cell_contents) <span class="comment">#查看闭包的元素 # 3</span></span><br></pre></td></tr></table></figure><h2 id="二-闭包的意义与应用"><a href="#二-闭包的意义与应用" class="headerlink" title="二 闭包的意义与应用"></a>二 闭包的意义与应用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#闭包的意义：返回的函数对象，不仅仅是一个函数对象，在该函数外还包裹了一层作用域，这使得，该函数无论在何处调用，优先使用自己外层包裹的作用域</span></span><br><span class="line"><span class="comment">#应用领域：延迟计算（原来我们是传参，现在我们是包起来）</span></span><br><span class="line">    <span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">url</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">get</span>():</span><br><span class="line">            <span class="keyword">return</span> urlopen(url).read()</span><br><span class="line">        <span class="keyword">return</span> get</span><br><span class="line"></span><br><span class="line">    baidu=index(<span class="string">&#x27;http://www.baidu.com&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(baidu().decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure><h1 id="五-装饰器"><a href="#五-装饰器" class="headerlink" title="五 装饰器"></a>五 装饰器</h1><blockquote><p>装饰器就是闭包函数的一种应用场景。</p></blockquote><h2 id="为什么要用装饰器"><a href="#为什么要用装饰器" class="headerlink" title="为什么要用装饰器"></a>为什么要用装饰器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">开放封闭原则：</span><br><span class="line">软件一旦上线，就应该遵循开放封闭原则，即对修改源代码是封闭的，对功能扩展是开放的。</span><br><span class="line">也就是说我们必须找到一种解决方案：</span><br><span class="line">能够在不修改一个功能源代码以及调用方式的前提下，为其添加新功能</span><br><span class="line">原则如下:</span><br><span class="line"><span class="number">1</span>、不修改源代码</span><br><span class="line"><span class="number">2</span>、不修改调用方式</span><br><span class="line">装饰器目的：</span><br><span class="line">在遵循<span class="number">1</span>和<span class="number">2</span>原则的基础上扩展新功能</span><br></pre></td></tr></table></figure><h2 id="什么是装饰器"><a href="#什么是装饰器" class="headerlink" title="什么是装饰器"></a>什么是装饰器</h2><blockquote><p>装饰他人的器具：本身可以是任意可调用对象，被装饰者也可以是任意可调用对象</p><p> 强调-装饰器的原则：1、不修改被装饰对象的源代码；2、不修改被装饰对象的调用方式</p><p>装饰器的目标：在遵循1和2的前提下，为被装饰对象添加新功能</p></blockquote><h2 id="装饰器的使用"><a href="#装饰器的使用" class="headerlink" title="装饰器的使用"></a>装饰器的使用</h2><h2 id="无参装饰器"><a href="#无参装饰器" class="headerlink" title="无参装饰器"></a>无参装饰器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 模拟网络延迟，计算home函数运行的时间</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>(<span class="params">name</span>):</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Welcome &#123;&#125; to moyan blog&quot;</span>.<span class="built_in">format</span>(name))</span><br><span class="line">home(<span class="string">&#x27;allen&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1、修改源代码</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>(<span class="params">name</span>):</span><br><span class="line">    startTime=time.time()</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Welcome &#123;&#125; to moyan blog&quot;</span>.<span class="built_in">format</span>(name))</span><br><span class="line">    stopTime=time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;home time &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(stopTime-startTime))</span><br><span class="line">home(<span class="string">&#x27;allen&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、不修改源代码,利用率低</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>(<span class="params">name</span>):</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Welcome &#123;&#125; to moyan blog&quot;</span>.<span class="built_in">format</span>(name))</span><br><span class="line"></span><br><span class="line">startTime=time.time()</span><br><span class="line">home(<span class="string">&#x27;allen&#x27;</span>)</span><br><span class="line">stopTime = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;home time &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(stopTime - startTime))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、不修改源代码，修改了调用方式</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>(<span class="params">name</span>):</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Welcome &#123;&#125; to moyan blog&quot;</span>.<span class="built_in">format</span>(name))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">func</span>):</span><br><span class="line">    startTime = time.time()</span><br><span class="line">    func(<span class="string">&#x27;allen&#x27;</span>)</span><br><span class="line">    stopTime = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;home time &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(stopTime - startTime))</span><br><span class="line">wrapper(home)  <span class="comment"># 修改了源代码的调用方式X</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4、不修改源代码及调用方式，代码高效利用及代码冗余（还记得闭包么?）</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>(<span class="params">name</span>):  <span class="comment"># 定义一个被装饰的函数</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Welcome &#123;&#125; to moyan blog&quot;</span>.<span class="built_in">format</span>(name))</span><br><span class="line"><span class="comment"># 定义一个外层函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outter</span>(<span class="params">func</span>): <span class="comment"># 接收的参数是一个函数名 func-&gt;home</span></span><br><span class="line">    <span class="comment"># func=home</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>():      <span class="comment"># 定义了一个内部函数</span></span><br><span class="line">        startTime = time.time()   <span class="comment"># 新功能</span></span><br><span class="line">        func(<span class="string">&#x27;allen&#x27;</span>)  <span class="comment"># home(&#x27;allen&#x27;)</span></span><br><span class="line">        stopTime = time.time()   <span class="comment"># 新功能</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;home time &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(stopTime - startTime))   <span class="comment"># 新功能</span></span><br><span class="line">    <span class="keyword">return</span> wrapper  <span class="comment"># 加括号是执行哦</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用outter函数装饰home函数</span></span><br><span class="line"><span class="comment"># 此时的home是home=wrapper 不再是home()，已被覆盖；也可以用xx==outter(home); xx()</span></span><br><span class="line">home=outter(home) </span><br><span class="line"><span class="comment"># 不改变调用方式</span></span><br><span class="line">home()  <span class="comment"># --&gt; 此时函数已经扩展了新功能 # home=wrapper()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5、装饰器</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 定义一个外层函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outter</span>(<span class="params">func</span>): <span class="comment"># 接收的参数是一个函数名 func-&gt;home</span></span><br><span class="line">    <span class="comment"># func=home</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>():      <span class="comment"># 定义了一个内部函数</span></span><br><span class="line">        startTime = time.time()   <span class="comment"># 新功能</span></span><br><span class="line">        func(<span class="string">&#x27;allen&#x27;</span>)  <span class="comment"># home(&#x27;allen&#x27;)</span></span><br><span class="line">        stopTime = time.time()   <span class="comment"># 新功能</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;home time &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(stopTime - startTime))   <span class="comment"># 新功能</span></span><br><span class="line">    <span class="keyword">return</span> wrapper  <span class="comment"># 加括号是执行哦</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># @ 写在要被装饰函数的头顶</span></span><br><span class="line"><span class="meta">@outter  </span><span class="comment"># 使用 home=outter(home) home=wrapper语法装饰的话稍显啰嗦，Python就提供了@语法，让装饰过程更简便</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>(<span class="params">name</span>):  <span class="comment"># 定义一个被装饰的函数</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Welcome &#123;&#125; to moyan blog&quot;</span>.<span class="built_in">format</span>(name))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不改变调用方式</span></span><br><span class="line">home()  <span class="comment"># --&gt; 此时函数已经扩展了新功能 home=wrapper()</span></span><br></pre></td></tr></table></figure><h2 id="被装饰对象无参-返回值"><a href="#被装饰对象无参-返回值" class="headerlink" title="被装饰对象无参+返回值"></a>被装饰对象无参+返回值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、被装饰的对象有返回值</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 定义一个外层函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outter</span>(<span class="params">func</span>): <span class="comment"># 接收的参数是一个函数名 func-&gt;home</span></span><br><span class="line">    <span class="comment"># func=home</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>():      <span class="comment"># 定义了一个内部函数</span></span><br><span class="line">        startTime = time.time()   <span class="comment"># 新功能</span></span><br><span class="line">        fee=func(<span class="string">&#x27;allen&#x27;</span>)  <span class="comment"># fee=home(&#x27;allen&#x27;); fee=123</span></span><br><span class="line">        stopTime = time.time()   <span class="comment"># 新功能</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;home time &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(stopTime - startTime))   <span class="comment"># 新功能</span></span><br><span class="line">        <span class="keyword">return</span> fee</span><br><span class="line">    <span class="keyword">return</span> wrapper  <span class="comment"># 加括号是执行哦</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># @ 写在要被装饰函数的头顶</span></span><br><span class="line"><span class="meta">@outter  </span><span class="comment"># 使用 home=outter(home) home=wrapper语法装饰的话稍显啰嗦，Python就提供了@语法，让装饰过程更简便</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>(<span class="params">name</span>):  <span class="comment"># 定义一个被装饰的函数</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Welcome &#123;&#125; to moyan blog&quot;</span>.<span class="built_in">format</span>(name))</span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不改变调用方式</span></span><br><span class="line">res=home()  <span class="comment"># --&gt; 此时函数已经扩展了新功能 home=wrapper()</span></span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><h2 id="被装饰对象有参-返回值"><a href="#被装饰对象有参-返回值" class="headerlink" title="被装饰对象有参+返回值"></a>被装饰对象有参+返回值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 被装饰对象有参</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 定义一个外层函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outter</span>(<span class="params">func</span>): <span class="comment"># 接收的参数是一个函数名 func-&gt;home</span></span><br><span class="line">    <span class="comment"># func=home</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">name</span>):      <span class="comment"># 定义了一个内部函数</span></span><br><span class="line">        startTime = time.time()   <span class="comment"># 新功能</span></span><br><span class="line">        fee=func(name)  <span class="comment"># fee=home(&#x27;allen&#x27;); fee=123</span></span><br><span class="line">        stopTime = time.time()   <span class="comment"># 新功能</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;home time &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(stopTime - startTime))   <span class="comment"># 新功能</span></span><br><span class="line">        <span class="keyword">return</span> fee</span><br><span class="line">    <span class="keyword">return</span> wrapper  <span class="comment"># 加括号是执行哦</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># @ 写在要被装饰函数的头顶</span></span><br><span class="line"><span class="meta">@outter  </span><span class="comment"># 使用 home=outter(home) home=wrapper语法装饰的话稍显啰嗦，Python就提供了@语法，让装饰过程更简便</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>(<span class="params">name</span>):  <span class="comment"># 定义一个被装饰的函数</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Welcome &#123;&#125; to moyan blog&quot;</span>.<span class="built_in">format</span>(name))</span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不改变调用方式</span></span><br><span class="line">res=home(<span class="string">&#x27;allen&#x27;</span>)  <span class="comment"># --&gt; 此时函数已经扩展了新功能 home=wrapper()</span></span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><h2 id="装饰多个对象"><a href="#装饰多个对象" class="headerlink" title="装饰多个对象"></a>装饰多个对象</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、当两个对象一个有参一个无参，装饰器我们应该怎么调试</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 定义一个外层函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outter</span>(<span class="params">func</span>): <span class="comment"># 接收的参数是一个函数名 func-&gt;home</span></span><br><span class="line">    <span class="comment"># func=home</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">name</span>):      <span class="comment"># 定义了一个内部函数</span></span><br><span class="line">        startTime = time.time()   <span class="comment"># 新功能</span></span><br><span class="line">        fee=func(name)  <span class="comment"># fee=home(&#x27;allen&#x27;); fee=123</span></span><br><span class="line">        stopTime = time.time()   <span class="comment"># 新功能</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;home time &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(stopTime - startTime))   <span class="comment"># 新功能</span></span><br><span class="line">        <span class="keyword">return</span> fee</span><br><span class="line">    <span class="keyword">return</span> wrapper  <span class="comment"># 加括号是执行哦</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># @ 写在要被装饰函数的头顶</span></span><br><span class="line"><span class="meta">@outter  </span><span class="comment"># 使用 home=outter(home) home=wrapper语法装饰的话稍显啰嗦，Python就提供了@语法，让装饰过程更简便</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>(<span class="params">name</span>):  <span class="comment"># 定义一个被装饰的函数</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Welcome &#123;&#125; to moyan blog&quot;</span>.<span class="built_in">format</span>(name))</span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line"><span class="meta">@outter</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;test ok&#x27;</span>)</span><br><span class="line"><span class="comment"># 不改变调用方式</span></span><br><span class="line">home(<span class="string">&#x27;allen&#x27;</span>)  <span class="comment"># --&gt; 此时函数已经扩展了新功能 home=wrapper(&#x27;allen&#x27;)</span></span><br><span class="line">index() <span class="comment"># index=wrapper(); 装饰器需要一个参数，但是我们没给所以报错</span></span><br><span class="line"><span class="comment"># TypeError: wrapper() missing 1 required positional argument: &#x27;name</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2、用*args,**kwargs来接受参数；回顾请看函数基础-函数的参数</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 定义一个外层函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outter</span>(<span class="params">func</span>): <span class="comment"># 接收的参数是一个函数名 func-&gt;home</span></span><br><span class="line">    <span class="comment"># func=home</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args,**kwargs</span>):      <span class="comment"># 定义了一个内部函数</span></span><br><span class="line">        startTime = time.time()   <span class="comment"># 新功能</span></span><br><span class="line">        fee=func(*args,**kwargs)  <span class="comment"># fee=home(&#x27;allen&#x27;); fee=123</span></span><br><span class="line">        stopTime = time.time()   <span class="comment"># 新功能</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;home time &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(stopTime - startTime))   <span class="comment"># 新功能</span></span><br><span class="line">        <span class="keyword">return</span> fee</span><br><span class="line">    <span class="keyword">return</span> wrapper  <span class="comment"># 加括号是执行哦</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># @ 写在要被装饰函数的头顶</span></span><br><span class="line"><span class="meta">@outter  </span><span class="comment"># 使用 home=outter(home) home=wrapper语法装饰的话稍显啰嗦，Python就提供了@语法，让装饰过程更简便</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>(<span class="params">name</span>):  <span class="comment"># 定义一个被装饰的函数</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Welcome &#123;&#125; to moyan blog&quot;</span>.<span class="built_in">format</span>(name))</span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line"><span class="meta">@outter</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;test ok&#x27;</span>)</span><br><span class="line"><span class="comment"># 不改变调用方式</span></span><br><span class="line">home(<span class="string">&#x27;allen&#x27;</span>)  <span class="comment"># --&gt; 此时函数已经扩展了新功能 home=wrapper()</span></span><br><span class="line">index()  <span class="comment"># index=wrapper(); </span></span><br></pre></td></tr></table></figure><h2 id="简单写的认证装饰器"><a href="#简单写的认证装饰器" class="headerlink" title="简单写的认证装饰器"></a>简单写的认证装饰器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># eg：一个简单的认证装饰器，仅供参考</span></span><br><span class="line">name_ok=&#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>:<span class="literal">None</span>,</span><br><span class="line">    <span class="comment"># &#x27;login&#x27;:None,</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outer</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>(<span class="params">*args,**kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> name_ok[<span class="string">&#x27;name&#x27;</span>]:</span><br><span class="line">            res = func(name_ok[<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        name = <span class="built_in">input</span>(<span class="string">&#x27;input username: &#x27;</span>)</span><br><span class="line">        passwd = <span class="built_in">input</span>(<span class="string">&#x27;input passwd: &#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> name==<span class="string">&#x27;allen&#x27;</span> <span class="keyword">and</span> passwd==<span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;登录成功！&#x27;</span>)</span><br><span class="line">            name_ok[<span class="string">&#x27;name&#x27;</span>]=name</span><br><span class="line">            res = func(*args, **kwargs)</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;name or passwd ERROR&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"><span class="meta">@outer</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;欢迎！！！&#x27;</span>)</span><br><span class="line"><span class="meta">@outer</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>(<span class="params">*args,**kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;welcome &#123;&#125; to home&#x27;</span>.<span class="built_in">format</span>(*args,**kwargs))</span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line">index()</span><br><span class="line">home()</span><br></pre></td></tr></table></figure><h2 id="叠加多个装饰器"><a href="#叠加多个装饰器" class="headerlink" title="叠加多个装饰器"></a>叠加多个装饰器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 叠加多个装饰器</span></span><br><span class="line"><span class="comment"># 1. 加载顺序(outer函数的调用顺序):自下而上</span></span><br><span class="line"><span class="comment"># 2. 执行顺序(inner函数的执行顺序):自上而下</span></span><br><span class="line">name_ok=&#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>:<span class="literal">None</span>,</span><br><span class="line">    <span class="comment"># &#x27;login&#x27;:None,</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outer</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>(<span class="params">*args,**kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> name_ok[<span class="string">&#x27;name&#x27;</span>]:</span><br><span class="line">            res = func(name_ok[<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        name = <span class="built_in">input</span>(<span class="string">&#x27;input username: &#x27;</span>)</span><br><span class="line">        passwd = <span class="built_in">input</span>(<span class="string">&#x27;input passwd: &#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> name==<span class="string">&#x27;allen&#x27;</span> <span class="keyword">and</span> passwd==<span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;登录成功！&#x27;</span>)</span><br><span class="line">            name_ok[<span class="string">&#x27;name&#x27;</span>]=name</span><br><span class="line">            res = func(*args, **kwargs)</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;name or passwd ERROR&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">timemer</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>(<span class="params">*args,**kwargs</span>):</span><br><span class="line">        startTime = time.time()</span><br><span class="line">        res=func(*args,**kwargs)</span><br><span class="line">        stopTime = time.time()</span><br><span class="line">        <span class="built_in">print</span>(stopTime-startTime)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="meta">@outer</span></span><br><span class="line"><span class="meta">@timemer  </span><span class="comment"># 写在这只统计index运行的时间</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;欢迎！！！&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@timemer   </span><span class="comment"># 写在这统计outer + index运行的时间</span></span><br><span class="line"><span class="meta">@outer</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>(<span class="params">*args,**kwargs</span>):</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;welcome &#123;&#125; to home&#x27;</span>.<span class="built_in">format</span>(*args,**kwargs))</span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line">index()</span><br><span class="line">home()</span><br></pre></td></tr></table></figure><h2 id="有参装饰器"><a href="#有参装饰器" class="headerlink" title="有参装饰器"></a>有参装饰器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">name_ok=&#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>:<span class="literal">None</span>,</span><br><span class="line">    <span class="comment"># &#x27;login&#x27;:None,</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">auth</span>(<span class="params">engine</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">auth2</span>(<span class="params">func</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">inner</span>(<span class="params">*args,**kwargs</span>):</span><br><span class="line">            <span class="keyword">if</span> engine == <span class="string">&#x27;file&#x27;</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;基于file认证&#x27;</span>)</span><br><span class="line">                <span class="keyword">if</span> name_ok[<span class="string">&#x27;name&#x27;</span>]:</span><br><span class="line">                    res = func(name_ok[<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line">                    <span class="keyword">return</span> res</span><br><span class="line">                name = <span class="built_in">input</span>(<span class="string">&#x27;input username: &#x27;</span>)</span><br><span class="line">                passwd = <span class="built_in">input</span>(<span class="string">&#x27;input passwd: &#x27;</span>)</span><br><span class="line">                <span class="keyword">if</span> name==<span class="string">&#x27;allen&#x27;</span> <span class="keyword">and</span> passwd==<span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;登录成功！&#x27;</span>)</span><br><span class="line">                    name_ok[<span class="string">&#x27;name&#x27;</span>]=name</span><br><span class="line">                    res = func(*args, **kwargs)</span><br><span class="line">                    <span class="keyword">return</span> res</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;name or passwd ERROR&#x27;</span>)</span><br><span class="line">            <span class="keyword">elif</span> engine ==<span class="string">&#x27;mysql&#x27;</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;基于mysql认证&#x27;</span>)</span><br><span class="line">            <span class="keyword">elif</span> engine ==<span class="string">&#x27;ldap&#x27;</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;基于ldap认证&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> inner</span><br><span class="line">    <span class="keyword">return</span> auth2</span><br><span class="line"></span><br><span class="line"><span class="meta">@auth(<span class="params"><span class="string">&#x27;mysql&#x27;</span></span>)  </span><span class="comment"># @auth(&#x27;mysql&#x27;) == @auth2 == home=auth2(home) == home=inner</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;welcome to home&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line"></span><br><span class="line">home() <span class="comment"># home()=inner()</span></span><br></pre></td></tr></table></figure><h2 id="装饰器总结"><a href="#装饰器总结" class="headerlink" title="装饰器总结"></a>装饰器总结</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 装饰器模板</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outer</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>(<span class="params">*args,**kwargs</span>):</span><br><span class="line">        <span class="comment"># 被装饰对象执行前 执行的功能</span></span><br><span class="line">        res=func(*args,**kwargs)</span><br><span class="line">        <span class="comment"># 被装饰对象执行后 执行的功能</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">return</span> inner</span><br></pre></td></tr></table></figure><h2 id="装饰器补充：wraps"><a href="#装饰器补充：wraps" class="headerlink" title="装饰器补充：wraps"></a><strong>装饰器补充：wraps</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="comment"># @wraps(func)的作用: 不改变使用装饰器原有函数的结构(如__name__, __doc__)</span></span><br><span class="line"><span class="comment"># 不使用wraps可能出现的ERROR:   func...endpoint...map...</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deco</span>(<span class="params">func</span>):</span><br><span class="line"><span class="meta">    @wraps(<span class="params">func</span>) </span><span class="comment">#加在最内层函数正上方</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args,**kwargs</span>):</span><br><span class="line">        <span class="keyword">return</span> func(*args,**kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@deco</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;哈哈哈哈&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;from index&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(index.__doc__)  <span class="comment"># 哈哈哈哈</span></span><br><span class="line"><span class="comment"># 不适用 @wraps(func) </span></span><br><span class="line"><span class="built_in">print</span>(index.__doc__)  <span class="comment"># None</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python之旅 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 函数 </tag>
            
            <tag> 函数对象 </tag>
            
            <tag> 函数嵌套 </tag>
            
            <tag> 名称空间与作用域 </tag>
            
            <tag> 闭包函数 </tag>
            
            <tag> 装饰器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>必备软件</title>
      <link href="/2019/08/23/%E6%95%99%E7%A8%8B/%E5%BF%85%E5%A4%87%E8%BD%AF%E4%BB%B6/"/>
      <url>/2019/08/23/%E6%95%99%E7%A8%8B/%E5%BF%85%E5%A4%87%E8%BD%AF%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<ol><li>Git：<a href="https://www.sourcetreeapp.com/">SourceTree</a>、</li><li>聊天：<a href="https://tim.qq.com/index.html">Tim</a>(虽然已经被腾讯放弃了，但是比起QQ那么臃肿，这个好用简洁无广告）、<a href="https://weixin.qq.com/">微信</a></li><li>截图软件： <a href="https://zh.snipaste.com/">snipaste</a> 、<a href="https://zh.xnipapp.com/">Xnip-Mac</a></li><li>编辑器：<a href="https://notepad-plus-plus.org/">Notepad++</a>、<a href="https://www.sublimetext.com/">Sublime Text</a>、<a href="https://code.visualstudio.com/">VScode</a>、<a href="https://www.typora.io/">Typora</a>(Markdown必备)</li><li>浏览器：<a href="https://www.google.cn/intl/zh-CN/chrome/">Chrome</a>、<a href="http://www.firefox.com.cn/">火狐</a></li><li>视频播放器：<a href="https://player.qq.com/">QQ影音</a>、</li><li>词典： <a href="https://www.eudic.net/v4/en/app/eudic">欧陆词典</a>、<a href="http://cidian.youdao.com/">有道词典</a></li><li>笔记：<a href="https://leanote.com/">Leanote</a>(曾经最爱,目前已收费)、<a href="https://products.office.com/zh-cn/onenote/digital-note-taking-app?rtc=1">onenote</a> 、 <a href="https://evernote.com/intl/zh-tw">Evernote</a> (用这个截取网页的内容，onenote的web clipper太差）</li><li>简单视频制作：<a href="https://www.adobe.com/hk_zh/products/premiere/free-trial-download.html">Adobe Premiere Pro</a> (编辑视频） <a href="https://www.4kdownload.com/download">4K Video Downloader</a>（下载视频） <a href="http://www.aegisub.org/">Aegisub</a> (制作字幕） <a href="https://sourceforge.net/projects/megui/">Megui</a>(压制视频）</li><li>搜索： <a href="https://www.voidtools.com/">Everything</a>、<a href="https://www.baidu.com/s?ie=utf-8&amp;f=8&amp;rsv_bp=1&amp;rsv_idx=1&amp;tn=baidu&amp;wd=Alfred%20for%20Mac&amp;oq=Alfred%2520for%2520Mac&amp;rsv_pq=f90bb3ad0003a0c8&amp;rsv_t=ac7bTP67fNtDYEZeaDo1FajNEd4zIzmkxmkFsYl4l%2BZrAK8iwhVB5gwyAU0&amp;rqlang=cn&amp;rsv_enter=0&amp;rsv_dl=tb">Alfred for Mac</a>(去找个破解版的吧！)</li><li>图片查看： <a href="https://www.faststone.org/FSViewerDetail.htm">FastStone Image Viewer</a></li><li>压缩软件：<a href="https://www.rarlab.com/">winrar</a> (7zip也不错，但是不能设置解压完自动打开解压的文件夹，只能放弃）、<a href="http://haozip.2345.cc/">2345好压</a>、</li><li>清理软件： <a href="https://www.wisecleaner.com/wise-care-365.html">Wise Care 365</a> 和 <a href="https://www.ccleaner.com/">CCleaner</a></li><li>数据库：<a href="https://www.baidu.com/s?ie=UTF-8&amp;wd=Navicat%20for%20MySQL">Navicat for MySQL</a></li><li>Python：<a href="https://www.runoob.com/w3cnote/pycharm-windows-install.html">PyCharm</a></li><li>下载工具：<a href="http://pandownload.com/">PanDownload-百度云限速破解</a>、<a href="https://www.qbittorrent.org/">qBittorrent</a>-<a href="http://www.360doc.com/content/19/0228/05/39800597_818037663.shtml">隐藏BUG</a>和<a href="https://www.internetdownloadmanager.com/">Internet Download Manager</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> 必备软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 必备软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SourceTree使用教程</title>
      <link href="/2019/08/23/%E6%95%99%E7%A8%8B/SourceTree%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2019/08/23/%E6%95%99%E7%A8%8B/SourceTree%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p><img src="a992e31f4134970a226c5ca699cad1c8a6865dd8.jpg" alt="img"># 克隆，提交和推送</p><p>在使用SourceTree之前必须要先安装Git和sourceTree，具体安装过程不再赘述，大家可以搜索其它教程。</p><p>本地未存在git仓库</p><p>新建一个gitee仓库，复制链接</p><p><img src="1566551961608.png" alt="img"><br>切换到克隆配置页面，填入远程仓库地址，目标路径（本地存放路径），点击克隆。</p><p><img src="1566552098083.png" alt="img"><br>本地已存在Git仓库</p><p><img src="1566552521230.png" alt="img"><br>打开目标路径，可以看到已克隆一个空白的版本库。</p><p><img src="1566552121716.png" alt="img"><br>提交和推送。由于git是分布式版本控制工具，存在着本地仓库和远程仓库，所以我们在本地工作副本进行的编辑，要先提交到本地仓库，再从本地仓库推送到远程仓库。下面进行演示。编辑完成后，打开sourceTree, 可以看到文件的变动已经显示到软件界面，点击暂存所选，类似于勾选要提交的文件。</p><p><img src="1566552288042.png" alt="img"><br>输入提交注释 [A]新增1，点击提交。</p><p><img src="1566552307483.png" alt="img"><br>提交完成后，可以看到日志/历史选项卡中已显示提交的版本日志，在master分支 提交了新增1，不过这个master分支是本地仓库的，并不是远程仓库的。从第二张图可以看到远程仓库github里还是空白的。</p><p><img src="1566552327221.png" alt="img"><br><img src="1566552332919.png" alt="img"><br>推送。点击推送，勾选将本地master分支推送到远程master分支，点击推送。</p><p><img src="1566552385057.png" alt="img"><br><img src="1566552395856.png" alt="img"><br>推送完成后，可以看到最新的版本里显示了master 和 origin/master，这表明本地master分支和远程master分支是同步的，在一个节点上。登录GitHub可以看到仓库里已有提交记录了。如下图。这样本地修改的代码或文件就被同步到了远程仓库，可以被别人拉下来使用。</p><p><img src="1566552429189.png" alt="img"># 获取、拉取</p><p>首先再gitee仓库随便修改个文件，或者有其他推送过，就是文件与现有的仓库有变动；</p><p>获取和拉取。获取是将远程仓库的代码更新到本地仓库，拉取是将本地仓库的代码更新到本地工作副本。打开sourceTree,点击 获取按钮，如下图</p><p><img src="1566552854179.png" alt="img"><br>点击确定，可以看到拉取图标那里多了一个蓝底白色的数字1，分支master那里也有一个灰色的数字1，并有一个向下的箭头，这表示 有一个更新需要拉取到本地工作副本。同时打开版本文件，可以看到test1.txt文件中没有第二步增加的123。</p><p><img src="1566552904058.png" alt="img"><br>点击拉取，如下图</p><p><img src="1566552918877.png" alt="img"><br>点击确定，可以看到待拉取的图标消失了。同时test1.txt文件也多了123</p><p><img src="1566552971408.png" alt="img"><br>一般在实际使用中是不会先点获取，再点拉取的，因为拉代码都是直接一步到位为拉到本地工作副本的。所以直接一个拉取操作就够了。</p><p><img src="1566552990277.png" alt="img"></p><blockquote><p>声明：<a href="https://jingyan.baidu.com/article/64d05a021f37a6de55f73b8d.html">原文作者</a> </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> SourceTree </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SourceTree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python之旅：函数基础</title>
      <link href="/2019/08/23/Python/Python%E4%B9%8B%E6%97%85/Python%E4%B9%8B%E6%97%85%EF%BC%9A%E5%87%BD%E6%95%B0%E5%9F%BA%E7%A1%80/"/>
      <url>/2019/08/23/Python/Python%E4%B9%8B%E6%97%85/Python%E4%B9%8B%E6%97%85%EF%BC%9A%E5%87%BD%E6%95%B0%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h1><h2 id="为什么要用函数"><a href="#为什么要用函数" class="headerlink" title="为什么要用函数"></a>为什么要用函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、代码的组织结构不清晰，可读性差</span></span><br><span class="line"><span class="comment">#2、遇到重复的功能只能重复编写实现代码，代码冗余</span></span><br><span class="line"><span class="comment">#3、功能需要扩展时，需要找出所有实现该功能的地方修改之，无法统一管理且维护难度极大 </span></span><br></pre></td></tr></table></figure><h2 id="函数是什么"><a href="#函数是什么" class="headerlink" title="函数是什么"></a>函数是什么</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">针对二中的问题，想象生活中的例子，修理工需要实现准备好工具箱里面放好锤子，扳手，钳子等工具，然后遇到锤钉子的场景，拿来锤子用就可以，而无需临时再制造一把锤子。</span><br><span class="line"></span><br><span class="line">修理工===&gt;程序员</span><br><span class="line">具备某一功能的工具===&gt;函数</span><br><span class="line"></span><br><span class="line">要想使用工具，需要事先准备好，然后拿来就用且可以重复使用</span><br><span class="line">要想用函数，需要先定义，再使用</span><br></pre></td></tr></table></figure><h2 id="函数分类"><a href="#函数分类" class="headerlink" title="函数分类"></a>函数分类</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、内置函数</span></span><br><span class="line">为了方便我们的开发，针对一些简单的功能，python解释器已经为我们定义好了的函数即内置函数。对于内置函数，我们可以拿来就用而无需事先定义，如<span class="built_in">len</span>(),<span class="built_in">sum</span>(),<span class="built_in">max</span>()</span><br><span class="line">ps：我们将会在最后详细介绍常用的内置函数。</span><br><span class="line"></span><br><span class="line"><span class="comment">#2、自定义函数</span></span><br><span class="line">很明显内置函数所能提供的功能是有限的，这就需要我们自己根据需求，事先定制好我们自己的函数来实现某种功能，以后，在遇到应用场景时，调用自定义的函数即可。例如</span><br></pre></td></tr></table></figure><h1 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h1><h2 id="一-如何自定义函数？"><a href="#一-如何自定义函数？" class="headerlink" title="一 如何自定义函数？"></a>一 如何自定义函数？</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#语法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">函数名</span>(<span class="params">参数<span class="number">1</span>,参数<span class="number">2</span>,参数<span class="number">3</span>,...</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;注释&#x27;&#x27;&#x27;</span></span><br><span class="line">    函数体</span><br><span class="line">    <span class="keyword">return</span> 返回的值</span><br><span class="line"></span><br><span class="line"><span class="comment">#函数名要能反映其意义</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">auth</span>(<span class="params">user:<span class="built_in">str</span>,password:<span class="built_in">str</span></span>)-&gt;<span class="built_in">int</span>:</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    auth function</span></span><br><span class="line"><span class="string">    :param user: 用户名</span></span><br><span class="line"><span class="string">    :param password: 密码</span></span><br><span class="line"><span class="string">    :return: 认证结果</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> user == <span class="string">&#x27;allen&#x27;</span> <span class="keyword">and</span> password == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="comment"># print(auth.__annotations__) #&#123;&#x27;user&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;password&#x27;: &lt;class &#x27;str&#x27;&gt;, &#x27;return&#x27;: &lt;class &#x27;int&#x27;&gt;&#125;</span></span><br><span class="line"></span><br><span class="line">user=<span class="built_in">input</span>(<span class="string">&#x27;用户名&gt;&gt;: &#x27;</span>).strip()</span><br><span class="line">pwd=<span class="built_in">input</span>(<span class="string">&#x27;密码&gt;&gt;: &#x27;</span>).strip()</span><br><span class="line">res=auth(user,pwd)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><h2 id="二-函数使用的原则：先定义，再调用"><a href="#二-函数使用的原则：先定义，再调用" class="headerlink" title="二 函数使用的原则：先定义，再调用"></a>二 函数使用的原则：先定义，再调用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">函数即“变量”，“变量”必须先定义后引用。未定义而直接引用函数，就相当于在引用一个不存在的变量名</span><br><span class="line"><span class="comment">#测试一</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;from foo&#x27;</span>)</span><br><span class="line">    bar()</span><br><span class="line">foo() <span class="comment">#报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#测试二</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bar</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;from bar&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;from foo&#x27;</span>)</span><br><span class="line">    bar()</span><br><span class="line">foo() <span class="comment">#正常</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#测试三</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;from foo&#x27;</span>)</span><br><span class="line">    bar()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bar</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;from bar&#x27;</span>)</span><br><span class="line">foo() <span class="comment">#会报错吗?</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#结论:函数的使用,必须遵循原则:先定义,后调用</span></span><br><span class="line"><span class="comment">#我们在使用函数时,一定要明确地区分定义阶段和调用阶段</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#定义阶段</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;from foo&#x27;</span>)</span><br><span class="line">    bar()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bar</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;from bar&#x27;</span>)</span><br><span class="line"><span class="comment">#调用阶段</span></span><br><span class="line">foo()</span><br></pre></td></tr></table></figure><h2 id="三-函数在定义阶段都干了哪些事？"><a href="#三-函数在定义阶段都干了哪些事？" class="headerlink" title="三 函数在定义阶段都干了哪些事？"></a>三 函数在定义阶段都干了哪些事？</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#只检测语法，不执行代码</span></span><br><span class="line">也就说，语法错误在函数定义阶段就会检测出来，而代码的逻辑错误只有在执行时才会知道</span><br></pre></td></tr></table></figure><h2 id="四-定义函数的三种形式"><a href="#四-定义函数的三种形式" class="headerlink" title="四 定义函数的三种形式"></a>四 定义函数的三种形式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、无参：应用场景仅仅只是执行一些操作，比如与用户交互，打印</span></span><br><span class="line"><span class="comment">#2、有参：需要根据外部传进来的参数，才能执行相应的逻辑，比如统计长度，求最大值最小值</span></span><br><span class="line"><span class="comment">#3、空函数：设计代码结构</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义阶段</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tell_tag</span>(<span class="params">tag,n</span>): <span class="comment">#有参数</span></span><br><span class="line">    <span class="built_in">print</span>(tag*n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tell_msg</span>(): <span class="comment">#无参数</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用阶段</span></span><br><span class="line">tell_tag(<span class="string">&#x27;*&#x27;</span>,<span class="number">12</span>)</span><br><span class="line">tell_msg()</span><br><span class="line">tell_tag(<span class="string">&#x27;*&#x27;</span>,<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">##       </span></span><br><span class="line"><span class="string">hello world</span></span><br><span class="line"><span class="string">##       </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#结论：</span></span><br><span class="line"><span class="comment">#1、定义时无参，意味着调用时也无需传入参数</span></span><br><span class="line"><span class="comment">#2、定义时有参，意味着调用时则必须传入参数</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">auth</span>(<span class="params">user,password</span>):                             </span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;                                                           </span></span><br><span class="line"><span class="string">    auth function                                                 </span></span><br><span class="line"><span class="string">    :param user: 用户名                                              </span></span><br><span class="line"><span class="string">    :param password: 密码                                           </span></span><br><span class="line"><span class="string">    :return: 认证结果                                                 </span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span>                                                           </span><br><span class="line">    <span class="keyword">pass</span>                                                          </span><br><span class="line">                                                                  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">filename</span>):                                                </span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;                                                           </span></span><br><span class="line"><span class="string">    :param filename:                                              </span></span><br><span class="line"><span class="string">    :return:                                                      </span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span>                                                           </span><br><span class="line">    <span class="keyword">pass</span>                                                          </span><br><span class="line">                                                                  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">filename</span>):                                                </span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;                                                           </span></span><br><span class="line"><span class="string">    :param filename:                                              </span></span><br><span class="line"><span class="string">    :return:                                                      </span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span>                                                           </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ls</span>(<span class="params">dirname</span>):                                                  </span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;                                                           </span></span><br><span class="line"><span class="string">    :param dirname:                                               </span></span><br><span class="line"><span class="string">    :return:                                                      </span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span>                                                           </span><br><span class="line">    <span class="keyword">pass</span>                                                          </span><br><span class="line"></span><br><span class="line"><span class="comment">#程序的体系结构立见           </span></span><br></pre></td></tr></table></figure><h1 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h1><h2 id="一-调用函数"><a href="#一-调用函数" class="headerlink" title="一 调用函数"></a>一 调用函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">函数的调用：函数名加括号</span><br><span class="line"><span class="number">1</span> 先找到名字</span><br><span class="line"><span class="number">2</span> 根据名字调用代码</span><br></pre></td></tr></table></figure><h2 id="二-函数返回值"><a href="#二-函数返回值" class="headerlink" title="二 函数返回值"></a>二 函数返回值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">无<span class="keyword">return</span>-&gt;<span class="literal">None</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>个值-&gt;返回<span class="number">1</span>个值</span><br><span class="line"><span class="keyword">return</span> 逗号分隔多个值-&gt;元组</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">什么时候该有返回值？</span><br><span class="line">　　　　调用函数，经过一系列的操作，最后要拿到一个明确的结果，则必须要有返回值</span><br><span class="line">　　　　通常有参函数需要有返回值，输入参数，经过计算，得到一个最终的结果</span><br><span class="line">什么时候不需要有返回值？</span><br><span class="line">　　　　调用函数，仅仅只是执行一系列的操作，最后不需要得到什么结果，则无需有返回值</span><br><span class="line">　　　　通常无参函数不需要有返回值</span><br></pre></td></tr></table></figure><h2 id="三-函数调用的三种形式"><a href="#三-函数调用的三种形式" class="headerlink" title="三 函数调用的三种形式"></a>三 函数调用的三种形式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 语句形式：foo()</span><br><span class="line"><span class="number">2</span> 表达式形式：<span class="number">3</span>*<span class="built_in">len</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="number">3</span> 当中另外一个函数的参数：<span class="built_in">range</span>(<span class="built_in">len</span>(<span class="string">&#x27;hello&#x27;</span>))</span><br></pre></td></tr></table></figure><h1 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h1><h2 id="一-形参与实参"><a href="#一-形参与实参" class="headerlink" title="一 形参与实参"></a>一 形参与实参</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#形参即变量名，实参即变量值，函数调用时，将值绑定到变量名上，函数调用结束，解除绑定</span></span><br></pre></td></tr></table></figure><h2 id="二-具体应用"><a href="#二-具体应用" class="headerlink" title="二 具体应用"></a>二 具体应用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、位置参数：按照从左到右的顺序定义的参数</span></span><br><span class="line">        位置形参：必选参数</span><br><span class="line">        位置实参：按照位置给形参传值</span><br><span class="line"></span><br><span class="line"><span class="comment">#2、关键字参数：按照key=value的形式定义的实参</span></span><br><span class="line">        无需按照位置为形参传值</span><br><span class="line">        注意的问题：</span><br><span class="line">                <span class="number">1.</span> 关键字实参必须在位置实参右面</span><br><span class="line">                <span class="number">2.</span> 对同一个形参不能重复传值</span><br><span class="line"></span><br><span class="line"><span class="comment">#3、默认参数：形参在定义时就已经为其赋值</span></span><br><span class="line">        可以传值也可以不传值，经常需要变得参数定义成位置形参，变化较小的参数定义成默认参数（形参）</span><br><span class="line">        注意的问题：</span><br><span class="line">                <span class="number">1.</span> 只在定义时赋值一次</span><br><span class="line">                <span class="number">2.</span> 默认参数的定义应该在位置形参右面</span><br><span class="line">                <span class="number">3.</span> 默认参数通常应该定义成不可变类型</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#4、可变长参数：</span></span><br><span class="line">        可变长指的是实参值的个数不固定</span><br><span class="line">        而实参有按位置和按关键字两种形式定义，针对这两种形式的可变长，形参对应有两种解决方案来完整地存放它们，分别是*args，**kwargs</span><br><span class="line"></span><br><span class="line">        ===========*args===========</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">x,y,*args</span>):</span><br><span class="line">            <span class="built_in">print</span>(x,y)</span><br><span class="line">            <span class="built_in">print</span>(args)</span><br><span class="line">        foo(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">x,y,*args</span>):</span><br><span class="line">            <span class="built_in">print</span>(x,y)</span><br><span class="line">            <span class="built_in">print</span>(args)</span><br><span class="line">        foo(<span class="number">1</span>,<span class="number">2</span>,*[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">x,y,z</span>):</span><br><span class="line">            <span class="built_in">print</span>(x,y,z)</span><br><span class="line">        foo(*[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">        ===========**kwargs===========</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">x,y,**kwargs</span>):</span><br><span class="line">            <span class="built_in">print</span>(x,y)</span><br><span class="line">            <span class="built_in">print</span>(kwargs)</span><br><span class="line">        foo(<span class="number">1</span>,y=<span class="number">2</span>,a=<span class="number">1</span>,b=<span class="number">2</span>,c=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">x,y,**kwargs</span>):</span><br><span class="line">            <span class="built_in">print</span>(x,y)</span><br><span class="line">            <span class="built_in">print</span>(kwargs)</span><br><span class="line">        foo(<span class="number">1</span>,y=<span class="number">2</span>,**&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">x,y,z</span>):</span><br><span class="line">            <span class="built_in">print</span>(x,y,z)</span><br><span class="line">        foo(**&#123;<span class="string">&#x27;z&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;x&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;y&#x27;</span>:<span class="number">3</span>&#125;)</span><br><span class="line"></span><br><span class="line">        ===========*args+**kwargs===========</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">x,y</span>):</span><br><span class="line">            <span class="built_in">print</span>(x,y)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args,**kwargs</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;====&gt;&#x27;</span>)</span><br><span class="line">            foo(*args,**kwargs)</span><br><span class="line"></span><br><span class="line"><span class="comment">#5、命名关键字参数：*后定义的参数，必须被传值（有默认值的除外），且必须按照关键字实参的形式传递</span></span><br><span class="line">可以保证，传入的参数中一定包含某些关键字</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">x,y,*args,a=<span class="number">1</span>,b,**kwargs</span>):</span><br><span class="line">            <span class="built_in">print</span>(x,y)</span><br><span class="line">            <span class="built_in">print</span>(args)</span><br><span class="line">            <span class="built_in">print</span>(a)</span><br><span class="line">            <span class="built_in">print</span>(b)</span><br><span class="line">            <span class="built_in">print</span>(kwargs)</span><br><span class="line"></span><br><span class="line">        foo(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,b=<span class="number">3</span>,c=<span class="number">4</span>,d=<span class="number">5</span>)</span><br><span class="line">        结果：</span><br><span class="line">            <span class="number">1</span></span><br><span class="line">            <span class="number">2</span></span><br><span class="line">            (<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">            <span class="number">1</span></span><br><span class="line">            <span class="number">3</span></span><br><span class="line">            &#123;<span class="string">&#x27;c&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p>1、写函数，，用户传入修改的文件名，与要修改的内容，执行函数，完成批了修改操作<br>2、写函数，计算传入字符串中【数字】、【字母】、【空格] 以及 【其他】的个数</p><p>3、写函数，判断用户传入的对象（字符串、列表、元组）长度是否大于5。</p><p>4、写函数，检查传入列表的长度，如果大于2，那么仅保留前两个长度的内容，并将新内容返回给调用者。</p><p>5、写函数，检查获取传入列表或元组对象的所有奇数位索引对应的元素，并将其作为新列表返回给调用者。</p><p>6、写函数，检查字典的每一个value的长度,如果大于2，那么仅保留前两个长度的内容，并将新内容返回给调用者。<br>dic = {“k1”: “v1v1”, “k2”: [11,22,33,44]}<br>PS:字典中的value只能是字符串或列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#题目一</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">modify_file</span>(<span class="params">filename,old,new</span>):</span><br><span class="line">    <span class="keyword">import</span> os</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> read_f,\</span><br><span class="line">        <span class="built_in">open</span>(<span class="string">&#x27;.bak.swap&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> write_f:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> read_f:</span><br><span class="line">            <span class="keyword">if</span> old <span class="keyword">in</span> line:</span><br><span class="line">                line=line.replace(old,new)</span><br><span class="line">            write_f.write(line)</span><br><span class="line">    os.remove(filename)</span><br><span class="line">    os.rename(<span class="string">&#x27;.bak.swap&#x27;</span>,filename)</span><br><span class="line"></span><br><span class="line">modify_file(<span class="string">&#x27;/Users/jieli/PycharmProjects/爬虫/a.txt&#x27;</span>,<span class="string">&#x27;alex&#x27;</span>,<span class="string">&#x27;SB&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#题目二</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_str</span>(<span class="params">msg</span>):</span><br><span class="line">    res=&#123;</span><br><span class="line">        <span class="string">&#x27;num&#x27;</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="string">&#x27;string&#x27;</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="string">&#x27;space&#x27;</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="string">&#x27;other&#x27;</span>:<span class="number">0</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> msg:</span><br><span class="line">        <span class="keyword">if</span> s.isdigit():</span><br><span class="line">            res[<span class="string">&#x27;num&#x27;</span>]+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> s.isalpha():</span><br><span class="line">            res[<span class="string">&#x27;string&#x27;</span>]+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> s.isspace():</span><br><span class="line">            res[<span class="string">&#x27;space&#x27;</span>]+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            res[<span class="string">&#x27;other&#x27;</span>]+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">res=check_str(<span class="string">&#x27;hello name:aSB passowrd:alex3714&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#题目三：略</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#题目四</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>(<span class="params">seq</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(seq) &gt; <span class="number">2</span>:</span><br><span class="line">        seq=seq[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">return</span> seq</span><br><span class="line"><span class="built_in">print</span>(func1([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#题目五</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func2</span>(<span class="params">seq</span>):</span><br><span class="line">    <span class="keyword">return</span> seq[::<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(func2([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#题目六</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func3</span>(<span class="params">dic</span>):</span><br><span class="line">    d=&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> k,v <span class="keyword">in</span> dic.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(v) &gt; <span class="number">2</span>:</span><br><span class="line">            d[k]=v[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">return</span> d</span><br><span class="line"><span class="built_in">print</span>(func3(&#123;<span class="string">&#x27;k1&#x27;</span>:<span class="string">&#x27;abcdef&#x27;</span>,<span class="string">&#x27;k2&#x27;</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],<span class="string">&#x27;k3&#x27;</span>:(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>)&#125;))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python之旅 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 函数 </tag>
            
            <tag> 函数基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python之旅：基础</title>
      <link href="/2019/08/20/Python/Python%E4%B9%8B%E6%97%85/Python%E4%B9%8B%E6%97%85%EF%BC%9A%E5%9F%BA%E7%A1%80/"/>
      <url>/2019/08/20/Python/Python%E4%B9%8B%E6%97%85/Python%E4%B9%8B%E6%97%85%EF%BC%9A%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="Windows环境下安装Py2和Py3"><a href="#Windows环境下安装Py2和Py3" class="headerlink" title="Windows环境下安装Py2和Py3"></a>Windows环境下安装Py2和Py3</h1><h2 id="一-python-安装"><a href="#一-python-安装" class="headerlink" title="一.  python 安装"></a>一.  python 安装</h2><ol><li>下载安装包</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://www.python.org/ftp/python/2.7.14/python-2.7.14.amd64.msi    # 2.7安装包</span><br><span class="line"> </span><br><span class="line">https://www.python.org/ftp/python/3.6.4/python-3.6.4-amd64.exe      # 3.6安装包</span><br></pre></td></tr></table></figure><ol><li>安装python3.6</li></ol><p>增加环境变量</p><p><img src="1028337-20180119143831099-1410392008.png" alt="img"></p><p><img src="1028337-20180119143831099-1410392008.png" alt="img"></p><p><img src="1028337-20180119153732818-1905626517.png" alt="img"></p><ol><li>在命令行测试</li></ol><p><img src="1028337-20180119151034865-1283017490.png" alt="img"></p><ol><li>安装python2.7</li></ol><p><img src="1028337-20180119145420443-863927478.png" alt="img"></p><p><img src="1028337-20180119145507615-958394017.png" alt="img"></p><p><img src="1028337-20180119145545209-50082259.png" alt="img"></p><ol><li>将python2增加到环境变量里</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Python27\Scripts\;C:\Python27\;</span><br></pre></td></tr></table></figure><ol><li>将C: Python27目录下的python.exe 和pythonw.exe 改为python2.exe 和pythonw2.exe </li></ol><p><img src="1028337-20180119150551474-214047659.png" alt="img"> </p><ol><li>将C: Python36目录下的python.exe 和pythonw.exe 改为python3.exe 和pythonw3.exe </li></ol><p><img src="1028337-20180119152542943-38946817.png" alt="img"></p><ol><li>此时在命令行输入python3代表python3  输入python2代表python2</li></ol><p><img src="1028337-20180119152657287-1176950512.png" alt="img"></p><h2 id="二-pip安装"><a href="#二-pip安装" class="headerlink" title="二. pip安装"></a>二. pip安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">在cmd上执行</span> </span><br><span class="line">python3 -m pip install --upgrade pip --force-reinstall</span><br><span class="line">python2 -m pip install --upgrade pip --force-reinstall</span><br><span class="line"> </span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看pip版本</span></span><br><span class="line"> </span><br><span class="line">pip3 -V</span><br><span class="line">pip2 -V</span><br></pre></td></tr></table></figure><p><img src="1028337-20180119152223709-147692066.png" alt="img"></p><h1 id="Python简介以及入门"><a href="#Python简介以及入门" class="headerlink" title="Python简介以及入门"></a>Python简介以及入门</h1><h2 id="一、python介绍"><a href="#一、python介绍" class="headerlink" title="一、python介绍"></a>一、python介绍</h2><p>　　python的创始人为吉多·范罗苏姆（Guido van Rossum）。1989年的圣诞节期间，Guido开始写Python语言的编译器。Python这个名字，来自Guido所挚爱的电视剧Monty Python’s Flying Circus。他希望这个新的叫做Python的语言，能符合他的理想：创造一种C和shell之间，功能全面，易学易用，可拓展的语言。</p><p>最新的TIOBE排行榜，Python赶超PHP占据第4， Python崇尚优美、清晰、简单，是一个优秀并广泛使用的语言。</p><p>Python可以应用于众多领域，如：数据分析、组件集成、网络服务、图像处理、数值计算和科学计算等众多领域。目前业内几乎所有大中型互联网企业都在使用Python，如：Youtube、Dropbox、BT、Quora（中国知乎）、豆瓣、知乎、Google、Yahoo!、Facebook、NASA、百度、腾讯、汽车之家、美团等。</p><h2 id="二、目前python的主要领域"><a href="#二、目前python的主要领域" class="headerlink" title="二、目前python的主要领域"></a>二、目前python的主要领域</h2><ol><li>WEB开发——最火的Python web框架Django, 支持异步高并发的Tornado框架，短小精悍的flask,bottle, Django官方的标语把Django定义为the framework for perfectionist with deadlines(大意是一个为完全主义者开发的高效率web框架)</li><li>网络编程——支持高并发的Twisted网络框架， py3引入的asyncio使异步编程变的非常简单</li><li>爬虫——爬虫领域，Python几乎是霸主地位，Scrapy\Request\BeautifuSoap\urllib等，想爬啥就爬啥</li><li>云计算——目前最火最知名的云计算框架就是OpenStack,Python现在的火，很大一部分就是因为云计算</li><li>人工智能——谁会成为AI 和大数据时代的第一开发语言？这本已是一个不需要争论的问题。如果说三年前，Matlab、Scala、R、Java 和 Python还各有机会，局面尚且不清楚，那么三年之后，趋势已经非常明确了，特别是前两天 Facebook 开源了 PyTorch 之后，Python 作为 AI 时代头牌语言的位置基本确立，未来的悬念仅仅是谁能坐稳第二把交椅。</li><li>自动化运维——问问中国的每个运维人员，运维人员必须会的语言是什么？10个人相信会给你一个相同的答案，它的名字叫Python</li><li>金融分析——我个人之前在金融行业，10年的时候，我们公司写的好多分析程序、高频交易软件就是用的Python,到目前,Python是金融分析、量化交易领域里用的最多的语言</li><li>科学运算—— 你知道么,97年开始，NASA就在大量使用Python在进行各种复杂的科学运算，随着NumPy, SciPy, Matplotlib, Enthought librarys等众多程序库的开发，使的Python越来越适合于做科学计算、绘制高质量的2D和3D图像。和科学计算领域最流行的商业软件Matlab相比，Python是一门通用的程序设计语言，比Matlab所采用的脚本语言的应用范围更广泛</li><li>游戏开发——在网络游戏开发中Python也有很多应用。相比Lua or C++,Python 比 Lua 有更高阶的抽象能力，可以用更少的代码描述游戏业务逻辑，与 Lua 相比，Python 更适合作为一种 Host 语言，即程序的入口点是在 Python 那一端会比较好，然后用 C/C++ 在非常必要的时候写一些扩展。Python 非常适合编写 1 万行以上的项目，而且能够很好地把网游项目的规模控制在 10 万行代码以内。另外据我所知，知名的游戏&lt;文明&gt; 就是用Python写的</li></ol><h2 id="三、Python在一些公司的应用"><a href="#三、Python在一些公司的应用" class="headerlink" title="三、Python在一些公司的应用"></a>三、Python在一些公司的应用</h2><ul><li>谷歌：Google App Engine 、code.google.com 、Google earth 、谷歌爬虫、Google广告等项目都在大量使用Python开发</li><li>CIA: 美国中情局网站就是用Python开发的</li><li>NASA: 美国航天局(NASA)大量使用Python进行数据分析和运算</li><li>YouTube:世界上最大的视频网站YouTube就是用Python开发的</li><li>Dropbox:美国最大的在线云存储网站，全部用Python实现，每天网站处理10亿个文件的上传和下载</li><li>Instagram:美国最大的图片分享社交网站，每天超过3千万张照片被分享，全部用python开发</li><li>Facebook:大量的基础库均通过Python实现的</li><li>Redhat: 世界上最流行的Linux发行版本中的yum包管理工具就是用python开发的</li><li>豆瓣: 公司几乎所有的业务均是通过Python开发的</li><li>知乎: 国内最大的问答社区，通过Python开发(国外Quora)</li><li>春雨医生：国内知名的在线医疗网站是用Python开发的</li><li>除上面之外，还有搜狐、金山、腾讯、盛大、网易、百度、阿里、淘宝 、土豆、新浪、果壳等公司都在使用Python完成各种各样的任务。</li></ul><h2 id="三、Python的发展史"><a href="#三、Python的发展史" class="headerlink" title="三、Python的发展史"></a>三、Python的发展史</h2><p>　　1989年，Guido开始写Python语言的编译器。</p><p>　　1991年，第一个Python编译器诞生。它是用C语言实现的，并能够调用C语言的库文件。从一出生，Python已经具有了：类，函数，异常处理，包含表和词典在内的核心数据类型，以及模块为基础的拓展系统。</p><p>　　Granddaddy of Python web frameworks, Zope 1 was released in 1999</p><p>　　Python 1.0 - January 1994 增加了 lambda, map, filter and reduce.</p><p>　　Python 2.0 - October 16, 2000，加入了内存回收机制，构成了现在Python语言框架的基础</p><p>　　Python 2.4 - November 30, 2004, 同年目前最流行的WEB框架Django 诞生</p><p>　　Python 2.5 - September 19, 2006</p><p>　　Python 2.6 - October 1, 2008</p><p>　　Python 2.7 - July 3, 2010</p><p>　　In November 2014, it was announced that Python 2.7 would be supported until 2020, and reaffirmed that there would be no 2.8 release as users were expected to move to Python 3.4+ as soon as possible</p><p>　　Python 3.0 - December 3, 2008 (这里要解释清楚 为什么08年就出3.0，2010年反而又推出了2.7？是因为3.0不向下兼容2.0，导致大家都拒绝升级3.0，无奈官方只能推出2.7过渡版本)</p><p>　　Python 3.1 - June 27, 2009</p><p>　　Python 3.2 - February 20, 2011</p><p>　　Python 3.3 - September 29, 2012</p><p>　　Python 3.4 - March 16, 2014</p><p>　　Python 3.5 - September 13, 2015</p><p>　　Python 3.6 - 2016-12-23 发布python3.6.0版</p><h2 id="四、Python有哪些种类？"><a href="#四、Python有哪些种类？" class="headerlink" title="四、Python有哪些种类？"></a>四、Python有哪些种类？</h2><p>Cpython,Ipython,PyPy,Jpython,IronPython</p><h1 id="Hello-World！"><a href="#Hello-World！" class="headerlink" title="Hello World！"></a>Hello World！</h1><h2 id="强调：python解释器执行程序是解释执行，即打开文件读内容，因此文件的后缀名没有硬性限制，但通常定义为-py结尾"><a href="#强调：python解释器执行程序是解释执行，即打开文件读内容，因此文件的后缀名没有硬性限制，但通常定义为-py结尾" class="headerlink" title="强调：python解释器执行程序是解释执行，即打开文件读内容，因此文件的后缀名没有硬性限制，但通常定义为.py结尾"></a>强调：python解释器执行程序是解释执行，即打开文件读内容，因此文件的后缀名没有硬性限制，但通常定义为.py结尾</h2><p> 各种语言的hello world，看一看还是python的简单</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#C++</span></span><br><span class="line"><span class="comment">#include &lt;iostream&gt;</span></span><br><span class="line"> <span class="built_in">int</span> main(void)</span><br><span class="line"> &#123;</span><br><span class="line">  std::cout&lt;&lt;<span class="string">&quot;Hello world&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#C</span></span><br><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="built_in">int</span> main(void)</span><br><span class="line">&#123;</span><br><span class="line">printf(<span class="string">&quot;\nhello world!&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#JAVA</span></span><br><span class="line">public <span class="keyword">class</span> <span class="title class_">HelloWorld</span>&#123;</span><br><span class="line">  // 程序的入口</span><br><span class="line">  public static void main(String args[])&#123;</span><br><span class="line">    // 向控制台输出信息</span><br><span class="line">    System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#PHP</span></span><br><span class="line">&lt;?php  </span><br><span class="line">             echo <span class="string">&quot;hello world!&quot;</span>;  </span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#Ruby</span></span><br><span class="line">日本人开发的，砸日本车的时候，顺手就把你拖出去打死了，祭天</span><br><span class="line"> puts <span class="string">&quot;Hello world.&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#GO</span></span><br><span class="line">package main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line">func main()&#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;Hello World!\n God Bless You!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#Python</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello World&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="用户交互"><a href="#用户交互" class="headerlink" title="用户交互"></a>用户交互</h2><p>古时候，我们去银行取钱，需要有一个银行业务员等着我们把自己的账号密码输入给他，然后他去进行验证，成功后，我们再将取款金额输入/告诉他</p><p>  骄傲的现代人，会为客户提供一台ATM机（就是一台计算机），让ATM机跟用户交互，从而取代人力。然而机器是死的，我们必须为其编写程序来运行，这就要求我们的编程语言中能够有一种能与用户交互，接收用户输入数据的机制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在python3中</span></span><br><span class="line"><span class="built_in">input</span>：用户输入任何值，都存成字符串类型</span><br><span class="line"></span><br><span class="line"><span class="comment">#在python2中</span></span><br><span class="line"><span class="built_in">input</span>：用户输入什么类型，就存成什么类型</span><br><span class="line">raw_input：等于python3的<span class="built_in">input</span></span><br></pre></td></tr></table></figure><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>  随着学习的深入，用不了多久，你就可以写复杂的上千甚至上万行的代码啦，有些代码你花了很久写出来，过了些天再回去看，发现竟然看不懂了，这太正常了。 另外，你以后在工作中会发现，一个项目多是由几个甚至几十个开发人员一起做，你要调用别人写的代码，别人也要用你的，如果代码不加注释，你自己都看不懂，更别说别人了，这产会挨打的。所以为了避免这种尴尬的事情发生，一定要增加你代码的可读性。</p><p>代码注释分单行和多行注释， 单行注释用<code>#</code>，多行注释可以用三对双引号<code>&quot;&quot;&quot; &quot;&quot;&quot;</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">代码注释的原则：</span><br><span class="line">    <span class="comment">#1. 不用全部加注释，只需要在自己觉得重要或不好理解的部分加注释即可</span></span><br><span class="line">    <span class="comment">#2. 注释可以用中文或英文，但不要用拼音</span></span><br><span class="line">文件头</span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*- </span></span><br></pre></td></tr></table></figure><h1 id="Python之数据类型"><a href="#Python之数据类型" class="headerlink" title="Python之数据类型"></a>Python之数据类型</h1><h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>1 什么是数据？ </p><p>　　x=10，10是我们要存储的数据</p><p>2 为何数据要分不同的类型 </p><p>　　数据是用来表示状态的，不同的状态就应该用不同的类型的数据去表示</p><p>3 数据类型 </p><p>　　数字（整形，长整形，浮点型，复数）</p><p>　　字节串 ( 在介绍字符编码时介绍字节bytes类型 )</p><p>　　列表</p><p>　　元组</p><p>　　字典</p><p>　　集合</p><p>4 按照以下几个点展开数据类型的学习 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#======================================基本使用======================================</span></span><br><span class="line"><span class="comment">#1、用途</span></span><br><span class="line"><span class="comment">#2、定义方式</span></span><br><span class="line"><span class="comment">#3、常用操作+内置的方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#======================================该类型总结====================================</span></span><br><span class="line">存一个值<span class="keyword">or</span>存多个值</span><br><span class="line">有序<span class="keyword">or</span>无序</span><br><span class="line">可变<span class="keyword">or</span>不可变（<span class="number">1</span>、可变：值变，<span class="built_in">id</span>不变。可变==不可<span class="built_in">hash</span> <span class="number">2</span>、不可变：值变，<span class="built_in">id</span>就变。不可变==可<span class="built_in">hash</span>）</span><br></pre></td></tr></table></figure><h2 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#整型int</span></span><br><span class="line">　　作用：年纪，等级，身份证号，qq号等整型数字相关</span><br><span class="line">　　定义：</span><br><span class="line">　　　　age=<span class="number">10</span> <span class="comment">#本质age=int(10)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#浮点型float</span></span><br><span class="line">　　作用：薪资，身高，体重，体质参数等浮点数相关</span><br><span class="line"></span><br><span class="line">    salary=<span class="number">3000.3</span> <span class="comment">#本质salary=float(3000.3)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#二进制，十进制，八进制，十六进制 </span></span><br><span class="line"><span class="number">1.</span><span class="built_in">bin</span>()函数将十进制转换成而进制</span><br><span class="line"><span class="number">2.</span><span class="built_in">oct</span>()函数将十进制转换成八进制</span><br><span class="line"><span class="number">3.</span><span class="built_in">hex</span>()函数将十进制转换成十六进制   </span><br><span class="line"></span><br><span class="line"><span class="comment">#长整形（了解）</span></span><br><span class="line">    在python2中（python3中没有长整形的概念）：　　　　　　</span><br><span class="line">    &gt;&gt;&gt; num=<span class="number">2L</span></span><br><span class="line">    &gt;&gt;&gt; <span class="built_in">type</span>(num)</span><br><span class="line">    &lt;<span class="built_in">type</span> <span class="string">&#x27;long&#x27;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#复数（了解）　　</span></span><br><span class="line">    &gt;&gt;&gt; x=<span class="number">1</span>-<span class="number">2j</span></span><br><span class="line">    &gt;&gt;&gt; x.real</span><br><span class="line">    <span class="number">1.0</span></span><br><span class="line">    &gt;&gt;&gt; x.imag</span><br><span class="line">    -<span class="number">2.0</span>　　</span><br></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#作用：名字，性别，国籍，地址等描述信息</span></span><br><span class="line"><span class="comment">#定义：在单引号\双引号\三引号内，由一串字符组成</span></span><br></pre></td></tr></table></figure><h3 id="s-d"><a href="#s-d" class="headerlink" title="%s,%d"></a>%s,%d</h3><p>举例1：name=’allen’</p><p>　　　  age=20</p><p>　　　  print(“my name is %s  my age is %s” %(name,age))#%s既能接受字符串，也能接受数字</p><p>　　　  print(‘my name is %s  my age is %d’ %(name,age))#%d只能接受数字</p><p>举例2：用户信息的显示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    name=<span class="built_in">input</span>(<span class="string">&quot;name:&quot;</span>)</span><br><span class="line">    age=<span class="built_in">input</span>(<span class="string">&quot;age:&quot;</span>)</span><br><span class="line">    sex=<span class="built_in">input</span>(<span class="string">&quot;sex:&quot;</span>)</span><br><span class="line">    height=<span class="built_in">input</span>(<span class="string">&quot;height:&quot;</span>)</span><br><span class="line">    msg=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">             ------------%s info-----------</span></span><br><span class="line"><span class="string">             name:%s</span></span><br><span class="line"><span class="string">             age:%s</span></span><br><span class="line"><span class="string">             sex:%s</span></span><br><span class="line"><span class="string">             height:%s</span></span><br><span class="line"><span class="string">             ------------------------------</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span>%(name,name,age,sex,heigth)</span><br><span class="line">    <span class="built_in">print</span>(msg)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="1184802-20170719164041365-1914275664.png" alt="img"></p><h3 id="type"><a href="#type" class="headerlink" title="type"></a>type</h3><p><img src="1184802-20180204162658685-1757696752.png" alt="img"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="string">&#x27;allen&#x27;</span> <span class="comment">#name=str(&#x27;allen&#x27;)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(name))</span><br></pre></td></tr></table></figure><p>优先掌握</p><h3 id="移除"><a href="#移除" class="headerlink" title="移除"></a>移除</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.移除空白strip</span></span><br><span class="line">msg=<span class="string">&#x27;             hello         &#x27;</span></span><br><span class="line"><span class="built_in">print</span>(msg)</span><br><span class="line"><span class="built_in">print</span>(msg.strip())</span><br><span class="line">移除‘*’</span><br><span class="line">msg=<span class="string">&#x27;***hello*********&#x27;</span></span><br><span class="line">msg=msg.strip(<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(msg)</span><br><span class="line"><span class="comment">#移除左边的</span></span><br><span class="line"><span class="built_in">print</span>(msg.lstrip(<span class="string">&#x27;*&#x27;</span>))</span><br><span class="line"><span class="comment">#移除右边的</span></span><br><span class="line"><span class="built_in">print</span>(msg.rstrip(<span class="string">&#x27;*&#x27;</span>))</span><br><span class="line"> </span><br><span class="line"><span class="comment">#用处</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    name=<span class="built_in">input</span>(<span class="string">&#x27;user: &#x27;</span>).strip()</span><br><span class="line">    password=<span class="built_in">input</span>(<span class="string">&#x27;password: &#x27;</span>).strip()</span><br><span class="line">    <span class="keyword">if</span> name == <span class="string">&#x27;allen&#x27;</span> <span class="keyword">and</span> password == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;login successfull&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="切分"><a href="#切分" class="headerlink" title="切分"></a>切分</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#切分split</span></span><br><span class="line">info=<span class="string">&#x27;root:x:0:0::/root:/bin/bash&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(info[<span class="number">0</span>]+info[<span class="number">1</span>]+info[<span class="number">2</span>]+info[<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">user_l=info.split(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(user_l[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">msg=<span class="string">&#x27;hello world allen say hahah&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(msg.split()) <span class="comment">#默认以空格作为分隔符</span></span><br><span class="line"> </span><br><span class="line">cmd=<span class="string">&#x27;download|xhp.mov|3000&#x27;</span></span><br><span class="line">cmd_l=cmd.split(<span class="string">&#x27;|&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(cmd_l[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(cmd_l[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(cmd.split(<span class="string">&#x27;|&#x27;</span>,<span class="number">1</span>))</span><br><span class="line"> </span><br><span class="line"><span class="comment">#用处</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    cmd=<span class="built_in">input</span>(<span class="string">&#x27;&gt;&gt;:　&#x27;</span>).strip()</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(cmd) == <span class="number">0</span>:<span class="keyword">continue</span></span><br><span class="line">    cmd_l=cmd.split()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;命令是:%s 命令的参数是:%s&#x27;</span> %(cmd_l[<span class="number">0</span>],cmd_l[<span class="number">1</span>]))</span><br></pre></td></tr></table></figure><h3 id="长度"><a href="#长度" class="headerlink" title="长度"></a>长度</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#长度len</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(<span class="string">&#x27;hell 123&#x27;</span>))</span><br></pre></td></tr></table></figure><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#索引</span></span><br><span class="line">切片:切出子字符串</span><br><span class="line">msg=<span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(msg[<span class="number">1</span>:<span class="number">3</span>]) <span class="comment">#1 2</span></span><br><span class="line"><span class="built_in">print</span>(msg[<span class="number">1</span>:<span class="number">4</span>]) <span class="comment">#1 2 3</span></span><br></pre></td></tr></table></figure><h3 id="判断字符串开头or结尾"><a href="#判断字符串开头or结尾" class="headerlink" title="判断字符串开头or结尾"></a>判断字符串开头or结尾</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#startswith,endswith</span></span><br><span class="line">name=<span class="string">&#x27;alex_SB&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(name.endswith(<span class="string">&#x27;SB&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(name.startswith(<span class="string">&#x27;alex&#x27;</span>))</span><br></pre></td></tr></table></figure><h3 id="字符串替换"><a href="#字符串替换" class="headerlink" title="字符串替换"></a>字符串替换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#replace</span></span><br><span class="line">name=<span class="string">&#x27;alex say :i have one tesla,my name is alex&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(name.replace(<span class="string">&#x27;alex&#x27;</span>,<span class="string">&#x27;SB&#x27;</span>,<span class="number">1</span>))</span><br></pre></td></tr></table></figure><h3 id="format与-s-python3建议用format"><a href="#format与-s-python3建议用format" class="headerlink" title="format与%s,python3建议用format"></a>format与%s,python3建议用format</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;my name is %s my age is %s my sex is %s&#x27;</span> %(<span class="string">&#x27;allen&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;male&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;my name is &#123;&#125; my age is &#123;&#125; my sex is &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;allen&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;male&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;my name is &#123;0&#125; my age is &#123;1&#125; my sex is &#123;0&#125;:&#123;2&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;allen&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;male&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;my name is &#123;name&#125; my age is &#123;age&#125; my sex is &#123;sex&#125;&#x27;</span>.<span class="built_in">format</span>(sex=<span class="string">&#x27;male&#x27;</span>,age=<span class="number">18</span>,name=<span class="string">&#x27;allen&#x27;</span>))</span><br></pre></td></tr></table></figure><h3 id="find-index-count"><a href="#find-index-count" class="headerlink" title="find,index,count"></a>find,index,count</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="string">&#x27;goee say hello&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(name.find(<span class="string">&#x27;S&#x27;</span>,<span class="number">1</span>,<span class="number">3</span>)) <span class="comment">#顾头不顾尾,找不到则返回-1不会报错,找到了则显示索引</span></span><br><span class="line"><span class="built_in">print</span>(name.index(<span class="string">&#x27;S&#x27;</span>)) <span class="comment">#同上,但是找不到会报错</span></span><br><span class="line"><span class="built_in">print</span>(name.count(<span class="string">&#x27;S&#x27;</span>,<span class="number">1</span>,<span class="number">5</span>)) <span class="comment">#顾头不顾尾,如果不指定范围则查找所有</span></span><br></pre></td></tr></table></figure><h3 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#join</span></span><br><span class="line">info=<span class="string">&#x27;root:x:0:0::/root:/bin/bash&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(info.split(<span class="string">&#x27;:&#x27;</span>))</span><br><span class="line"></span><br><span class="line">l=[<span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;/root&#x27;</span>, <span class="string">&#x27;/bin/bash&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;:&#x27;</span>.join(l))</span><br></pre></td></tr></table></figure><h3 id="转换大小写"><a href="#转换大小写" class="headerlink" title="转换大小写"></a>转换大小写</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#lower,upper</span></span><br><span class="line">name=<span class="string">&#x27;eGon&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(name.lower())</span><br><span class="line"><span class="built_in">print</span>(name.upper())</span><br></pre></td></tr></table></figure><p>了解部分</p><h3 id="把tab符号（’-t’）转为空格"><a href="#把tab符号（’-t’）转为空格" class="headerlink" title="把tab符号（’\ t’）转为空格"></a>把tab符号（’\ t’）转为空格</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#expandtabs</span></span><br><span class="line">name=<span class="string">&#x27;allen\thello&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(name)</span><br><span class="line"><span class="built_in">print</span>(name.expandtabs(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><h3 id="左-右-居中-填充"><a href="#左-右-居中-填充" class="headerlink" title="左,右,居中-填充"></a>左,右,居中-填充</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#center,ljust,rjust,zfill</span></span><br><span class="line">name=<span class="string">&#x27;allen&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(name.center(<span class="number">30</span>,<span class="string">&#x27;-&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(name.ljust(<span class="number">30</span>,<span class="string">&#x27;*&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(name.rjust(<span class="number">30</span>,<span class="string">&#x27;*&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(name.zfill(<span class="number">50</span>)) <span class="comment">#用0填充</span></span><br></pre></td></tr></table></figure><h3 id="首字母大小写-大小写翻转"><a href="#首字母大小写-大小写翻转" class="headerlink" title="首字母大小写,大小写翻转"></a>首字母大小写,大小写翻转</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#captalize,swapcase,title</span></span><br><span class="line">name=<span class="string">&#x27;eGon&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(name.capitalize()) <span class="comment">#首字母大写,其余部分小写</span></span><br><span class="line"><span class="built_in">print</span>(name.swapcase()) <span class="comment">#大小写翻转</span></span><br><span class="line">msg=<span class="string">&#x27;allen say hi&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(msg.title()) <span class="comment">#每个单词的首字母大写</span></span><br></pre></td></tr></table></figure><h3 id="字符串-数字"><a href="#字符串-数字" class="headerlink" title="字符串-数字"></a>字符串-数字</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在python3中</span></span><br><span class="line">num0=<span class="string">&#x27;4&#x27;</span></span><br><span class="line">num1=<span class="string">b&#x27;4&#x27;</span> <span class="comment">#bytes</span></span><br><span class="line">num2=<span class="string">u&#x27;4&#x27;</span> <span class="comment">#unicode,python3中无需加u就是unicode</span></span><br><span class="line">num3=<span class="string">&#x27;四&#x27;</span> <span class="comment">#中文数字</span></span><br><span class="line">num4=<span class="string">&#x27;Ⅳ&#x27;</span> <span class="comment">#罗马数字</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">#isdigt:str,bytes,unicode</span></span><br><span class="line"><span class="built_in">print</span>(num0.isdigit())</span><br><span class="line"><span class="built_in">print</span>(num1.isdigit())</span><br><span class="line"><span class="built_in">print</span>(num2.isdigit())</span><br><span class="line"><span class="built_in">print</span>(num3.isdigit())</span><br><span class="line"><span class="built_in">print</span>(num4.isdigit())</span><br><span class="line"> </span><br><span class="line"><span class="comment">#isdecimal:str,unicode</span></span><br><span class="line">num0=<span class="string">&#x27;4&#x27;</span></span><br><span class="line">num1=<span class="string">b&#x27;4&#x27;</span> <span class="comment">#bytes</span></span><br><span class="line">num2=<span class="string">u&#x27;4&#x27;</span> <span class="comment">#unicode,python3中无需加u就是unicode</span></span><br><span class="line">num3=<span class="string">&#x27;四&#x27;</span> <span class="comment">#中文数字</span></span><br><span class="line">num4=<span class="string">&#x27;Ⅳ&#x27;</span> <span class="comment">#罗马数字</span></span><br><span class="line"><span class="built_in">print</span>(num0.isdecimal())</span><br><span class="line"><span class="built_in">print</span>(num1)</span><br><span class="line"><span class="built_in">print</span>(num2.isdecimal())</span><br><span class="line"><span class="built_in">print</span>(num3.isdecimal())</span><br><span class="line"><span class="built_in">print</span>(num4.isdecimal())</span><br><span class="line"> </span><br><span class="line"><span class="comment">#isnumeric:str,unicode,中文，罗马</span></span><br><span class="line">num0=<span class="string">&#x27;4&#x27;</span></span><br><span class="line">num1=<span class="string">b&#x27;4&#x27;</span> <span class="comment">#bytes</span></span><br><span class="line">num2=<span class="string">u&#x27;4&#x27;</span> <span class="comment">#unicode,python3中无需加u就是unicode</span></span><br><span class="line">num3=<span class="string">&#x27;四&#x27;</span> <span class="comment">#中文数字</span></span><br><span class="line">num4=<span class="string">&#x27;Ⅳ&#x27;</span> <span class="comment">#罗马数字</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(num0.isnumeric())</span><br><span class="line"><span class="built_in">print</span>(num1)</span><br><span class="line"><span class="built_in">print</span>(num2.isnumeric())</span><br><span class="line"><span class="built_in">print</span>(num3.isnumeric())</span><br><span class="line"><span class="built_in">print</span>(num4.isnumeric())</span><br></pre></td></tr></table></figure><h3 id="is开头的其他用法"><a href="#is开头的其他用法" class="headerlink" title="is开头的其他用法"></a>is开头的其他用法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#is其他</span></span><br><span class="line">name=<span class="string">&#x27;allen123&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(name.isalnum()) <span class="comment">#字符串由字母和数字组成</span></span><br><span class="line">name=<span class="string">&#x27;asdfasdfa sdf&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(name.isalpha()) <span class="comment">#字符串只由字母组成</span></span><br><span class="line"></span><br><span class="line">name=<span class="string">&#x27;asdfor123&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(name.isidentifier()) <span class="comment"># 用于判断字符串是否是有效的 Python 标识符，可用来判断变量名是否合法</span></span><br><span class="line">name=<span class="string">&#x27;allen&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(name.islower())  <span class="comment"># 检测字符串是否由小写字母组成</span></span><br><span class="line"><span class="built_in">print</span>(name.isupper())  <span class="comment"># 检测字符串中所有的字母是否都为大写</span></span><br><span class="line"><span class="built_in">print</span>(name.isspace())  <span class="comment"># 检测字符串是否只由空格组成</span></span><br><span class="line">name=<span class="string">&#x27;allen say&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(name.istitle())  <span class="comment"># 检测字符串中所有的单词拼写首字母是否为大写，且其他字母为小写</span></span><br></pre></td></tr></table></figure><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#作用：多个装备，多个爱好，多门课程，多个女朋友等</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#定义：[]内可以有多个任意类型的值，逗号分隔</span></span><br><span class="line">my_girl_friends=[<span class="string">&#x27;lurac&#x27;</span>,<span class="string">&#x27;wupeiqi&#x27;</span>,<span class="string">&#x27;yuanhao&#x27;</span>,<span class="number">4</span>,<span class="number">5</span>] <span class="comment">#本质my_girl_friends=list([...])</span></span><br><span class="line">或</span><br><span class="line">l=<span class="built_in">list</span>(<span class="string">&#x27;abc&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="按索引存取值-切片"><a href="#按索引存取值-切片" class="headerlink" title="按索引存取值,切片"></a>按索引存取值,切片</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 顾头不顾尾，步长</span></span><br><span class="line">l=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(l[<span class="number">5</span>])</span><br><span class="line"><span class="built_in">print</span>(l(-<span class="number">3</span>))</span><br><span class="line"><span class="comment"># print(l[1:5])</span></span><br><span class="line"><span class="comment"># print(l[1:5:2])</span></span><br><span class="line"><span class="comment"># print(l[2:5])</span></span><br><span class="line"><span class="comment"># print(l[-1])</span></span><br><span class="line"><span class="comment">#了解</span></span><br><span class="line"><span class="comment"># print(l[-1:-4])</span></span><br><span class="line"><span class="comment"># print(l[-4:])</span></span><br><span class="line"><span class="comment"># print(l[-2:])</span></span><br></pre></td></tr></table></figure><h3 id="长度-1"><a href="#长度-1" class="headerlink" title="长度"></a>长度</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hobbies=[<span class="string">&#x27;play&#x27;</span>,<span class="string">&#x27;eat&#x27;</span>,<span class="string">&#x27;sleep&#x27;</span>,<span class="string">&#x27;study&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(hobbies))</span><br></pre></td></tr></table></figure><h3 id="成员运算in和not-in"><a href="#成员运算in和not-in" class="headerlink" title="成员运算in和not in"></a>成员运算in和not in</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># in或者not in 一般用于if判断，</span></span><br><span class="line">hobbies=[<span class="string">&#x27;play&#x27;</span>,<span class="string">&#x27;eat&#x27;</span>,<span class="string">&#x27;sleep&#x27;</span>,<span class="string">&#x27;study&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;sleep&#x27;</span> <span class="keyword">in</span> hobbies)</span><br><span class="line"></span><br><span class="line">msg=<span class="string">&#x27;hello world allen&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;allen&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> msg)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="追加"><a href="#追加" class="headerlink" title="追加"></a>追加</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hobbies=[<span class="string">&#x27;play&#x27;</span>,<span class="string">&#x27;eat&#x27;</span>,<span class="string">&#x27;sleep&#x27;</span>,<span class="string">&#x27;study&#x27;</span>]</span><br><span class="line">hobbies.append(<span class="string">&#x27;girls&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(hobbies)</span><br></pre></td></tr></table></figure><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定索引插入</span></span><br><span class="line">hobbies=[<span class="string">&#x27;play&#x27;</span>,<span class="string">&#x27;eat&#x27;</span>,<span class="string">&#x27;sleep&#x27;</span>,<span class="string">&#x27;study&#x27;</span>,<span class="string">&#x27;eat&#x27;</span>,<span class="string">&#x27;eat&#x27;</span>]</span><br><span class="line">hobbies.insert(<span class="number">1</span>,<span class="string">&#x27;walk&#x27;</span>)</span><br><span class="line">hobbies.insert(<span class="number">1</span>,[<span class="string">&#x27;walk1&#x27;</span>,<span class="string">&#x27;walk2&#x27;</span>,<span class="string">&#x27;walk3&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(hobbies)</span><br><span class="line"><span class="comment"># [&#x27;play&#x27;, [&#x27;walk1&#x27;, &#x27;walk2&#x27;, &#x27;walk3&#x27;], &#x27;walk&#x27;, &#x27;eat&#x27;, &#x27;sleep&#x27;, &#x27;study&#x27;, &#x27;eat&#x27;, &#x27;eat&#x27;]</span></span><br><span class="line"><span class="comment"># count 列表里包含的有几个；extend</span></span><br><span class="line"><span class="built_in">print</span>(hobbies.count(<span class="string">&#x27;eat&#x27;</span>)) <span class="comment"># 3</span></span><br><span class="line"><span class="comment"># extend() 函数用于在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）</span></span><br><span class="line">hobbies.extend([<span class="string">&#x27;walk1&#x27;</span>,<span class="string">&#x27;walk2&#x27;</span>,<span class="string">&#x27;walk3&#x27;</span>])</span><br><span class="line"><span class="comment"># [&#x27;play&#x27;, [&#x27;walk1&#x27;, &#x27;walk2&#x27;, &#x27;walk3&#x27;], &#x27;walk&#x27;, &#x27;eat&#x27;, &#x27;sleep&#x27;, &#x27;study&#x27;, &#x27;eat&#x27;, &#x27;eat&#x27;, &#x27;walk1&#x27;, &#x27;walk2&#x27;, &#x27;walk3&#x27;]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="清空-复制-翻转-排序"><a href="#清空-复制-翻转-排序" class="headerlink" title="清空 复制 翻转 排序"></a>清空 复制 翻转 排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 清空</span></span><br><span class="line">hobbies=[<span class="string">&#x27;play&#x27;</span>,<span class="string">&#x27;eat&#x27;</span>,<span class="string">&#x27;sleep&#x27;</span>,<span class="string">&#x27;study&#x27;</span>,<span class="string">&#x27;eat&#x27;</span>,<span class="string">&#x27;eat&#x27;</span>]</span><br><span class="line">hobbies.clear()</span><br><span class="line"><span class="comment"># []</span></span><br><span class="line"><span class="comment"># 复制</span></span><br><span class="line">l=hobbies.copy()</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line"><span class="comment"># [&#x27;play&#x27;, &#x27;eat&#x27;, &#x27;sleep&#x27;, &#x27;study&#x27;, &#x27;eat&#x27;, &#x27;eat&#x27;]</span></span><br><span class="line"><span class="comment"># 翻转</span></span><br><span class="line">l=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">l.reverse()</span><br><span class="line"><span class="comment"># [0, 5, 4, 3, 2, 1]</span></span><br><span class="line"><span class="comment"># 排序</span></span><br><span class="line"><span class="comment"># sort 与 sorted 区别：</span></span><br><span class="line"><span class="comment"># sort 是应用在 list 上的方法，sorted 可以对所有可迭代的对象进行排序操作。</span></span><br><span class="line"><span class="comment"># list 的 sort 方法返回的是对已经存在的列表进行操作，而内建函数 sorted 方法返回的是一个新的list，而不是在原来的基础上进行的操作。</span></span><br><span class="line">l=[<span class="number">100</span>,<span class="number">9</span>,-<span class="number">2</span>,<span class="number">11</span>,<span class="number">32</span>]</span><br><span class="line">l.sort(reverse=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">l=<span class="built_in">sorted</span>(l)</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line"><span class="comment"># # [100, 32, 11, 9, -2]</span></span><br></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hobbies=[<span class="string">&#x27;play&#x27;</span>,<span class="string">&#x27;eat&#x27;</span>,<span class="string">&#x27;sleep&#x27;</span>,<span class="string">&#x27;study&#x27;</span>]</span><br><span class="line">x=hobbies.pop(<span class="number">1</span>) <span class="comment">#不是单纯的删除，是删除并且把删除的元素返回，我们可以用一个变量名去接收该返回值</span></span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="built_in">print</span>(hobbies)</span><br><span class="line"></span><br><span class="line"><span class="comment">#了解</span></span><br><span class="line"><span class="keyword">del</span> hobbies[<span class="number">1</span>] <span class="comment">#单纯的删除</span></span><br><span class="line">hobbies.remove(<span class="string">&#x27;eat&#x27;</span>) <span class="comment">#单纯的删除，并且是指定元素去删除</span></span><br></pre></td></tr></table></figure><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hobbies=[<span class="string">&#x27;play&#x27;</span>,<span class="string">&#x27;eat&#x27;</span>,<span class="string">&#x27;sleep&#x27;</span>,<span class="string">&#x27;study&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> l <span class="keyword">in</span> hobbies:</span><br><span class="line">   <span class="built_in">print</span>(l)</span><br></pre></td></tr></table></figure><h3 id="队列：先进先出"><a href="#队列：先进先出" class="headerlink" title="队列：先进先出"></a>队列：先进先出</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">queue_l=[]</span><br><span class="line"><span class="comment">#入队</span></span><br><span class="line">queue_l.append(<span class="string">&#x27;first&#x27;</span>)</span><br><span class="line">queue_l.append(<span class="string">&#x27;second&#x27;</span>)</span><br><span class="line">queue_l.append(<span class="string">&#x27;third&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(queue_l)</span><br><span class="line"><span class="comment">#出队</span></span><br><span class="line"><span class="built_in">print</span>(queue_l.pop(<span class="number">0</span>))</span><br><span class="line"><span class="built_in">print</span>(queue_l.pop(<span class="number">0</span>))</span><br><span class="line"><span class="built_in">print</span>(queue_l.pop(<span class="number">0</span>))</span><br></pre></td></tr></table></figure><h3 id="堆栈-先进后出，后进先出"><a href="#堆栈-先进后出，后进先出" class="headerlink" title="堆栈:先进后出，后进先出"></a>堆栈:先进后出，后进先出</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">l=[]</span><br><span class="line"><span class="comment">#入栈</span></span><br><span class="line">l.append(<span class="string">&#x27;first&#x27;</span>)</span><br><span class="line">l.append(<span class="string">&#x27;second&#x27;</span>)</span><br><span class="line">l.append(<span class="string">&#x27;third&#x27;</span>)</span><br><span class="line"><span class="comment">#出栈</span></span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line"><span class="built_in">print</span>(l.pop())</span><br><span class="line"><span class="built_in">print</span>(l.pop())</span><br><span class="line"><span class="built_in">print</span>(l.pop())</span><br></pre></td></tr></table></figure><h2 id="元祖"><a href="#元祖" class="headerlink" title="元祖"></a>元祖</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#为何要有元组，存放多个值，元组不可变，更多的是用来做查询</span></span><br><span class="line"><span class="comment">#作用：存多个值，对比列表来说，元组不可变（是可以当做字典的key的），主要是用来读</span></span><br><span class="line"><span class="comment">#定义：与列表类型比，只不过[]换成()</span></span><br><span class="line">age=(<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>)本质age=<span class="built_in">tuple</span>((<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>))</span><br></pre></td></tr></table></figure><h3 id="按索引存取值，切片"><a href="#按索引存取值，切片" class="headerlink" title="按索引存取值，切片"></a>按索引存取值，切片</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、按索引取值(正向取+反向取)：只能取  </span></span><br><span class="line"><span class="comment">#2、切片(顾头不顾尾，步长)</span></span><br><span class="line">goods=(<span class="string">&#x27;iphone&#x27;</span>,<span class="string">&#x27;lenovo&#x27;</span>,<span class="string">&#x27;sanxing&#x27;</span>,<span class="string">&#x27;suoyi&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(goods[<span class="number">1</span>:<span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(goods[-<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(goods[<span class="number">1</span>:<span class="number">4</span>:<span class="number">2</span>])</span><br></pre></td></tr></table></figure><h3 id="长度-2"><a href="#长度-2" class="headerlink" title="长度"></a>长度</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(goods))</span><br></pre></td></tr></table></figure><h3 id="in-或-not-in"><a href="#in-或-not-in" class="headerlink" title="in 或 not in"></a>in 或 not in</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#in:</span></span><br><span class="line"><span class="comment">#字符串:子字符串</span></span><br><span class="line"><span class="comment">#列表：元素</span></span><br><span class="line"><span class="comment">#元组：元素</span></span><br><span class="line"><span class="comment">#字典：key</span></span><br><span class="line"></span><br><span class="line">goods=(<span class="string">&#x27;iphone&#x27;</span>,<span class="string">&#x27;lenovo&#x27;</span>,<span class="string">&#x27;sanxing&#x27;</span>,<span class="string">&#x27;suoyi&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;iphone&#x27;</span> <span class="keyword">in</span> goods)看的是里面的元素在不在里面</span><br><span class="line"></span><br><span class="line">d=&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;b&#x27;</span> <span class="keyword">in</span> d) 看的是key在不在d里面</span><br></pre></td></tr></table></figure><h3 id="查找索引，计数"><a href="#查找索引，计数" class="headerlink" title="查找索引，计数"></a>查找索引，计数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">goods=(<span class="string">&#x27;iphone&#x27;</span>,<span class="string">&#x27;lenovo&#x27;</span>,<span class="string">&#x27;sanxing&#x27;</span>,<span class="string">&#x27;suoyi&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(goods.index(<span class="string">&#x27;iphone&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(goods.count(<span class="string">&#x27;iphone&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="作为字典Key"><a href="#作为字典Key" class="headerlink" title="作为字典Key"></a>作为字典Key</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#元组可以作为字典的key</span></span><br><span class="line">d=&#123;(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>):<span class="string">&#x27;allen&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(d,<span class="built_in">type</span>(d),d[(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)])</span><br></pre></td></tr></table></figure><h3 id="补充：外部不可变，内部可变"><a href="#补充：外部不可变，内部可变" class="headerlink" title="补充：外部不可变，内部可变"></a>补充：外部不可变，内部可变</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#补充：元组本身是不可变的，但是内部的元素可以是可变类型</span></span><br><span class="line">t=(<span class="number">1</span>,[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>],<span class="string">&#x27;sss&#x27;</span>,(<span class="number">1</span>,<span class="number">2</span>)) <span class="comment">#t=tuple((1,[1,3],&#x27;sss&#x27;,(1,2)))</span></span><br><span class="line">t[<span class="number">1</span>][<span class="number">0</span>]=<span class="string">&#x27;A&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(t)</span><br><span class="line"><span class="comment"># (1, [&#x27;A&#x27;, &#x27;b&#x27;], &#x27;sss&#x27;, (1, 2))</span></span><br><span class="line">t[<span class="number">1</span>]=<span class="string">&#x27;eeeeeeeeeeeeeeeeeee&#x27;</span></span><br><span class="line"><span class="comment"># TypeError: &#x27;tuple&#x27; object does not support item assignment</span></span><br></pre></td></tr></table></figure><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#作用：存多个值,key-value存取，取值速度快</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#定义：key必须是不可变类型，value可以是任意类型</span></span><br><span class="line">info=&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;allen&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>,<span class="string">&#x27;sex&#x27;</span>:<span class="string">&#x27;male&#x27;</span>&#125; <span class="comment">#本质info=dict(&#123;....&#125;)</span></span><br><span class="line">或</span><br><span class="line">info=<span class="built_in">dict</span>(name=<span class="string">&#x27;allen&#x27;</span>,age=<span class="number">18</span>,sex=<span class="string">&#x27;male&#x27;</span>)</span><br><span class="line">或</span><br><span class="line">info=<span class="built_in">dict</span>([[<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;allen&#x27;</span>],(<span class="string">&#x27;age&#x27;</span>,<span class="number">18</span>)])</span><br><span class="line">或</span><br><span class="line">&#123;&#125;.fromkeys((<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;age&#x27;</span>,<span class="string">&#x27;sex&#x27;</span>),<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><h3 id="取-存-修改"><a href="#取-存-修改" class="headerlink" title="取/存/修改"></a>取/存/修改</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 取</span></span><br><span class="line">info_dic=&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;allen&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>,<span class="string">&#x27;sex&#x27;</span>:<span class="string">&#x27;male&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(info_dic[<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(info_dic[<span class="string">&#x27;name11111111&#x27;</span>])<span class="comment">#找不到则报错了</span></span><br><span class="line"><span class="built_in">print</span>(info_dic.get(<span class="string">&#x27;name&#x27;</span>,<span class="literal">None</span>))</span><br><span class="line"><span class="built_in">print</span>(info_dic.get(<span class="string">&#x27;name222222&#x27;</span>,<span class="literal">None</span>))<span class="comment">#get方法找不到不报错，可以自己设定默认值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 存</span></span><br><span class="line">info_dic[<span class="string">&#x27;hobbies&#x27;</span>]=<span class="string">&#x27;大东区&#x27;</span></span><br><span class="line"><span class="keyword">or</span></span><br><span class="line">info_dic[<span class="string">&#x27;hobbies&#x27;</span>]=[]</span><br><span class="line">info_dic[<span class="string">&#x27;hobbies&#x27;</span>].append(<span class="string">&#x27;study&#x27;</span>)</span><br><span class="line">info_dic[<span class="string">&#x27;hobbies&#x27;</span>].append(<span class="string">&#x27;read&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(info_dic)</span><br><span class="line"><span class="comment"># &#123;&#x27;name&#x27;: &#x27;allen&#x27;, &#x27;age&#x27;: 18, &#x27;sex&#x27;: &#x27;male&#x27;, &#x27;hobbies&#x27;: [&#x27;study&#x27;, &#x27;read&#x27;]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改</span></span><br><span class="line">info_dic[<span class="string">&#x27;level&#x27;</span>]=<span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(info_dic)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 存+取</span></span><br><span class="line"><span class="comment"># setdefault() 方法和 get()方法 类似, 如果键不已经存在于字典中，将会添加键并将值设为默认值</span></span><br><span class="line"><span class="comment"># key存在则不设置默认，并且返回已经有的值</span></span><br><span class="line">info_dic=&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;allen&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>,<span class="string">&#x27;sex&#x27;</span>:<span class="string">&#x27;male&#x27;</span>&#125;</span><br><span class="line">info_dic.setdefault(<span class="string">&#x27;hobbies&#x27;</span>,[<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(info_dic)</span><br><span class="line"><span class="comment"># &#123;&#x27;name&#x27;: &#x27;allen&#x27;, &#x27;age&#x27;: 18, &#x27;sex&#x27;: &#x27;male&#x27;, &#x27;hobbies&#x27;: [1, 2]&#125;</span></span><br><span class="line">info_dic.setdefault(<span class="string">&#x27;hobbies&#x27;</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line"><span class="built_in">print</span>(info_dic)</span><br><span class="line"><span class="comment"># &#123;&#x27;name&#x27;: &#x27;allen&#x27;, &#x27;age&#x27;: 18, &#x27;sex&#x27;: &#x27;male&#x27;, &#x27;hobbies&#x27;: [1, 2]&#125;</span></span><br><span class="line">info_dic.setdefault(<span class="string">&#x27;hobbies&#x27;</span>,[]).append(<span class="string">&#x27;study&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(info_dic)</span><br><span class="line"><span class="comment"># &#123;&#x27;name&#x27;: &#x27;allen&#x27;, &#x27;age&#x27;: 18, &#x27;sex&#x27;: &#x27;male&#x27;, &#x27;hobbies&#x27;: [1, 2, &#x27;study&#x27;]&#125;</span></span><br><span class="line">l=info_dic.setdefault(<span class="string">&#x27;hobbies&#x27;</span>,[])</span><br><span class="line"><span class="built_in">print</span>(l,<span class="built_in">id</span>(l))</span><br><span class="line"><span class="comment"># [1, 2, &#x27;study&#x27;] 7439112</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(info_dic[<span class="string">&#x27;hobbies&#x27;</span>]))</span><br><span class="line"><span class="comment"># 7439112</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 存+修</span></span><br><span class="line"><span class="comment"># update() 有则修改，无则添加</span></span><br><span class="line">info_dic=&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;allen&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>,<span class="string">&#x27;sex&#x27;</span>:<span class="string">&#x27;male&#x27;</span>&#125;</span><br><span class="line">info_dic.update(&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;Allen&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">12</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(info_dic)</span><br><span class="line"><span class="comment"># &#123;&#x27;name&#x27;: &#x27;Allen&#x27;, &#x27;age&#x27;: 12, &#x27;sex&#x27;: &#x27;male&#x27;, &#x27;a&#x27;: 1&#125;</span></span><br></pre></td></tr></table></figure><h3 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#pop：key存在则弹出值，不存在则返回默认值，如果没有默认值则报错</span></span><br><span class="line">info_dic=&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;allen&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>,<span class="string">&#x27;sex&#x27;</span>:<span class="string">&#x27;male&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(info_dic.pop(<span class="string">&#x27;nam123123123123123123e&#x27;</span>,<span class="literal">None</span>))</span><br><span class="line"><span class="built_in">print</span>(info_dic)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python 字典 popitem() 方法返回并删除字典中的最后一对键和值。</span></span><br><span class="line"><span class="comment"># 如果字典已经为空，却调用了此方法，就报出 KeyError 异常。</span></span><br><span class="line"><span class="built_in">print</span>(info_dic.popitem())</span><br><span class="line"><span class="built_in">print</span>(info_dic)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清空</span></span><br><span class="line"><span class="keyword">del</span> info_dic[<span class="string">&#x27;name&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="键，值，键值对"><a href="#键，值，键值对" class="headerlink" title="键，值，键值对"></a>键，值，键值对</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">info_dic=&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;allen&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>,<span class="string">&#x27;sex&#x27;</span>:<span class="string">&#x27;male&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(info_dic.keys())</span><br><span class="line"><span class="built_in">print</span>(info_dic.values())</span><br><span class="line"><span class="built_in">print</span>(info_dic.items())</span><br><span class="line"><span class="comment"># dict_keys([&#x27;name&#x27;, &#x27;age&#x27;, &#x27;sex&#x27;])</span></span><br><span class="line"><span class="comment"># dict_values([&#x27;allen&#x27;, 18, &#x27;male&#x27;])</span></span><br><span class="line"><span class="comment"># dict_items([(&#x27;name&#x27;, &#x27;allen&#x27;), (&#x27;age&#x27;, 18), (&#x27;sex&#x27;, &#x27;male&#x27;)])</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> info_dic:             <span class="comment"># 同样可以用 for k,v in info_dic.items():</span></span><br><span class="line">    <span class="built_in">print</span>(k,info_dic[k])</span><br><span class="line"><span class="comment"># name allen</span></span><br><span class="line"><span class="comment"># age 18</span></span><br><span class="line"><span class="comment"># sex male</span></span><br></pre></td></tr></table></figure><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 长度</span></span><br><span class="line">info_dic=&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;allen&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>,<span class="string">&#x27;sex&#x27;</span>:<span class="string">&#x27;male&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(info_dic))   <span class="comment"># 3</span></span><br><span class="line"><span class="comment"># 复制</span></span><br><span class="line">d=info_dic.copy()</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"><span class="comment"># 清空</span></span><br><span class="line">info_dic.clear()</span><br><span class="line"><span class="built_in">print</span>(info_dic)</span><br></pre></td></tr></table></figure><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># eg:</span></span><br><span class="line">s=<span class="built_in">set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>])</span><br><span class="line">s=&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="built_in">type</span>(l)=&lt;<span class="keyword">class</span> <span class="string">&#x27;set&#x27;</span>&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>作用：去重，关系运算</p><p>定义：可以包含多个元素，用逗号分割，集合的元素遵循三个原则：</p><p>　　　　　　1.每个元素必须是不可变类型（可hash，可作为字典的key）</p><p>　　　　　　2.没有重复的元素</p><p>　　　　　　4.无序</p><p>注意集合的目的是将不同的值存放到一起，不同的集合间用来做关系运算，无需纠结于集合中单个值</p></blockquote><h3 id="关系运算"><a href="#关系运算" class="headerlink" title="关系运算"></a>关系运算</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、长度len</span></span><br><span class="line"><span class="comment">#2、成员运算in和not in</span></span><br><span class="line"><span class="comment">#3、|合集</span></span><br><span class="line"><span class="comment">#4、&amp;交集</span></span><br><span class="line"><span class="comment">#5、-差集</span></span><br><span class="line"><span class="comment">#6、^对称差集</span></span><br><span class="line"><span class="comment">#7、==</span></span><br><span class="line"><span class="comment">#8、父集：&gt;,&gt;= </span></span><br><span class="line"><span class="comment">#9、子集：&lt;,&lt;=    </span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 有如下两个集合，pythons是报名python课程的学员名字集合，linuxs是报名linux课程的学员名字集合</span></span><br><span class="line">pythons=&#123;<span class="string">&#x27;zhuzhuxia&#x27;</span>,<span class="string">&#x27;allen&#x27;</span>,<span class="string">&#x27;peiqi&#x27;</span>,<span class="string">&#x27;gangdan&#x27;</span>&#125;</span><br><span class="line">linuxs=&#123;<span class="string">&#x27;peiqi&#x27;</span>,<span class="string">&#x27;allen&#x27;</span>,<span class="string">&#x27;gangdan&#x27;</span>,<span class="string">&#x27;feizhu&#x27;</span>&#125;</span><br><span class="line"><span class="comment"># 求出即报名python又报名linux课程的学员名字集合</span></span><br><span class="line"><span class="built_in">print</span>(pythons &amp; linuxs) <span class="comment"># &#123;&#x27;peiqi&#x27;, &#x27;gangdan&#x27;, &#x27;allen&#x27;&#125;</span></span><br><span class="line"><span class="comment"># 求出所有报名的学生名字集合</span></span><br><span class="line"><span class="built_in">print</span>(pythons | linuxs) <span class="comment"># &#123;&#x27;feizhu&#x27;, &#x27;zhuzhuxia&#x27;, &#x27;peiqi&#x27;, &#x27;gangdan&#x27;, &#x27;allen&#x27;&#125;</span></span><br><span class="line"><span class="comment"># 求出只报名python课程的学员名字</span></span><br><span class="line"><span class="built_in">print</span>(pythons - linuxs) <span class="comment"># &#123;&#x27;zhuzhuxia&#x27;&#125;</span></span><br><span class="line"><span class="comment"># 求出没有同时这两门课程的学员名字集合</span></span><br><span class="line"><span class="built_in">print</span>(pythons ^ linuxs) <span class="comment"># &#123;&#x27;feizhu&#x27;, &#x27;zhuzhuxia&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">linuxs = &#123;<span class="string">&#x27;six&#x27;</span>, <span class="string">&#x27;wu&#x27;</span>, <span class="string">&#x27;dabao&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">linuxs.add(<span class="string">&#x27;xiaoxiao&#x27;</span>)  <span class="comment"># 说明set类型的集合是可变类型</span></span><br><span class="line"><span class="comment"># linuxs.add([1, 2, 3])  # 报错，只能添加不可变类型</span></span><br><span class="line">res=linuxs.pop()  <span class="comment"># 不用指定参数,随机删除,并且会有返回值</span></span><br><span class="line">res=linuxs.remove(<span class="string">&#x27;wupeiqi&#x27;</span>)<span class="comment">#指定元素删除，元素不存在则报错，单纯的删除，没有返回值，</span></span><br><span class="line">res=linuxs.discard(<span class="string">&#x27;allen1111111111&#x27;</span>) <span class="comment">#指定元素删除，元素不存在不报错，单纯的删除，没有返回值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># =========了解部分=========</span></span><br><span class="line">linuxs=&#123;<span class="string">&#x27;wupeiqi&#x27;</span>,<span class="string">&#x27;allen&#x27;</span>,<span class="string">&#x27;susan&#x27;</span>,<span class="string">&#x27;hiayan&#x27;</span>&#125;</span><br><span class="line">new_set=&#123;<span class="string">&#x27;xxx&#x27;</span>,<span class="string">&#x27;fenxixi&#x27;</span>&#125;</span><br><span class="line">linuxs.update(new_set)</span><br><span class="line"><span class="built_in">print</span>(linuxs)</span><br><span class="line">linuxs.copy()</span><br><span class="line">linuxs.clear()</span><br><span class="line"><span class="comment">#解压</span></span><br><span class="line">a,*_=&#123;<span class="string">&#x27;zzz&#x27;</span>,<span class="string">&#x27;sss&#x27;</span>,<span class="string">&#x27;xxxx&#x27;</span>,<span class="string">&#x27;cccc&#x27;</span>,<span class="string">&#x27;vvv&#x27;</span>,<span class="string">&#x27;qqq&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(a) <span class="comment"># 随机取一个值</span></span><br></pre></td></tr></table></figure><h2 id="数据类型总结"><a href="#数据类型总结" class="headerlink" title="数据类型总结"></a>数据类型总结</h2><blockquote><p>1、可变：值变，id不变。可变==不可hash<br>2、不可变：值变，id就变。不可变==可hash<br>可变类型是不可hash类型，不可变类型是可hash类型<br>可变数据类型：列表、字典。<br>不可变数据类型：数字、字符串、元组。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">按存储空间的占用分（从低到高）</span><br><span class="line">数字</span><br><span class="line">字符串</span><br><span class="line">集合：无序，即无序存索引相关信息</span><br><span class="line">元组：有序，需要存索引相关信息，不可变</span><br><span class="line">列表：有序，需要存索引相关信息，可变，需要处理数据的增删改</span><br><span class="line">字典：无序，需要存key与value映射的相关信息，可变，需要处理数据的增删改</span><br></pre></td></tr></table></figure><h2 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 有列表l=[&#x27;a&#x27;,&#x27;b&#x27;,1,&#x27;a&#x27;,&#x27;a&#x27;]，列表元素均为可hash类型，去重，得到新列表,且新列表无需保持列表原来的顺序</span></span><br><span class="line">l=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">set</span>(l))</span><br><span class="line"><span class="comment"># 2.在上题的基础上，保存列表原来的顺序</span></span><br><span class="line">q=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> l:</span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> q:</span><br><span class="line">        q.append(i)</span><br><span class="line"><span class="built_in">print</span>(q)</span><br><span class="line"><span class="comment"># 3.去除文件中重复的行，肯定要保持文件内容的顺序不变</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;db.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> read_f,\</span><br><span class="line">        <span class="built_in">open</span>(<span class="string">&#x27;.db.txt.swap&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> write_f:</span><br><span class="line">    s=<span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> read_f:</span><br><span class="line">        <span class="keyword">if</span> line <span class="keyword">not</span> <span class="keyword">in</span> s:</span><br><span class="line">            s.add(line)</span><br><span class="line">            write_f.write(line)</span><br><span class="line">os.remove(<span class="string">&#x27;db.txt&#x27;</span>)</span><br><span class="line">os.rename(<span class="string">&#x27;.db.txt.swap&#x27;</span>,<span class="string">&#x27;db.txt&#x27;</span>)</span><br><span class="line"><span class="comment"># 4.有如下列表，列表元素为不可hash类型，去重，得到新列表，且新列表一定要保持列表原来的顺序</span></span><br><span class="line">l=[</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;allen&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>,<span class="string">&#x27;sex&#x27;</span>:<span class="string">&#x27;male&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;alex&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">73</span>,<span class="string">&#x27;sex&#x27;</span>:<span class="string">&#x27;male&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;allen&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">20</span>,<span class="string">&#x27;sex&#x27;</span>:<span class="string">&#x27;female&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;allen&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>,<span class="string">&#x27;sex&#x27;</span>:<span class="string">&#x27;male&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;allen&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>,<span class="string">&#x27;sex&#x27;</span>:<span class="string">&#x27;male&#x27;</span>&#125;,</span><br><span class="line">]</span><br><span class="line"><span class="comment"># 第一种方法</span></span><br><span class="line">s=<span class="built_in">set</span>()</span><br><span class="line">l1=[]</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> l:</span><br><span class="line">    val=(item[<span class="string">&#x27;name&#x27;</span>],item[<span class="string">&#x27;age&#x27;</span>],item[<span class="string">&#x27;sex&#x27;</span>])</span><br><span class="line">    <span class="keyword">if</span> val <span class="keyword">not</span> <span class="keyword">in</span> s:</span><br><span class="line">        s.add(val)</span><br><span class="line">        l1.append(item)</span><br><span class="line"><span class="built_in">print</span>(l1)</span><br><span class="line"><span class="comment"># 第二种方法</span></span><br><span class="line"><span class="comment">#定义函数,既可以针对可以hash类型又可以针对不可hash类型</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">items,key=<span class="literal">None</span></span>):</span><br><span class="line">    s=<span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">        val=item <span class="keyword">if</span> key <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">else</span> key(item)</span><br><span class="line">        <span class="keyword">if</span> val <span class="keyword">not</span> <span class="keyword">in</span> s:</span><br><span class="line">            s.add(val)</span><br><span class="line">            <span class="keyword">yield</span> item</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(func(l,key=<span class="keyword">lambda</span> dic:(dic[<span class="string">&#x27;name&#x27;</span>],dic[<span class="string">&#x27;age&#x27;</span>],dic[<span class="string">&#x27;sex&#x27;</span>]))))</span><br></pre></td></tr></table></figure><h2 id="按存值个数区分"><a href="#按存值个数区分" class="headerlink" title="按存值个数区分"></a>按存值个数区分</h2><div class="table-container"><table><thead><tr><th>标量／原子类型</th><th>数字，字符串</th></tr></thead><tbody><tr><td>容器类型</td><td>列表，元组，字典</td></tr></tbody></table></div><h2 id="按可变不可变区分"><a href="#按可变不可变区分" class="headerlink" title="按可变不可变区分"></a>按可变不可变区分</h2><div class="table-container"><table><thead><tr><th>可变</th><th>列表，字典</th></tr></thead><tbody><tr><td>不可变</td><td>数字，字符串，元组</td></tr></tbody></table></div><h2 id="按访问顺序区分"><a href="#按访问顺序区分" class="headerlink" title="按访问顺序区分"></a>按访问顺序区分</h2><div class="table-container"><table><thead><tr><th>直接访问</th><th>数字</th></tr></thead><tbody><tr><td>顺序访问（序列类型）</td><td>字符串，列表，元组</td></tr><tr><td>key值访问（映射类型）</td><td>字典</td></tr></tbody></table></div><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#身份运算（is ，is not）</span></span><br><span class="line"><span class="keyword">is</span>比较的是<span class="built_in">id</span>，而双等号比较的是值</span><br><span class="line">毫无疑问，<span class="built_in">id</span>若相同则值肯定相同，而值相同<span class="built_in">id</span>则不一定相同</span><br><span class="line">x=<span class="number">1234567890</span></span><br><span class="line">y=<span class="number">1234567890</span></span><br><span class="line">x == y</span><br><span class="line"><span class="comment"># True</span></span><br><span class="line"><span class="built_in">id</span>(x),<span class="built_in">id</span>(y)</span><br><span class="line"><span class="comment"># (3581040, 31550448)</span></span><br><span class="line">x <span class="keyword">is</span> y</span><br><span class="line"><span class="comment"># False</span></span><br></pre></td></tr></table></figure><p><img src="1036857-20161011085945461-141241132.png" alt="算数运算"> </p><p><img src="1036857-20161011090004352-1793064865.png" alt="比较运算"></p><p><img src="1036857-20161011090015164-795424787.png" alt="赋值运算"></p><p><img src="1036857-20161011090217446-1562320241.png" alt="位运算"></p><p><img src="1036857-20161011090025071-1236899190.png" alt="逻辑运算"></p><p>and注解：</p><ol><li>在Python 中，<code>and</code> 和 <code>or</code> 执行布尔逻辑演算，如你所期待的一样，但是它们并不返回布尔值；而是，返回它们实际进行比较的值之一。</li><li>在布尔上下文中从左到右演算表达式的值，如果布尔上下文中的所有值都为真，那么 <code>and</code> 返回最后一个值。</li><li>如果布尔上下文中的某个值为假，则 <code>and</code> 返回第一个假值</li></ol><p>or注解：</p><ol><li>使用 <code>or</code> 时，在布尔上下文中从左到右演算值，就像 <code>and</code> 一样。如果有一个值为真，<code>or</code> 立刻返回该值</li><li>如果所有的值都为假，<code>or</code> 返回最后一个假值</li><li>注意 <code>or</code> 在布尔上下文中会一直进行表达式演算直到找到第一个真值，然后就会忽略剩余的比较值</li></ol><p>and-or结合使用：</p><ol><li><p>结合了前面的两种语法，推理即可。</p></li><li><p>为加强程序可读性，最好与括号连用，例如：</p><blockquote><p>（1 and ‘x’) or ‘y’   </p></blockquote></li></ol><h3 id="成员运算"><a href="#成员运算" class="headerlink" title="成员运算"></a>成员运算</h3><p><img src="1036857-20161011090033196-468321512.png" alt="img"></p><h3 id="身份运算"><a href="#身份运算" class="headerlink" title="身份运算"></a>身份运算</h3><p><img src="1036857-20161011090232368-83323653.png" alt="img"></p><h1 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h1><h3 id="一-了解字符编码的知识储备"><a href="#一-了解字符编码的知识储备" class="headerlink" title="一 了解字符编码的知识储备"></a>一 了解字符编码的知识储备</h3><h4 id="计算机基础知识"><a href="#计算机基础知识" class="headerlink" title="计算机基础知识"></a>计算机基础知识</h4><p><img src="1036857-20170922102734478-918776722.png" alt="img"></p><h4 id="文本编辑器存取文件的原理（nodepad-，pycharm，word）"><a href="#文本编辑器存取文件的原理（nodepad-，pycharm，word）" class="headerlink" title="文本编辑器存取文件的原理（nodepad++，pycharm，word）"></a>文本编辑器存取文件的原理（nodepad++，pycharm，word）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、打开编辑器就打开了启动了一个进程，是在内存中的，所以，用编辑器编写的内容也都是存放与内存中的，断电后数据丢失</span></span><br><span class="line"><span class="comment">#2、要想永久保存，需要点击保存按钮：编辑器把内存的数据刷到了硬盘上。</span></span><br><span class="line"><span class="comment">#3、在我们编写一个py文件（没有执行），跟编写其他文件没有任何区别，都只是在编写一堆字符而已。</span></span><br></pre></td></tr></table></figure><h4 id="python解释器执行py文件的原理-，例如python-test-py"><a href="#python解释器执行py文件的原理-，例如python-test-py" class="headerlink" title="python解释器执行py文件的原理 ，例如python test.py"></a>python解释器执行py文件的原理 ，例如python test.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#第一阶段：python解释器启动，此时就相当于启动了一个文本编辑器</span></span><br><span class="line"><span class="comment">#第二阶段：python解释器相当于文本编辑器，去打开test.py文件，从硬盘上将test.py的文件内容读入到内存中(小复习：pyhon的解释性，决定了解释器只关心文件内容，不关心文件后缀名)</span></span><br><span class="line"><span class="comment">#第三阶段：python解释器解释执行刚刚加载到内存中test.py的代码( ps：在该阶段，即真正执行代码时，才会识别python的语法，执行文件内代码，当执行到name=&quot;allen&quot;时,会开辟内存空间存放字符串&quot;allen&quot;)</span></span><br></pre></td></tr></table></figure><h3 id="总结python解释器与文件本编辑的异同"><a href="#总结python解释器与文件本编辑的异同" class="headerlink" title="总结python解释器与文件本编辑的异同"></a>总结python解释器与文件本编辑的异同</h3><h3 id="二-字符编码介绍"><a href="#二-字符编码介绍" class="headerlink" title="二 字符编码介绍"></a>二 字符编码介绍</h3><h4 id="一-什么是字符编码"><a href="#一-什么是字符编码" class="headerlink" title="一 什么是字符编码"></a>一 什么是字符编码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">　　计算机要想工作必须通电,即用‘电’驱使计算机干活,也就是说‘电’的特性决定了计算机的特性。电的特性即高低电平(人类从逻辑上将二进制数<span class="number">1</span>对应高电平,二进制数<span class="number">0</span>对应低电平)，关于磁盘的磁特性也是同样的道理。结论：计算机只认识数字</span><br><span class="line"></span><br><span class="line">　　很明显，我们平时在使用计算机时，用的都是人类能读懂的字符（用高级语言编程的结果也无非是在文件内写了一堆字符），如何能让计算机读懂人类的字符？</span><br><span class="line"></span><br><span class="line">　　必须经过一个过程：</span><br><span class="line">　　<span class="comment">#字符--------（翻译过程）-------&gt;数字 </span></span><br><span class="line"></span><br><span class="line">　　<span class="comment">#这个过程实际就是一个字符如何对应一个特定数字的标准，这个标准称之为字符编码</span></span><br></pre></td></tr></table></figure><h4 id="二-以下两个场景下涉及到字符编码的问题："><a href="#二-以下两个场景下涉及到字符编码的问题：" class="headerlink" title="二 以下两个场景下涉及到字符编码的问题："></a>二 以下两个场景下涉及到字符编码的问题：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、一个python文件中的内容是由一堆字符组成的，存取均涉及到字符编码问题（python文件并未执行，前两个阶段均属于该范畴）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2、python中的数据类型字符串是由一串字符组成的（python文件执行时，即第三个阶段）</span></span><br></pre></td></tr></table></figure><h4 id="三-字符编码的发展史与分类-了解"><a href="#三-字符编码的发展史与分类-了解" class="headerlink" title="三 字符编码的发展史与分类(了解)"></a>三 字符编码的发展史与分类(了解)</h4><p>计算机由美国人发明，最早的字符编码为ASCII，只规定了英文字母数字和一些特殊字符与数字的对应关系。最多只能用 8 位来表示（一个字节），即：2**8 = 256，所以，ASCII码最多只能表示 256 个符号</p><p><img src="1036857-20161012154848812-1060009743.png" alt="img"></p><p>当然我们编程语言都用英文没问题，ASCII够用，但是在处理数据时，不同的国家有不同的语言，日本人会在自己的程序中加入日文，中国人会加入中文。</p><p>而要表示中文，单拿一个字节表表示一个汉子，是不可能表达完的(连小学生都认识两千多个汉字)，解决方法只有一个，就是一个字节用&gt;8位2进制代表，位数越多，代表的变化就多，这样，就可以尽可能多的表达出不通的汉字</p><p>所以中国人规定了自己的标准gb2312编码，规定了包含中文在内的字符－&gt;数字的对应关系。</p><p>日本人规定了自己的Shift_JIS编码</p><p>韩国人规定了自己的Euc-kr编码（另外，韩国人说，计算机是他们发明的，要求世界统一用韩国编码，但世界人民没有搭理他们）</p><p>这时候问题出现了，精通18国语言的小周同学谦虚的用8国语言写了一篇文档，那么这篇文档，按照哪国的标准，都会出现乱码（因为此刻的各种标准都只是规定了自己国家的文字在内的字符跟数字的对应关系，如果单纯采用一种国家的编码格式，那么其余国家语言的文字在解析时就会出现乱码）</p><p>所以迫切需要一个世界的标准（能包含全世界的语言）于是unicode应运而生（韩国人表示不服，然后没有什么卵用）</p><p>ascii用1个字节（8位二进制）代表一个字符</p><p>unicode常用2个字节（16位二进制）代表一个字符，生僻字需要用4个字节</p><p>例：</p><p>字母x，用ascii表示是十进制的120，二进制0111 1000</p><p>汉字<code>中</code>已经超出了ASCII编码的范围，用Unicode编码是十进制的<code>20013</code>，二进制的<code>01001110 00101101</code>。</p><p>字母x，用unicode表示二进制0000 0000 0111 1000，所以unicode兼容ascii，也兼容万国，是世界的标准</p><p>这时候乱码问题消失了，所有的文档我们都使用但是新问题出现了，如果我们的文档通篇都是英文，你用unicode会比ascii耗费多一倍的空间，在存储和传输上十分的低效</p><p>本着节约的精神，又出现了把Unicode编码转化为“可变长编码”的<code>UTF-8</code>编码。UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节。如果你要传输的文本包含大量英文字符，用UTF-8编码就能节省空间：</p><div class="table-container"><table><thead><tr><th style="text-align:left">字符</th><th style="text-align:left">ASCII</th><th style="text-align:left">Unicode</th><th style="text-align:left">UTF-8</th></tr></thead><tbody><tr><td style="text-align:left">A</td><td style="text-align:left">01000001</td><td style="text-align:left">00000000 01000001</td><td style="text-align:left">01000001</td></tr><tr><td style="text-align:left">中</td><td style="text-align:left">x</td><td style="text-align:left">01001110 00101101</td><td style="text-align:left">11100100 10111000 10101101</td></tr></tbody></table></div><p>从上面的表格还可以发现，UTF-8编码有一个额外的好处，就是ASCII编码实际上可以被看成是UTF-8编码的一部分，所以，大量只支持ASCII编码的历史遗留软件可以在UTF-8编码下继续工作。</p><h4 id="四-总结字符编码的发展可分为三个阶段-重要"><a href="#四-总结字符编码的发展可分为三个阶段-重要" class="headerlink" title="四 总结字符编码的发展可分为三个阶段(重要)"></a>四 总结字符编码的发展可分为三个阶段(重要)</h4><blockquote><p>阶段一：现代计算机起源于美国，最早诞生也是基于英文考虑的ASCII<br>ASCII:一个Bytes代表一个字符（英文字符/键盘上的所有其他字符），1Bytes=8bit，8bit可以表示0-2**8-1种变化，即可以表示256个字符</p><p>ASCII最初只用了后七位，127个数字，已经完全能够代表键盘上所有的字符了（英文字符/键盘的所有其他字符），后来为了将拉丁文也编码进了ASCII表，将最高位也占用了</p><p>阶段二:为了满足中文和英文，中国人定制了GBK<br>GBK:2Bytes代表一个中文字符，1Bytes表示一个英文字符<br>为了满足其他国家，各个国家纷纷定制了自己的编码<br>日本把日文编到Shift_JIS里，韩国把韩文编到Euc-kr里</p><p>阶段三：各国有各国的标准，就会不可避免地出现冲突，结果就是，在多语言混合的文本中，显示出来会有乱码。如何解决这个问题呢？？？</p><p>！！！！！！！！！！！！非常重要！！！！！！！！！！！！<br>说白了乱码问题的本质就是不统一，如果我们能统一全世界，规定全世界只能使用一种文字符号，然后统一使用一种编码，那么乱码问题将不复存在，<br>ps：就像当年秦始皇统一中国一样，书同文车同轨，所有的麻烦事全部解决<br>很明显，上述的假设是不可能成立的。很多地方或老的系统、应用软件仍会采用各种各样的编码，这是历史遗留问题。于是我们必须找出一种解决方案或者说编码方案，需要同时满足：<br>1、能够兼容万国字符<br>2、与全世界所有的字符编码都有映射关系，这样就可以转换成任意国家的字符编码</p><p>这就是unicode（定长），　统一用2Bytes代表一个字符，　虽然2**16-1=65535，但unicode却可以存放100w+个字符，因为unicode存放了与其他编码的映射关系，准确地说unicode并不是一种严格意义上的字符编码表，下载pdf来查看unicode的详情：<br>链接：<a href="https://pan.baidu.com/s/1dEV3RYp">https://pan.baidu.com/s/1dEV3RYp</a></p><p>很明显对于通篇都是英文的文本来说，unicode的式无疑是多了一倍的存储空间（二进制最终都是以电或者磁的方式存储到存储介质中的）</p><p>于是产生了UTF-8（可变长，全称Unicode Transformation Format），对英文字符只用1Bytes表示，对中文字符用3Bytes，对其他生僻字用更多的Bytes去存</p><p>总结：内存中统一采用unicode，浪费空间来换取可以转换成任意编码（不乱码），硬盘可以采用各种编码，如utf-8，保证存放于硬盘或者基于网络传输的数据量很小，提高传输效率与稳定性。</p></blockquote><p><img src="1036857-20180322000413870-802861053.png" alt="img"></p><p>基于目前的现状，内存中的编码固定就是unicode，我们唯一可变的就是硬盘的上对应的字符编码。<br>此时你可能会觉得，那如果我们以后开发软时统一都用unicode编码，那么不就都统一了吗，关于统一这一点你的思路是没错的，但我们不可会使用unicode编码来编写程序的文件，因为在通篇都是英文的情况下，耗费的空间几乎会多出一倍，这样在软件读入内存或写入磁盘时，都会徒增IO次数，从而降低程序的执行效率。因而我们以后在编写程序的文件时应该统一使用一个更为精准的字符编码utf-8（用1Bytes存英文，3Bytes存中文），再次强调，内存中的编码固定使用unicode。<br>1、在存入磁盘时，需要将unicode转成一种更为精准的格式，utf-8:全称Unicode Transformation Format，将数据量控制到最精简</p><p>2、在读入内存时，需要将utf-8转成unicode<br>所以我们需要明确：内存中用unicode是为了兼容万国软件，即便是硬盘中有各国编码编写的软件，unicode也有相对应的映射关系，但在现在的开发中，程序员普遍使用utf-8编码了，估计在将来的某一天等所有老的软件都淘汰掉了情况下，就可以变成：内存utf-8&lt;-&gt;硬盘utf-8的形式了。</p><h2 id="三-字符编码应用之文件编辑器"><a href="#三-字符编码应用之文件编辑器" class="headerlink" title="三 字符编码应用之文件编辑器"></a>三 字符编码应用之文件编辑器</h2><h3 id="文本编辑器之nodpad"><a href="#文本编辑器之nodpad" class="headerlink" title="文本编辑器之nodpad++"></a>文本编辑器之nodpad++</h3><p><img src="1036857-20170513105345738-940570716.png" alt="img"></p><p><img src="1036857-20170513105551254-1041243653.png" alt="img"></p><p><img src="1036857-20170513105724566-1152892842.png" alt="img"></p><p><img src="1036857-20170513105818347-833658268.png" alt="img"></p><h3 id="乱码分析"><a href="#乱码分析" class="headerlink" title="乱码分析"></a>乱码分析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">首先明确概念</span><br><span class="line"><span class="comment">#1、文件从内存刷到硬盘的操作简称存文件</span></span><br><span class="line"><span class="comment">#2、文件从硬盘读到内存的操作简称读文件</span></span><br><span class="line"></span><br><span class="line">乱码的两种情况：</span><br><span class="line"><span class="comment">#乱码一：存文件时就已经乱码</span></span><br><span class="line">存文件时，由于文件内有各个国家的文字，我们单以shiftjis去存，</span><br><span class="line">本质上其他国家的文字由于在shiftjis中没有找到对应关系而导致存储失败</span><br><span class="line">但当我们硬要存的时候，编辑并不会报错（难道你的编码错误，编辑器这个软件就跟着崩溃了吗？？？），但毫无疑问，不能存而硬存，肯定是乱存了，即存文件阶段就已经发生乱码</span><br><span class="line">而当我们用shiftjis打开文件时，日文可以正常显示，而中文则乱码了</span><br><span class="line"></span><br><span class="line"><span class="comment">#用open模拟编辑器的过程</span></span><br><span class="line">可以用<span class="built_in">open</span>函数的write可以测试，f=<span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encodig=<span class="string">&#x27;shift_jis&#x27;</span></span><br><span class="line">f.write(<span class="string">&#x27;你瞅啥\n何を見て\n&#x27;</span>) <span class="comment">#&#x27;你瞅啥&#x27;因为在shiftjis中没有找到对应关系而无法保存成功，只存&#x27;何を見て\n&#x27;可以成功</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#以任何编码打开文件a.txt都会出现其余两个无法正常显示的问题</span></span><br><span class="line">f=<span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">f.write(<span class="string">&#x27;何を見て\n&#x27;</span>.encode(<span class="string">&#x27;shift_jis&#x27;</span>))</span><br><span class="line">f.write(<span class="string">&#x27;你愁啥\n&#x27;</span>.encode(<span class="string">&#x27;gbk&#x27;</span>))</span><br><span class="line">f.write(<span class="string">&#x27;你愁啥\n&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">#乱码二：存文件时不乱码而读文件时乱码</span></span><br><span class="line">存文件时用utf-<span class="number">8</span>编码，保证兼容万国，不会乱码，而读文件时选择了错误的解码方式，比如gbk，则在读阶段发生乱码，读阶段发生乱码是可以解决的，选对正确的解码方式就ok了，</span><br></pre></td></tr></table></figure><h3 id="文本编辑器之pycharm"><a href="#文本编辑器之pycharm" class="headerlink" title="文本编辑器之pycharm"></a>文本编辑器之pycharm</h3><p><img src="1036857-20170513110221676-552724422.png" alt="img"></p><p>以utf-8格式打开（选择reload）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#reload与convert的区别：</span></span><br><span class="line"></span><br><span class="line">pycharm非常强大，提供了自动帮我们convert转换的功能，即将字符按照正确的格式转换</span><br><span class="line"></span><br><span class="line">要自己探究字符编码的本质，还是不要用这个</span><br><span class="line"></span><br><span class="line">我们选择reload，即按照某种编码重新加载文件</span><br></pre></td></tr></table></figure><p><img src="1036857-20170513110350894-1590323140.png" alt="img"></p><p>3.3 文本编辑器之python解释器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">文件test.py以gbk格式保存，内容为：</span><br><span class="line"></span><br><span class="line">　　x=<span class="string">&#x27;林&#x27;</span></span><br><span class="line"></span><br><span class="line">无论是</span><br><span class="line"></span><br><span class="line">　　python2 test.py</span><br><span class="line"></span><br><span class="line">还是</span><br><span class="line"></span><br><span class="line">　　python3 test.py</span><br><span class="line"></span><br><span class="line">都会报错（因为python2默认<span class="built_in">ascii</span>，python3默认utf-<span class="number">8</span>）</span><br><span class="line"></span><br><span class="line">除非在文件开头指定<span class="comment">#coding:gbk</span></span><br></pre></td></tr></table></figure><h3 id="总结重要"><a href="#总结重要" class="headerlink" title="总结重要"></a>总结重要</h3><p>！！！总结非常重要的两点！！！ </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、保证不乱吗的核心法则就是，字符按照什么标准而编码的，就要按照什么标准解码，此处的标准指的就是字符编码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2、在内存中写的所有字符，一视同仁，都是unicode编码，比如我们打开编辑器，输入一个“你”，我们并不能说“你”就是一个汉字，此时它仅仅只是一个符号，该符号可能很多国家都在使用，根据我们使用的输入法不同这个字的样式可能也不太一样。只有在我们往硬盘保存或者基于网络传输时，才能确定”你“到底是一个汉字，还是一个日本字，这就是unicode转换成其他编码格式的过程了</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">unicode-----&gt;encode--------&gt;utf-8</span><br><span class="line"></span><br><span class="line">utf-8--------&gt;decode----------&gt;unicode</span><br></pre></td></tr></table></figure><p><img src="1036857-20170909230621226-849802883.png" alt="img"></p><p>补充：</p><p>浏览网页的时候，服务器会把动态生成的Unicode内容转换为UTF-8再传输到浏览器</p><p>如果服务端encode的编码格式是utf-8， 客户端内存中收到的也是utf-8编码的结果。</p><h2 id="四-字符编码应用之python"><a href="#四-字符编码应用之python" class="headerlink" title="四 字符编码应用之python"></a>四 字符编码应用之python</h2><h3 id="执行py程序的三个阶段"><a href="#执行py程序的三个阶段" class="headerlink" title="执行py程序的三个阶段"></a>执行py程序的三个阶段</h3><p>python test.py   （我再强调一遍，执行test.py的第一步，一定是先将文件内容读入到内存中）</p><p>test.py文件内容以gbk格式保存的，内容为：</p><p><img src="1036857-20170909231819835-978364800.png" alt="img"></p><p>阶段一：启动python解释器 </p><p>阶段二：python解释器此时就是一个文本编辑器，负责打开文件test.py,即从硬盘中读取test.py的内容到内存中 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">此时，python解释器会读取test.py的第一行内容，<span class="comment">#coding:utf-8，来决定以什么编码格式来读入内存，这一行就是来设定python解释器这个软件的编码使用的编码格式这个编码，</span></span><br><span class="line"></span><br><span class="line">可以用sys.getdefaultencoding()查看，如果不在python文件指定头信息＃-*-coding:utf-<span class="number">8</span>-*-,那就使用默认的</span><br><span class="line"></span><br><span class="line">python2中默认使用<span class="built_in">ascii</span>，python3中默认使用utf-<span class="number">8</span> </span><br></pre></td></tr></table></figure><p><img src="1036857-20170909232107397-1128690304.png" alt="img"></p><p>改正：在test.py指定文件头，字符编码一定要为gbk，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:gbk</span></span><br><span class="line">你好啊</span><br></pre></td></tr></table></figure><p><img src="1036857-20170909233313413-773375905.png" alt="img"></p><p>阶段三：读取已经加载到内存的代码（unicode编码格式），然后执行，执行过程中可能会开辟新的内存空间，比如x=”allen” </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">内存的编码使用unicode，不代表内存中全都是unicode，</span><br><span class="line"></span><br><span class="line">在程序执行之前，内存中确实都是unicode,比如从文件中读取了一行x=<span class="string">&quot;allen&quot;</span>,其中的x，等号，引号，地位都一样，都是普通字符而已，都是以unicode的格式存放于内存中的</span><br><span class="line"></span><br><span class="line">但是程序在执行过程中，会申请内存（与程序代码所存在的内存是俩个空间）用来存放python的数据类型的值，而python的字符串类型又涉及到了字符的概念</span><br><span class="line"></span><br><span class="line">比如x=<span class="string">&quot;allen&quot;</span>,会被python解释器识别为字符串，会申请内存空间来存放字符串类型的值，至于该字符串类型的值被识别成何种编码存放，这就与python解释器的有关了，而python2与python3的字符串类型又有所不同。 </span><br></pre></td></tr></table></figure><h3 id="py2与py3字符串类型的区别"><a href="#py2与py3字符串类型的区别" class="headerlink" title="py2与py3字符串类型的区别"></a>py2与py3字符串类型的区别</h3><p>一 在python2中有两种字符串类型str和unicode </p><p>str类型 </p><p>当python解释器执行到产生字符串的代码时（例如x=’上’），会申请新的内存地址，然后将’上’编码成文件开头指定的编码格式</p><p>要想看x在内存中的真实格式，可以将其放入列表中再打印，而不要直接打印，因为直接print()会自动转换编码，这一点我们稍后再说。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:gbk</span></span><br><span class="line">x=<span class="string">&#x27;上&#x27;</span></span><br><span class="line">y=<span class="string">&#x27;下&#x27;</span></span><br><span class="line"><span class="built_in">print</span>([x,y]) <span class="comment">#[&#x27;\xc9\xcf&#x27;, &#x27;\xcf\xc2&#x27;]</span></span><br><span class="line"><span class="comment">#\x代表16进制，此处是c9cf总共4位16进制数，一个16进制四4个比特位，4个16进制数则是16个比特位，即2个Bytes，这就证明了按照gbk编码中文用2Bytes</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(x),<span class="built_in">type</span>(y)) <span class="comment">#(&lt;type &#x27;str&#x27;&gt;, &lt;type &#x27;str&#x27;&gt;)</span></span><br></pre></td></tr></table></figure><p>理解字符编码的关键！！！ </p><p>内存中的数据通常用16进制表示，2位16进制数据代表一个字节，如\xc9，代表两位16进制，一个字节</p><p>gbk存中文需要2个bytes，而存英文则需要1个bytes，它是如何做到的？？？！！！ </p><p>gbk会在每个bytes，即8位bit的第一个位作为标志位，标志位为1则表示是中文字符，如果标志位为0则表示为英文字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x=‘你a好’</span><br><span class="line">转成gbk格式二进制位</span><br><span class="line">8bit+8bit+8bit+8bit+8bit=(<span class="number">1</span>+7bit)+(<span class="number">1</span>+7bit)+(<span class="number">0</span>+7bit)+(<span class="number">1</span>+7bit)+(<span class="number">1</span>+7bit)</span><br></pre></td></tr></table></figure><p>这样计算机按照从左往右的顺序读：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#连续读到前两个括号内的首位标志位均为1，则构成一个中午字符：你</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#读到第三个括号的首位标志为0，则该8bit代表一个英文字符：a</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#连续读到后两个括号内的首位标志位均为1，则构成一个中午字符：好</span></span><br></pre></td></tr></table></figure><p>也就是说，每个Bytes留给我们用来存真正值的有效位数只有7位，而在unicode表中存放的只是这有效的7位，至于首位的标志位与具体的编码有关，即在unicode中表示gbk的方式为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(7bit)+(7bit)+(7bit)+(7bit)+(7bit)</span><br></pre></td></tr></table></figure><p><img src="1036857-20170922130238962-1916502463.png" alt="img"></p><p>按照上图翻译的结果，我们可以去unicode关于汉字的对应关系中去查：<a href="https://pan.baidu.com/s/1dEV3RYp">链接：https://pan.baidu.com/s/1dEV3RYp</a></p><p><img src="1036857-20170910003301897-1606546897.png" alt="img"></p><p>可以看到“”上“”对应的gbk（G0代表的是gbk）编码就为494F，即我们得出的结果，而上对应的unicode编码为4E0A，我们可以将gbk—&gt;decode—&gt;unicode</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:gbk</span></span><br><span class="line">x=<span class="string">&#x27;上&#x27;</span>.decode(<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line">y=<span class="string">&#x27;下&#x27;</span>.decode(<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>([x,y]) <span class="comment">#[u&#x27;\u4e0a&#x27;, u&#x27;\u4e0b&#x27;]</span></span><br></pre></td></tr></table></figure><p>unicode类型 </p><p>当python解释器执行到产生字符串的代码时（例如s=u’林’），会申请新的内存地址，然后将’林’以unicode的格式存放到新的内存空间中，所以s只能encode，不能decode</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:gbk</span></span><br><span class="line">x=<span class="string">u&#x27;上&#x27;</span> <span class="comment">#等同于 x=&#x27;上&#x27;.decode(&#x27;gbk&#x27;)</span></span><br><span class="line">y=<span class="string">u&#x27;下&#x27;</span> <span class="comment">#等同于 y=&#x27;下&#x27;.decode(&#x27;gbk&#x27;)</span></span><br><span class="line"><span class="built_in">print</span>([x,y]) <span class="comment">#[u&#x27;\u4e0a&#x27;, u&#x27;\u4e0b&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(x),<span class="built_in">type</span>(y)) <span class="comment">#(&lt;type &#x27;unicode&#x27;&gt;, &lt;type &#x27;unicode&#x27;&gt;)</span></span><br></pre></td></tr></table></figure><p>打印到终端 </p><p>对于print需要特别说明的是：</p><p>当程序执行时，比如</p><p>x=’上’ #gbk下，字符串存放为\xc9\xcf</p><p>print(x) #这一步是将x指向的那块新的内存空间（非代码所在的内存空间）中的内存，打印到终端，按理说应该是存的什么就打印什么,但打印\xc9\xcf，对一些不熟知python编码的程序员，立马就懵逼了，所以龟叔自作主张，在print(x)时，使用终端的编码格式，将内存中的\xc9\xcf转成字符显示，此时就需要终端编码必须为gbk，否则无法正常显示原内容：上</p><p><img src="1036857-20170910005004054-1900871107.png" alt="img"></p><p><img src="1036857-20170910005055179-994228295.png" alt="img"></p><p>对于unicode格式的数据来说，无论怎么打印，都不会乱码 </p><p><img src="1036857-20170910005215101-409196993.png" alt="img"></p><p><img src="1036857-20170910005243522-289630322.png" alt="img"></p><p>unicode这么好，不会乱码，那python2为何还那么别扭，搞一个str出来呢？python诞生之时，unicode并未像今天这样普及，很明显，好的东西你能看得见，龟叔早就看见了，龟叔在python3中将str直接存成unicode，我们定义一个str，无需加u前缀，就是一个unicode，屌不屌？ </p><p>二 在python3 中也有两种字符串类型str和bytes </p><p>str是unicode</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:gbk</span></span><br><span class="line">x=<span class="string">&#x27;上&#x27;</span> <span class="comment">#当程序执行时，无需加u，&#x27;上&#x27;也会被以unicode形式保存新的内存空间中,</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(x)) <span class="comment">#&lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#x可以直接encode成任意编码格式</span></span><br><span class="line"><span class="built_in">print</span>(x.encode(<span class="string">&#x27;gbk&#x27;</span>)) <span class="comment">#b&#x27;\xc9\xcf&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(x.encode(<span class="string">&#x27;gbk&#x27;</span>))) <span class="comment">#&lt;class &#x27;bytes&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p>很重要的一点是：看到python3中x.encode(‘gbk’) 的结果\xc9\xcf正是python2中的str类型的值,而在python3是bytes类型，在python2中则是str类型</p><p>于是我有一个大胆的推测：python2中的str类型就是python3的bytes类型，于是我查看python2的str()源码，发现</p><p><img src="1036857-20170513175903254-1065643094.png" alt="img"></p><p>字符编码的问题看似很小，经常被技术人员忽视，但是很容易导致一些莫名其妙的问题。这里总结了一下字符编码的一些普及性的知识，希望对大家有所帮助。</p><h1 id="流程控制之if…else"><a href="#流程控制之if…else" class="headerlink" title="流程控制之if…else"></a>流程控制之if…else</h1><p>  既然我们编程的目的是为了控制计算机能够像人脑一样工作，那么人脑能做什么，就需要程序中有相应的机制去模拟。人脑无非是数学运算和逻辑运算，对于数学运算在上一节我们已经说过了。对于逻辑运算，即人根据外部条件的变化而做出不同的反映，比如</p><p>1<code>如果：女人的年龄&gt;30岁，那么：叫阿姨</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">age_of_girl=<span class="number">31</span></span><br><span class="line"><span class="keyword">if</span> age_of_girl &gt; <span class="number">30</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;阿姨好&#x27;</span>)</span><br></pre></td></tr></table></figure><p>2 <code>如果：女人的年龄&gt;30岁，那么：叫阿姨，否则：叫小姐</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">age_of_girl=<span class="number">18</span></span><br><span class="line"><span class="keyword">if</span> age_of_girl &gt; <span class="number">30</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;阿姨好&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;小姐好&#x27;</span>)</span><br></pre></td></tr></table></figure><p>3 <code>如果：女人的年龄&gt;=18并且&lt;22岁并且身高&gt;170并且体重&lt;100并且是漂亮的，那么：表白，否则：叫阿姨</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">age_of_girl=<span class="number">18</span></span><br><span class="line">height=<span class="number">171</span></span><br><span class="line">weight=<span class="number">99</span></span><br><span class="line">is_pretty=<span class="literal">True</span></span><br><span class="line"><span class="keyword">if</span> age_of_girl &gt;= <span class="number">18</span> <span class="keyword">and</span> age_of_girl &lt; <span class="number">22</span> <span class="keyword">and</span> height &gt; <span class="number">170</span> <span class="keyword">and</span> weight &lt; <span class="number">100</span> <span class="keyword">and</span> is_pretty == <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;表白...&#x27;</span>)<span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;阿姨好&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在表白的基础上继续：</span></span><br><span class="line"><span class="comment">#如果表白成功，那么：在一起</span></span><br><span class="line"><span class="comment">#否则：打印。。。</span></span><br><span class="line"></span><br><span class="line">age_of_girl=<span class="number">18</span></span><br><span class="line">height=<span class="number">171</span></span><br><span class="line">weight=<span class="number">99</span></span><br><span class="line">is_pretty=<span class="literal">True</span></span><br><span class="line"></span><br><span class="line">success=<span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> age_of_girl &gt;= <span class="number">18</span> <span class="keyword">and</span> age_of_girl &lt; <span class="number">22</span> <span class="keyword">and</span> height &gt; <span class="number">170</span> <span class="keyword">and</span> weight &lt; <span class="number">100</span> <span class="keyword">and</span> is_pretty == <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">if</span> success:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;表白成功,在一起&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;什么爱情不爱情的,爱nmlgb的爱情,爱nmlg啊...&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;阿姨好&#x27;</span>)</span><br></pre></td></tr></table></figure><p>4 如果：成绩&gt;=90，那么：优秀 </p><p>  如果成绩&gt;=80且&lt;90,那么：良好</p><p>  如果成绩&gt;=70且&lt;80,那么：普通</p><p>  其他情况：很差</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">score=<span class="built_in">input</span>(<span class="string">&#x27;&gt;&gt;: &#x27;</span>)</span><br><span class="line">score=<span class="built_in">int</span>(score)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> score &gt;= <span class="number">90</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;优秀&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">80</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;良好&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">70</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;普通&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;很差&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">　　<span class="keyword">if</span> 条件<span class="number">1</span>:</span><br><span class="line">　　　　缩进的代码块</span><br><span class="line">　　<span class="keyword">elif</span> 条件<span class="number">2</span>:</span><br><span class="line">　　　　缩进的代码块</span><br><span class="line">　　<span class="keyword">elif</span> 条件<span class="number">3</span>:</span><br><span class="line">　　　　缩进的代码块</span><br><span class="line">　　<span class="keyword">else</span>:　　</span><br><span class="line">　　　　缩进的代码块</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 练习一：用户登陆验证</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line">name=<span class="built_in">input</span>(<span class="string">&#x27;请输入用户名字：&#x27;</span>)</span><br><span class="line">password=<span class="built_in">input</span>(<span class="string">&#x27;请输入密码：&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> name == <span class="string">&#x27;allen&#x27;</span> <span class="keyword">and</span> password == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;allen login success&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;用户名或密码错误&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#练习二：根据用户输入内容输出其权限</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#根据用户输入内容打印其权限</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">egon --&gt; 超级管理员</span></span><br><span class="line"><span class="string">tom  --&gt; 普通管理员</span></span><br><span class="line"><span class="string">jack,rain --&gt; 业务主管</span></span><br><span class="line"><span class="string">其他 --&gt; 普通用户</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">name=<span class="built_in">input</span>(<span class="string">&#x27;请输入用户名字：&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> name == <span class="string">&#x27;allen&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;超级管理员&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> name == <span class="string">&#x27;tom&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;普通管理员&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> name == <span class="string">&#x27;jack&#x27;</span> <span class="keyword">or</span> name == <span class="string">&#x27;rain&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;业务主管&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;普通用户&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 练习三</span></span><br><span class="line"><span class="comment"># 如果:今天是Monday,那么:上班</span></span><br><span class="line"><span class="comment"># 如果:今天是Tuesday,那么:上班</span></span><br><span class="line"><span class="comment"># 如果:今天是Wednesday,那么:上班</span></span><br><span class="line"><span class="comment"># 如果:今天是Thursday,那么:上班</span></span><br><span class="line"><span class="comment"># 如果:今天是Friday,那么:上班</span></span><br><span class="line"><span class="comment"># 如果:今天是Saturday,那么:出去浪</span></span><br><span class="line"><span class="comment"># 如果:今天是Sunday,那么:出去浪</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#方式一：</span></span><br><span class="line">today=<span class="built_in">input</span>(<span class="string">&#x27;&gt;&gt;: &#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> today == <span class="string">&#x27;Monday&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;上班&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> today == <span class="string">&#x27;Tuesday&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;上班&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> today == <span class="string">&#x27;Wednesday&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;上班&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> today == <span class="string">&#x27;Thursday&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;上班&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> today == <span class="string">&#x27;Friday&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;上班&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> today == <span class="string">&#x27;Saturday&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;出去浪&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> today == <span class="string">&#x27;Sunday&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;出去浪&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#x27;&#x27;必须输入其中一种:</span></span><br><span class="line"><span class="string">    Monday</span></span><br><span class="line"><span class="string">    Tuesday</span></span><br><span class="line"><span class="string">    Wednesday</span></span><br><span class="line"><span class="string">    Thursday</span></span><br><span class="line"><span class="string">    Friday</span></span><br><span class="line"><span class="string">    Saturday</span></span><br><span class="line"><span class="string">    Sunday</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#方式二：</span></span><br><span class="line">today=<span class="built_in">input</span>(<span class="string">&#x27;&gt;&gt;: &#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> today == <span class="string">&#x27;Saturday&#x27;</span> <span class="keyword">or</span> today == <span class="string">&#x27;Sunday&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;出去浪&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> today == <span class="string">&#x27;Monday&#x27;</span> <span class="keyword">or</span> today == <span class="string">&#x27;Tuesday&#x27;</span> <span class="keyword">or</span> today == <span class="string">&#x27;Wednesday&#x27;</span> \</span><br><span class="line">    <span class="keyword">or</span> today == <span class="string">&#x27;Thursday&#x27;</span> <span class="keyword">or</span> today == <span class="string">&#x27;Friday&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;上班&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#x27;&#x27;必须输入其中一种:</span></span><br><span class="line"><span class="string">    Monday</span></span><br><span class="line"><span class="string">    Tuesday</span></span><br><span class="line"><span class="string">    Wednesday</span></span><br><span class="line"><span class="string">    Thursday</span></span><br><span class="line"><span class="string">    Friday</span></span><br><span class="line"><span class="string">    Saturday</span></span><br><span class="line"><span class="string">    Sunday</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#方式三：</span></span><br><span class="line">today=<span class="built_in">input</span>(<span class="string">&#x27;&gt;&gt;: &#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> today <span class="keyword">in</span> [<span class="string">&#x27;Saturday&#x27;</span>,<span class="string">&#x27;Sunday&#x27;</span>]:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;出去浪&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> today <span class="keyword">in</span> [<span class="string">&#x27;Monday&#x27;</span>,<span class="string">&#x27;Tuesday&#x27;</span>,<span class="string">&#x27;Wednesday&#x27;</span>,<span class="string">&#x27;Thursday&#x27;</span>,<span class="string">&#x27;Friday&#x27;</span>]:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;上班&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#x27;&#x27;必须输入其中一种:</span></span><br><span class="line"><span class="string">    Monday</span></span><br><span class="line"><span class="string">    Tuesday</span></span><br><span class="line"><span class="string">    Wednesday</span></span><br><span class="line"><span class="string">    Thursday</span></span><br><span class="line"><span class="string">    Friday</span></span><br><span class="line"><span class="string">    Saturday</span></span><br><span class="line"><span class="string">    Sunday</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="流程控制之while循环"><a href="#流程控制之while循环" class="headerlink" title="流程控制之while循环"></a>流程控制之while循环</h1><h2 id="为何要用循环"><a href="#为何要用循环" class="headerlink" title="为何要用循环"></a>为何要用循环</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#上节课我们已经学会用if .. else 来猜年龄的游戏啦，但是只能猜一次就中的机率太小了，如果我想给玩家3次机会呢？就是程序启动后，玩家最多可以试3次，这个怎么弄呢？你总不会想着把代码复制3次吧。。。。</span></span><br><span class="line"></span><br><span class="line">age_of_oldboy = <span class="number">48</span></span><br><span class="line"></span><br><span class="line">guess = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;&gt;&gt;:&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> guess &gt; age_of_oldboy :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;猜的太大了，往小里试试...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> guess &lt; age_of_oldboy :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;猜的太小了，往大里试试...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;恭喜你，猜对了...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#第2次</span></span><br><span class="line">guess = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;&gt;&gt;:&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> guess &gt; age_of_oldboy :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;猜的太大了，往小里试试...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> guess &lt; age_of_oldboy :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;猜的太小了，往大里试试...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;恭喜你，猜对了...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#第3次</span></span><br><span class="line">guess = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;&gt;&gt;:&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> guess &gt; age_of_oldboy :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;猜的太大了，往小里试试...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> guess &lt; age_of_oldboy :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;猜的太小了，往大里试试...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;恭喜你，猜对了...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#即使是小白的你，也觉得的太low了是不是，以后要修改功能还得修改3次，因此记住，写重复的代码是程序员最不耻的行为。</span></span><br><span class="line">那么如何做到不用写重复代码又能让程序重复一段代码多次呢？ 循环语句就派上用场啦</span><br></pre></td></tr></table></figure><h2 id="条件循环：while，语法如下"><a href="#条件循环：while，语法如下" class="headerlink" title="条件循环：while，语法如下"></a>条件循环：while，语法如下</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件:    </span><br><span class="line">    <span class="comment"># 循环体</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 如果条件为真，那么循环体则执行，执行完毕后再次循环，重新判断条件。。。</span></span><br><span class="line">    <span class="comment"># 如果条件为假，那么循环体不执行,循环终止</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#打印0-10</span></span><br><span class="line">count=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> count &lt;= <span class="number">10</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;loop&#x27;</span>,count)</span><br><span class="line">    count+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#打印0-10之间的偶数</span></span><br><span class="line">count=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> count &lt;= <span class="number">10</span>:</span><br><span class="line">    <span class="keyword">if</span> count%<span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;loop&#x27;</span>,count)</span><br><span class="line">    count+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#打印0-10之间的奇数</span></span><br><span class="line">count=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> count &lt;= <span class="number">10</span>:</span><br><span class="line">    <span class="keyword">if</span> count%<span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;loop&#x27;</span>,count)</span><br><span class="line">    count+=<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="死循环"><a href="#死循环" class="headerlink" title="死循环"></a>死循环</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">num=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;count&#x27;</span>,num)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    num+=<span class="number">1</span>　　 </span><br></pre></td></tr></table></figure><h2 id="循环嵌套与tag"><a href="#循环嵌套与tag" class="headerlink" title="循环嵌套与tag"></a>循环嵌套与tag</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">　　tag=<span class="literal">True</span> </span><br><span class="line"></span><br><span class="line">　　<span class="keyword">while</span> tag:</span><br><span class="line"></span><br><span class="line">　　　　......</span><br><span class="line"></span><br><span class="line">　　　　<span class="keyword">while</span> tag:</span><br><span class="line"></span><br><span class="line">　　　　　　........</span><br><span class="line"></span><br><span class="line">　　　　　　<span class="keyword">while</span> tag:</span><br><span class="line"></span><br><span class="line">　　　　　　　　tag=<span class="literal">False</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#练习，要求如下：</span></span><br><span class="line">    <span class="number">1</span> 循环验证用户输入的用户名与密码</span><br><span class="line">    <span class="number">2</span> 认证通过后，运行用户重复执行命令</span><br><span class="line">    <span class="number">3</span> 当用户输入命令为quit时，则退出整个程序 </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#实现一：</span></span><br><span class="line">name=<span class="string">&#x27;allen&#x27;</span></span><br><span class="line">password=<span class="string">&#x27;123&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    inp_name=<span class="built_in">input</span>(<span class="string">&#x27;用户名: &#x27;</span>)</span><br><span class="line">    inp_pwd=<span class="built_in">input</span>(<span class="string">&#x27;密码: &#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> inp_name == name <span class="keyword">and</span> inp_pwd == password:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            cmd=<span class="built_in">input</span>(<span class="string">&#x27;&gt;&gt;: &#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> cmd:<span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> cmd == <span class="string">&#x27;quit&#x27;</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;run &lt;%s&gt;&#x27;</span> %cmd)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;用户名或密码错误&#x27;</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#实现二：使用tag</span></span><br><span class="line">name=<span class="string">&#x27;allen&#x27;</span></span><br><span class="line">password=<span class="string">&#x27;123&#x27;</span></span><br><span class="line"></span><br><span class="line">tag=<span class="literal">True</span></span><br><span class="line"><span class="keyword">while</span> tag:</span><br><span class="line">    inp_name=<span class="built_in">input</span>(<span class="string">&#x27;用户名: &#x27;</span>)</span><br><span class="line">    inp_pwd=<span class="built_in">input</span>(<span class="string">&#x27;密码: &#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> inp_name == name <span class="keyword">and</span> inp_pwd == password:</span><br><span class="line">        <span class="keyword">while</span> tag:</span><br><span class="line">            cmd=<span class="built_in">input</span>(<span class="string">&#x27;&gt;&gt;: &#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> cmd:<span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> cmd == <span class="string">&#x27;quit&#x27;</span>:</span><br><span class="line">                tag=<span class="literal">False</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;run &lt;%s&gt;&#x27;</span> %cmd)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;用户名或密码错误&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="break与continue"><a href="#break与continue" class="headerlink" title="break与continue"></a>break与continue</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#break用于退出本层循环</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;123&quot;</span></span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;456&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#continue用于退出本次循环，继续下一次循环</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;123&quot;</span></span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;456&quot;</span></span><br></pre></td></tr></table></figure><h2 id="while-else"><a href="#while-else" class="headerlink" title="while+else"></a>while+else</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#与其它语言else 一般只与if 搭配不同，在Python 中还有个while ...else 语句，while 后面的else 作用是指，当while 循环正常执行完，中间没有被break 中止的话，就会执行else后面的语句</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> count &lt;= <span class="number">5</span> :</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Loop&quot;</span>,count)</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;循环正常执行完啦&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-----out of while loop ------&quot;</span>)</span><br><span class="line">输出</span><br><span class="line">Loop <span class="number">1</span></span><br><span class="line">Loop <span class="number">2</span></span><br><span class="line">Loop <span class="number">3</span></span><br><span class="line">Loop <span class="number">4</span></span><br><span class="line">Loop <span class="number">5</span></span><br><span class="line">Loop <span class="number">6</span></span><br><span class="line">循环正常执行完啦</span><br><span class="line">-----out of <span class="keyword">while</span> loop ------</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果执行过程中被break啦，就不会执行else的语句啦</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> count &lt;= <span class="number">5</span> :</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> count == <span class="number">3</span>:<span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Loop&quot;</span>,count)</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;循环正常执行完啦&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-----out of while loop ------&quot;</span>)</span><br><span class="line">输出</span><br><span class="line"></span><br><span class="line">Loop <span class="number">1</span></span><br><span class="line">Loop <span class="number">2</span></span><br><span class="line">-----out of <span class="keyword">while</span> loop ------</span><br></pre></td></tr></table></figure><h2 id="while循环练习题"><a href="#while循环练习题" class="headerlink" title="while循环练习题"></a>while循环练习题</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1. 使用while循环输出1 2 3 4 5 6     8 9 10</span></span><br><span class="line"><span class="comment">#2. 求1-100的所有数的和</span></span><br><span class="line"><span class="comment">#3. 输出 1-100 内的所有奇数</span></span><br><span class="line"><span class="comment">#4. 输出 1-100 内的所有偶数</span></span><br><span class="line"><span class="comment">#5. 求1-2+3-4+5 ... 99的所有数的和</span></span><br><span class="line"><span class="comment">#6. 用户登陆（三次机会重试）</span></span><br><span class="line"><span class="comment">#7：猜年龄游戏</span></span><br><span class="line">要求：</span><br><span class="line">    允许用户最多尝试<span class="number">3</span>次，<span class="number">3</span>次都没猜对的话，就直接退出，如果猜对了，打印恭喜信息并退出</span><br><span class="line"><span class="comment">#8：猜年龄游戏升级版 </span></span><br><span class="line">要求：</span><br><span class="line">    允许用户最多尝试<span class="number">3</span>次</span><br><span class="line">    每尝试<span class="number">3</span>次后，如果还没猜对，就问用户是否还想继续玩，如果回答Y或y, 就继续让其猜<span class="number">3</span>次，以此往复，如果回答N或n，就退出程序</span><br><span class="line">    如何猜对了，就直接退出 </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#题一</span></span><br><span class="line">count=<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> count &lt;= <span class="number">10</span>:</span><br><span class="line">    <span class="keyword">if</span> count == <span class="number">7</span>:</span><br><span class="line">        count+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(count)</span><br><span class="line">    count+=<span class="number">1</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">count=<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> count &lt;= <span class="number">10</span>:</span><br><span class="line">    <span class="keyword">if</span> count != <span class="number">7</span>:</span><br><span class="line">        <span class="built_in">print</span>(count)</span><br><span class="line">    count+=<span class="number">1</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment">#题目二</span></span><br><span class="line">res=<span class="number">0</span></span><br><span class="line">count=<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> count &lt;= <span class="number">100</span>:</span><br><span class="line">    res+=count</span><br><span class="line">    count+=<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line"><span class="comment">#题目三</span></span><br><span class="line">count=<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> count &lt;= <span class="number">100</span>:</span><br><span class="line">    <span class="keyword">if</span> count%<span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(count)</span><br><span class="line">    count+=<span class="number">1</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#题目四</span></span><br><span class="line">count=<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> count &lt;= <span class="number">100</span>:</span><br><span class="line">    <span class="keyword">if</span> count%<span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(count)</span><br><span class="line">    count+=<span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">#题目五</span></span><br><span class="line">res=<span class="number">0</span></span><br><span class="line">count=<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> count &lt;= <span class="number">5</span>:</span><br><span class="line">    <span class="keyword">if</span> count%<span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        res-=count</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        res+=count</span><br><span class="line">    count+=<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment">#题目六</span></span><br><span class="line">count=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> count &lt; <span class="number">3</span>:</span><br><span class="line">    name=<span class="built_in">input</span>(<span class="string">&#x27;请输入用户名：&#x27;</span>)</span><br><span class="line">    password=<span class="built_in">input</span>(<span class="string">&#x27;请输入密码：&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> name == <span class="string">&#x27;allen&#x27;</span> <span class="keyword">and</span> password == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;login success&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;用户名或者密码错误&#x27;</span>)</span><br><span class="line">        count+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#题目七</span></span><br><span class="line">age_of_oldboy=<span class="number">73</span></span><br><span class="line"></span><br><span class="line">count=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> count &lt; <span class="number">3</span>:</span><br><span class="line">    guess=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;&gt;&gt;: &#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> guess == age_of_oldboy:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;you got it&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    count+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#题目八</span></span><br><span class="line">age_of_oldboy=<span class="number">73</span></span><br><span class="line"></span><br><span class="line">count=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">if</span> count == <span class="number">3</span>:</span><br><span class="line">        choice=<span class="built_in">input</span>(<span class="string">&#x27;继续(Y/N?)&gt;&gt;: &#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> choice == <span class="string">&#x27;Y&#x27;</span> <span class="keyword">or</span> choice == <span class="string">&#x27;y&#x27;</span>:</span><br><span class="line">            count=<span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    guess=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;&gt;&gt;: &#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> guess == age_of_oldboy:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;you got it&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    count+=<span class="number">1</span></span><br></pre></td></tr></table></figure><h1 id="流程控制之for循环"><a href="#流程控制之for循环" class="headerlink" title="流程控制之for循环"></a>流程控制之for循环</h1><p>1 迭代式循环：for，语法如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">　　for i in range(10):</span><br><span class="line"></span><br><span class="line">　　　　缩进的代码块</span><br></pre></td></tr></table></figure><p>2 break与continue（同上）</p><p>3 循环嵌套</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,i+<span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s*%s=%s&#x27;</span> %(i,j,i*j),end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>() </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#分析</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">             #max_level=5</span></span><br><span class="line"><span class="string">    *        #current_level=1，空格数=4，*号数=1</span></span><br><span class="line"><span class="string">   ***       #current_level=2,空格数=3,*号数=3</span></span><br><span class="line"><span class="string">  *****      #current_level=3,空格数=2,*号数=5</span></span><br><span class="line"><span class="string"> *******     #current_level=4,空格数=1,*号数=7</span></span><br><span class="line"><span class="string">*********    #current_level=5,空格数=0,*号数=9</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#数学表达式</span></span><br><span class="line"><span class="string">空格数=max_level-current_level</span></span><br><span class="line"><span class="string">*号数=2*current_level-1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#实现</span></span><br><span class="line">max_level=<span class="number">5</span></span><br><span class="line"><span class="keyword">for</span> current_level <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,max_level+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(max_level-current_level):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27; &#x27;</span>,end=<span class="string">&#x27;&#x27;</span>) <span class="comment">#在一行中连续打印多个空格</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>*current_level-<span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;*&#x27;</span>,end=<span class="string">&#x27;&#x27;</span>) <span class="comment">#在一行中连续打印多个空格</span></span><br><span class="line">    <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><h2 id="for-else"><a href="#for-else" class="headerlink" title="for + else"></a>for + else</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)</span><br><span class="line">循环执行的代码体</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">     循环结束后执行的代码体</span><br></pre></td></tr></table></figure><h1 id="文件处理"><a href="#文件处理" class="headerlink" title="文件处理"></a>文件处理</h1><h2 id="一-文件操作"><a href="#一-文件操作" class="headerlink" title="一 文件操作"></a>一 文件操作</h2><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>计算机系统分为：计算机硬件，操作系统，应用程序三部分。</p><p>我们用python或其他语言编写的应用程序若想要把数据永久保存下来，必须要保存于硬盘中，这就涉及到应用程序要操作硬件，众所周知，应用程序是无法直接操作硬件的，这就用到了操作系统。操作系统把复杂的硬件操作封装成简单的接口给用户/应用程序使用，其中文件就是操作系统提供给应用程序来操作硬盘虚拟概念，用户或应用程序通过操作文件，可以将自己的数据永久保存下来。</p><p>有了文件的概念，我们无需再去考虑操作硬盘的细节，只需要关注操作文件的流程：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1. 打开文件，得到文件句柄并赋值给一个变量</span></span><br><span class="line"><span class="comment">#2. 通过句柄对文件进行操作</span></span><br><span class="line"><span class="comment">#3. 关闭文件</span></span><br></pre></td></tr></table></figure><h2 id="在python中"><a href="#在python中" class="headerlink" title="在python中"></a>在python中</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1. 打开文件，得到文件句柄并赋值给一个变量</span></span><br><span class="line">f=<span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="comment">#默认打开模式就为r</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2. 通过句柄对文件进行操作</span></span><br><span class="line">data=f.read()</span><br><span class="line"></span><br><span class="line"><span class="comment">#3. 关闭文件</span></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><h2 id="f-open-‘a-txt’-’r’-的过程分析"><a href="#f-open-‘a-txt’-’r’-的过程分析" class="headerlink" title="f=open(‘a.txt’,’r’)的过程分析"></a>f=open(‘a.txt’,’r’)的过程分析</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、由应用程序向操作系统发起系统调用open(...)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2、操作系统打开该文件，并返回一个文件句柄给应用程序</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3、应用程序将文件句柄赋值给变量f</span></span><br></pre></td></tr></table></figure><h2 id="强调！！！"><a href="#强调！！！" class="headerlink" title="强调！！！"></a>强调！！！</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#强调第一点：</span></span><br><span class="line">打开一个文件包含两部分资源：操作系统级打开的文件+应用程序的变量。在操作完毕一个文件时，必须把与该文件的这两部分资源一个不落地回收，回收方法为：</span><br><span class="line"><span class="number">1</span>、f.close() <span class="comment">#回收操作系统级打开的文件</span></span><br><span class="line"><span class="number">2</span>、<span class="keyword">del</span> f <span class="comment">#回收应用程序级的变量</span></span><br><span class="line"></span><br><span class="line">其中<span class="keyword">del</span> f一定要发生在f.close()之后，否则就会导致操作系统打开的文件还没有关闭，白白占用资源，</span><br><span class="line">而python自动的垃圾回收机制决定了我们无需考虑<span class="keyword">del</span> f，这就要求我们，在操作完毕文件后，一定要记住f.close()</span><br><span class="line"></span><br><span class="line">虽然我这么说，但是很多同学还是会很不要脸地忘记f.close(),对于这些不长脑子的同学，我们推荐傻瓜式操作方式：使用<span class="keyword">with</span>关键字来帮我们管理上下文</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> read_f,<span class="built_in">open</span>(<span class="string">&#x27;b.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> write_f:</span><br><span class="line">    data=read_f.read()</span><br><span class="line">    write_f.write(data)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#强调第二点：</span></span><br><span class="line">f=<span class="built_in">open</span>(...)是由操作系统打开文件，那么如果我们没有为<span class="built_in">open</span>指定编码，那么打开文件的默认编码很明显是操作系统说了算了，操作系统会用自己的默认编码去打开文件，在windows下是gbk，在linux下是utf-<span class="number">8</span>。</span><br><span class="line">这就用到了上节课讲的字符编码的知识：若要保证不乱码，文件以什么方式存的，就要以什么方式打开。</span><br><span class="line"></span><br><span class="line">f=<span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="python2中的file与open"><a href="#python2中的file与open" class="headerlink" title="python2中的file与open"></a>python2中的file与open</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#首先在python3中操作文件只有一种选择，那就是open()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#而在python2中则有两种方式：file()与open()</span></span><br><span class="line">两者都能够打开文件，对文件进行操作，也具有相似的用法和参数，但是，这两种文件打开方式有本质的区别，file为文件类，用file()来打开文件，相当于这是在构造文件类，而用<span class="built_in">open</span>()打开文件，是用python的内建函数来操作，我们一般使用<span class="built_in">open</span>()打开文件进行操作，而用file当做一个类型，比如<span class="built_in">type</span>(f) <span class="keyword">is</span> file</span><br></pre></td></tr></table></figure><h2 id="二-打开文件的模式"><a href="#二-打开文件的模式" class="headerlink" title="二 打开文件的模式"></a>二 打开文件的模式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文件句柄 = <span class="built_in">open</span>(<span class="string">&#x27;文件路径&#x27;</span>, <span class="string">&#x27;模式&#x27;</span>)</span><br></pre></td></tr></table></figure><p>模式可以是以下方式以及他们之间的组合：</p><div class="table-container"><table><thead><tr><th>Character</th><th>Meaning</th></tr></thead><tbody><tr><td>‘r’</td><td>open for reading (default)</td></tr><tr><td>‘w’</td><td>open for writing, truncating the file first</td></tr><tr><td>‘a’</td><td>open for writing, appending to the end of the file if it exists</td></tr><tr><td>‘b’</td><td>binary mode</td></tr><tr><td>‘t’</td><td>text mode (default)</td></tr><tr><td>‘+’</td><td>open a disk file for updating (reading and writing)</td></tr><tr><td>‘U’</td><td>universal newline mode (for backwards compatibility; should not be used in new code)</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1. 打开文件的模式有(默认为文本模式)：</span></span><br><span class="line">r ，只读模式【默认模式，文件必须存在，不存在则抛出异常】</span><br><span class="line">w，只写模式【不可读；不存在则创建；存在则清空内容】</span><br><span class="line">a， 之追加写模式【不可读；不存在则创建；存在则只追加内容】</span><br><span class="line"></span><br><span class="line"><span class="comment">#2. 对于非文本文件，我们只能使用b模式，&quot;b&quot;表示以字节的方式操作（而所有文件也都是以字节的形式存储的，使用这种模式无需考虑文本文件的字符编码、图片文件的jgp格式、视频文件的avi格式）</span></span><br><span class="line">rb </span><br><span class="line">wb</span><br><span class="line">ab</span><br><span class="line">注：以b方式打开时，读取到的内容是字节类型，写入时也需要提供字节类型，不能指定编码</span><br><span class="line"></span><br><span class="line"><span class="comment">#3. 了解部分</span></span><br><span class="line"><span class="string">&quot;+&quot;</span> 表示可以同时读写某个文件</span><br><span class="line">r+， 读写【可读，可写】</span><br><span class="line">w+，写读【可读，可写】</span><br><span class="line">a+， 写读【可读，可写】</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x， 只写模式【不可读；不存在则创建，存在则报错】</span><br><span class="line">x+ ，写读【可读，可写】</span><br><span class="line">xb</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 回车与换行的来龙去脉</span></span><br><span class="line">http://www.cnblogs.com/linhaifeng/articles/<span class="number">8477592.</span>html</span><br><span class="line"></span><br><span class="line"><span class="comment"># U模式</span></span><br><span class="line"><span class="string">&#x27;U&#x27;</span> mode <span class="keyword">is</span> deprecated <span class="keyword">and</span> will <span class="keyword">raise</span> an exception <span class="keyword">in</span> future versions</span><br><span class="line">of Python.  It has no effect <span class="keyword">in</span> Python <span class="number">3.</span>  Use newline to control</span><br><span class="line">universal newlines mode.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 总结：</span></span><br><span class="line">在python3中使用默认的newline=<span class="literal">None</span>即可，换行符无论何种平台统一用\n即可</span><br></pre></td></tr></table></figure><h2 id="三-操作文件的方法"><a href="#三-操作文件的方法" class="headerlink" title="三 操作文件的方法"></a>三 操作文件的方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#掌握</span></span><br><span class="line">f.read() <span class="comment">#读取所有内容,光标移动到文件末尾</span></span><br><span class="line">f.readline() <span class="comment">#读取一行内容,光标移动到第二行首部</span></span><br><span class="line">f.readlines() <span class="comment">#读取每一行内容,存放于列表中</span></span><br><span class="line"></span><br><span class="line">f.write(<span class="string">&#x27;1111\n222\n&#x27;</span>) <span class="comment">#针对文本模式的写,需要自己写换行符</span></span><br><span class="line">f.write(<span class="string">&#x27;1111\n222\n&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>)) <span class="comment">#针对b模式的写,需要自己写换行符</span></span><br><span class="line">f.writelines([<span class="string">&#x27;333\n&#x27;</span>,<span class="string">&#x27;444\n&#x27;</span>]) <span class="comment">#文件模式</span></span><br><span class="line">f.writelines([<span class="built_in">bytes</span>(<span class="string">&#x27;333\n&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>),<span class="string">&#x27;444\n&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>)]) <span class="comment">#b模式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#了解</span></span><br><span class="line">f.readable() <span class="comment">#文件是否可读</span></span><br><span class="line">f.writable() <span class="comment">#文件是否可读</span></span><br><span class="line">f.closed <span class="comment">#文件是否关闭</span></span><br><span class="line">f.encoding <span class="comment">#如果文件打开模式为b,则没有该属性</span></span><br><span class="line">f.flush() <span class="comment">#立刻将文件内容从内存刷到硬盘</span></span><br><span class="line">f.name</span><br></pre></td></tr></table></figure><p>练习，利用b模式，编写一个cp工具，要求如下：</p><p>　　1. 既可以拷贝文本又可以拷贝视频，图片等文件</p><p>　　2. 用户一旦参数错误，打印命令的正确使用方法，如usage: cp source_file target_file</p><p>　　提示：可以用import sys，然后用sys.argv获取脚本后面跟的参数    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) != <span class="number">3</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;usage: cp source_file target_file&#x27;</span>)</span><br><span class="line">    sys.exit()</span><br><span class="line"></span><br><span class="line">source_file,target_file=sys.argv[<span class="number">1</span>],sys.argv[<span class="number">2</span>]</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(source_file,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> read_f,<span class="built_in">open</span>(target_file,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> write_f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> read_f:</span><br><span class="line">        write_f.write(line)</span><br></pre></td></tr></table></figure><h2 id="四-文件内光标移动"><a href="#四-文件内光标移动" class="headerlink" title="四 文件内光标移动"></a>四 文件内光标移动</h2><p>一: read(3)：</p><p>　　1. 文件打开方式为文本模式时，代表读取3个字符</p><p>　　2. 文件打开方式为b模式时，代表读取3个字节</p><p>二: 其余的文件内光标移动都是以字节为单位如seek，tell，truncate</p><p>注意：</p><p>　　1. seek有三种移动方式0，1，2，其中1和2必须在b模式下进行，但无论哪种模式，都是以bytes为单位移动的</p><p>　　2. truncate是截断文件，所以文件的打开方式必须可写，但是不能用w或w+等方式打开，因为那样直接清空文件了，所以truncate要在r+或a或a+等模式下测试效果</p><p>基于seek实现tail -f功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.seek(<span class="number">0</span>,<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        line=f.readline()</span><br><span class="line">        <span class="keyword">if</span> line:</span><br><span class="line">            <span class="built_in">print</span>(line.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            time.sleep(<span class="number">0.2</span>)</span><br></pre></td></tr></table></figure><h2 id="五-文件的修改"><a href="#五-文件的修改" class="headerlink" title="五 文件的修改"></a>五 文件的修改</h2><p>文件的数据是存放于硬盘上的，因而只存在覆盖、不存在修改这么一说，我们平时看到的修改文件，都是模拟出来的效果，具体的说有两种实现方式：</p><p>方式一：将硬盘存放的该文件的内容全部加载到内存，在内存中是可以修改的，修改完毕后，再由内存覆盖到硬盘（word，vim，nodpad++等编辑器）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>) <span class="keyword">as</span> read_f,<span class="built_in">open</span>(<span class="string">&#x27;.a.txt.swap&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> write_f:</span><br><span class="line">    data=read_f.read() <span class="comment">#全部读入内存,如果文件很大,会很卡</span></span><br><span class="line">    data=data.replace(<span class="string">&#x27;alex&#x27;</span>,<span class="string">&#x27;SB&#x27;</span>) <span class="comment">#在内存中完成修改</span></span><br><span class="line"></span><br><span class="line">    write_f.write(data) <span class="comment">#一次性写入新文件</span></span><br><span class="line"></span><br><span class="line">os.remove(<span class="string">&#x27;a.txt&#x27;</span>)</span><br><span class="line">os.rename(<span class="string">&#x27;.a.txt.swap&#x27;</span>,<span class="string">&#x27;a.txt&#x27;</span>) </span><br></pre></td></tr></table></figure><p>方式二：将硬盘存放的该文件的内容一行一行地读入内存，修改完毕就写入新文件，最后用新文件覆盖源文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>) <span class="keyword">as</span> read_f,<span class="built_in">open</span>(<span class="string">&#x27;.a.txt.swap&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> write_f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> read_f:</span><br><span class="line">        line=line.replace(<span class="string">&#x27;alex&#x27;</span>,<span class="string">&#x27;SB&#x27;</span>)</span><br><span class="line">        write_f.write(line)</span><br><span class="line"></span><br><span class="line">os.remove(<span class="string">&#x27;a.txt&#x27;</span>)</span><br><span class="line">os.rename(<span class="string">&#x27;.a.txt.swap&#x27;</span>,<span class="string">&#x27;a.txt&#x27;</span>) </span><br><span class="line">​```/</span><br><span class="line"></span><br><span class="line">练习题：</span><br><span class="line"></span><br><span class="line">​```python</span><br><span class="line"><span class="number">1.</span> 文件a.txt内容：每一行内容分别为商品名字，价钱，个数，求出本次购物花费的总钱数</span><br><span class="line">apple <span class="number">10</span> <span class="number">3</span></span><br><span class="line">tesla <span class="number">100000</span> <span class="number">1</span></span><br><span class="line">mac <span class="number">3000</span> <span class="number">2</span></span><br><span class="line">lenovo <span class="number">30000</span> <span class="number">3</span></span><br><span class="line">chicken <span class="number">10</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 修改文件内容，把文件中的alex都替换成SB</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python之旅 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据类型 </tag>
            
            <tag> 字符编码 </tag>
            
            <tag> 文件处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络知识的简单介绍</title>
      <link href="/2019/08/19/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86%E7%9A%84%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/"/>
      <url>/2019/08/19/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86%E7%9A%84%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="网络基础"><a href="#网络基础" class="headerlink" title="网络基础"></a>网络基础</h1><p>1.网络指的是什么？</p><p>　　计算机与计算机之间通过物理链接介质（网络设备）连接到一起。</p><p>　　计算机与计算机之间基于网络协议通信（网络协议就相当于计算机界的英语）</p><p>2.osi七层协议：</p><p>互联网协议按照功能不同分为osi七层或tcp/ip五层或tcp/ip四层</p><p><img src="1184802-20170713144722697-1296783623.png" alt="img"><br>每层运行常见物理设备：</p><p><img src="1184802-20170717142255425-1238644025.png" alt="img"><br>3.五层模型讲解</p><p><strong>物理层：</strong>由来：计算机和计算机之间要想通信，就必须接入internet，言外之意就是计算机之间必须完成组网。</p><p>　　　    　功能：主要基于电器特性发送高低电压，高电压对应数字1，低电压对应数字0（提供电信号）</p><h1 id="数据链路层："><a href="#数据链路层：" class="headerlink" title="数据链路层："></a>数据链路层：</h1><p>　　　　   1.由来：单纯的电信号0和1没有任何意义，必须规定电信号多少位</p><p>　　　　   2.功能：定义了电信号的分组方式</p><p>　　　　   3.以太网协议ethernet:早期的时候各个公司都有自己的分组方式，后来形成了统一的标准，即以太网协议ethernet</p><p>　　　　   4.以太网协议ethernet规定：</p><p>　　　　　　1.一组电信号构成一个数据包，叫做“帧”</p><p>　　　　　　2.每一数据帧分成：报头head和数据data两部分</p><p>　　　　　　　　　　head包含：发送者/源地址，6个字节</p><p>　　　　　　　　　　                   接受者/目标地址，6个字节</p><p>　　　　　　　　　　                   数据类型：6个字节</p><p>　　　　　　　　　　data包含：数据包的具体内容（最短64字节，最长1500字节）</p><p>　　　　5.mac地址：ethernet规定接入internet的设备都必须具备网卡，发送端和接收端的地址便是指网卡的地址，即mac地址。</p><p>　　　　6.广播：有了mac地址，同一网络内的两台机器就可以通信了（一台主机通过arpmac协议获取另外一台主机的mac地址）</p><h1 id="网络层："><a href="#网络层：" class="headerlink" title="网络层："></a>网络层：</h1><p>　　　1.由来：有了ethernet，mac地址，广播的发送方式，计算机与计算机之间就可以通信了，问题是世界范围的互联网由一个个彼此隔离的小的局域网组成的，那么发送一条消息全世界都能收到，这样会导致效率很低了。所以，必须找到一种方法来区分计算机是在局域网还是不在局域网里。如果在同一个局域网里，就采用广播的方式发送，如果不是，就采用路由的方式。</p><p>　　　2.功能：引入一套新的地址用来区分不同的广播域/子网，这套地址即网络地址。</p><p>　　   3. IP地址：规定网络地址的协议叫ip地址，广泛采用V4版本即ipv4，它规定网络地址由32位二进制表示</p><p>​               范围：0.0.0.0-255.255.255.255</p><p>　　　　 一个ip地址通常写成四段十进制数，例：172.16.10.1</p><p>　　   4.子网掩码：所谓”子网掩码”，就是表示子网络特征的一个参数。它在形式上等同于IP地址，也是一个32位二进制数字，它的网络部分全部为1，主机部分全部为0。比如，IP地址172.16.10.1，如果已知网络部分是前24位，主机部分是后8位，那么子网络掩码就是11111111.11111111.11111111.00000000，写成十进制就是255.255.255.0。</p><p>　　　　知道”子网掩码”，我们就能判断，任意两个IP地址是否处在同一个子网络。方法是将两个IP地址与子网掩码分别进行AND运算（两个数位都为1，运算结果为1，否则为0），然后比较结果是否相同，如果是的话，就表明它们在同一个子网络中，否则就不是。</p><p>　　   5.arp协议：就是讲IP地址解析成mac地址。</p><h1 id="传输层："><a href="#传输层：" class="headerlink" title="传输层："></a>传输层：</h1><p>　　 <strong>1.</strong> 由来：我们通过ip地址和mac地址找到了一台特定的主机，如何标识这台主机上的应用程序，答案就是端口。端口即应用程序与网卡关联的编号。</p><p>　　   2. 功能：建立端口到端口的通信。</p><p>　　　3.TCP：通过双向链接，客户端向服务端发送消息后，等待服务端回复消息后才算发送成功。</p><p>　　　　　　缺点：速度慢</p><p>　　　　　　优点：可靠（可靠在对方要回应一个包确保发送成功）</p><p>　　　4.UDP： 没有链接，直接发送。</p><p>　　　　　　 缺点：不可靠</p><p>　　　　　　 优点：速度快</p><p>　　　 5.三次握手（连接）和四次挥手（断开）：</p><p>　　　　　　三次握手的目的：建立双向通信链路。SYN代表客户端向服务端发送的一个请求，ACK代表服务端向客户端发送的回应。</p><p>　　　　　　三次握手就像谈恋爱确定关系一样，四次挥手就像分手一样。此处只是打比方而已。</p><p><img src="1184802-20170717145741222-809718773.png" alt="img"></p><h1 id="应用层："><a href="#应用层：" class="headerlink" title="应用层："></a>应用层：</h1><p>　　　由来：用户使用的都是应用程序，均工作于应用层，互联网是开发的，大家都可以开发自己的应用程序，数据多种多样，必须规定好数据的组织形式 </p><p>   　　功能：规定应用程序的数据格式。</p><h1 id="URI（uri）地址-例如"><a href="#URI（uri）地址-例如" class="headerlink" title="URI（uri）地址:例如"></a>URI（uri）地址:例如</h1><p><a href="https://www.cnblogs.com/moyand">https://www.cnblogs.com/moyand</a></p><p>以上网址有三部分构成：</p><p>　　　协议部分：https://    应用层的协议</p><p>　　    域名：<a href="https://www.cnblogs.com/">https://www.cnblogs.com/</a></p><p>　　　资源：moyand</p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机的发展史及多道技术</title>
      <link href="/2019/08/19/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E5%8F%91%E5%B1%95%E5%8F%B2%E5%8F%8A%E5%A4%9A%E9%81%93%E6%8A%80%E6%9C%AF/"/>
      <url>/2019/08/19/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E5%8F%91%E5%B1%95%E5%8F%B2%E5%8F%8A%E5%A4%9A%E9%81%93%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<p>首先先补充一下上一篇的一个小问题。</p><p>　　应用程序的启动流程：<br> 　　前提：应用程序是运行于操作系统之上的<br> 　　举例：启动暴风音影<br> 　　　　1.双击快捷方式<br> 　　　　2.告诉操作系统一个文件路径<br> 　　　　3.操作系统从硬盘读取文件内容到内存中<br> 　　　　4.cpu从内存读取数据执行</p><p>下面开始今天的课程：</p><h1 id="一、操作系统发展史及多道技术"><a href="#一、操作系统发展史及多道技术" class="headerlink" title="一、操作系统发展史及多道技术"></a>一、操作系统发展史及多道技术</h1><p>　　1.第一代计算机（1940~1955）：真空管和穿孔卡片</p><p>　　　　特点：没有操作系统的概念，所有的程序设计都是直接操控硬件。</p><p>　　　　优点：每个人独享，可以自己调试代码，找到bug。</p><p>　　　　缺点：浪费计算机资源。</p><p>　　2.第二代就算机（1955~1965）：晶体管和批处理系统</p><p>　　　　特点：把代码都赞到一块，让一个CPU共享，但是还是一个一个的去运行，还是顺序算法（串行）<br>　　　　优点：批处理，节省了机时。<br>　　　　缺点：有人的参与了，搬过来搬过去的麻烦，拖慢程序运行的速度</p><p>　　3.第三代计算机（1965~1980）：集成电路芯片和多道程序设计</p><p>　　　　第三代计算机的操作系统广泛应用了第二代计算机的操作系统没有的关键技术：多道技术</p><p>　　　　多道技术:（指的是多道/个程序）<br> 　　　　　　1.空间上的复用：内存要支持同时跑进多个程序<br> 　　　　　　2.时间上的复用：多个程序要让它们能切换（什么时候要切？一个程序占用的时间过长要切；当CPU遇到IO阻塞时，等待的时间要切）</p><p>　　4.第四代计算机（1980~至今）：个人计算机</p><h1 id="二、为什么要使用操作系统呢？"><a href="#二、为什么要使用操作系统呢？" class="headerlink" title="二、为什么要使用操作系统呢？"></a>二、为什么要使用操作系统呢？</h1><p>程序员无法把所有的硬件操作细节都了解到，管理这些硬件并且加以优化使用是非常繁琐的工作，这个繁琐的工作就是操作系统来干的，有了他，程序员就从这些繁琐的工作中解脱了出来，只需要考虑自己的应用软件的编写就可以了，应用软件直接使用操作系统提供的功能来间接使用硬件。</p><h1 id="三、操作系统的两大作用"><a href="#三、操作系统的两大作用" class="headerlink" title="三、操作系统的两大作用"></a>三、操作系统的两大作用</h1><p>　　1.为应用程序提供如何使用硬件资源的抽象</p><p>　　2.把多个程序对硬件的竞争变得有序化（管理应用程序）</p><h1 id="四、计算机语言的分类"><a href="#四、计算机语言的分类" class="headerlink" title="四、计算机语言的分类"></a>四、计算机语言的分类</h1><p> 　　机器语言：<br> 　　　　特点：用计算机能看懂的0和1去写程序<br> 　　　　优点：程序运行速度快<br> 　　　　缺点：开发效率低<br>　　汇编语言：<br> 　　　　特点：用一些英文标签代替一串二进制数字去写程序<br> 　　　　优点：比机器语言好一点，操作系统内使用大量汇编语言（操作系统不需要网络，则速度越来越好）<br>     　　   比如：关于进程的调用代码，就是用汇编语言写的<br> 　　　　缺点：开发效率低<br>　　高级语言：<br> 　　　　特点：用人能读懂的（英文）字符去写程序<br> 　　　　优点：开发效率高<br> 　　　　缺点：运行速度慢，必须经过翻译才能让计算机识别，导致运行速度慢<br>　　以上得出结论：开发效率从低到高，运行速度从低到高，学习难度由难到易。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机基础知识</title>
      <link href="/2019/08/19/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2019/08/19/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="一、为何要学习计算机基础？"><a href="#一、为何要学习计算机基础？" class="headerlink" title="一、为何要学习计算机基础？"></a>一、为何要学习计算机基础？</h1><pre><code>     好多人觉得自己有点基础就都想着直接敲代码，觉得基础知识很容易，很简单，就不怎么用心去学。然而，我觉得基础知识很重要。就像盖一栋楼房一样，你先要打好地基，再去盖房。  　　</code></pre><p>　　　Python是一门编程语言，即通俗一点说就是语言。</p><p>　　　我们都知道世界上有很多种语言，比如：汉语，英语，阿拉伯语等等众多的语言。要想用这些语言去和人沟通，如果你想和英国人说话，你必须得会英语吧。而我们的计算机也有它自己的语言，你要想让计算机帮助我们做事情，你就需要和它沟通吧。那你就得懂得计算机语言吧，也就是编程。当然计算机也有很多语言，比如：C，Java，PHP，Python，C#等。所以我们就先从学习基础知识开始。也有人说学习基础理论知识很枯燥，但是，那还是得学。你要把它当成自己的兴趣，一点一点的去投入它，相信你会是很棒的。</p><p>　　  程序用编程语言来写程序，最终开发的结果就是一个软件。就像大家都知道的QQ，腾讯视频，酷狗音乐等一系列软件。这些软件要想运行必须得有系统控制它吧。当然，有人会问：为什么要用操作系统呢？当然，很久以前的那些程序员确实是在没有操作环境下，编程语言是操作硬件来编写的。你可能觉得没问题，但是其实问题很严重。如果一直像以前那样会严重影响效率的。操作系统是出现在硬件之上的，是用来控制硬件的。所以，我们开发时只需要调用操作系统为我们提供的简单的接口就可以了。</p><p><img src="1184802-20170711155432368-610830318.png" alt="img"></p><p>　　　如上图所示，我把计算机的系统分为了上面三大块。硬件，操作系统，应用程序。要想学习软件知识，我想那些硬件的知识或多或少还是得了解点的，现在我们就来谈谈硬件一类的知识。</p><h1 id="二、计算机硬件介绍"><a href="#二、计算机硬件介绍" class="headerlink" title="二、计算机硬件介绍"></a>二、计算机硬件介绍</h1><pre><code>\1. 硬件的目的：为了运行软件给它的一些指令。我们可以优先从硬件中提取出这三个主要的东西，分别是： CPU，内存，硬盘   \2. 在现实生活中，人脑是用来计算的，在计算机中，用来计算的是什么呢？当然是CPU了。多数CPU都有两种模式，即内核态与用户态。这里的即内核态与用户态将会在下面的内容中讲到。  3.如果我们把计算机理解为人的大脑，我们可以总结为几句话：      　　　　**CPU是人的大脑，负责运算**</code></pre><p>　　  　　　　<strong>内存是人的记忆，负责临时存储</strong></p><p>　　  　　　　<strong>硬盘是人的笔记本，负责永久存储</strong></p><p>　　　　　　  <strong>输入设备是人的耳朵或眼睛，负责接受外部的信息传给CPU</strong></p><p>　　　　　　  <strong>以上所有的设备都通过总线连接，总线相当于人的神经</strong></p><p><img src="1184802-20170711223701806-856435351.png" alt="img"></p><p>​                                                                                            总线示意图</p><h1 id="三、处理器（寄存器及内核态与用户态切换）"><a href="#三、处理器（寄存器及内核态与用户态切换）" class="headerlink" title="三、处理器（寄存器及内核态与用户态切换）"></a>三、处理器（寄存器及内核态与用户态切换）</h1><p>　　 1.计算机的大脑是CPU，它从内存中取指令-▶解码-▶执行，然后在取指令，解码，执行，周而复始，直至整个程序被执行完成。</p><p>　　　2. 寄存器是一个存储设备，最快的一种存储设备就是寄存器。</p><p>​      3.寄存器的分类</p><p>　　　　　　①通用寄存器：用来保存变量和临时结果的。</p><p>　　　　　　②程序计数器：它保存了将要取出的下一条指令的内存地址。在指令取出后，程序计算器就被更新以便执行后期的指令</p><p>　　　　　　③堆栈指针：它指向内存中当前栈的顶端。该栈包含已经进入但是还没有退出的每个过程中的一个框架。在一个过程的堆栈框架中保存了有关的输入参数、局部变量以及那些没有保存在寄存器中的临时变量</p><p>　　　　　　④程序状态字寄存器（Program Status Word,简称PSW）：这个寄存器包含了条码位(由比较指令设置)、CPU优先级、模式（用户态或内核态），以及各种其他控制位。用户通常读入整个PSW，但是只对其中少量的字段写入。在系统调用和I/O中，PSW非常重要。</p><p>　　  4.内核态与用户态</p><pre><code>  多数CPU都有两种模式，即内核态与用户态。  　　　　　　</code></pre><p>　　　　①当cpu处于内核状态时，运行的是操作系统，能控制硬件（可以获取所有cpu的指令集）　　　　　</p><p>　　　　②当cpu处于用户太状态时，运行的是用户软件，不能控制硬件（可以获取所有cpu的指令集中的一个子集，该子集不包括操作硬件的指令集）</p><p>　　　这里有些人可能会含糊什么是内核态，什么是用户态？下面我来解释一下：</p><p>　　　　内核态:当cpu在内核态运行时，cpu可以执行指令集中所有的指令，很明显，所有的指令中包含了使用硬件的所有功能，（操作系统在内核态下运行，从而可以访问整个硬件）所以，归根结底通俗一点的话也就是上面①解释的那样</p><p>　　　　用户态:用户程序在用户态下运行，仅仅只能执行cpu整个指令集的一个子集，该子集中不包含操作硬件功能的部分，因此，一般情况下，在用户态中有关I/O和内存保护（操作系统占用的内存是受保护的，不能被别的程序占用），当然，在用户态下，将PSW中的模式设置成内核态也是禁止的。</p><p>　　5.内核态与用户态切换</p><pre><code>  用户态下工作的软件是不能之间操作硬件的，但是像我们的一些软件，比如暴风音影啊一类的软件，我们要想从磁盘中读取一个电影文件，那就得从用户态切换成内核态，为此，用户程序必须使用系统调用（system call），系统调用陷入内核并调用操作系统，TRAP指令把用户态切换成内核态，并启用操作系统从而获得服务。</code></pre><h1 id="四、存储器系列，L1缓存，L2缓存，内存（RAM），EEPROM和闪存，CMOS与BIOS电池"><a href="#四、存储器系列，L1缓存，L2缓存，内存（RAM），EEPROM和闪存，CMOS与BIOS电池" class="headerlink" title="四、存储器系列，L1缓存，L2缓存，内存（RAM），EEPROM和闪存，CMOS与BIOS电池"></a>四、存储器系列，L1缓存，L2缓存，内存（RAM），EEPROM和闪存，CMOS与BIOS电池</h1><pre><code>   \1.  计算机中第二重要的就是存储了，所有人都意淫着存储：速度快（这样cpu的等待存储器的延迟就降低了）+容量大+价钱便宜。然后同时兼备三者是不可能的，所以有了如下的不同的处理方式</code></pre><p><img src="1184802-20170711234003400-1240723557.png" alt="img"><br>由上图可以很清楚的看见寄存器存储是速度非常快的，但是它的容量却很少。下来就是高速缓存了。我就不一一介绍了，我相信大家应该可以看得懂这个图。</p><p>　2.寄存器即L1缓存：用与cpu相同材质制造，与cpu一样快，因而cpu访问它无时延，典型容量是：在32位cpu中为32<em>32，在64位cpu中为64</em>64，在两种情况下容量均&lt;1KB。</p><p>   3.高速缓存即L2缓存：主要由硬件控制高速缓存的存取，内存中有高速缓存行按照0~64字节为行0，64~127为行1。。。最常用的高速缓存行放置在cpu内部或者非常接近cpu的高速缓存中。当某个程序需要读一个存储字时，高速缓存硬件检查所需要的高速缓存行是否在高速缓存中。</p><p>   4.内存：主存通常称为随机访问存储RAM，就是我们通常所说的内存，容量一直在不断攀升，所有不能再高速缓存中找到的，都会到主存中找，<strong>主存是易失性存储，断电后数据全部消失</strong></p><p>   5.EEPROM（Electrically Erasable PROM，电可擦除可编程ROM）和闪存（flash memory）也是非易失性的。还有一类存储器就是<strong>CMOS，它是易失性的，</strong>许多计算机利用CMOS存储器<strong>来保持当前时间和日期</strong>。CMOS存储器和递增时间的电路由一小块<strong>电池驱动</strong>，所以，即使计算机没有加电，时间也仍然可以正确地更新，除此之外<strong>CMOS还可以保存配置的参数，比如，哪一个是启动磁盘等</strong>，之所以采用CMOS是因为它耗电非常少，一块工厂原装电池往往能使用若干年，但是当电池失效时，相关的配置和时间等都将丢失。</p><h1 id="五、磁盘"><a href="#五、磁盘" class="headerlink" title="五、磁盘"></a>五、磁盘</h1><p>1.磁盘由磁头，磁道，扇区组成的。</p><p>2.磁道：每个磁头可以读取一段换新区域。把一个戈丁手臂位置上所以的磁道合起来，组成一个柱面</p><p>3.每个磁道划成若干扇区，扇区典型的值是512字节。</p><p>4.数据都存放于一段一段的扇区，即磁道这个圆圈的一小段圆圈，从磁盘读取一段数据需要经历寻道时间和延迟时间，那么什么是寻道时间和延迟时间呢？</p><p>​    <strong>平均寻道时间：</strong>机械手臂从一个柱面随机移动到相邻的柱面的时间成为寻到时间，找到了磁道就以为着招到了数据所在的那个圈圈，但是还不知道数据具体这个圆圈的具体位置</p><p>​    <strong>平均延迟时间：</strong>机械臂到达正确的磁道之后还必须等待旋转到数据所在的扇区下，这段时间成为延迟时间</p><p><img src="1184802-20170712081400493-13407149.png" alt="img"></p><h1 id="六、磁带"><a href="#六、磁带" class="headerlink" title="六、磁带"></a>六、磁带</h1><p>1.有些人会想磁带是用来干什么的呢？当然，它也是内存之一，是用来存储东西的，它的存储量是相当大的，而且价钱也便宜。当遇上火灾等紧急情况时，可以用磁带来存储我们的重要文件。常常用来做备份（常见于大型数据库系统中）。但是，它也有缺点，就是运行速度特别慢，效率低。</p><p>2.cpu和存储器并不是操作系统唯一需要管理的资源，I/O设备也是非常重要的一环。<strong>I/O设备一般包括两个部分：设备控制器和设备本身</strong>。</p><p><strong>控制器的功能</strong>：通常情况下对设备的控制是非常复杂和具体的，控制器的任务就是为操作系统屏蔽这些复杂而具体的工作，提供给操作系统一个简单而清晰的接口</p><p><strong>设备本身</strong>：有相对简单的接口且标准的，这样大家都可以为其编写驱动程序了。要想调用设备，必须根据该接口编写复杂而具体的程序，于是有了控制器提供设备驱动接口给操作系统。必须把设备驱动程序安装到操作系统中。</p><h1 id="七、总线"><a href="#七、总线" class="headerlink" title="七、总线"></a>七、总线</h1><p>　　　　北桥即PCI桥：连接高速设备</p><p>　　　    南桥即ISA桥：连接慢速设备</p><p><img src="1036857-20170118183358656-1969770652.png" alt="img"></p><h1 id="八、操作系统的启动流程"><a href="#八、操作系统的启动流程" class="headerlink" title="八、操作系统的启动流程"></a>八、操作系统的启动流程</h1><p>　　1.计算机加电</p><p>　　2.BIOS开始运行，检测硬件：cpu、内存、硬盘等</p><p>　　3.BIOS读取CMOS存储器中的参数，选择启动设备</p><p>　　4.从启动设备上读取第一个扇区的内容（MBR主引导记录512字节，前446为引导信息，后64为分区信息，最后两个为标志位）</p><p>　　5.根据分区信息读入bootloader启动装载模块，启动操作系统</p><p>　　6.然后操作系统询问BIOS，以获得配置信息。对于每种设备，系统会检查其设备驱动程序是否存在，如果没有，系统则会要求用户按照设备驱动程序。一旦有了全部的设备驱动程序，操作系统就将它们调入内核。然后初始有关的表格（如进程表），穿件需要的进程，并在每个终端上启动登录程序或GUI</p><h1 id="九、应用程序的启动流程"><a href="#九、应用程序的启动流程" class="headerlink" title="九、应用程序的启动流程"></a>九、应用程序的启动流程</h1><p>　　1.双击快捷方式</p><p>　　2.告诉操作系统一个文件路径</p><p>　　3.操作系统从硬盘读取文件到内存中</p><p>　　4.cpu从内存中读取数据执行</p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人生苦短，我用Python</title>
      <link href="/2019/08/19/Python/Python%E4%B9%8B%E6%97%85/Python%E4%B9%8B%E6%97%85/"/>
      <url>/2019/08/19/Python/Python%E4%B9%8B%E6%97%85/Python%E4%B9%8B%E6%97%85/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="bc15b1dc1597744932ca069d11ecdc2864ca49e44fdd8c5e6dd06edea0a3f774"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 目录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> passwd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>error: failed to push some refs to &#39;git@gitee.com:moyand/moyand.git&#39;</title>
      <link href="/2019/08/14/error/error-failed-to-push-some-refs-to-git-gitee-com-moyand-moyand-git/"/>
      <url>/2019/08/14/error/error-failed-to-push-some-refs-to-git-gitee-com-moyand-moyand-git/</url>
      
        <content type="html"><![CDATA[<p>此故障是Git在上传后的报错</p><p>处理方法 git pull origin 分支 —allow-unrelated-histories</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">PS F:\hexo&gt; git add .</span><br><span class="line">PS F:\hexo&gt; git commit -m &#x27;test&#x27;</span><br><span class="line">[hexo 082e6890] test</span><br><span class="line"> 3 files changed, 3 insertions(+), 3 deletions(-)</span><br><span class="line">PS F:\hexo&gt; git push origin hexo</span><br><span class="line">To gitee.com:moyand/moyand.git</span><br><span class="line"> ! [rejected]          hexo -&gt; hexo (fetch first)</span><br><span class="line">error: failed to push some refs to &#x27;git@gitee.com:moyand/moyand.git&#x27;</span><br><span class="line">hint: Updates were rejected because the remote contains work that you do</span><br><span class="line">hint: not have locally. This is usually caused by another repository pushing</span><br><span class="line">hint: to the same ref. You may want to first integrate the remote changes</span><br><span class="line">hint: (e.g., &#x27;git pull ...&#x27;) before pushing again.</span><br><span class="line">hint: See the &#x27;Note about fast-forwards&#x27; in &#x27;git push --help&#x27; for details.</span><br><span class="line">PS F:\hexo&gt; git pull origin hexo --allow-unrelated-histories</span><br><span class="line">remote: Enumerating objects: 3, done.</span><br><span class="line">remote: Counting objects: 100% (3/3), done.</span><br><span class="line">remote: Compressing objects: 100% (2/2), done.</span><br><span class="line">remote: Total 2 (delta 1), reused 0 (delta 0)</span><br><span class="line">Unpacking objects: 100% (2/2), done.</span><br><span class="line">From gitee.com:moyand/moyand</span><br><span class="line"> * branch              hexo       -&gt; FETCH_HEAD</span><br><span class="line">   f9354938..3ef82a03  hexo       -&gt; origin/hexo</span><br><span class="line">Merge made by the &#x27;recursive&#x27; strategy.</span><br><span class="line">PS F:\hexo&gt; git push origin hexo</span><br><span class="line">Enumerating objects: 18, done.</span><br><span class="line">Counting objects: 100% (14/14), done.</span><br><span class="line">Delta compression using up to 8 threads</span><br><span class="line">Compressing objects: 100% (8/8), done.</span><br><span class="line">Writing objects: 100% (8/8), 886 bytes | 295.00 KiB/s, done.</span><br><span class="line">Total 8 (delta 6), reused 0 (delta 0)</span><br><span class="line">remote: Powered By Gitee.com</span><br><span class="line">To gitee.com:moyand/moyand.git</span><br><span class="line">   3ef82a03..e90aaa55  hexo -&gt; hexo</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Errors </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编程与编程语言</title>
      <link href="/2019/08/10/Python/Python%E4%B9%8B%E6%97%85/Python%E4%B9%8B%E6%97%85%EF%BC%9A%E7%BC%96%E7%A8%8B%E4%B8%8E%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
      <url>/2019/08/10/Python/Python%E4%B9%8B%E6%97%85/Python%E4%B9%8B%E6%97%85%EF%BC%9A%E7%BC%96%E7%A8%8B%E4%B8%8E%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<h1 id="编程与编程语言"><a href="#编程与编程语言" class="headerlink" title="编程与编程语言"></a>编程与编程语言</h1><p><img src="yuyan.jpg" alt="yuyan"><br>python是一门编程语言，作为学习python的开始，需要事先搞明白：编程的目的是什么？什么是编程语言？什么是编程？</p><p>  编程的目的：</p><blockquote><p>计算机的发明，是为了用机器取代/解放人力，而编程的目的则是将人类的思想流程按照某种能够被计算机识别的表达方式传递给计算机，从而达到让计算机能够像人脑/电脑一样自动执行的效果。 </p></blockquote><p>  什么是编程语言？</p><blockquote><p>上面提及的能够被计算机所识别的表达方式即编程语言，语言是沟通的介质，而编程语言是程序员与计算机沟通的介质。在编程的世界里，计算机更像是人的奴隶，人类编程的目的就命令奴隶去工作。</p></blockquote><p>  什么是编程？</p><blockquote><p>编程即程序员根据需求把自己的思想流程按照某种编程语言的语法风格编写下来，产出的结果就是包含一堆字符的文件。</p><p>强调：程序在未运行前跟普通文件无异，只有程序在运行时，文件内所写的字符才有特定的语法意义　　 </p></blockquote><p>  所以我有话对大家说</p><blockquote><p>Python是语言，而学习语言的套路都是一样的，以英语学习为例，你需要学单词，然后学语法，最后写作文。<br>   英语的单词—————&gt;Python中的关键字<br>   英语的语法—————&gt;Python的语法<br>   英语的作文—————&gt;用Python语言写的程序</p><p>   此时你心里应该有数了，学Python其实很简单，全都是在记忆一些固定的套路而已，那为何有的人会觉得Python难呢？来看一个普遍的问题，问题中包含答案。。。。。。</p><p>经常有学生问：老师，我上课都能听得懂，为啥我就是不会写程序。<br>   我：你这不废话么！<br>   你学完了英语的单词、语法、还有写作文的方式，你能立刻写出一篇优美的作文吗？当然不能，那么问题出在哪里呢？<br>   你想想，你现在用汉语跟我沟通，脑子里会不会分神去琢磨某个汉字的意思，汉语的语法应该怎样？你当然不会，你脑子里想到什么，就会很自然地将它表达出来，因为你已经足够熟练，汉语的文字、单词、语法等已经深深地植入了你的意识里。学英语，学Python都是一样的道理，你以为你会了，你可能确实会了，但你远没有达到烂熟于心的地步，因此你在写程序的时候需要考虑的是关键字的用法、语法结构，而我则只需要考虑我脑子里的逻辑如何安排，逻辑走通了程序自然就表达出来了，我完全不会考虑关键字或语法什么的，它就像是我的器官一样，我不会在想吃饭的时候考虑应该用锭眼吃还是用嘴吃，这就是你跟我的差别。<br>   那有何好的解决方法呢？答：没有。不下狠心翻来覆去练习，知识是无法根植于你的潜意识的，你也永远无法自己写程序，就跟当年郭靖学降龙十八掌一样，洪七公要他打200下，他能打1000下，屌丝到不能再屌丝的你，没有这点意志力，就别妄想咸鱼翻身了。。。。。。<br>   附一句：我不知道成功有没有捷径，但我确定学Python没有，没有几万行代码的洗礼，你不可能成为一名优秀的程序员，这就是我想对你说的。</p></blockquote><h1 id="编程语言分类"><a href="#编程语言分类" class="headerlink" title="编程语言分类"></a>编程语言分类</h1><p><img src="123.png" alt="123"><br>  编程的语言的发展经历了 </p><blockquote><p>机器语言：站在计算机(奴隶)的角度，说计算机能听懂的语言，那就是直接用二进制编程，直接操作硬件</p><p>汇编语言：站在计算机(奴隶)的角度，简写的英文标识符取代二进制去编写程序，本质仍然是直接操作硬件</p><p>高级语言：站在人(奴隶主)的角度，说人话，即用人类的字符去编写程序，屏蔽了硬件操作</p></blockquote><p>  高级语言更贴近人类语言，因而造成了：它必须被翻译成计算机能读懂二进制后，才能被执行，按照翻译方式分为 </p><blockquote><ol><li>编译型（需要编译器，相当于用谷歌翻译）：如C，执行速度快，调试麻烦</li><li>解释型（需要解释器，相当于同声传译）：如python，执行速度慢，调试方便</li></ol></blockquote><p><img src="123.png" alt="编程语言%}"><br>总结： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">机器语言</span><br><span class="line"><span class="comment">#优点是最底层，执行速度最快</span></span><br><span class="line"><span class="comment">#缺点是最复杂，开发效率最低</span></span><br><span class="line"></span><br><span class="line">汇编语言</span><br><span class="line"><span class="comment">#优点是比较底层，执行速度最快</span></span><br><span class="line"><span class="comment">#缺点是复杂，开发效率最低</span></span><br><span class="line"></span><br><span class="line">高级语言</span><br><span class="line"><span class="comment">#编译型语言执行速度快，不依赖语言环境运行，跨平台差</span></span><br><span class="line"><span class="comment">#解释型跨平台好，一份代码，到处使用，缺点是执行速度慢，依赖解释器运行</span></span><br><span class="line"></span><br><span class="line">PS：</span><br><span class="line"><span class="comment">#学习难度从高到低</span></span><br><span class="line"><span class="comment">#执行效率从高到低</span></span><br><span class="line"><span class="comment">#开发效率从低到高　</span></span><br><span class="line"><span class="comment">#速度不是关键（瓶颈理论），开发效率高才是王道　　</span></span><br></pre></td></tr></table></figure><p>​     机器语言、汇编语言、高级语言详解 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#机器语言</span></span><br><span class="line">由于计算机内部只能接受二进制代码，因此，用二进制代码<span class="number">0</span>和<span class="number">1</span>描述的指令称为机器指令，全部机器指令的集合构成计算机的机器语言，用机器语言编程的程序称为目标程序。只有目标程序才能被计算机直接识别和执行。但是机器语言编写的程序无明显特征，难以记忆，不便阅读和书写，且依赖于具体机种，局限性很大，机器语言属于低级语言。</span><br><span class="line">用机器语言编写程序，编程人员要首先熟记所用计算机的全部指令代码和代码的涵义。手编程序时，程序员得自己处理每条指令和每一数据的存储分配和输入输出，还得记住编程过程中每步所使用的工作单元处在何种状态。这是一件十分繁琐的工作。编写程序花费的时间往往是实际运行时间的几十倍或几百倍。而且，编出的程序全是些<span class="number">0</span>和<span class="number">1</span>的指令代码，直观性差，还容易出错。除了计算机生产厂家的专业人员外，绝大多数的程序员已经不再去学习机器语言了。</span><br><span class="line">机器语言是微处理器理解和使用的，用于控制它的操作二进制代码。</span><br><span class="line">尽管机器语言好像是很复杂的，然而它是有规律的。</span><br><span class="line">存在着多至<span class="number">100000</span>种机器语言的指令。这意味着不能把这些种类全部列出来。</span><br><span class="line">以下是一些示例：</span><br><span class="line">指令部份的示例</span><br><span class="line"><span class="number">0000</span> 代表 加载（LOAD）</span><br><span class="line">0001 代表 存储（STORE）</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">暂存器部份的示例</span><br><span class="line"><span class="number">0000</span> 代表暂存器 A</span><br><span class="line">0001 代表暂存器 B</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">存储器部份的示例</span><br><span class="line"><span class="number">000000000000</span> 代表地址为 <span class="number">0</span> 的存储器</span><br><span class="line">000000000001 代表地址为 <span class="number">1</span> 的存储器</span><br><span class="line"><span class="number">0000000</span>10000 代表地址为 <span class="number">16</span> 的存储器</span><br><span class="line"><span class="number">100000000000</span> 代表地址为 <span class="number">2</span>^<span class="number">11</span> 的存储器</span><br><span class="line">集成示例</span><br><span class="line"></span><br><span class="line"><span class="number">0000</span>,<span class="number">0000</span>,<span class="number">0000000</span>10000 代表 LOAD A, <span class="number">16</span></span><br><span class="line"><span class="number">0000</span>,0001,000000000001 代表 LOAD B, <span class="number">1</span></span><br><span class="line">0001,0001,<span class="number">0000000</span>10000 代表 STORE B, <span class="number">16</span></span><br><span class="line">0001,0001,000000000001 代表 STORE B, <span class="number">1</span>[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#汇编语言</span></span><br><span class="line">汇编语言的实质和机器语言是相同的，都是直接对硬件操作，只不过指令采用了英文缩写的标识符，更容易识别和记忆。它同样需要编程者将每一步具体的操作用命令的形式写出来。汇编程序的每一句指令只能对应实际操作过程中的一个很细微的动作。例如移动、自增，因此汇编源程序一般比较冗长、复杂、容易出错，而且使用汇编语言编程需要有更多的计算机专业知识，但汇编语言的优点也是显而易见的，用汇编语言所能完成的操作不是一般高级语言所能够实现的，而且源程序经汇编生成的可执行文件不仅比较小，而且执行速度很快。</span><br><span class="line">汇编的hello world，打印一句hello world, 需要写十多行，也是醉了。</span><br><span class="line">; hello.asm </span><br><span class="line">section .data            ; 数据段声明</span><br><span class="line">        msg db <span class="string">&quot;Hello, world!&quot;</span>, <span class="number">0xA</span>     ; 要输出的字符串</span><br><span class="line">        <span class="built_in">len</span> equ $ - msg                 ; 字串长度</span><br><span class="line">section .text            ; 代码段声明</span><br><span class="line"><span class="keyword">global</span> _start            ; 指定入口函数</span><br><span class="line">_start:                  ; 在屏幕上显示一个字符串</span><br><span class="line">        mov edx, <span class="built_in">len</span>     ; 参数三：字符串长度</span><br><span class="line">        mov ecx, msg     ; 参数二：要显示的字符串</span><br><span class="line">        mov ebx, <span class="number">1</span>       ; 参数一：文件描述符(stdout) </span><br><span class="line">        mov eax, <span class="number">4</span>       ; 系统调用号(sys_write) </span><br><span class="line">        <span class="built_in">int</span> <span class="number">0x80</span>         ; 调用内核功能</span><br><span class="line">                         ; 退出程序</span><br><span class="line">        mov ebx, <span class="number">0</span>       ; 参数一：退出代码</span><br><span class="line">        mov eax, <span class="number">1</span>       ; 系统调用号(sys_exit) </span><br><span class="line">        <span class="built_in">int</span> <span class="number">0x80</span>         ; 调用内核功能</span><br><span class="line"></span><br><span class="line"><span class="comment">#高级语言</span></span><br><span class="line">高级语言是大多数编程者的选择。和汇编语言相比，它不但将许多相关的机器指令合成为单条指令，并且去掉了与具体操作有关但与完成工作无关的细节，例如使用堆栈、寄存器等，这样就大大简化了程序中的指令。同时，由于省略了很多细节，编程者也就不需要有太多的专业知识。</span><br><span class="line">高级语言主要是相对于汇编语言而言，它并不是特指某一种具体的语言，而是包括了很多编程语言，像最简单的编程语言PASCAL语言也属于高级语言。</span><br><span class="line">高级语言所编制的程序不能直接被计算机识别，必须经过转换才能被执行，按转换方式可将它们分为两类：</span><br><span class="line">编译类：编译是指在应用源程序执行之前，就将程序源代码“翻译”成目标代码（机器语言），因此其目标程序可以脱离其语言环境独立执行(编译后生成的可执行文件，是cpu可以理解的<span class="number">2</span>进制的机器码组成的)，使用比较方便、效率较高。但应用程序一旦需要修改，必须先修改源代码，再重新编译生成新的目标文件（* .obj，也就是OBJ文件）才能执行，只有目标文件而没有源代码，修改很不方便。</span><br><span class="line"></span><br><span class="line">编译后程序运行时不需要重新翻译，直接使用编译的结果就行了。程序执行效率高，依赖编译器，跨平台性差些。如C、C++、Delphi等</span><br><span class="line">解释类：执行方式类似于我们日常生活中的“同声翻译”，应用程序源代码一边由相应语言的解释器“翻译”成目标代码（机器语言），一边执行，因此效率比较低，而且不能生成可独立执行的可执行文件，应用程序不能脱离其解释器(想运行，必须先装上解释器，就像跟老外说话，必须有翻译在场)，但这种方式比较灵活，可以动态地调整、修改应用程序。如Python、Java、PHP、Ruby等语言。</span><br></pre></td></tr></table></figure><h1 id="主流编程语言介绍"><a href="#主流编程语言介绍" class="headerlink" title="主流编程语言介绍"></a>主流编程语言介绍</h1><p>   世界上的编程语言有600多种，但真正大家主流在使用的最多二三十种，不同的语言有自己的特点和擅长领域，随着计算机的不断发展，新语言在不断诞生，也同时有很多老旧的语言慢慢无人用了。有个权威的语言排名网站，可以看到主流的编程语言是哪些 </p><p>数据来自 <em>TIOBE</em>排行榜 ， TIOBE开发语言排行榜每月更新一次，依据的指数是基于世界范围内的<a href="https://baike.baidu.com/item/资深软件工程师">资深软件工程师</a>和第三方供应商提供，其结果作为当前业内程序开发语言的流行使用程度的有效指标。 </p><div class="table-container"><table><thead><tr><th style="text-align:left">Oct 2019</th><th style="text-align:left">Oct 2018</th><th style="text-align:left">Change</th><th style="text-align:left">Programming Language</th><th style="text-align:left">Ratings</th><th style="text-align:left">Change</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left">1</td><td style="text-align:left"></td><td style="text-align:left">Java</td><td style="text-align:left">16.884%</td><td style="text-align:left">-0.92%</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left">2</td><td style="text-align:left"></td><td style="text-align:left">C</td><td style="text-align:left">16.180%</td><td style="text-align:left">+0.80%</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left">4</td><td style="text-align:left"><img src="https://www.tiobe.com/images/up.png" alt="change"></td><td style="text-align:left">Python</td><td style="text-align:left">9.089%</td><td style="text-align:left">+1.93%</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left">3</td><td style="text-align:left"><img src="https://www.tiobe.com/images/down.png" alt="change"></td><td style="text-align:left">C++</td><td style="text-align:left">6.229%</td><td style="text-align:left">-1.36%</td></tr><tr><td style="text-align:left">5</td><td style="text-align:left">6</td><td style="text-align:left"><img src="https://www.tiobe.com/images/up.png" alt="change"></td><td style="text-align:left">C#</td><td style="text-align:left">3.860%</td><td style="text-align:left">+0.37%</td></tr><tr><td style="text-align:left">6</td><td style="text-align:left">5</td><td style="text-align:left"><img src="https://www.tiobe.com/images/down.png" alt="change"></td><td style="text-align:left">Visual Basic .NET</td><td style="text-align:left">3.745%</td><td style="text-align:left">-2.14%</td></tr><tr><td style="text-align:left">7</td><td style="text-align:left">8</td><td style="text-align:left"><img src="https://www.tiobe.com/images/up.png" alt="change"></td><td style="text-align:left">JavaScript</td><td style="text-align:left">2.076%</td><td style="text-align:left">-0.20%</td></tr><tr><td style="text-align:left">8</td><td style="text-align:left">9</td><td style="text-align:left"><img src="https://www.tiobe.com/images/up.png" alt="change"></td><td style="text-align:left">SQL</td><td style="text-align:left">1.935%</td><td style="text-align:left">-0.10%</td></tr><tr><td style="text-align:left">9</td><td style="text-align:left">7</td><td style="text-align:left"><img src="https://www.tiobe.com/images/down.png" alt="change"></td><td style="text-align:left">PHP</td><td style="text-align:left">1.909%</td><td style="text-align:left">-0.89%</td></tr><tr><td style="text-align:left">10</td><td style="text-align:left">15</td><td style="text-align:left"><img src="https://www.tiobe.com/images/upup.png" alt="change"></td><td style="text-align:left">Objective-C</td><td style="text-align:left">1.501%</td><td style="text-align:left">+0.30%</td></tr><tr><td style="text-align:left">11</td><td style="text-align:left">28</td><td style="text-align:left"><img src="https://www.tiobe.com/images/upup.png" alt="change"></td><td style="text-align:left">Groovy</td><td style="text-align:left">1.394%</td><td style="text-align:left">+0.96%</td></tr><tr><td style="text-align:left">12</td><td style="text-align:left">10</td><td style="text-align:left"><img src="https://www.tiobe.com/images/down.png" alt="change"></td><td style="text-align:left">Swift</td><td style="text-align:left">1.362%</td><td style="text-align:left">-0.14%</td></tr><tr><td style="text-align:left">13</td><td style="text-align:left">18</td><td style="text-align:left"><img src="https://www.tiobe.com/images/upup.png" alt="change"></td><td style="text-align:left">Ruby</td><td style="text-align:left">1.318%</td><td style="text-align:left">+0.21%</td></tr><tr><td style="text-align:left">14</td><td style="text-align:left">13</td><td style="text-align:left"><img src="https://www.tiobe.com/images/down.png" alt="change"></td><td style="text-align:left">Assembly language</td><td style="text-align:left">1.307%</td><td style="text-align:left">+0.06%</td></tr><tr><td style="text-align:left">15</td><td style="text-align:left">14</td><td style="text-align:left"><img src="https://www.tiobe.com/images/down.png" alt="change"></td><td style="text-align:left">R</td><td style="text-align:left">1.261%</td><td style="text-align:left">+0.05%</td></tr><tr><td style="text-align:left">16</td><td style="text-align:left">20</td><td style="text-align:left"><img src="https://www.tiobe.com/images/upup.png" alt="change"></td><td style="text-align:left">Visual Basic</td><td style="text-align:left">1.234%</td><td style="text-align:left">+0.58%</td></tr><tr><td style="text-align:left">17</td><td style="text-align:left">12</td><td style="text-align:left"><img src="https://www.tiobe.com/images/downdown.png" alt="change"></td><td style="text-align:left">Go</td><td style="text-align:left">1.100%</td><td style="text-align:left">-0.15%</td></tr><tr><td style="text-align:left">18</td><td style="text-align:left">17</td><td style="text-align:left"><img src="https://www.tiobe.com/images/down.png" alt="change"></td><td style="text-align:left">Delphi/Object Pascal</td><td style="text-align:left">1.046%</td><td style="text-align:left">-0.11%</td></tr><tr><td style="text-align:left">19</td><td style="text-align:left">16</td><td style="text-align:left"><img src="https://www.tiobe.com/images/down.png" alt="change"></td><td style="text-align:left">Perl</td><td style="text-align:left">1.023%</td><td style="text-align:left">-0.14%</td></tr><tr><td style="text-align:left">20</td><td style="text-align:left">11</td><td style="text-align:left"><img src="https://www.tiobe.com/images/downdown.png" alt="change"></td><td style="text-align:left">MATLAB</td><td style="text-align:left">0.924%</td><td style="text-align:left">-0.39%</td></tr></tbody></table></div><p> 长期语言排名  </p><div class="table-container"><table><thead><tr><th style="text-align:left">Programming Language</th><th style="text-align:left">2019</th><th style="text-align:left">2014</th><th style="text-align:left">2009</th><th style="text-align:left">2004</th><th style="text-align:left">1999</th><th style="text-align:left">1994</th><th style="text-align:left">1989</th></tr></thead><tbody><tr><td style="text-align:left">Java</td><td style="text-align:left">1</td><td style="text-align:left">2</td><td style="text-align:left">1</td><td style="text-align:left">1</td><td style="text-align:left">3</td><td style="text-align:left">-</td><td style="text-align:left">-</td></tr><tr><td style="text-align:left">C</td><td style="text-align:left">2</td><td style="text-align:left">1</td><td style="text-align:left">2</td><td style="text-align:left">2</td><td style="text-align:left">1</td><td style="text-align:left">1</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left">Python</td><td style="text-align:left">3</td><td style="text-align:left">7</td><td style="text-align:left">6</td><td style="text-align:left">6</td><td style="text-align:left">22</td><td style="text-align:left">20</td><td style="text-align:left">-</td></tr><tr><td style="text-align:left">C++</td><td style="text-align:left">4</td><td style="text-align:left">4</td><td style="text-align:left">3</td><td style="text-align:left">3</td><td style="text-align:left">2</td><td style="text-align:left">2</td><td style="text-align:left">2</td></tr><tr><td style="text-align:left">Visual Basic .NET</td><td style="text-align:left">5</td><td style="text-align:left">9</td><td style="text-align:left">-</td><td style="text-align:left">-</td><td style="text-align:left">-</td><td style="text-align:left">-</td><td style="text-align:left">-</td></tr><tr><td style="text-align:left">C#</td><td style="text-align:left">6</td><td style="text-align:left">5</td><td style="text-align:left">5</td><td style="text-align:left">7</td><td style="text-align:left">17</td><td style="text-align:left">-</td><td style="text-align:left">-</td></tr><tr><td style="text-align:left">JavaScript</td><td style="text-align:left">7</td><td style="text-align:left">8</td><td style="text-align:left">8</td><td style="text-align:left">9</td><td style="text-align:left">13</td><td style="text-align:left">-</td><td style="text-align:left">-</td></tr><tr><td style="text-align:left">PHP</td><td style="text-align:left">8</td><td style="text-align:left">6</td><td style="text-align:left">4</td><td style="text-align:left">5</td><td style="text-align:left">-</td><td style="text-align:left">-</td><td style="text-align:left">-</td></tr><tr><td style="text-align:left">SQL</td><td style="text-align:left">9</td><td style="text-align:left">-</td><td style="text-align:left">-</td><td style="text-align:left">89</td><td style="text-align:left">-</td><td style="text-align:left">-</td><td style="text-align:left">-</td></tr><tr><td style="text-align:left">Objective-C</td><td style="text-align:left">10</td><td style="text-align:left">3</td><td style="text-align:left">26</td><td style="text-align:left">36</td><td style="text-align:left">-</td><td style="text-align:left">-</td><td style="text-align:left">-</td></tr><tr><td style="text-align:left">Lisp</td><td style="text-align:left">32</td><td style="text-align:left">17</td><td style="text-align:left">16</td><td style="text-align:left">13</td><td style="text-align:left">14</td><td style="text-align:left">5</td><td style="text-align:left">3</td></tr><tr><td style="text-align:left">Pascal</td><td style="text-align:left">219</td><td style="text-align:left">15</td><td style="text-align:left">14</td><td style="text-align:left">88</td><td style="text-align:left">7</td><td style="text-align:left">3</td><td style="text-align:left">21</td></tr></tbody></table></div><p> 几个主流的编程语言介绍 ：</p><blockquote><p>C语言:<br>C语言是一种计算机程序设计语言，它既具有高级语言的特点，又具有汇编语言的特点。它由美国贝尔研究所的D.M.Ritchie于1972年推出，1978年后，C语言已先后被移植到大、中、小及微型机上，它可以作为工作系统设计语言，编写系统应用程序，也可以作为应用程序设计语言，编写不依赖计算机硬件的应用程序。它的应用范围广泛，具备很强的数据处理能力，不仅仅是在软件开发上，而且各类科研都需要用到C语言，适于编写系统软件，三维，二维图形和动画，具体应用比如单片机以及嵌入式系统开发。</p><p>C++：<br>C++是C语言的继承的扩展，它既可以进行C语言的过程化程序设计，又可以进行以抽象数据类型为特点的基于对象的程序设计，还可以进行以继承和多态为特点的面向对象的程序设计。C++擅长面向对象程序设计的同时，还可以进行基于过程的程序设计，因而C++就适应的问题规模而论，大小由之。<br>C++不仅拥有计算机高效运行的实用性特征，同时还致力于提高大规模程序的编程质量与程序设计语言的问题描述能力。</p><p>JAVA:<br>Java是一种可以撰写跨平台应用软件的面向对象的程序设计语言，是由Sun Microsystems公司于1995年5月推出的Java程序设计语言和Java平台（即JavaSE, JavaEE, JavaME）的总称。Java 技术具有卓越的通用性、高效性、平台移植性和安全性，广泛应用于个人PC、数据中心、游戏控制台、科学超级计算机、移动电话和互联网，同时拥有全球最大的开发者专业社群。在全球云计算和移动互联网的产业环境下，Java更具备了显著优势和广阔前景。</p><p>PHP:<br>PHP（外文名:PHP: Hypertext Preprocessor，中文名：“超文本预处理器”）是一种通用开源脚本语言。语法吸收了C语言、Java和Perl的特点，利于学习，使用广泛，主要适用于Web开发领域<br>Ruby:<br>Ruby 是开源的，在Web 上免费提供，但需要一个许可证。[4]<br>Ruby 是一种通用的、解释的编程语言。<br>Ruby 是一种真正的面向对象编程语言。<br>Ruby 是一种类似于 Python 和 Perl 的服务器端脚本语言。<br>Ruby 可以用来编写通用网关接口（CGI）脚本。<br>Ruby 可以被嵌入到超文本标记语言（HTML）。<br>Ruby 语法简单，这使得新的开发人员能够快速轻松地学习 Ruby</p><p>GO:<br>Go 是一个开源的编程语言，它能让构造简单、可靠且高效的软件变得容易。<br>Go是从2007年末由Robert Griesemer, Rob Pike, Ken Thompson主持开发，后来还加入了Ian Lance Taylor, Russ Cox等人，并最终于2009年11月开源，在2012年早些时候发布了Go 1稳定版本。现在Go的开发已经是完全开放的，并且拥有一个活跃的社区。<br>由其擅长并发编程</p><p>Python:<br>Python是一门优秀的综合语言， Python的宗旨是简明、优雅、强大，在人工智能、云计算、金融分析、大数据开发、WEB开发、自动化运维、测试等方向应用广泛，已是全球第4大最流行的语言。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python之旅 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程与编程语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+码云+主题+Hexo admin 详细搭建完后的分享</title>
      <link href="/2019/08/07/%E6%95%99%E7%A8%8B/Hexo-%E7%A0%81%E4%BA%91-%E4%B8%BB%E9%A2%98-Hexo-admin-%E8%AF%A6%E7%BB%86%E6%90%AD%E5%BB%BA%E5%AE%8C%E5%90%8E%E7%9A%84%E5%88%86%E4%BA%AB/"/>
      <url>/2019/08/07/%E6%95%99%E7%A8%8B/Hexo-%E7%A0%81%E4%BA%91-%E4%B8%BB%E9%A2%98-Hexo-admin-%E8%AF%A6%E7%BB%86%E6%90%AD%E5%BB%BA%E5%AE%8C%E5%90%8E%E7%9A%84%E5%88%86%E4%BA%AB/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容">  <script id="hbeData" type="hbeData" data-hmacdigest="03e49f4f72068c0ff36d2d707502cdae6a636ff0747fb94c8ad75d6424f9cff2"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>而立之年</title>
      <link href="/2019/01/24/book/%E8%80%8C%E7%AB%8B%E4%B9%8B%E5%B9%B4/"/>
      <url>/2019/01/24/book/%E8%80%8C%E7%AB%8B%E4%B9%8B%E5%B9%B4/</url>
      
        <content type="html"><![CDATA[<ul><li><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3></li><li><p>　　</p></li><li><p>　　其实本来LZ没打算写这篇文章，但想来想去，毕竟是而立之年，还是要多少留下点什么，不然总觉得缺了点什么。</p></li><li><p>　　从2011年的10月份开始，LZ已经走过了差不多7年多的职业生涯，回想起来，真的有种恍如隔世的感觉。</p></li><li><p>　　随着年龄越来越大，LZ的文章产出也越来越少，除了偶尔写写小说以外，其它文章基本上很少产出了。</p></li><li><p>　　尤其是技术方面的文章，LZ已经基本停产了。</p></li><li><p>　　原因无他，确实是写不动了，也学不动了，当初信誓旦旦的说要做一辈子技术，LZ承认，自己动摇了。</p></li><li><p>　　但这并不代表LZ放弃学习了，只是对以前自己的“唯技术论”逐渐产生了质疑，觉得除了技术以外，或许还有很多其它更值得学习和提高的地方。</p></li><li><p>　　至于是什么，LZ还在摸索，暂时还有点不得其法，因此本文暂时不讨论这个，等以后LZ想清楚了，再来和大家探讨。</p></li><li><p>　　接下来，按照年度总结的流程来讲，LZ还是要先翻一翻2018年的流水账。</p></li><li><p>　　去年的这个时候，LZ没有写2017年总结，根本原因是2017年实在是太平淡，因此，去年的年度总结，LZ缺席了。</p></li><li><p>　　但是今年不同，在这个而立之年，也就是2018年，LZ可以说完成了三件大事，自然是值得说（chui）道（chui）说（niu）道（bi）了。</p></li><li><ul><li><h3 id="来自而立之年的建议"><a href="#来自而立之年的建议" class="headerlink" title="来自而立之年的建议"></a>来自而立之年的建议</h3></li><li><p>　　</p></li><li><p>　　看到这个标题，有的同学可能要问了，“LZ啊，你不是说三件大事吗，第三件呢？”</p></li><li><p>　　请允许LZ小小卖个关子，-_-，这第三件大事，咱们留在文章末尾再说。</p></li><li><p>　　现在，LZ先来和大家浅谈一下，程序员到了而立之年以后的感受。</p></li><li><p>　　说起这个，可能大部分同学，都会不自然的联想到一个热门话题——30岁以后的程序员到底何去何从？</p></li><li><p>　　相信这个话题一直牵动着无数程序员的心，因为这关系着程序员未来的生存之道，也是很多有意转行做程序员的新人们的顾虑。</p></li><li><p>　　很多文章在讨论这个话题的时候，都会建议大家努力往上爬，争取在30岁或者35岁之前做到管理岗位，这样就可以延长自己的职业生涯，不至于到时候作为大龄码农被公司无情的抛弃。</p></li><li><p>　　事实上，恕LZ直言，LZ个人觉得这属于饮鸩止渴，根本解决不了本质问题。</p></li><li><p>　　因为这只能延长你的职业生涯，并不能让你的工作变成铁饭碗，让你工作到天荒地老，甚至等你退休了，还有工资可以拿。</p></li><li><p>　　终有一天，你还是会面临失业的处境，只是这一天晚来了那么几年而已。</p></li><li><p>　　这时候可能有的同学会说了，“LZ啊，照你这么说，那岂不是说程序员以后必死无疑了？反正早晚要失业嘛。”</p></li><li><p>　　对此，LZ可以很负责的告诉你，你这句话只说对了一半。</p></li><li><p>　　早晚要失业是肯定的，因为就以目前的情况来看，除了公务员以外，确实是没有真正的铁饭碗。</p></li><li><p>　　以前那句很流行的话，“所谓的铁饭碗不是在一个地方吃一辈子饭，而是到哪都有饭吃”，只是给年轻人打鸡血的鸡汤而已，事实上，LZ长大以后才明白，真正的铁饭碗，就是特么的在一个地方吃一辈子饭，-_-。</p></li><li><p>　　但话又说回来了，失业也并不是说就必死无疑，恰恰相反，你现在要做的，就是完成以后的自救，避免你失业以后，只能坐等老天收了你。</p></li><li><p>　　所以，LZ觉得，你与其没事老在那琢磨，“30岁以后的程序员到底何去何从”，还不如多琢磨琢磨，“30岁以前的程序员到底如何完成以后的自救”。</p></li><li><p>　　换句话说，未来是不可预知的，你老在那琢磨未来，有个鸡毛用啊？这特么不是闲得慌吗？</p></li><li><p>　　你能做的，就是尽可能的在现在做好准备，迎接未来可能出现的不确定性，比如失业，甚至是IT行业凋零等等。</p></li><li><p>　　那么问题来了，现在如何做好准备？</p></li><li><p>　　简单啊，说到底就是一句话，尽可能早的实现财务自由。</p></li><li><p>　　那么问题又来了，什么叫财务自由？</p></li><li><p>　　LZ个人觉得，所谓的财务自由，并不是说你非要一下子挣够一辈子花的钱，就是财务自由了。真正的财务自由，更多的其实是指你面对财务风险的应对能力。</p></li><li><p>　　举个例子，假如你现在突然在一段时间内失去了经济来源，你的生活会变成什么样子？</p></li><li><p>　　你的资金链会不会立马断掉？房租会不会交不上导致露宿街头？房贷车贷会不会还不上导致房子车子被回收？花呗借呗信用卡会不会还不上导致信用崩塌？女朋友会不会因此离你而去？</p></li><li><p>　　如果答案是会的话，那么就证明，你应对财务风险的能力很差，一旦失业，你将会面临非常尴尬的境地。</p></li><li><p>　　那么到底怎么避免这种情况呢？</p></li><li><p>　　其实很简单，随着年纪的增大，你应该最起码保证你有稳定的住所，并尽可能的减少你的负债，让你的资产尽可能的变成正值，如此一来，就算你真的失业了，你的资金链也不会出问题，只要资金链没有问题，你就是上街要饭，肯定也饿不死，这样一来，你抵抗财务风险的能力就大大增强了。</p></li><li><p>　　一旦你抵抗财务风险的能力增强了，30岁以后到底何去何从，那特么还不是你说了算？</p></li><li><p>　　所以，思考问题不要本末倒置，你努力的最终目的，是为了让命运掌握在自己手里，让自己和家人未来的生活有保障，既然如此，只有你真正的财务自由了，才能掌握自己的命运。</p></li><li><p>　　至于有些文章中提到的尽快爬到管理岗，或者是转行做产品什么的，这些都只是手段而已，并不能作为你的最终目的。</p></li><li><p>　　这也是为什么有些人，明明早早的就爬到了管理岗，却还是觉得危机重重，没事就在那感叹程序员是个吃青春饭的职业，然后甩出一脸的迷茫。</p></li><li><p>　　为什么会这样？明明已经爬到管理岗了啊？</p></li><li><p>　　简单啊！</p></li><li><p>　　因为你压根就没搞清楚状况啊！</p></li><li><p>　　别说是管理岗，你就是爬到老板那个位置，又有个毛用？说倒闭不也就倒闭了吗？</p></li><li><p>　　想想诺基亚，你就会清醒很多。</p></li><li><p>　　所以，在LZ的这个而立之年，LZ想给广大程序员们的建议就是，<strong>年轻的时候，你应该尽可能的，在你能力范围之内背上一些负债（比如房贷），给自己施加压力，因为这时候的你，是应该奋斗的年纪，需要债务来鞭策着你上进，压榨你的发展潜力，不然你很容易一人吃饱全家不饿，浑浑噩噩的过日子</strong>。</p></li><li><p>　　<strong>而在到了一定年龄以后（具体年龄因人而异，自己看着办），你应该尽可能的减少你的负债（例如房贷提前还款），来降低你的财务风险，因为这时候的你，是应该求稳的年纪，你需要适当的卸掉负债，来保障你以后的生活，而在此基础之上，你可以考虑搞个第二职业什么的，但还是那句话，只要你有足够抵抗财务风险的能力，那么30岁以后你想干什么，就是你说了算</strong>。</p></li><li><p>　　当然了，中国十几亿人口，总有能人异士，这些人可能不甘于平庸，哪怕是一把年纪，一身负债，也硬要走上创业的道路，甚至有的最后还成功了，直接走上人生巅峰。</p></li><li><p>　　但这毕竟是少数，LZ既然要给建议，肯定是针对大多数人的，所以这一类人，不在LZ考虑范围之内。</p></li><li><p>　　但不管怎么说，都还是那句话，以上都只是建议，如果最后导致你走错人生路，LZ概不负责，成年人要对自己的决定负责，-_-。</p></li></ul></li></ul><p><img src="13124954490.jpg" alt="img">  - 　　</p><ul><li><h3 id="失去目标后的困惑"><a href="#失去目标后的困惑" class="headerlink" title="失去目标后的困惑"></a>失去目标后的困惑</h3></li><li><p>　　</p></li><li><p>　　说起这个失去目标后的困惑，LZ是自从来了杭州以后才产生的，在此之前，LZ的人生目标很清晰，就是有朝一日能够进去阿里，同时借此机会安家杭州。</p></li><li><p>　　事实上，进军阿里，安家杭州这个目标，是LZ思考了很久才确定的目标，因为北京昂贵的房价，LZ已经彻底放弃了安家北京的打算，只能另谋他路。</p></li><li><p>　　这其中，进军阿里是手段，安家杭州是目的。</p></li><li><p>　　实践证明，这个目标，是一个很靠谱的目标，它激励着LZ，在北京职场上摸爬滚打了几年，然后毅然决然的来到了杭州安家。</p></li><li><p>　　如今，LZ也确确实实做到了，成功在杭州定居，还成为了杭州本地土著眼中的“新杭州人”。</p></li><li><p>　　但或许正是因为目标达成了，LZ一下子失去了方向感，而且时间也非常巧，这个目标达成的时间，刚好就是LZ的而立之年，文章前面也说了，LZ才刚刚搬到新家不久。</p></li><li><p>　　因此，在这个而立之年，LZ突然失去了目标，陷入了无边的困惑。</p></li><li><p>　　未来的几年，LZ到底要以什么为目标？</p></li><li><p>　　LZ曾经想过以职称上的晋升为目标，但不知为何，这个目标却无法激发LZ的斗志，因为一想到这个目标，LZ就会不自然的自己问自己，“然后呢？”</p></li><li><p>　　是啊，晋升了以后，然后呢？</p></li><li><p>　　拿更高的工资？挣更多的钱？</p></li><li><p>　　这除了能让LZ早个2、3年财务自由以外，似乎并没有多大的卵用，而早2、3年财务自由这个诱惑，还不足以成为LZ的动力源泉。</p></li><li><p>　　更何况，对于LZ来说，挣更多的钱，拿更高的工资，从来都不是LZ所追求的，简单的说，LZ并没有多大的事业心，工作也无非只是LZ实现人生目标的手段而已。</p></li><li><p>　　就比如刚才提到的“进军阿里，安家杭州”，其中安家杭州才是LZ的最终目的，也是LZ奋斗的动力源泉，而进军阿里，或者拿到更高的工资，只是LZ实现目标的手段而已，这从来都不是LZ的真正目标。</p></li><li><p>　　从这点上来说，LZ充分的贯彻了“工作是为了更好的生活”这句话。</p></li><li><p>　　因为LZ挣钱，从来都不是为了挣钱而挣钱，而是为了买房子安家，让自己和家人住的更加舒服，归根结底还是为了生活。</p></li><li><p>　　也因此，一旦LZ生活上的需求得到满足，LZ就对工作有点兴致缺缺了。</p></li><li><p>　　或许有的同学会说，“LZ你装逼过头了吧，有钱人那么多，也没有像你这么说啊，搞的你好像不缺钱似的。”</p></li><li><p>　　对此，LZ只能说，每个人的追求不同，有的人哪怕身价上亿，依然觉得钱太少，而有的人只要吃饱喝足，就觉得此生足矣，所以，这个没什么好争辩的。</p></li><li><p>　　再者说，谁都知道钱越多越好，但问题是你挣钱是要付出代价的，这些代价，可能是你的业余时间，也可能是你陪家人的时间，甚至是你的身体健康，这时候，每个人的想法就不同了，有的人觉得值，但也有人觉得不值。</p></li><li><p>　　就像俗话说艺多不压身，但你会学遍天下所有知识吗？</p></li><li><p>　　你肯定不会！</p></li><li><p>　　为啥？</p></li><li><p>　　艺越多越好这谁都知道，但问题是想要艺多是要付出代价的，在有限的时间里，你只能用最少的时间，来学习个别几个对你帮助最大的技艺。</p></li><li><p>　　所以，所谓的“艺多不压身”，其真实的含义，并不是说“艺”越多越好，而是有一个前提，就是在你能够承受的时间代价范围内，越多越好。</p></li><li><p>　　那么同理，钱也是一样的，在可承受的代价范围内，当然是越多越好，但超过这个代价，每个人就有不同的考量了。</p></li><li><p>　　或许有的同学会立马跳出来说，“不是我吹牛，如果我的业余时间能换钱的话，我能换到你破产。”</p></li><li><p>　　是的，LZ以前也是这样的，把自己的业余时间都献给了学习，献给了工作。</p></li><li><p>　　但话又说回来了，以前拿业余时间和身体健康换钱，LZ是为了在北京有的吃有的喝，后来结婚了，LZ是为了可以买房落户，现在又是为了啥呢？</p></li><li><p>　　LZ实在是想不出来！</p></li><li><p>　　之前LZ还曾考虑过，想买一辆玛莎拉蒂，想以此为目标来激励自己进步。</p></li><li><p>　　但是事实证明，像豪车这种东西，因为它不是刚需，所以它激励的效果很差。</p></li><li><p>　　等过段时间，你就会忍不住冒出这样的想法，“买啥豪车，有个鸡毛用，还要挣钱养它，类得要死。算了算了！随便买辆车能开就行了。”</p></li><li><p>　　然后，你的目标之火就这样熄灭了，-_-。</p></li><li><p>　　但是像买房这种刚需目标就不一样，因为你基本不会冒出这样的想法，“买啥房子，有个鸡毛用，还要挣钱还贷，累得要死。算了算了！租一辈子房得了。”</p></li><li><p>　　退一万步说，就算你冒出了上面的想法，等到你被房东或者中介各种摧残的时候，你也会立马冒出这样的想法，“尼玛！租尼玛的房子！这要租一辈子还不得被气死！必须买！买！买！买！”</p></li><li><p>　　然后，你的目标之火就会越烧越旺！</p></li><li><p>　　所以，生活上的刚需目标，是很好的动力源泉。</p></li><li><p>　　说了这么多，其实这都是LZ思考的过程，是LZ试图解决目前困惑的思路。</p></li><li><p>　　那么思考了这么多，LZ到底怎么应对失去目标后的困惑？</p></li><li><p>　　很简单，LZ找到的答案就是，<strong>想要摆脱这种状态，LZ必须要寻找一个生活上的刚需目标</strong>。</p></li><li><p>　　不过这说来简单，实际做起来却并不简单，想要定一个切实可行的目标，可能并不比你完成这个目标简单。</p></li><li><p>　　目前LZ还没有想清楚到底定一个什么样的目标，但可以确定的是，这个目标，应该是LZ未来五年，甚至十年的奋斗目标。</p></li><li><p>　　到底是什么刚需目标呢？</p></li><li><p>　　LZ暂时还不得而知，但或许末尾要说的第三件大事，可能会成为LZ未来的奋斗目标，-_-。</p></li></ul><p><img src="13124954787.jpg" alt="img">  - 　　</p><ul><li><h3 id="告别2018，迎接2019"><a href="#告别2018，迎接2019" class="headerlink" title="告别2018，迎接2019"></a>告别2018，迎接2019</h3></li><li><p>　　</p></li><li><p>　　看到这，或许有的同学要问了，“LZ啊，都要结束了，第三件大事到底是什么？”</p></li><li><p>　　或许有的同学猜到了，那就是，LZ的家里可能要迎接一个新生命了，这可以说对于LZ来说，是最大的大事了，相比之下，买房卖房那都只能算是芝麻点的小事了。</p></li><li><p>　　不过现在各种检查还没做完，所以LZ的一颗心还没有彻底落地。</p></li><li><p>　　但总的来说，2018年，这个LZ的而立之年，可以说是毫无遗憾，留下的，只有对2019的期盼。</p></li><li><p>　　2019年，LZ没有别的愿望，只希望小家伙可以平安降生，如果可以的话，是个女儿就更好了，这可能就是LZ未来几年的奋斗目标了，-_-。</p></li><li><p>　　最后，LZ破例为小家伙求个祝福，如果LZ没记错的话，这应该是LZ写了几百篇文章以来，第一次在评论区求祝福，大家快快来为LZ祈福吧。</p></li><li><p>　　同时，LZ也提前预祝各位，在新的一年里，不跳槽的能够疯狂涨薪，跳槽的能够薪资翻倍，如果这两项都没实现，那就让老天送你一个Object吧，-_-。</p></li></ul><p><img src="13124955176.jpg" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> Book </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 左萧龙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序员买房指南——LZ的三次买房和一次卖房经历</title>
      <link href="/2018/11/11/book/%E7%A8%8B%E5%BA%8F%E5%91%98%E4%B9%B0%E6%88%BF%E6%8C%87%E5%8D%97%E2%80%94%E2%80%94LZ%E7%9A%84%E4%B8%89%E6%AC%A1%E4%B9%B0%E6%88%BF%E5%92%8C%E4%B8%80%E6%AC%A1%E5%8D%96%E6%88%BF%E7%BB%8F%E5%8E%86/"/>
      <url>/2018/11/11/book/%E7%A8%8B%E5%BA%8F%E5%91%98%E4%B9%B0%E6%88%BF%E6%8C%87%E5%8D%97%E2%80%94%E2%80%94LZ%E7%9A%84%E4%B8%89%E6%AC%A1%E4%B9%B0%E6%88%BF%E5%92%8C%E4%B8%80%E6%AC%A1%E5%8D%96%E6%88%BF%E7%BB%8F%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>　　</p><p>　　买房，一直是程序员群体绕不开的一个话题，尤其是<strong>到了一定年纪和人生阶段以后，买房这件事会变得越来越迫切</strong>。</p><p>　　为什么LZ一上来就说，买房是程序员绕不开的一个话题？</p><p>　　其实原因很简单，由于程序员这个职业的特点，导致大多数程序员都是拼搏在外，那必然就导致程序员这个群体中，除了极少数本地土著以外，大部分都有购房需求，不然就要一直租房，或者放弃当前的工作回老家，因此在生活上，<strong>程序员大部分都属于购房者的刚需群体</strong>。</p><p>　　但如果仅仅是有这样的刚性需求的话，程序员也不一定会面对买房这个话题，因为如果收入堪忧，根本买不起的话，那么买房这件事也注定与大多数程序员无缘。</p><p>　　就像要饭的就不太会考虑买房，因为他们的收入不足以让他们考虑这件事，当然了，这是以前，在现在这个社会，就不好说了，谁知道要饭的和程序员到底哪个收入高点呢，-_-。</p><p>　　哈哈，言归正传，对于大部分程序员来说，赚钱的能力都还是可以的，至少还房贷一般都问题不大，缺的都是首付。</p><p>　　也正是首付这座大山，拦住了大部分程序员买房的这条路。</p><p>　　</p><h2 id="上路要趁早"><a href="#上路要趁早" class="headerlink" title="上路要趁早"></a>上路要趁早</h2><p>　　</p><p>　　尽管有首付这座大山，但LZ依然劝大家，<strong>要尽快凿开首付这座大山，踏上买房之路</strong>。</p><p>　　说到这，可能有的同学要说了，“LZ啊，你不会是炒房者派来的卧底吧？”</p><p>　　对于这个问题，LZ只能说，“来来来，你来我面前说，保证不打死你。”</p><p>　　LZ郑重声明，LZ绝非是炒房客派来的卧底，-_-。</p><p>　　咳咳……</p><p>　　言归正传，为何LZ要劝大家早日上路？</p><p>　　理由再简单不过，因为<strong>房价可能会涨，越早买就能掏越少的钱</strong>。</p><p>　　那这个时候一定会有同学说，万一房价降了怎么办？马老板都说了8年后房子如葱，最不值钱的就是房子。</p><p>　　首先，马老板只说房子如葱，也就是以后房子会越来越多，并没有说房子会变成白菜价，也就是说，<strong>房子多如葱并不等同于房子就会变成白菜价</strong>。</p><p>　　其次，<strong>房子永远会有那么一批人买不起</strong>，不可能真的变成全民都买得起的白菜价，再者说了，就算真成了白菜价，那么问题来了，白菜是谁都吃的起的吗？</p><p>　　最后，房子的属性是商品，既然是商品，就可能会降价，比如你买了一个IPHONE，当时可能是5、6千的价钱，用了2、3年后，买这个手机可能只需要2、3千了，你多花了差不多一倍的钱，而你如果卖的话，可能连2、3千都卖不到。</p><p>　　但大多数人并不会觉得买这手机亏了。</p><p>　　为什么不会觉得亏？</p><p>　　首先是大多数人对于这个有了心理预期，知道它会降价，其次，早买早享受，毕竟享受了一两年较新的款式，付出点代价在大家看来也是应该的。</p><p>　　所以，为何到了房子这里大家就想不通了？</p><p>　　<strong>就算房子真的降价，那你也提前享受了，付出点代价也是完全说的过去的</strong>，<strong>毕竟住自己房子可比租房爽多了</strong>。</p><p>　　凡是那些说买房子不如租一辈子房，然后把买房的钱存起来拿利息，等着房子降价的，要吗是单身狗，没老婆没孩子，根本还没体验到租房的苦逼之处，要吗就是根本买不起房，所以就拿这种论调来安慰自己。</p><p>　　租房到底有多苦逼，只有租过的才知道。</p><p>　　想买个东西得思前想后，比如LZ，一直想要个台式电脑，愣是工作了7年都没买，是LZ买不起台式电脑吗？</p><p>　　非也，是租房买起来太麻烦，所以LZ一直憋着一股劲，等着自己买房子了再买，而且配置一定要高，CPU一定要I9，内存少了64G都不好意思说话，硬盘必须是SSD，512G的都不好使，必须TB级别，不止如此，配套也必须牛逼，键盘鼠标1000块以下不考虑，耳机怎么着也得个2000块以上才拿得出手，还有摄像头、耳机、音响、麦克风等等，没事就开个直播喊个“老铁666”。</p><p>　　除了买东西麻烦以外，租房还有个恶心的地方，那就是要一不小心碰见个奇葩房东的话，那酸爽简直是让你高潮迭起。</p><p>　　另外，租房经常需要搬家就更不用说了，每次搬家都累得要死，而且还要扔不少东西，浪费精力又浪费钱。</p><p>　　总而言之，租房的苦逼之处实在太多，此处不再一一列举，如果有兴趣的同学，欢迎在评论区补充你租房遇到的奇葩事，-_-。</p><p>　　说了这么多，是时候总结一下了，从上面的论点来看，如果你是刚需，那么买房子基本不可能亏，只管想尽一切办法上路即可，退一万步说，就算是最终房价降了，你最终亏了钱，但你也提前享受了几年，甚至十几二十年住自己房子的待遇，这是多少钱都换不来的，毕竟人生能有多少个十年二十年？</p><p>　　等到你头发斑白，就算房价真的便宜了，几块钱就能买套房，那又有什么意义呢？</p><p>　　</p><h2 id="第一次上路——坎坷"><a href="#第一次上路——坎坷" class="headerlink" title="第一次上路——坎坷"></a>第一次上路——坎坷</h2><p>　　</p><p>　　接下来，LZ就讲讲自己的第一次上路，这一次经历，LZ称之为坎坷，-_-。</p><p>　　很多人都会说，“LZ啊，不是我不想买，而是我首付不够啊。”</p><p>　　是的，没错，这是绝大多数人的理由，但是，如果你看完LZ第一次买房的经历以后，你可能就不会再说这句话了。</p><p>　　至少，<strong>你不会再轻易说这句话</strong>。</p><p>　　LZ第一次买房是2015年的国庆，至今LZ还记忆尤深，当时买房的初衷，就是因为LZ有了危机感，觉得北京的房子已经买不起，所以想要在老家给自己买套房子，以备不时之需，而且LZ此时也结婚1年半了，房子早晚总得买一套不是？</p><p>　　于是，趁着国庆假期，LZ和媳妇一起踏上了回家看房的路途。</p><p>　　看房子是个技术活儿，非常耗时，而且LZ老家是在县城，当时看房子是专门开车，到LZ县城所属的市区看的，因此也着急回县城。</p><p>　　于是，LZ用了最简单的办法选房，那就是找了一个关系比较近，而且刚好在市区买房的朋友，问了一下他们买的哪个小区，然后直接来到了小区的售楼处。</p><p>　　为什么这么相信这个朋友？</p><p>　　因为LZ的母亲和这位朋友的母亲认识，据LZ母亲所说，这个朋友和他老公，还有这个朋友的母亲是看了100多个小区，才选定的这个小区。</p><p>　　我勒个擦，简直无情。</p><p>　　到了售楼处，售楼小姐就开始唾沫横飞的给LZ介绍了。</p><p>　　当时基本只有两个选择，一个是期房，价钱便宜点，总价大约在60万的样子，而一个是现房，而且是楼王，但是价格要贵不少，总价大约要80万的样子。</p><p>　　对于买房这件事，因为LZ觉得一买就差不多是一辈子，因此肯定要买好的，所以LZ第一时间盯准的是80万的楼王。</p><p>　　不过这个楼王按照3成首付来算，需要大约24万首付，而LZ当时全身的身价，是6万块钱。</p><p>　　这怎么买？</p><p>　　别说是80万的这套了，就是60万的那套也买不起啊。</p><p>　　就是借钱，一下要借十几万，都快接近20万了，哪是那么好借的？</p><p>　　想到这，LZ基本上已经放弃了。</p><p>　　不过，售楼部小姐后面说了一句话，让LZ心中又升起了希望。</p><p>　　她说，最近公司有优惠，首付可以分期，半年付清即可。</p><p>　　而第一期需要交的钱，是6万元！</p><p>　　LZ一听，6万？可以啊，手里刚好有6万多呢。</p><p>　　不过后面的钱怎么办？</p><p>　　无意之间，LZ想起了自己的公积金，从上班开始到现在，LZ的公积金一毛钱都没动过，已经整整交了将近4年。</p><p>　　虽说一开始的时候，公积金很少，但这么多年积累下来，应该也差不多得有个8、9万块了。</p><p>　　于是，LZ开始和售楼部小姐商量取公积金的事情，而售楼部小姐一听，一再确保说，肯定没问题，公积金肯定能取出来。</p><p>　　LZ当然不会这么单纯的相信售楼部小姐的话，但是LZ也有自己的判断，因为LZ早就确认过，异地买房，是可以把公积金取出来的，这点上是肯定没有问题的，只是具体的材料LZ不太确定都需要什么。</p><p>　　而如果假设这公积金可以用上的话，那相当于LZ就只差不到9万块了，而距离首付交完还有将近半年的时间，这段时间LZ还有工资进账，而且中间有春节，不出意外，还有1-2个月的奖金。</p><p>　　到时候就算凑不够9万，估计也差不了太多钱，随便找人借一下，临时用一下应该问题不大，而且以LZ当时的工资水平，应该用不了多久就还上了。</p><p>　　这么一盘算下来，LZ果断的一拍桌子：“买！”</p><p>　　于是，当场交了6万块定金，同时也算是首付一期的钱，并且签订了购房合同。</p><p>　　买完房子，LZ开开心心的过了个国庆，节后便回去上班了。</p><p>　　上班第一件事，自然是咨询公司的HR，公积金怎么才能取出来，都需要哪些材料。</p><p>　　前面说了，公积金取是肯定可以取的，只要你买了房子，重点其实是哪些材料，HR给了LZ一个列表，LZ比对了一下，缺了一个很重要的东西。</p><p>　　首付发票！</p><p>　　马勒戈壁的，这是什么鬼？赶紧联系售楼部小姐问一下。</p><p>　　结果一问，LZ傻眼了，售楼部小姐说，首付发票是要首付交完以后才能给的，但是拿不到首付发票，就没法取公积金，拿不到公积金，LZ这首付就没钱交，这特么不是死循环了？</p><p>　　LZ质问售楼部小姐，“你当时不是说可以取出来的吗？”</p><p>　　售楼部小姐的回答是，“咱们老家这里取公积金不需要首付发票啊！”</p><p>　　LZ的心里只能一万只草泥马飞过。</p><p>　　其实最简单的办法，肯定是找人先借钱把首付交了，然后等拿到首付发票以后，再把公积金取出来，然后再把钱还给人家即可，等于是临时借用一段时间。</p><p>　　但问题是，LZ当时根本就借不来这么多钱，因为LZ的同事还没有成长起来，工资都还有点低呢。</p><p>　　有的同学，可能有疑问了，“这和你同事有啥关系？”</p><p>　　LZ只想说，那关系可大了，等看到LZ第二次买房你就知道了，/偷笑。</p><p>　　这时候，可能有的同学又说了，“那找亲戚朋友借点如何？”</p><p>　　LZ只能说，很难，在老家那种地方，一个月工资普遍是2000来块钱，谁能有20万这么多的巨款。</p><p>　　当然，如果你真要借，1分多甚至2分的利息，应该是可以借到的，但是，LZ是绝不会借这种钱的，也奉劝各位不要打这种心思，这么高的利息，就有点太不值当了，这房子不如不买。</p><p>　　因为钱的问题，LZ和媳妇当时还大吵了一架，也算是印证了“贫贱夫妻百事哀”这句话，当时LZ一气之下，还破罐子破摔的对媳妇说道：“不买了！交过的钱也不要了，就这么着吧。”</p><p>　　媳妇一听，两眼就开始泛红，LZ见状也是于心不忍，不过LZ当场并没有说什么安慰的话，都在气头上，拉不下那个脸，而且事情没有根本解决，安慰有个屁用。</p><p>　　不过LZ是很理智的一个人，气话归气话，6万块钱哪能说不要就不要了，开什么玩笑？那特么是辛苦挣来的啊。</p><p>　　所以，LZ再次给售楼部小姐打电话，开始软磨硬泡，软硬兼施，不但表达了LZ的苦逼之处，动之以情，也偶尔敲打下售楼部小姐，意思大致就是如果不帮忙的忙，这房子就没法买了。</p><p>　　好在售楼部小姐不算是那种巨坑的人，不管是处于好心，还是为了自己的业绩，最终还是给了LZ一个解决办法。</p><p>　　拿到发票以后，LZ顺利了取出了将近9万的公积金，并让HR办理了季度转，这个是在北京可以办理的，可以把公积金每三个月自动打给你。</p><p>　　有了这9万块，首付的问题基本已经解决了，虽说后面最终还是差了2万块，但因为钱少，所以很轻松的找人借用了下解决了。</p><p>　　原本购房这件事到此就结束了，无非是LZ接下来尽快挣钱，把欠的2万块首付钱还掉就行了。</p><p>　　结果就在16年3月份，也就是LZ刚买完房子交完首付的时候，LZ拿到了杭州阿里中间件的offer。</p><p>　　对于一个Java程序员来说，拿到阿里的offer不去肯定还是有些可惜的，哪怕是要换城市。</p><p>　　更何况，LZ觉得杭州这地方不错，房价和户口等都比北京要好搞很多，于是就毅然决然的离开了。</p><p>　　巧的是，LZ离开的时候，刚好按季度提取公积金过去了三个月，也就是说，LZ刚好可以在走之前，把北京的公积金取得一毛不剩。</p><p>　　不过事情总是不会那么顺利，就当LZ欢天喜地的准备收钱的时候，突然发现，HR当时并没有给LZ办理按季度转，她给忘了！忘了！</p><p>　　这可咋办？</p><p>　　三个月公积金可是不少钱哦，而且直接取走省事啊，留在北京或者转走还是很烦的。</p><p>　　不过，好在LZ公司的HR虽然把事情忘了在先，但总体还是很靠谱的，最后HR妹子还是帮忙想办法给解决了。</p><p>　　就这样，LZ在离开北京去杭州入职之前，刚好把北京的公积金取得一干二净。</p><p>　　当时LZ觉得，就冲这一点，这房子就算是买值了，至少把公积金充分利用了，而且以后的也能取。</p><p>　　完美！</p><p>　　</p><h2 id="中途小结"><a href="#中途小结" class="headerlink" title="中途小结"></a>中途小结</h2><p>　　</p><p>　　这一次买房，是LZ第一次买，虽说遇到了点坎坷，但总算最后啃下来了。</p><p>　　从这次真实的买房经历，LZ也总结了几点小小的经验和教训，在此献给所有程序员。　　</p><blockquote><ul><li>买房不一定非要自己挣够首付，因为往往等你挣够了，房价早就上天了。更何况，看完LZ的买房经历，你还有什么资格抱怨你的首付不够？办法总比困难多。</li><li>买房这事模糊不得，凡是重要的事情，必须早早落实，比如LZ取公积金这件事，就没有早早落实，只是大概知道可以取，但怎么取，需要什么材料，之前并没有了解清楚，以至于差点毁于一旦。</li><li>房贷一定要30年，不要搞什么10年、20年，更不要全款。有的同学可能问为啥？其实很简单，房贷是你这辈子为数不多可以利用的杠杆，必须用到极致，这可以让你的财富快速积累。</li><li>公积金是个好东西，要充分利用起来，这部分钱存在ZF那里，基本上利息都亏掉了，要尽早利用起来。你说怎么利用？买房啊！</li></ul></blockquote><p>　　</p><h2 id="第二次买房——神奇"><a href="#第二次买房——神奇" class="headerlink" title="第二次买房——神奇"></a>第二次买房——神奇</h2><p>　　</p><p>　　第二次买房经历，LZ用神奇这两个字来形容，看完你就知道为什么LZ称之为神奇。</p><p>　　之前在<a href="https://www.cnblogs.com/zuoxiaolong/p/life55.html">《2016——注定不平凡的一年》</a>这篇文章里，LZ已经详细介绍过第二次买房的经历，但是当时写的比较独立，没有连续性，为了更好的阅读体验，LZ会在这篇文章里连起来再讲述一遍。</p><p>　　既如此，咱们接着文章前面讲的，在LZ第一次买完房以后，当时的首付除了LZ自己本来存的钱，以及公积金取出来的钱，还找同学借了差不多2万块钱（说好三个月内还），才把那套房子啃下来。</p><p>　　而LZ入职阿里，是16年的3月中旬，这时候，LZ刚交完最后一期首付，可以说是身无分文。</p><p>　　而且，换工作本身也会损失一部分钱，比如一个多星期没上班的工资钱，还有因为跨城市搬家损失的房租钱等等。</p><p>　　可想而知，LZ刚到杭州这个月，基本是靠着吃土过来的。</p><p>　　不止如此，LZ接下来还要每个月还将近6000块的房贷（当时LZ房贷只搞了10年，-_-），而且还要想着点存钱，尽快把那2万块还给人家。</p><p>　　这种经济情况，可以说是LZ有史以来最差的了。</p><p>　　但是，即便如此，LZ在杭州安顿好以后，LZ想到的第一件事，依然是让媳妇没事去看看房子，了解一下杭州的房市行情。</p><p>　　为啥？</p><p>　　因为特么在北京吃了房价太多亏了，而LZ觉得杭州有阿里，互联网不会太差，房价应该有上升空间，说不定哪天就像北京一样买不起了，所以，当然要早早做好准备工作了，就算买不起，最起码也要先了解清楚行情，做到了然于胸。</p><p>　　更何况，LZ的老婆在16年6月中旬到了杭州以后，一时之间也没找到工作，因此平时除了偶尔面试一下，也算是时间充裕，也算是给老婆找了个事干。</p><p>　　就这样，虽然LZ身无分文，但LZ媳妇仍然没事会去看看房子。</p><p>　　这样的生活持续了大约两个星期，直到一天晚上，剧情出现了很大的转折。</p><p>　　那天是6月30日，LZ记得非常清楚，当时LZ刚把那2万还给人家不久，全身上下花的只剩500块钱。</p><p>　　不过这其实LZ算准了的，6月30日这天刚好发工资，因此虽然身上只有500块钱了，但LZ却一点也不担心接下来的花销，相反，LZ反而觉得一身轻松。</p><p>　　因为买第一套房子欠下来的首付钱，终于是彻底还干净了，除了房贷以外，LZ终于是进入了无债一身轻的日子。</p><p>　　然而，LZ还没有高兴太久，媳妇的电话就打过来了。</p><p>　　“老公，我看到一个房子，好便宜啊，总价才60万不到，算下来一平米才将近7000块钱。只不过人家明天就封盘了，再开盘估计就要涨价了，要是今晚要定的话，得交4万块定金。”</p><p>　　LZ当时听到这个消息，一开始是不相信。</p><p>　　为啥？</p><p>　　总价才60万不到？</p><p>　　纳尼？比LZ老家买的房子还便宜？要知道，LZ老家刚刚买的那套，可是花了将近80万啊！</p><p>　　虽说老家那套面积大的多，140多平，算下来单价比杭州这个要便宜点，但那又如何？</p><p>　　60万依旧还是很便宜啊！</p><p>　　这特么不会是套假房子吧？又或者是不属于杭州，而是周边的？</p><p>　　LZ自然把这些疑惑都丢给了媳妇，但是媳妇一口咬定，这就是杭州的房子，不会错的。</p><p>　　这下LZ纠结了，要说这房子不买的话，LZ总觉得有点可惜。因为这是LZ第一次离安家如此之近，之前在北京，买房子这事压根是LZ想都不敢想的事情。</p><p>　　但要说买吧，LZ看了看自己的银行卡余额，无奈的摇了摇头。</p><p>　　这特么怎么买？连个定金都不够啊！</p><p>　　虽说一会儿会发工资，但是也远远不够4万块啊。</p><p>　　而且，这才刚刚把上一套房子的首付钱还完，难道又要再次借钱，再次勒紧裤腰带还首付钱吗？</p><p>　　这样的日子，什么时候是个头啊？宝宝心里苦啊！</p><p>　　更重要的是，就算LZ想勒紧裤腰带，谁又能借LZ这么多钱呢？</p><p>　　但是，越是复杂的情况，LZ的思路就越清楚。</p><p>　　60万都不到的房子啊！7000块一平啊！</p><p>　　只要这房子是正儿八经杭州的房子，那就铁定是百分百赚的，不买肯定会后悔啊！</p><p>　　有的同学看到这可能会说，“7000块啊！还是很贵啊！”</p><p>　　LZ只想说，你如果看多了北京动辄5、6万一平，甚至十几万一平的房价，然后骤然看到个7000块一平的，你肯定不会觉得7000块贵的，你只会觉得这房子简直就是白菜价。</p><p>　　而且那个房子的位置媳妇在电话里也告诉LZ了，LZ查了下，离公司8公里，开车的话，估计也就是20分钟的样子。</p><p>　　这距离，说实话，对于在北京待过的LZ来说，这特么就是相当于在家门口上班啊。</p><p>　　一通内心挣扎下来，LZ还是决定，不论如何，也要去现场看看再说。</p><p>　　既然要去现场看看，那甭管用不用得上，肯定要先把定金带上，不然到了地方再借钱岂不是太晚了吗？</p><p>　　于是，LZ抄起电话，给北京的老同事去了两个电话，不到半个小时，LZ就借了5万块，加上一会儿发的工资，应付4万块的定金肯定是绰绰有余了。</p><p>　　就这样，6点下班以后，LZ早早的就离开了公司，奔赴售楼处。</p><p>　　到了地方，LZ看了下样板房，觉得十分不错，而且这个房子虽然是期房，但其实已经建的差不多了，所以倒也不太用怕烂尾什么的。</p><p>　　最终，在再次确认房子确实是属于杭州以后，LZ果断的交了定金。</p><p>　　而售楼部小姐告诉LZ，要在两周内把首付交齐。</p><p>　　不过LZ由于走的匆忙，还带着工牌，后来被售楼部小姐看到，售楼部小姐又补充了一句，是阿里员工的话，可以延迟到1个月交首付。</p><p>　　纳尼？还有这待遇？</p><p>　　不管怎么说，定金交了，没有回头路了，接下来就是借钱、借钱、再借钱！</p><p>　　具体借钱的过程此处就不详细描述了，这个没有可复制性，说了也没什么意义。</p><p>　　不过有一件事还是要提一下，其中的1万块钱，是来自于LZ粉丝群里的一位同学主动拿出的，本来LZ就是在群里闲聊，提到了首付还差不少钱，压根没打算从群里借钱，而且，也觉得不会有人借钱。</p><p>　　毕竟几百几千的，说实话帮助不大，但是上万的话，估计不太会有人放心借给LZ。</p><p>　　但是这位热心小伙伴，主动提出要借给LZ钱，尽绵薄之力，更是直接要了LZ支付宝账号，连个电话都没打，就把钱给打过来了。</p><p>　　着实是让LZ感受到，人间自有真情在啊！</p><p>　　当然，这1万块钱，LZ已经早早的还给了小伙伴，但这份帮助，LZ还是一直都记得的。</p><p>　　就这样，首付到手，接下来的事情就比较简单了。</p><p>　　不过杭州买房子与之前在老家有一点不同的是，要先经过银行的审核，才签订购房合同。</p><p>　　对此LZ倒没有什么疑问，因为这样的流程，其实也是为了保障买方的利益，毕竟等你交了首付，才发现批贷通不过，岂不是也很蛋疼？</p><p>　　当然了，就程序员的工资来说，一般批贷都不是什么问题，完全可以达到要求。</p><p>　　就这样，用了差不多不到一个月，LZ就又拿下了一套房子，并再次进入了还钱的日子。</p><p>　　而这一次，是要还整整20万，这20万，刚好就是房子的首付。</p><p>　　也就是说，LZ这个房子的所有首付都是借来的。</p><p>　　空手套白狼，LZ这辈子也算是玩过了。</p><p>　　这一次买房的经历，绝对堪称神奇了。</p><p>　　更神奇的是，自从LZ买房以后，LZ的那套房子，就在以每一个星期1、2千的速度在上涨。</p><p>　　简直疯狂！</p><p>　　</p><h2 id="中途小结-1"><a href="#中途小结-1" class="headerlink" title="中途小结"></a>中途小结</h2><p>　　</p><p>　　由于第二次买房价钱太便宜，LZ经常被同事笑称，这套房子是充话费送的。</p><p>　　不得不说，这一次买房的经历确实神奇，让人意想不到，但即便如此，LZ还是觉得有一些可以参考的价值。</p><blockquote><ul><li>再次用事实证明，买房不一定非要攒够首付才能买！甚至恰恰相反，除了少数二代和土豪以外，大部分人买房都是在首付不够的情况下买的。</li><li>二线城市（或者说一些准一线城市）会比目前的北上深更加适合程序员，从工资和房价的比例来算的话，这些城市应该是比例最高的。</li><li>和同事们搞好关系，说不定这帮一起战斗过的人，在你缺钱的时候，比你的亲戚朋友更加靠谱。有的同学可能会问，难道是因为同事的爱更加深刻吗？或者是因为战斗的情谊更加珍贵吗？咳咳，非也，是因为程序员一般工资都不低，而且不爱乱花钱，他们有闲钱啊！</li><li>如果钱实在不多，那么房子位置差点，或者小区物业差点等等这些问题都不大，先上车再说，这样你至少不会掉队，大不了以后再置换嘛。</li></ul></blockquote><p>　　</p><h2 id="第一次卖房——曲折"><a href="#第一次卖房——曲折" class="headerlink" title="第一次卖房——曲折　"></a>第一次卖房——曲折　</h2><p> 　</p><p>　　第一次卖房这件事，LZ称之为曲折，至于为什么这么形容，你看完就知道了，简直能特么写一部短篇小说。</p><p>　　16年7月份买完房子以后，LZ心里的一块石头总算了落了地，不管怎么说，现在总算是有一套房子了，再也不用担心未来房价上涨了。</p><p>　　事实也证明，这套房子买的很是时候，截止到现在，也就2年多点的时间，这套房子已经翻了3倍多了。</p><p>　　按理说，作为一个小老百姓，LZ已经赚了个盆体满钵，而且老家一套，杭州一套，也算是“儿女”双全，应该及时收手，结束这场没有硝烟的房市征战了。</p><p>　　但是，事实证明，人的欲望是无穷无尽的，因为LZ的贪心，LZ并没有停下与房子纠缠的脚步。</p><p>　　不过，刚借了20万，LZ短时间内肯定是无力折腾了，所以，在16年7月份买完房子以后，直到2017年的五一这段时间，LZ基本是处于闷声还钱的阶段。</p><p>　　然而，当钱还完以后，LZ的心思又开始活络了。</p><p>　　不过，一开始的时候，LZ并没有打算买或者卖房子，而是打算装修房子！</p><p>　　租了这么久的房子，如今房子买好了，首付钱也还完了，自然是要赶紧装修一下住进去咯。</p><p>　　于是，LZ和媳妇商量了下，等差不多存够个5万块，就开始装修。</p><p>　　那段时间，每天下班以后，LZ和媳妇没事就讨论房子装修的事，LZ也可以明显感觉到，一提到装修这事，媳妇每次都是双眸发亮，一脸期待的样子。</p><p>　　然而，就当LZ攒够了钱，马上就要开始装修的时候，LZ无意间听到一个消息。</p><p>　　“杭州2022年要举办亚运会，而且现在每一个已婚并且拥有杭州户口的人，都可以且只能买两套房。”</p><p>　　LZ琢磨了下，这个消息可能意味着两件事，第一，2022年的时候，杭州的房价有可能再涨一波，可能性比较大。第二，LZ还能在杭州再买一套房，而且就算再有钱，也只能买一套，第三套不让买了。</p><p>　　这下LZ对装修这件事有些犹豫了。</p><p>　　为啥？</p><p>　　因为LZ做事情喜欢一步到位，一劳永逸，既然还能再买一套，而且2022年又可能涨价，那依照LZ的性格，肯定是一鼓作气，把两套房子都给买了再说啊。</p><p>　　不过虽说LZ有这个想法，但其实LZ此时，还是更加倾向于先装修。</p><p>　　一个是看到媳妇那么开心，不忍心让她再等，另外一个则是，LZ当时一个月房租是2200，房贷才2300，你说这交着房租是不是贼闹心？</p><p>　　不过，后来LZ到小区交房的时候，感受了一下小区的情况，却逐渐改变了主意。</p><p>　　为啥？</p><p>　　这套房买的确实很便宜，也赚了不少钱，但便宜也有便宜的劣势，那就是小区挨着高架，难免会有些噪音，而且小区也比较低档，所以物业也只能算是一般般。</p><p>　　而LZ老家买的那套80万的房子，基本是属于老家的豪宅（地理位置基本相当于西湖的湖中心，-_-），所以物业非常好，这样一对比，更让LZ觉得杭州这套物业不够好。</p><p>　　更何况，装修这件事虽说听起来美好，但谁都知道，装修是一件非常累人的活，尤其是LZ和媳妇都要上班，而且还没车的情况下，装修那更是一件麻烦事，就算你搞个全包，你不也得经常去盯着点吗？</p><p>　　不过最终让LZ下决心的，还是因为房子的楼层。</p><p>　　当初便宜的低楼层都卖完了，太低的话，比如1、2层这种LZ是坚决不考虑的，因此LZ买的楼层比较高，大约是28/33的样子（具体不记得了，LZ经常忘记自己的房子在哪，-_-），而且之前在北京一直住高层，感觉高层也可以接受，最起码视野宽阔。</p><p>　　但LZ去真实感受过以后，就有点小后悔了。</p><p>　　为啥？</p><p>　　房子是一梯两户，也就是说，大约60多家共用一个电梯，而LZ又住的比较高，可想而知，以后等电梯肯定会成为常事。</p><p>　　最重要的，还是LZ其实是有点恐高的，所以每次做电梯到那么高的地方，都有点心有余悸，而且现在的商人大家懂的，电梯到底安不安全，鬼特么才知道啊！</p><p>　　看到这可能有的同学会说了，“既然你对这房子这么不满意，当初为啥还买呢？比如楼层咋不买个好点的，不高不低的？小区咋不买个好点的？”</p><p>　　呵呵，如果你真有这样的疑问，LZ真是要无语了，你说能特么为啥？</p><p>　　因为没钱啊！这个最便宜啊！</p><p>　　还能为啥？</p><p>　　当然了，不愿意住归不愿意住，但不代表LZ买这房子后悔了，相反，LZ一直觉得买对了，毕竟赚了不少钱呢。</p><p>　　但甭管怎么说，LZ住是不愿意住了，准备把这套房当做投资，也暂时不装修，到时再买一套二手，直接住进去。</p><p>　　这样的话，不仅省了装修的麻烦，而且也不用等着散甲醛了，更可以吃一堑长一智，好好挑一挑楼层物业什么的。</p><p>　　一切听起来都是那么美好，那么问题来了，钱从哪来？</p><p>　　卖老家的那套房子！</p><p>　　这并不难想到，只有这样LZ才可能凑够钱。</p><p>　　而且老家那套房子，LZ原本是为了在北京长期打拼准备的，因为在北京买不起，所以就买了一套老家的，而且老家那套离高铁站不远的，LZ从北京坐高铁回老家只需要两个半小时，然后再坐车10分钟就能到家，到时候老婆孩子可以在老家长期生活，而LZ则每一两个月回来一次。</p><p>　　这其实是LZ当时精心安排的，虽说有点奔波，但其实已经是最好的安排了，谁让咱买不起北京的房子呢？</p><p>　　然而，这一切现在已经没有意义了，因为LZ户口也转到杭州了，房子也在杭州买了，哪怕杭州这套房子再差，那也是套房子。</p><p>　　老家肯定是回不去了，更何况，LZ的老家其实是在县城，而老家买的那套房子是在市区，所以，那套房子目前完全就属于闲置状态，还得每年交着昂贵的物业费，还着房贷，租还租不出去，因为还是毛坯。</p><p>　　而且就算能租出去，LZ也不太舍得，毕竟这套房子属于高档小区，租出去太糟蹋了，而且LZ老家那四五线城市也租不上价钱。</p><p>　　那就啥也别说了，卖吧！</p><p>　　于是，LZ就随便在网上找了个老家那城市的中介，把房子给挂上去了。</p><p>　　至于价格的话，LZ也算了下，当初买的价钱是70多万将近80万，再加上贷款的利息，以及交过的税费，LZ的成本差不多是82万左右。</p><p>　　而LZ当时也简单了解了下，当时LZ那小区的房价大约是6000多那么一点点，核算成总价也就是可以卖85万多点。</p><p>　　而中介说了，一般挂上去的价格都要稍微留点还价的余地，于是，LZ给了中介一个价钱——90万！</p><p>　　挂上去以后，LZ便开始不断的接到电话，不过大多都是一些扯淡的电话。</p><p>　　直到有一次，有一个中介A说，有买家A愿意全款购买，问能不能便宜点。</p><p>　　LZ一听，全款好啊，这样能省LZ不少事，而且可以尽快拿到钱，于是LZ思来想去，最终给了一个价钱——88万。</p><p>　　而这个价钱买家A也答应了，也很爽快的交给了中介A一万块定金，LZ当时都以为这笔88万的买卖要做成了。</p><p>　　结果就在此时，又来了一个中介B，说有个买家B也看上了，虽然这个买家B是按揭，但人家上来就给92万，而且也交了定金，整整比那个买家A多了4万块钱。</p><p>　　我勒个擦？4万块啊！</p><p>　　LZ肯定是动心了啊！但LZ并没有第一时间答应。</p><p>　　为啥？</p><p>　　因为这个中介B所在的中介公司，是LZ媳妇的一个亲戚C开的，这也是LZ听到了中介B的公司名才想起来的。</p><p>　　其实C开了个中介公司，这事LZ和媳妇早就知道，但为啥没直接找他帮着卖呢？</p><p>　　其实是因为LZ之前曾很认真的问过媳妇一句，“媳妇，咱小两口就有话直说了啊，以你的判断来看，你觉得你这个亲戚靠谱不？”</p><p>　　媳妇听完，略微犹豫了一会儿，然后缓缓的摇了摇头。</p><p>　　看到这个，LZ就果断放弃了找C帮着卖房的打算，毕竟如果人不怎么靠谱的话，办事一般也不怎么靠谱，更何况，有个常说的词叫杀熟，说的就是关系越近越容易被坑，除非是特别近，比如父母或者亲兄弟姐妹这种关系。</p><p>　　也正因为如此，哪怕中介B这边买家多出了4万块，LZ也有些犹豫。</p><p>　　不过最后LZ还是选择了中介B，至于原因的话没别的，毕竟4万块，光这一个理由就足够了，而且LZ还是愿意让自己去相信，亲戚是不会坑亲戚的。</p><p>　　于是乎，LZ和媳妇商量了下，既然都已经选择了中介B，那也索性不瞒着C了，便给C打了个电话，说卖房子刚好来到了他的中介公司，之前都忘了他有个中介公司，否则就直接找他了。</p><p>　　这自然是LZ找的一个说辞而已，毕竟卖房子没有直接找他，多少还是要解释下的。</p><p>　　C听了以后说应该早点找他，现在中介B已经和LZ谈好了，他也不好意思压人家的中介费了，否则原本可以不要我们的中介费。</p><p>　　对此LZ表示是完全OK的，因为本来也没打算占这个便宜，只要能安安稳稳把房子卖出去，交个9000块的中介费LZ还是完全不在乎的，而且也是应该的。</p><p>　　C听了以后也表示，会交代一下中介B，让他务必保证我们的利益，让LZ放心就行。</p><p>　　既如此，LZ自然是果断把那个买家A给拒绝了。</p><p>　　这时候有的同学可能要说了，“你都收了买家A的定金了啊，拒绝了人家不需要赔钱吗？”</p><p>　　LZ只能说，LZ并没有收到买家A的定金，买家A的定金是给了中介了，而且LZ也没有和买家A或者中介签订任何协议，毕竟LZ人一直在杭州，根本就没回去，所以，和买家A之间，最多只能算是个远程口头协议而已。</p><p>　　虽说拒绝买家A从良心上来说有点不好意思，但谁家的钱都不是大风刮来的，毕竟是4万块钱，LZ没有理由不要。</p><p>　　后来，这个买家A不知道从哪里要到了LZ的电话，还给LZ专门打了电话。</p><p>　　意思是说，他为了买房子把原来的房子都卖了，总之就是各种不容易，各种没退路，但LZ就是一句话，“很抱歉，毕竟是4万块钱啊。”</p><p>　　最后这个买家A似乎是有点恼羞成怒了，直接说了句，“他出92万，那我就出95万！怎么样？”</p><p>　　LZ当时一听，这个老哥看样子是真上头了啊，都开始搞起竞价了，但LZ内心肯定是不相信的，毕竟从88万涨到95万，这特么也太夸张了，而且听他的口气就是赌气的那种，根本不像是真心的。</p><p>　　但就算他不是真心的，LZ也不能直接说你出95万也不卖你啊，所以LZ只能让他自己知难而退，便认真的说了句，“你要是愿意出95万的话，我肯定是愿意卖给你的，但是得给我交个定金，最起码要5万块，否则我确实没办法就这么相信，希望你能理解。”</p><p>　　果不其然，这个买家一听LZ这么说，深深的叹了口气，然后说了句“还是算了”，就把电话给挂了。</p><p>　　就这样，最终LZ的房子算是以92万的价格定了下来，而LZ也开始和中介B沟通起了具体的交易过程。</p><p>　　按照中介B所说，卖房如果是按揭的话，LZ应该最少要回老家两趟，第一趟主要是签合同，交首付这些，第二趟则主要是过户。</p><p>　　但是，由于LZ的房子没满二（当时还差大概5个月的样子），提前交易的话，要多交5%的税（将近5万），所以买家想满二以后再过户，LZ只能先签合同拿首付，至于尾款的话，要等到满二以后过户才能拿到。</p><p>　　听到这个，LZ顿时有点犹豫了，要等差不多半年才能拿到所有的钱？那LZ现在卖个什么劲啊？</p><p>　　还不如先不卖，然后等到满二以后再卖呢，反正怎么都要等到那时候才能完成交易，现在只拿个首付，钱又不够LZ买杭州的房子，有啥用呢？</p><p>　　不过，LZ并没有一口回绝说房子不卖，而且也确实是巧，当时LZ刚好有事要回老家一个星期，于是LZ便和中介B说，如果自己确定要卖的话，会趁回老家的这个星期，挑个时间去市区一趟，把合同签了，顺便把首付收了，然后等满二以后，再回来进行过户。如果确定不卖的话，也会在这个星期内给他一个确定的答复。</p><p>　　其实这已经是LZ的缓兵之计了，这个时候，LZ已经更倾向于不卖了，因为要等半年拿到尾款实在太久了，还不如等到满二再卖，到时候能省5%的税，说不定还能卖高点。</p><p>　　只不过考虑到C是LZ媳妇亲戚的关系，所以才没好意思这么快就说又不卖了。</p><p>　　这就是找亲戚的弊端了，如果是不认识的中介，那LZ就直接说不卖就完事了，就和之前那个中介A一样。</p><p>　　结果，让LZ意外的事情发生了，就在LZ刚回老家的第二天，中介B突然打电话说，买家已经把50万首付打到他们公司的账户了，他们先代收了，让LZ直接去签合同拿首付。</p><p>　　纳尼？还能这样操作的？</p><p>　　这LZ一听就火了，第一时间就给中介B打电话，“谁特么让你随便帮我收钱的？谁给你的这个权利？我不是说了还没确定要卖呢，你替我收个毛的钱？”</p><p>　　结果中介B竟然还一口委屈的说，“是C总让我务必保障你的利益，所以我就先把钱收了，免得到时候买家反悔再不掏首付。现在这样你来了直接拿钱，一点风险都没有了。”</p><p>　　对于中介B的这个说法，LZ对此是嗤之以鼻的，先收钱肯定是为了生米煮成熟饭，想挣这笔中介费而已，什么保障LZ的利益，纯属扯淡。</p><p>　　原本LZ压根犯不着跟这个中介生气，因为他收钱是他收的，是他自己过线了，LZ压根就没收到过买家一分钱，也没签过任何协议，所以哪怕是他代收了首付，LZ还是可以随时退出，而不需要付任何法律上的责任。　　</p><p>　　但就在LZ跟中介说，让他把定金和首付退给人家，LZ不打算卖以后，很快C的电话就打了过来。</p><p>　　C和LZ扯了很多，但核心的意思就是，如果LZ就这样不卖了，让他在这个中介B的员工面前很没面子，让LZ还是把房子给卖了，去签合同拿首付。</p><p>　　纳尼？还能这样操作的？</p><p>　　LZ不卖房就是不给C面子，这房子还特么非卖不可了？</p><p>　　卖个毛！凭啥LZ就得为了你的面子牺牲，非得卖房不可？本来LZ虽然倾向于不卖，但毕竟没有百分百确定，但现在啥也别说，就是不卖了，爱特么谁谁。</p><p>　　结果中介B听到C说LZ不卖了以后，又给LZ打了个电话，说如果LZ现在说不卖，对方可能起诉LZ，让LZ赔偿定金。</p><p>　　哟？装委屈不行，现在又开始威胁LZ了？</p><p>　　去你大爷的，就是不卖。</p><p>　　LZ当时的原话是，“如果法院真的判我要赔偿定金，那我就赔，但现在我就是不卖了，你让他去告吧。”</p><p>　　其实这话LZ是冲着中介说的，意思也很明显，就是你别威胁LZ，老子不吃这一套。</p><p>　　最后，中介B和LZ媳妇的亲戚C看LZ油盐不进，只能让买家来把他的定金和首付又拿了回去，这件事也算是告一段落。</p><p>　　说实话，LZ总觉得那个中介B说的有点假，因为LZ不太相信那个买家，在完全没见到LZ的情况下，就敢把50万首付打给中介，这应该是那个中介想圈住LZ的套路而已。</p><p>　　不过这都不重要了，反正是不卖了，而且事情也结束了。</p><p>　　就这样，五个多月过去，到了2017年的12月份，LZ的房子终于满二了，这也意味着买家不需要交5%的税了，而LZ自然也能多卖点。</p><p>　　不过此时LZ的房产证还没有办下来，所以LZ倒也没有急着立马挂上去卖，直到2018年的1月份，LZ拿到了房产证，此时才算是万事俱备，连东风都不欠了。</p><p>　　然而，此时杭州的房价又涨了不少，LZ觉得就算卖了老家的房子，也不一定能换一套杭州的房子，所以这个时候，LZ又特么有点犹豫了。</p><p>　　到底是装修第一套房子，还是卖老家房子然后在杭州再买个二套？</p><p>　　思来想去，LZ觉得，还是装修第一套房子吧。</p><p>　　毕竟如果卖了老家的房子，又不够在杭州买的话，那还不如留着老家的房子。</p><p>　　就这样，2018年春节前的那段时间，LZ和媳妇又开始讨论起了装修，甚至连车都选好了，因为此时已经早就存够了装修钱，而且还有剩余。</p><p>　　原本什么都定的差不多了，就打算过完年以后，差不多就开始动工了。</p><p>　　结果，过完年以后，无意之间LZ看房产APP的时候发现，老家的房价涨了，而且还涨了不少，LZ的那个小区，都快1万1平了。</p><p>　　这就意味着，LZ的那套房子现在可以卖将近140万！比之前的92万可是多了40多万啊！这才过去半年多点而已！</p><p>　　简直无情啊！</p><p>　　但不管怎么说，卖了老家的房子以后，似乎又买得起杭州的房子了，就算买不起，差的肯定也不多，还是完全不成问题的。</p><p>　　就这样，LZ犹豫了一小段时间，最终还是决定，卖老家房子！</p><p>　　这一次，LZ没有直接找中介，而是直接把房源信息挂到了网上，等着中介来找自己。</p><p>　　结果这下LZ的电话炸了，一连几十个电话打过来，全是中介公司，主要就是登记一下LZ的房子信息，比如几栋几单元几楼、满不满二、价钱多少等等。</p><p>　　直到LZ把信息撤掉，电话的频率才逐渐下降下来，但那几天还是偶尔会来一个中介公司的电话。</p><p>　　既然是卖房子，最敏感的就是价格了，当时LZ对房价比较看好，所以开得很高，张口就是145万，最低可还到140万。</p><p>　　结果差不多等了1个多月快2个月了，一个来真心谈价钱的都没有，全是中介公司的烟雾弹，都说是手里有准客户，但其实就是要信息的，根本就没有买家。</p><p>　　逐渐的，LZ也渐渐失去了耐心，同时也意识到140万太高了（一开始也确实是乱开的价），所以开始了降价，这一降就是5万块，也就是135万。</p><p>　　但是，让LZ失望的是，135万依旧是无人问津。</p><p>　　这样又过了一个月，LZ意识到，135万还是有点高，于是乎LZ又降了5万，变成了130万。</p><p>　　这样一来，终于有一个中介说，有一个客户130万想买，不过对方还想还价，他正在跟对方谈。</p><p>　　此时已经来到了2018年的7月份，距离LZ初次挂牌已经过去了4个月。</p><p>　　好在这次终究是没让LZ失望，买家同意了130万的价格，而且和这个中介交流的过程中，LZ也觉得，这个中介是比较靠谱的，并且LZ和中介梳理了好多次交易流程，总算是把交易流程彻底定了下来。</p><p>　　毕竟LZ远在杭州，回老家一趟不易，肯定是要把所有流程都安排好才行。</p><p>　　总的来说，交易流程分这么几步，首先是签二手房交易合同，然后LZ陪买方去银行面签，紧接着买方交首付，然后LZ拿首付去银行还贷（因为LZ当初是贷款买的），接下来就等银行出一个还贷证明（大概一周），然后拿着去房管局解押，紧接着就进行过户，然后基本上就等着银行放款了。</p><p>　　整个过程下来，LZ回了老家两趟，共计花费时间1个半月拿到了所有的钱。</p><p>　　总的来说，真正卖房的这次经历还是非常顺利的，这其实主要还是中介比较靠谱，什么事都提前安排好了，所以LZ回老家办事都比较顺利，没有出现什么意外，否则可能不止要回老家两趟。</p><p>　　不过，从2017年的6月份左右，到2018年的8月份，整个卖房周期足足跨越了1年零2个月，可谓是曲折离奇。</p><p>　　不论是LZ的心里变化，还是亲戚事件，都给这次卖房经历，增加了不少意外性。</p><p>　　好在最终，房子还是顺顺利利的卖出去了，而且按照最后的成交价来算的话，LZ差不多赚了足足40多万，将近50万的样子。</p><p>　　这也算是瞎猫碰见了死耗子，让LZ给刚好撞上了。</p><p>　　</p><h2 id="中途小结-2"><a href="#中途小结-2" class="headerlink" title="中途小结"></a>中途小结</h2><p>　　</p><p>　　这次卖房的过程，可算是让LZ操碎了心，感觉LZ那一年每天都在想卖房这个事情，而当LZ收到所有房款的时候，感觉就像打赢了一场战争一样，终于松了口气。</p><p>　　不过虽然过程曲折，但其实LZ还是收获了不少经验，简单分享一下，供用得上的同学参考。</p><blockquote><ul><li>异地的房子卖起来真是各种麻烦，所以如果不是没办法，尽量不要买非工作地的房子。</li><li>具体的交易流程必须要一点点搞清楚，不然很容易被坑。如果你不清楚流程是否靠谱，可以在评论区问LZ，LZ现在基本上算是半个专家。</li><li>尽可能满二再卖，否则5%的税还是挺狠的，会导致你卖不上价钱。</li><li>买卖还是尽量不要跟亲戚打交道了吧，其实LZ早就知道这个道理，如果不是那个中介公司刚好是亲戚开的，LZ其实很不想在买卖的事情上和亲戚打交道。</li><li>收定金要一定要慎重，LZ之所以能多次反悔，本质原因是LZ压根没收过定金，也没签过任何定金协议之类的，如果你确实收了定金，又打了收据给买家或者中介，那你基本上就没什么反悔的余地了，除非你愿意赔偿违约金。</li><li>如果可以，还是找大的中介公司，毕竟房产交易是大买卖，求稳为主，不要为了省那点中介费，最后给自己找麻烦。</li></ul></blockquote><p>　　</p><h2 id="第三次买房——兴奋"><a href="#第三次买房——兴奋" class="headerlink" title="第三次买房——兴奋　　"></a>第三次买房——兴奋　　</h2><p>　　</p><p>　　第三次买房，LZ称之为兴奋，这种感觉是前两次都没有的，因为前两次就算买了，也要很久才能住进去，基本是遥遥无期。</p><p>　　但这第三次不同，买了就是要直接住的，这是真正要告别租房的一次购房。</p><p>　　其实这次买房子LZ买的非常快，因为LZ有一个硬性要求，那就是物业必须要好，而就杭州来说，物业比较顶尖的有三家，万科、绿城和滨江。</p><p>　　首先滨江可以基本排除，因为滨江的离LZ都太远，而绿城和万科，LZ简单对比了下，感觉还是万科更好一些。</p><p>　　所以，确定了物业必须是万科以后，LZ的选择范围就基本固定了，因为万科的房子一般都比较贵，而LZ的钱也比较有限，所以LZ能买得起，又是万科物业，并且离公司不是很远的，就只有一个小区了。</p><p>　　这就好买多了，小区一下就选好了。</p><p>　　于是，LZ约了中介，集中一天，连续在那个小区看了十几套房，一下就相中了其中一套。</p><p>　　原因无他，首先是这一家是5/10层，楼层几乎完美，而且一梯两户，也就是说，一个电梯只有20家使用（其实不到20家，因为1层、2层基本不需要），绝对不至于等电梯，更何况，就算电梯有问题，5楼爬一爬，就当锻炼身体了，也问题不大。</p><p>　　其次这家的后面是一座山，空气就不提了，简直完美，对着山撸一把DOTA，简直不要太爽，而且背后有山，意为背后有靠山，寓意也非常之好（是不是有点小迷信了，-_-）。</p><p>　　最重要的，还是这一家的装修，是最符合LZ和媳妇的爱好的，可以拎包入住，而且房子非常新，房东装修完以后基本没住过，家具家电基本全都是新的。</p><p>　　没的说，直接交定金，拿下！</p><p>　　而整个交易过程也很顺利，和卖房的时候差不多，无非是LZ的角色对调了一下，从卖方变成了买方而已。</p><p>　　不过杭州的二手房交易有一点和老家不同，那就是交易资金会被冻结，卖方拿钱会慢一些，不过这其实是为了保障买方的利益，所以LZ自然不会有什么意见。</p><p>　　而且对方也是一对80后夫妻，比LZ大个4、5岁，互相比较能谈得来，每次交易的时候，中介在那搞，我们在那聊会儿天基本就完事了，轻松加愉快。</p><p>　　唯一美中不足的是，房子不满二，所以LZ多交了12万的税，这可是白白给国家了，本来房子只有225万，结果最后各种税加中介费，足足花了245万。</p><p>　　要知道，因为LZ是二套，可是要掏六成的首付啊！</p><p>　　不过，LZ的运气还不错，虽然最近杭州的房价在降，但是LZ这个小区的价钱并没怎么降，普遍只降了5万块，而且因为LZ本身买的也比较便宜，所以至少目前还不亏，而且从长远来看，应该还是看涨的。</p><p>　　况且，看着媳妇最近热火朝天的收拾新家，花多少钱都值了，这种幸福感是真的很难用钱去衡量的。</p><p>　　</p><h2 id="中途小结-3"><a href="#中途小结-3" class="headerlink" title="中途小结"></a>中途小结</h2><p>　　</p><p>　　第三次买房LZ写的比较简单，因为确实过程很快，也很顺利，没什么好写的。</p><p>　　而且这次是买来住的，所以整体是一个比较个性化的选择过程，是没有多大参考价值的。</p><p>　　就像前面LZ说的，LZ就想选物业好的，楼层适中的，但可能有的人对这个并不在意，而是在意地理位置、周边发展，或者是否靠近地铁等等。</p><p>　　所以，LZ买的，并不一定适合你，只能提供一些参考给你。</p><blockquote><ul><li>对于追求生活品质的人来说，物业还是挺重要的，一个好的物业和差的物业，那住起来的感觉完全不同，谁住谁知道。</li><li>一般地段好或者是刚需类的房子都不太会降价，而一些华而不实的房子是很容易降价的，比如杭州这一次降价风潮中，降的最狠的一般都是“老破小”，或者是非常偏远，纯靠概念炒作起来的地方。</li><li>作为拥有两个房贷的人，深刻的体会到，先不说买房子能不能升值赚钱，但最起码可以强行让你存钱，只不过这些钱都以房子的形式存在着而已。就像LZ一样，如果不是买房子的话，存钱的速度肯定没有这么快，因为钱在手里很容易不经意就花掉了。所以还是那句话，自从有了房贷以后，LZ存钱的速度连自己都害怕。</li></ul></blockquote><p>　　</p><h2 id="结尾的话"><a href="#结尾的话" class="headerlink" title="结尾的话"></a>结尾的话</h2><p>　　</p><p>　　挺巧的是，LZ今年刚好30周岁，三十而立，也终于要结束租房的日子了。</p><p>　　说实话，不光是媳妇最近忙的热火朝天的，LZ也是一样，这么多年想买台式电脑一直没买，就等着这一天了，想想还真有点小兴奋呢，-_-。</p><p>　　7年的奋斗，终是没有辜负，接下来的日子，想必幸福感会比以前强不少。</p><p>　　所以，房子最大的意义，还是它所带来的幸福感，这是多少钱都换不来的。</p><p>　　文章末尾，送上LZ新家的照片，还有LZ刚租的拿来练手的豪车，也是LZ考了9年驾照以来，第一次开车，-_-。</p><p>　　最终，希望所有的程序员，都能够早日摆脱租房的日子，虽然，租房的日子也很令人怀念。</p><p><img src="558323-20181110043022586-2070538121.png" alt="img"><br><img src="558323-20181110043943935-530791438.png" alt="img"><br><img src="558323-20181110043353308-637068622.png" alt="img"><br><img src="558323-20181110043437519-1604670630.png" alt="img"><br><img src="558323-20181110043522389-866287514.png" alt="img"><br><img src="558323-20181110043601071-646270916.png" alt="img"><br><img src="558323-20181110043704336-1159496131.png" alt="img"><br><img src="558323-20181110043645214-436836770.png" alt="img"><br><img src="558323-20181110132047742-1065199398.jpg" alt="img"></p><blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> Book </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 左萧龙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>photo</title>
      <link href="/2018/10/11/photo/"/>
      <url>/2018/10/11/photo/</url>
      
        <content type="html"><![CDATA[<img src="/2018/10/11/photo/iterm2.png" class=""><img src="/2018/10/11/photo/vscode.png" class="">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>zxl身边的那些人和事</title>
      <link href="/2017/02/19/book/zxl%E8%BA%AB%E8%BE%B9%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%BA%E5%92%8C%E4%BA%8B/"/>
      <url>/2017/02/19/book/zxl%E8%BA%AB%E8%BE%B9%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%BA%E5%92%8C%E4%BA%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>　　</p><p>　　2013年的8月13日，群主打开自己的QQ，建立了第一个技术交流群，也就是现在的交流一群。</p><p>　　时光飞逝，转眼之间，3年半已经过去了。</p><p>　　当初建群的时候，群主才工作不到两年，期间借着业余时间，写了一个设计模式的系列，因此吸引了一批同道中人一起学习。为了给大家一个一起交流的地方，群主便顺手建了一个QQ群。</p><p>　　谁曾想，3年半过去了，这个无意之中建立的QQ群，不止见证了群主的成长，也见证了群里小伙伴儿的成长。</p><p>　　今天这篇文章，群主就和大家一起说说，群里的那些人和事。</p><p>　　这些过往的人和事，或许会让你产生共鸣，或许会让你感到鼓舞，或许会让你受到启发，也或许只会让你付之一笑。但不管如何，这就是独属于程序员的人生百态。</p><p>　　</p><h3 id="序"><a href="#序" class="headerlink" title="序"></a>序</h3><p>　　</p><p>　　大家好，我叫Java技术交流群，小名叫小群，是被一个叫群主的家伙，在2013年8月13日的时候，在帝都生出来的。</p><p>　　小群刚出生的时候，来小群家里的人还非常稀少，很长一段时间里，家里都只有十来个人。在当时，那个叫群主的家伙，因为怕客人觉得小群家里冷清离开，也经常来小群家里。</p><p>　　来到小群家里以后，那个叫群主的家伙，就和客人们在院子里，一起聊些小群听不懂的东东。虽然那时候家里的人很少，但小群觉得，这个家里还是蛮温馨的。</p><p>　　后来，家里的人慢慢变多了，足足有两百多个人。这个时候，那个叫群主的家伙，发明了一个东西，他管这个东西叫群名片。</p><p>　　当时，那个叫群主的家伙，要求所有的人手里都必须举一个牌子，上面是每个人的群名片，有的叫“北京-嘎嘎-Python”，有的叫“杭州-小武-Java”，也有的叫“广州-小师妹-Android”，而群主那个家伙举得牌子，叫做“北京-左潇龙-Java”。</p><p>　　根据群主那个家伙的说法，这么做是为了避免大家在聊天的时候重复的问，“你在哪个城市呀？我忘啦。”，又或者是“你做的工作是用的什么编程语言呀？我忘啦。”</p><p>　　还真别说，自从大家都举牌子以后，在院子里聊天的时候，小群还真的没再听到过客人们再问这样的问题。</p><p>　　只不过，在那之后，那个叫做群主的家伙，就变的冷酷无情了许多。曾经有一次，家里已经四百多个人了，就因为有一部分客人没举牌子，那个叫群主的家伙，一夜之间，将所有没举牌子的人，全部赶出了小群的家里，扔在了荒郊野外。</p><p>　　那一次，赶出去的人足足有两百人左右，原本小群的家里已经快要满了，这下又变得空荡了许多。</p><p>　　不过，随着小群慢慢长大，小群的家里最终还是要满了，马上就要到五百人了。当时客人们和那个叫群主的家伙说，让群主把小群的家里扩张一下，这样最多就可以装两千人了。</p><p>　　本来小群还是挺高兴的，结果那个叫群主的家伙，想都没想就给拒绝了。说是小群的家里太大的话，很容易让客人们都变成僵尸，听到那个叫群主的家伙这么说，小群也给吓坏了。</p><p>　　后来，小群就被那个叫群主的家伙改名了，改成了交流一群，而小群的小名，也变成了小一。与此同时，那个叫群主的家伙又生了一个孩子，起名叫交流二群，小名叫做小二。</p><p>　　自从小二出生以后，那个叫群主的家伙就很少来小一家里了，总是频繁的去小二家里做客。而他告诉小一的理由是，小二家里的客人还太少，需要他去调节一下气氛。</p><p>　　慢慢的，小二的家里客人也满了，这个时候，那个叫群主的家伙又生了一个孩子，起名叫交流三群，小名叫小三。</p><p>　　和当时小二出生的时候一样，小三刚出生的时候，那个叫群主的家伙，也经常去小三家里做客，而且经常夜不归宿。</p><p>　　后来，小三的家里客人也慢慢变多了，自那以后，那个叫群主的家伙，就很少再出现了。只是偶尔在周末的时候，那个叫群主的家伙，会在YY、斗鱼这一类的地方做活动，和客人们一起聊聊天。</p><p>　　就在前几天，小一听说，那个叫群主的家伙又怀孕了，估计在不久之后，名叫交流四群，小名为小四的孩子，就要出生了。</p><p>　　……</p><p>　　</p><h3 id="群主乱入"><a href="#群主乱入" class="headerlink" title="群主乱入"></a>群主乱入</h3><p>　　</p><p>　　好了，一段序下来，群主已经基本把目前交流群的情况介绍清楚了。</p><p>　　从当初的十来个人，到现在的将近一千五百人，这期间来了太多人，也走了太多人。</p><p>　　有些人的故事被群主记住了，也有些人的故事被群主遗忘了。</p><p>　　但不管这些人走还是留，被记住还是被遗忘，这一个个的人和事，始终在世界的各个角落存在着，他们都在默默的，或为自己的生计而努力，或为世界的改变而奋斗。</p><p>　　这群人，我们称他们为程序员！</p><p>　　</p><h3 id="帝都-胡萝卜-打杂的"><a href="#帝都-胡萝卜-打杂的" class="headerlink" title="帝都-胡萝卜-打杂的"></a>帝都-胡萝卜-打杂的</h3><p>　　</p><p>　　胡萝卜，这就是传说中第一个入群的神秘人，但其实，胡萝卜的这个第一，是有些水分的。</p><p>　　记得当初，在一次和群友交流的时候，群主忽然很好奇第一个加群的人到底是谁，就在群里问了一句，“谁知道第一个加群的人是谁？”</p><p>　　结果，第一个加群的人就这样被人肉出来了，这个人平时在群里几乎不说话，那一天，他毫无征兆的被N个人同时@，结果在几分钟之后，群主就收到一条群消息，消息内容是“某某某已经退群”，而这个人，其实才是真正的入群第一人。</p><p>　　不过自从真正的第一人退群之后，胡萝卜这个万年老二，就变成了某种意义上的第一人。</p><p>　　胡萝卜是个标准的90后，家住东北，据他所说，他如今在社会上已经混迹了9年之久，是一个名副其实的老司机。</p><p>　　说起来，胡萝卜最早与程序员有交集，是在初中那会儿，在一个同学的影响和互相扶持下，接触到了计算机。初入计算机的领域，胡萝卜与很多人一样，对这个虚拟的世界充满了好奇，哪怕就是用CMD输入一个命令，都觉得自己瞬间站上了黑客的巅峰。</p><p>　　后来，胡萝卜的家人觉得他不是上学的料，便在胡萝卜初中上完以后，把他送去了警校，以期以后可以拿个公安口的文凭，好送去事业单位养老。</p><p>　　时过境迁，胡萝卜很快便从警校毕业了，在警校的这段日子里，除了最后一个学期，学校开设了一门C语言的课程以外，胡萝卜并没有与计算机有太多交集。</p><p>　　从警校毕业以后，由于事业单位当时没有名额，胡萝卜便被家人安排到了消防队，成为了一名合同制的消防员，也就是大家所熟知的临时工。</p><p>　　但是，与群主当初被家人送到工地一样，这种被安排的工作，一般都是干不长久的，很快，胡萝卜便从消防队辞了职，回到家里开始帮家里人的忙。</p><p>　　胡萝卜的家里有一个规模较大的超市，平时超市不忙的时候，胡萝卜便到一个在商城里维修电脑的朋友那当学徒。在当学徒的这段期间，不安分的胡萝卜开始捣鼓封装GhostXP系统，更换用户头像、更换系统提示音、更换背景，包括在系统的信息页面打上店铺的广告等等。</p><p>　　就这样，过了一段时间，到了同龄人开始参加高考的时候，胡萝卜家的超市兑出去改做其它生意了。这样一来，胡萝卜就闲下来了，也就是在这个时候，胡萝卜做了一次人生中重要的决定，他带着家里人给的4万块现金，来到了帝都学习编程。</p><p>　　故事说到这里，不得不说，胡萝卜的经历其实是和群主很相似的，只是，这4万块现金，在当时可绝对称得上是一笔巨款了。</p><p>　　到了帝都以后，与大多数人一样，胡萝卜经过一段时间的培训，开始找工作。值得庆幸的是，胡萝卜运气还不错，靠着比较高的笔试成绩，很顺利的便拿下了一个外包的offer，被发配到了某国企核心项目组。</p><p>　　据胡萝卜所说，也就是在这个时间段里，他在博客园看到了群主的一篇有关“跳槽”的文章，便尝试着加到了群主的QQ群里。</p><p>　　当时胡萝卜进来的时候，群里一共就三个人，一个是群主，一个是胡萝卜，而另外一个，则是当时真正意义上的入群第一人。</p><p>　　当初刚进群那会儿，胡萝卜天天跟群主叫苦，说现在的公司多么没前途，工作多么苦逼，老板多么坑爹，而群主，则是天天给他熬鸡汤喝，一碗一碗的灌。估计在整个交流群的近一千五百号人中，喝群主鸡汤最多的，就是胡萝卜这个家伙。</p><blockquote><p><em>顺便在这插播一个小插曲，因为群主要写胡萝卜的故事，为了让故事更加真实完整，光靠群主的记忆力显然是不行的。于是群主便告诉胡萝卜说：“把你的经历尽可能详细的写给我，另外，和我的交集尽量多写点。”</em></p><p><em>结果，胡萝卜很快给群主回复了一句：“和你的交集都是你在骂我，-0-。”</em></p><p><em>群主当时心中数万只草泥马奔腾而过，“我特么那是骂你吗？我特么那是在激励你，激励你，激励你！懂不？-0-。”</em>　　</p></blockquote><p>　　说起来，群主之所以这么坚持不懈的给胡萝卜灌鸡汤，其实是有原因的，因为当时在群里，除了胡萝卜以外，实在是特么无人可灌啊！</p><p>　　不过，在群主鸡汤的无限攻击下，胡萝卜终究还是被群主影响了，于是乎，他做了一个几乎疯狂的决定，那就是，再次踏上培训之路，去学习嵌入式系统开发。</p><p>　　群主犹记得，当时胡萝卜之所以要学习嵌入式开发，是因为他觉得Java还不够底层。</p><p>　　后来，经过一段时间的培训，胡萝卜如愿以偿的来到了一家做芯片的公司。其实，当初给胡萝卜offer的，还有另外两家公司，一家是做操作系统的，一家是做存储的，不过据胡萝卜自己所说，他之所以选择这家做芯片的，原因是觉得这家公司效率比较高。</p><p>　　其实自从胡萝卜开始学习嵌入式以后，就很少在群里出现了。在很长一段时间里，胡萝卜都处于失联状态。</p><p>　　不过，不管时间多久，每当群主和胡萝卜在网上侃大山的时候，总能让群主回想起当初刚建群的那段日子。</p><p>　　</p><h3 id="北京-shengjk-Java"><a href="#北京-shengjk-Java" class="headerlink" title="北京-shengjk-Java"></a>北京-shengjk-Java</h3><p>　　</p><p>　　shengjk，一个自称菜鸟的人，但shengjk却有一个其它人几乎都没有的经历。</p><p>　　shengjk在2014年的时候刚上大四，这个时候，shengjk并没有像大多数人一样四处投简历求职，而是走了一条不寻常的路，那就是直接登上《非你莫属》求职。</p><p>　　说起《非你莫属》，群主在刚工作那会儿，因为是单身狗一个，因此无聊的时候经常看视频。当时群主就基本只看两个节目，一个是《非你莫属》，一个是《爱情保卫战》。</p><p>　　之所以看这俩节目，是因为群主觉得，这两个节目，一个可以教你婚姻，一个可以教你职场。虽然作为两档综艺节目，难免会有作秀的成分，但不管怎样，多少还是会有一些营养在里面的。</p><p>　　回到故事本身，shengjk并没有在《非你莫属》实现逆袭，据他自己所说，当时在《非你莫属》，shengjk几乎是属于惨败，被批评的体无完肤。群主虽然没看过shengjk面试的视频，但看过这么多期《非你莫属》，群主基本能自动脑补出，一大堆BOSS对着shengjk开炮的场景。</p><p>　　shengjk还算是心理素质不错的小伙儿，并没有因为这次打击而否定自己。而是在随后的一段时间里，来到了一家培训机构，开始学习IOS。</p><p>　　不过学了一段时间以后，shengjk觉得自己似乎不太喜欢IOS，而且隐约觉得IOS不会长久，便果断离开了这家培训机构。离开以后，shengjk独自一人，在12月的寒冬之际，来到了北京，继续参加培训，学习Java开发。</p><p>　　说到这里，不得不让shengjk本人来说一说，他刚到北京培训的那段日子。</p><blockquote><p><em>当时一个人拖着行李，寒冷的12月再加上偌大的北京举目无亲，我也不知道未来是什么样子的，不知道自己能不能在北京有立身之地。</em></p><p><em>说实在的，在培训的那4个月里面，有太多的第一次了，第一次接触java，第一次打印出hello world。</em></p><p><em>我非科班出身，专业是信息与计算科学，在那4个月里，每天是12点左右睡觉，7点左右起床，其实当时根本就不知道什么是累，也根本没有之间思考，那段时间脑袋觉得一直都处于真空状态。</em></p><p><em>当时心中只有4个字：听话照做！</em></p><p><em>每天除了狂敲键盘就是狂敲键盘，很荣幸的是，在java学完时被有幸选进了大数据班。紧接着又是狂学了一个月，15年7月份培训完毕，15年6月份大学毕业，欠下3万多外债。</em></p><p><em>然后就是孤身一人闯职场，这就是起步的资本，哈哈！</em></p></blockquote><p>　　看完这段话，群主觉得，这个经历和群主有着几分相似，都是在北京培训了差不多半年的时间。只不过不同的是，群主是毕业后一年半才参加的培训，而shengjk则是在大四就开始了，这已经比群主领先了一步。</p><p>　　随后，shengjk有幸找了一家金融公司上班，这个结果，也算是对他那半年狂敲键盘的肯定。</p><p>　　接下来，就让shengjk自己来说一说，他刚上班那会儿的感受吧。</p><blockquote><p><em>在刚工作的一年里，可谓是战战兢兢的，生怕哪里做得不对。只能不断的去学习技术，学习别人的做事说话方式，学习别人考虑的方式方法。</em></p><p><em>每当遇到一个新技术，内心就特别的沉重，感觉特别的有压力。</em></p><p><em>慢慢的，自己也学会了思考，也不再为学习新技术而感到压力重重了，在项目的交流会上也可以发表自己的想法了，关键是自己有想法了，哈哈！</em></p></blockquote><p>　　相信大多数人与shengjk是相似的，刚上班的时候都会忐忑，不过其实回想起来，有时候那段忐忑的日子，才是最值得怀念的。</p><p>　　到现在，shengjk已经工作一年半了，除了平时的工作以外，shengjk也开始了攻克基础类的知识，例如计算机原理、算法之类的。不得不说，shengjk这小伙儿还是蛮有想法的，有着自己的一套学习思路。</p><p>　　故事最后，群主只想说，对于生意人来讲，或许是出门靠朋友，但对于程序员来讲，更多的则是出门靠自己。</p><p>　　　　</p><h3 id="北京-001-龙哥关门弟子-SQL"><a href="#北京-001-龙哥关门弟子-SQL" class="headerlink" title="北京-001-龙哥关门弟子-SQL"></a>北京-001-龙哥关门弟子-SQL</h3><p>　　</p><p>　　龙哥关门弟子，这个群名片是够叼的，实际上，这个群名片源自于当初在群里的一次拜师潮流，那一次也不知道是谁首先发起的，大家都嚷嚷着要认群主当师父。当然了，大家其实都只是在起哄而已，很大程度上还是开玩笑的成分居多。</p><p>　　但是，尽管如此，当时还是涌现了一批“龙哥关门弟子”、“龙哥小师弟”、“龙哥小师妹”、“龙哥关门小弟子”等一批让群主汗颜的群名片，而“龙哥关门弟子”这个群名片，便是在当时出现的。</p><p>　　而Derek，才是这次故事主角原本的昵称。</p><p>　　Derek是群里难得一见的高学历人才，具体哪个学校群主不记得了，但是Derek是一个名副其实的，科班出身的研究生。</p><p>　　这在群主的交流群里，其实是非常少见的，因为群主本来就是草根出身的程序员，因此很难吸引到一些高学历人才入群。</p><p>　　说起Derek，他其实最早在一家国企上班，跟公司签下了三年的卖身契，而在这三年当中，他的工资一直都处于非常低的水准。而Derek，之所以愿意接受这样的待遇，正是因为，这个国企单位，可以在三年卖身契履行完以后，给Derek一个北京市的集体户口。</p><p>　　Derek和胡萝卜不同，胡萝卜是一个典型的屌丝乐天派，用现在的话说就是逗逼一个，而Derek给群主的印象，更像是上学那会儿，班上沉默寡言的学霸。</p><p>　　或许正是因为Derek性格上有些优柔寡断，因此后来在拿下了集体户口以后，Derek对于跳槽这件事，依然是有些犹犹豫豫。因为在他看来，自己还没在这家公司呆够三年，如果就这样走的话，多少显得有些不太仁义。</p><p>　　不过后来，当Derek将这件事告诉群主以后，群主便立即对Derek展开了鸡汤攻势。在群主疯狂的攻势下，Derek终于不再犹犹豫豫，走出了人生中重要的一步，那就是立即跳出国企这个围城，去看看外面的世界。</p><p>　　这个时候，Derek已经带上了北京的集体户口，这也是他两年多卖身的最大收获。</p><p>　　原本以Derek的学历背景和基本功，找工作应该只是易如反掌的事罢了。但或许是因为之前在国企太安逸了，导致Derek起初开始面试的时候，并不是特别顺利。那段时间，Derek经常在网上跟群主诉苦，讲述他苦逼的面试经历。</p><p>　　后来，忽然有一天，Derek告诉群主，他前几天去微软面试了，而且，看面试官当时的反应，好像还很有希望的样子。</p><p>　　由于Derek在国企的时候，是基于C/C++做windows桌面程序的，因此微软一直是Derek非常想进的公司。也正是因为这个缘故，那段等待面试结果的时间里，群主从和Derek的聊天过程中，可以很明显的感受到，Derek时时刻刻都处于高度紧张的状态。</p><p>　　好在，结果并没有让Derek失望，Derek顺利的拿到了微软的offer，完成了人生的一次蜕变。</p><p>　　原本，进入自己梦寐以求的公司，本应是一件让人兴奋的事情。但是，Derek自打进入微软以后，便经常在群里诉苦，说在微软工作非常不适应，压力也非常巨大。</p><p>　　说实话，看到Derek当时在群里诉苦的样子，群主一度觉得，Derek已经因为微软的高压力，患上了抑郁症。那段时间，群主多次给过Derek建议，如果觉得微软的工作氛围实在不适合自己，就果断选择离开吧。</p><p>　　不得不承认，群主虽然这么建议Derek，但其实如果换做群主自己的话，是一定不会轻易走人的。</p><p>　　因为，在群主的概念里，离开一定是功成身退，或者有了更好的选择，而不能是临阵脱逃。</p><p>　　就这样，随着时间的流逝，群主渐渐忘却了Derek的事，而Derek也很少在群里再出现，仿佛消失了一般。</p><p>　　直到去年的7月份，群主买房的时候，Derek才突然出现。看过<a href="http://www.cnblogs.com/zuoxiaolong/p/life55.html">《2016——注定不平凡的一年》</a>的同学们都知道，在群主的买房风波中，群里有一个小伙伴，连电话都没打一个，就要了群主的支付宝账号，把一万块钱打了过来。</p><p>　　这个人，正是Derek。</p><p>　　时隔许久，Derek再次出现，已经不再是当初的那个Derek了。群主能够感觉到，Derek已经完全走出了当时初到微软的困境，变得自信了许多。</p><p>　　此外，群主也得到了一个消息，Derek已经在北京付了首付，作为一个拥有集体户口的人，随着房子的落地，Derek已经正式在帝都扎根。</p><p>　　最后，对于Derek为何在群名片最后的语言部分挂了个SQL，群主表示一脸懵逼，这货不是在微软做C#的吗？</p><p>　　</p><h3 id="杭州-松-Java"><a href="#杭州-松-Java" class="headerlink" title="杭州-松-Java"></a>杭州-松-Java</h3><p>　　</p><p>　　松，也是入群比较早的一位同学了，也算是一个活跃分子。</p><p>　　根据松所说，在大一那会儿，松和一个女孩有过一段非正式的恋爱。两个人约过几次会，压过几次马路，但却连手都没有牵过。</p><p>　　两个人的故事，就因为一次电话，就断了联系。说起来这故事也有些狗血，那一次在电话里，女孩问松，知不知道自己的生日是哪天，结果松很耿直的说不记得了，于是乎，女孩便很伤心的挂了电话。</p><p>　　和女孩断了联系以后，松突然间觉得大学的生活有些索然无味。所幸在大一下学期的时候，学校开了C++的课程，激起了松的学习欲望。</p><p>　　有了学习的动力，松在学习C++的时候非常用功，无聊的时候，也经常在百度知道上装装逼，回答回答新人的问题，虽然有些回答是错的，但这依然没有降低松回答问题的积极性。</p><p>　　在大学期间，松就是靠着这门C++，拿了一次专业第一。虽然其它的课程，松只能凭借着“良好的人际关系”勉强及格，但就因为C++这门课，还是引来了许多学霸虚心向松请教问题。这在某种程度上，给了松一种极大的成就感，也为他日后走上程序员之路，埋下了深深的伏笔。</p><p>　　毕业之后，松与大多数人一样，在没有过硬的学校和学历背景的情况下，找工作时遭受了巨大的打击。</p><p>　　基础不牢靠，项目经验不够丰富，是大多数应届生的通病，这也预示着，在校生多积累项目经验，对以后找工作有着极大的帮助。</p><p>　　不过世上往往不会有绝人之路，当时杭州的一家公司，向松抛出了橄榄枝。秉承着挣它几年钱就走的原则，松毫不犹豫的来到了杭州。</p><p>　　然而，来到杭州以后，松才悲催的发现，人家给的只是实习岗位，至于能不能留下来，还不得而知。</p><p>　　后来，据松本人介绍，他是又一次凭借着“良好的人际关系”，从同事那里提升了不少技术功力，才有惊无险的留了下来，在毕业时得以转正。</p><p>　　在这家公司，松得到了不小的锻炼，随着技术的提升，工作效率也越来越高。后来有一次，松在研究一段代码的时候，发现怎么都看不懂，于是便在网上拿翻译器翻译了这段代码的英文注释，这才发现，原来这一段代码被称作“命令模式”。</p><p>　　就是因为这个“命令模式”的发现，松才找到了群主的博客，进而加入了群主的交流群当中。</p><p>　　在入群之后的一段时间里，松曾经换过一次工作，接下来，群主就让松自己来讲一讲这次换工作的事。</p><blockquote><p><em>加到群里之后，别人经常会讨论分布式系统、缓存、消息这些东西，我当时完全不知道这些都是什么东西，总以为群里的人在搞些华而不实的东西。**毕竟，以设计模式之精要，什么复杂的逻辑解决不了呢。</em></p><p><em>然而，我后来才知道，有一种公司叫互联网公司，里面确实会经常用到分布式、缓存、消息这些概念。**这些，都是我最要好的朋友告诉我的，而这个朋友，也是在杭州这段时间以来，多次帮助过我的人。</em></p><p><em>自那以后，没过几个月，我这个朋友就走了。当时我很难过，虽然朋友还是偶尔跟他说几句话，但是却总感觉自己已经跟不上他的节奏了。</em></p><p><em>我的性格有些优柔寡断，所以直到年底才跳走，虽然公司不怎么样，但毕竟也是互联网公司了，我终于也渐渐明白了群里的人说的是什么，因为我也在用了。</em></p><p><em>进了新公司才发现，原来除了SSH、SSM这套东西以外，技术还有这么多我以前所不知道的东西。</em></p></blockquote><p>　　说起来，在群主刚来杭州的时候，曾经组织过一次群友见面会，说的通俗一点，就是叫来一些杭州的群友，大家一起吃个饭吹吹逼。</p><p>　　那一次吃饭，群主隐约记得一共来了七个人，而松，便是其中的一个。</p><p>　　松给群主的印象，是一个脾气极好，有些腼腆的男生，群主觉得，这也就解释了为什么松可以两次凭借“良好的人际关系”，给自己带来好运，让自己度过难关。</p><p>　　因为脾气好的人，人缘一般都不会差。</p><p>　　后来，群主组织了一次<a href="http://www.cnblogs.com/post/readauth?url=/zuoxiaolong/p/5469265.html">《共同打造中国最受欢迎的Java博客网站》</a>的活动，因为群主对松还算了解，觉得他比较听话，也很好管理，于是便果断将松给拉进了当时的后端开发队伍。</p><p>　　或许是这次参加活动，让松得到了一些进步，在那之后，松再一次选择了跳槽，而这次跳槽，结果就比之前好了许多。</p><p>　　群主犹记得，当时松还问过群主的意见，让群主帮他在两个offer之间做个选择。这两个offer待遇差不多，其中一家是曹操专车，另外一家则是二维火。</p><p>　　在群主看来，因为滴滴和优步合并，因此群主当时并不看好曹操专车，便推荐了松选择二维火。</p><p>　　到现在，松也在二维火工作了一段时间了，至于群主当时推荐的到底对不对，群主本人就不评价了，但根据松本人的反馈，他觉得当时的选择，还是蛮正确的。</p><p>　　目前来看，松在很长一段时间内，都不可能再回去了，这也再次证实了，“挣几年钱就回家”这句话，很多时候，就是程序员圈子里一大自欺欺人的谎言。</p><p>　　故事最后，给大家附上一张图片，据松本人所说，这张图片只有一个人可以看懂。</p><p>　　<img src="https://images2015.cnblogs.com/blog/558323/201702/558323-20170218034112082-1965350199.jpg" alt="img"></p><p>　　　　</p><h3 id="上海-婷风-前端"><a href="#上海-婷风-前端" class="headerlink" title="上海-婷风-前端"></a>上海-婷风-前端</h3><p>　　</p><p>　　婷风，这是群里一个活泼开朗的前端妹子，同时也是博客园的一位博主，感兴趣的也欢迎移步<a href="http://www.cnblogs.com/jtjds/">婷风的博客</a>。</p><p>　　群主的群里虽然妹子不多，但三个群加在一起，还是有那么几个的。和这些IT届的妹子接触下来以后，群主发现，IT妹子的思维总是很跳跃。也或许是因为群主老了，有点跟不上妹子们的思路了。</p><p>　　婷风是17届才毕业的学生，专业和大多数人一样，也是非科班的学生。但是，就是这么一个和编程八竿子打不着的女生，就这么硬生生地进入了程序媛的行列。</p><p>　　至于她到底如何进入这个行业的，群主就让当事人来现身说法吧。</p><blockquote><p><em>作为17年的毕业生，说实话，之前没想过做程序员，我们专业是集管理，经济，计算机三体的（杂专业），走上前端之路也是纯属意外。</em></p><p><em>大三刚开学，刚好有个机会，学校有个校企，去里面实习，给我们先培训了php。之后呢，到了10月份左右，接触到WordPress，我们的任务就是修改样式布局，改成我们经济管理学院的首页，也因此开启了前端之路。</em></p><p><em>这段期间，认识了我前端路上的第一位师父。在师父的引路下，感觉对前端挺感兴趣的，于是就买书，买资料，开始疯狂的学习，不懂的就请教师父，真的非常感谢师父不耐其烦的教我（呜呜）。</em></p><p><em>后来，自己买了域名，用WP搭建了自己的个人博客，买了域名，买了阿里云的服务器，再后来，觉得WP写博客太麻烦，于是干脆注册个博客园账号，于是就有了在博客园的一系列文章（哈哈哈哈哈哈）。</em></p></blockquote><p>　　说实话，群主看完这段介绍，突然间明白了，为什么说女人是情感动物。</p><p>　　群主很好奇，婷风走上前端之路的起因，到底是对前端感兴趣，还是对师父感兴趣，-0-。</p><p>　　当然了，群主也很怀疑，这位师父如此精心教导弟子的居心，-0-。</p><p>　　咳咳……</p><p>　　据婷风介绍，她这段期间里，经常会一天写代码超过12个小时，作为一个女生，能做到这种地步，实属不易。</p><p>　　后来，婷风有幸到360参加了一个短期的培训，在这个时间段里，也恰好是群主组织<a href="http://www.cnblogs.com/post/readauth?url=/zuoxiaolong/p/5469265.html">《共同打造中国最受欢迎的Java博客网站》</a>活动的时候。</p><p>　　实际上，群主这次活动只是面对群内的小伙伴举行的，但由于大家积极性比较高，还是吸引了70多个人报名参加。不过，婷风最终还是依靠实（xing）力（bie），顺利地通过了群主的筛选，加入到了这次的前端开发队伍。</p><p>　　这次的活动虽然只是一个自发组织的开源项目开发，但在群主的带领下，也算是有着一定的组织纪律，并不是完全一盘散沙。</p><p>　　前端组当时一共有3人，一位名为小T的群友是前端组的组长，根据当事人婷风的原话，她是这么描述组长和这次经历的。</p><blockquote><p><em>小T是位经验丰富的低调的大神，于是乎，跟着小T（透漏一下，小T的声音很好听，长得也贼帅贼帅的，哈哈哈哈）学到了不少东西，也接触到正式的项目结构**（我们仨，现在依然聊的很好，嘿嘿）。</em></p><p><em>在此期间，我学习了bootstrap，angular.js，meterialize  design，整个下来，感觉技术长进不少。</em></p></blockquote><p>　　看完这段介绍，群主总觉得感受到了一股暧昧的气息在弥漫。</p><p>　　咳咳……</p><p>　　后来，婷风便离开了360，来到了另外一家X公司继续实习。据婷风反应，她又碰到了一个为人谦和，待下属极好的老大。</p><p>　　不得不说，好的师父，好的组长，好的老大，这些都是妹子的特殊待遇。作为一个男人，更多还是要在逆境中成长，就犹如群主一样，群主的成长就是一条撕逼之路。</p><p>　　以下插播一段当事人的心里活动，这件事正发生在这家X公司。</p><blockquote><p><em>关于这段时间的感情经历：</em></p><p><em>好吧，这是个错误，我也不知道为什么，就突然觉得好喜欢好喜欢他，话不多，聪明，踏实。</em></p><p><em>一向对异性报以排斥的眼光，受身边朋友经历影响，一直觉得渣男很多，猥琐男更多，所以，至今单着。</em></p><p><em>哎，算了，这个话题省略了，不写啦，心动也能变成死心。就这样吧！挺好的！</em></p></blockquote><p>　　犹记得，当初群主发现这段自白以后，将这个故事告诉了群里的猿友们，结果可想而知，婷风被追着问了很久，“这个他到底是谁？”。</p><p>　　之后，就在去年的9月份左右，婷风突然告诉群主，她要去上海了，这是再一次踏上了寻找实习工作的路。</p><p>　　值得庆贺的是，婷风在这次上海之旅中，参加了携程的招聘，并顺利拿下了offer。</p><p>　　不得不说，婷风作为一个17年才毕业的大学生，大学期间能有如此精彩的经历，还是非常难得的。但是，回想婷风的经历，这其实与她当初一天连续12个小时的奋战，是密不可分的。</p><p>　　这再次印证了当初群主所说的那句话，在程序员的道路上，你付出多少努力，就有多少收获，程序员这个职业还是很公平的。</p><p>　　</p><h3 id="北京-002-小超人-java"><a href="#北京-002-小超人-java" class="headerlink" title="北京-002-小超人-java"></a>北京-002-小超人-java</h3><p>　　</p><p>　　小超人，自称是一个爱说爱笑的大男孩，学生时代的学霸，高考曾经拿到了590+的高分。</p><p>　　小超人是在石家庄的一家一本院校读的大学，大学期间，小超人从学霸沦为了一个游戏少年，所幸在舍友们的帮助下，才没有挂科。</p><p>　　毕业之后，小超人曾收到过一次来自北京的面试邀请，据小超人自己所说，这次面试之旅可谓是完败，以下引用下他自己的一段话。</p><blockquote><p><em>这个突如其来的面试邀请，打破了我的“宁静”，于是乎我拉着我同学一起去了北京面试。</em></p><p><em>第一次去北京哪里都不认识，四处打听，百度各种能用的都用上了，才到了面试的地方。</em></p><p><em>面试的时候让我先做笔试题，基本上也算是交了白卷就开始面试了，面试的时候问的题已经记不清了，反正就是被血虐了一顿，然后就一句话等通知吧，打发我走了。</em></p><p><em>当时我很想留下，各种不要脸的说我可以学习，希望能够留下。面试官都不耐烦了，说了回去等通知，回去等通知，回去等通知！</em></p></blockquote><p>　　说实话，看完小超人这段介绍，群主回想起了当初在郑州面试的日子，这段故事，群主在<a href="http://www.cnblogs.com/zuoxiaolong/p/diaosi1.html">《一个屌丝程序猿的人生》</a>中提到过，虽然在小说当中，群主多少使用了一些夸张的手法，但实际上，那段郑州面试的经历确实很悲惨。</p><p>　　小超人和群主相似，在被虐之后不久，便走上了培训之路。</p><p>　　小超人先是在石家庄培训了两个多月，后来又辗转到北京培训了四个多月，从2015年的3月份开始报名培训，直到12月份，才结束了培训之路开始求职。</p><p>　　不过，由于在培训的时候不够努力，小超人找工作找了一个多月依然无果。眼看着就要过年了，小超人只得先回到了家里。</p><p>　　16年过完年后，小超人再战北京，终于拿到了人生的第一个offer，当时的薪资是7000块，这对于一个新人来说，已经非常值得庆贺了。</p><p>　　小超人是在工作之后入的群，在入群以后，群主曾组织过几次YY活动，当时小超人便参加了群主的YY活动，以下是他自己所写的活动参后感。</p><blockquote><p><em>当时群主说yy有个活动，我就上yy，听楼主对我们这些晚辈的教诲。</em></p><p><em>当时聊的非常的high，让我第一次这么放松，没有想到工作，只是在谈理想，谈程序猿，什么话题都扯，很开心。</em></p><p><em>我那个时候很迷茫，所以想问问群主，对于工作有什么建议，楼主的建议就是塌下心来学习即可，不要浮躁。</em></p><p><em>我现在想想，确实是一点都没错。</em></p><p><em>我现在能做的就是学习，补充自己的知识，我就像是一个刚出生的孩子一样，每一样东西都得学习。</em></p><p><em>最后，我和群主聊到了我的她，我和她是初恋，从2011.06.12开始相恋，群主当时听了都惊呆了，我们是初恋竟然还能好这么长时间。</em></p><p><em>当时群主还给我了很多建议，这个我能懂，我们现在很好，基本上每个月会见一次，最多一个半月。</em></p><p><em>我们现在打算在我们市里买一套房（今年或者明年），她现在是研一，三年之后，她找到工作，我俩就结婚！嘻嘻，到时候一定通知楼主！</em></p></blockquote><p>　　说起小超人的女朋友，群主确实不得不佩服，初恋可以谈这么久，这对于群主来说，简直是难如登天。</p><p>　　小超人入职以后，生活便回归了平淡。不过随着群主进入阿里，群里也涌现了不少阿里的人潜伏在群里，也有在入群以后入职阿里的。或许是因为这个刺激了小超人的学习欲望，这家伙正憋着一股劲，准备在两年后迎战阿里。</p><p>　　在这里，群主只能对小超人说，“来的时候记得找我内推。哈哈。”　　</p><p>　　　　　　 </p><h3 id="武汉-047-草帽-Java"><a href="#武汉-047-草帽-Java" class="headerlink" title="武汉-047-草帽-Java"></a>武汉-047-草帽-Java</h3><p> 　</p><p>　　草帽，活跃在群主的所有群当中，而且都是管理员。</p><p>　　说起草帽，当初他也参加了<a href="http://www.cnblogs.com/post/readauth?url=/zuoxiaolong/p/5469265.html">《共同打造中国最受欢迎的Java博客网站》</a>活动，群主犹记得，当时review代码的时候，最省力的就是草帽。</p><p>　　草帽是14年毕业的，据草帽本人所说，他当时本来是想找嵌入式工作的，但是嵌入式的门槛比较高，因此才最终在机缘巧合下，踏进了Java这个坑。</p><p>　　找工作的时候，草帽也是和大多人一样，经历不少波折，接下来，群主就让草帽本人，来说说当初面试的那些事。</p><blockquote><p><em>大四上找工作那个时候还是特别勤奋的，那个时候大学在汉口，大多数的招聘都在武昌（在武汉的人都知道，汉口和武昌的情侣都被称为异地恋），每天早起坐二个多小时的公交地铁从汉口赶到武昌，一场招聘会一场招聘会的挨着跑，每天的车费都快赶上生活费了。</em></p><p><em>那时候也不知道怎么有勇气奔波在武大华科的各个宣讲会，去的晚了就坐在地上写面试题，然而最终基本连面试机会都没有。</em></p><p><em>印象中深圳的一个大公司给的一次面试机会是在如家酒店进行的，进门双人床在那里摆着，那一刻，我仿佛觉得我不是来面试的，而是来开房的。</em></p><p><em>进去后就趴在床边做第二轮技术笔试题，然后换到另一个房间进行人事面试，那时候紧张的不得了，面试官叫我比划一厘米有多长，当时一下子就懵逼了，面试完最后也还是没音信了。</em></p><p><em>一两个月的奔波没果后就开始改变策略了，只要别人招聘上有写c语言的就投简历，那时候的感觉就是只要有公司要我就去，然后差点就进了软通。</em></p><p><em>在答应了准备去谈价钱的时候接到了另一个公司的offer，也就是第一份工作所在的公司，是一个日企，就凭借c语言面试了一个软件开发岗（真是终于有人要了）。</em></p></blockquote><p>　　看到草帽的面试经历，群主第一感觉就是，那人事问一厘米有多长干啥？一脸懵逼状，-0-。</p><p>　　草帽进到日企以后，并没有立即开始工作，刚开始公司提供了三个月的岗前培训，每个月给400块的补助，除了技术以外，因为公司是日企，公司还提供语言培训，比如“八嘎”、“雅蠛蝶”之类的。</p><p>　　因为是公司培训，因此和培训机构相似，培训的内容都是比较务实的，比如数据库、版本管理工具等，至于语言的话，也和培训机构相似，可以在C#和Java之间选择。</p><p>　　草帽的公司没有Java组和C#组之分，公司的策略是安排到什么项目里就做什么语言的项目。这样的方式，让草帽觉得对自己的未来非常不利，于是草帽开始申请只做Java项目。</p><p>　　但很显然，公司对于这种事情，显然是不会答应的，因为如果答应了你，那么其他人一定也会跟风学习，到时候公司的人力就无法灵活运用了。</p><p>　　因此草帽得到的回答，只是“尽量”，但是，这个“尽量”，到底有多“尽量”，就值得琢磨了。</p><p>　　就这样，草帽在公司又拖拖拉拉的呆了一年，期间也自学了不少Java的框架，这才撩起袖子，向公司发出了离职申请。</p><p>　　不得不说，群主看草帽在日企工作过，也就大概明白了，为什么草帽当初在参加<a href="http://www.cnblogs.com/post/readauth?url=/zuoxiaolong/p/5469265.html">《共同打造中国最受欢迎的Java博客网站》</a>活动的时候，代码写得那么工整，这估计和日企的要求比较严格有关。</p><p>　　离职以后，草帽并没有完成逆袭的传奇，而是奋不顾身的来到了一家做Java的小公司。在草帽看来，虽然公司比较小，但好在是专门做Java的，而且，正因为公司比较小，草帽也得以混了个小组长当当。</p><p>　　至今，草帽也在武汉工作了差不多三年了，并没有什么激励人心的故事，也没有什么传奇的经历，有的只是一个普通代码搬运工的平凡故事。</p><p>　　但正因如此，群主才觉得，世界更加有趣。</p><p>　　</p><h3 id="北京-农夫-java"><a href="#北京-农夫-java" class="headerlink" title="北京-农夫-java"></a>北京-农夫-java</h3><p>　　</p><p>　　农夫，也是入群很早的一员，基本在群主建群以后几个月就入了群，也算是较老的一批成员了。</p><p>　　农夫进群的时候，是2013年的年末，当时农夫正在大四实习。不巧的是，群主在2014年年初的时候，有幸升为了项目经理，管理一个由18人组成的项目组。</p><p>　　虽然现在看来，这段经历并没有什么值得说道的地方，但当初刚晋升的时候，群主心中多少还是有些嘚瑟的。</p><p>　　于是乎，就有了农夫下面这段话。</p><blockquote><p><em>当时进群的时候，我还是一个傻傻的实习生，啥都懂点，啥都不精通。</em></p><p><em>龙哥那个时候作为项目经理，天天给我讲，当项目经理是多么的牛，多么的舒服。</em></p><p><em>“今天我决定上hbase，项目组就得用hbase。明天我准备上ES，大家就得换ES。**项目经理和技术经理一肩挑就是好呀，想用啥就用啥。”</em></p><p><em>“今天带着组员加班到两三点，饭费都垫了好几千了呀。”</em></p><p><em>“每天早上一上班就被拉着各种问问题，下午才有自己的时间呀。”</em></p></blockquote><p>　　看完这段话以后，群主忍不住摸了摸自己红扑扑的脸颊，太特么丢人了啊，不知道的，还以为群主这是当上技术总监了吧，-0-。</p><p>　　咳咳……</p><p>　　时间来到2014年的6月份，农夫拖着杂七杂八的行李，离开了大学校园，再次回到了当初实习的这家公司。</p><p>　　然而，回来以后，农夫才猛然发现，公司已经大变样了。不光是领导换了，开发也走了一大部分，农夫也硬生生的被强制从后端转到了前端。</p><p>　　不过，这一次的转变，也让农夫走上了一条全栈之路。</p><p>　　在农夫在这家公司的时候，他刻意提及了一段封闭式开发的经历，接下来，就让他自己说说这段经历吧。</p><blockquote><p><em>在这家公司的前两年，公司投标中了一个非常大的项目，需要非常多的定制开发，正好我们上一个版本需要进行重构，就这样，我开始了项目新版的开发工作。</em></p><p><em>当时我们采取的开发方式是封闭式开发，开始时我们从每个人自己定自己盒饭，但是中途来了一个人，我称他为顾哥，是他，带领我们走上了吃货巅峰的道路。</em></p><p><em>我们开始每天从饭店里定各种各样的炒菜，比如大鸭梨、湘里故事等等。随着天天狂吃、顿顿大吃，我也在有点胖到巨胖的路上一路狂奔了起来。</em></p><p><em>那段时间，晚上经常加班到10点多，偶尔也会到3、4点，累了就去公司楼下的宾馆里睡一觉。</em></p><p><em>在2016年的那年春天，我们很多人都是周一穿着大棉袄到的公司，因为一直没回家，到周六下午回家的路上，我才突然间惊讶的发现，原来周围好多人都开始穿T恤了，就我们公司几个同事还穿着厚厚的棉袄，那一瞬间我突然明白，我们已经与世隔绝了，也许这就是做IT的常态吧。</em></p></blockquote><p>　　看到这里，估计有人会疑惑，仅仅一周的时间，怎么就从穿棉袄过渡到穿T恤了。有这个疑惑的人，一定没有在北京呆过，因为北京的天气，是从来不跟你讲道理的，它生气的时候，一天就能让你体会四季的变换。</p><p>　　农夫在这家公司呆了三年，终于在2016年年末的时候，再也忍受不了传统公司的死板，以及年年重复的项目，毅然决然的开启了跳槽之旅。</p><p>　　关于跳槽这件事，农夫还分享了自己一个坑爹的经历，他是这么说的。</p><blockquote><p><em>年底换工作好吗？</em></p><p><em>我只想说，如果你觉得，你放弃你的年终奖就完了，那你就想的太简单了。</em></p><p><em>我的亲身经历告诉你，这个还不够，到年底你换工作，年假没了，回家的准备周期也缩短了。</em></p><p><em>以前我都是腊月24、25就已经在回家的路上，去年呢，大年二十九才走，到家都除夕了，所以，辞职一定要深思呀。</em></p></blockquote><p>　　其实，群主个人觉得，这些得失都只是暂时的，有些工作机会，错过了可能就没有了，因此，和前途比起来，这些小事都不足为道了。</p><p>　　现在，农夫刚跳槽没多久，据他本人所说，新公司是做即时通讯的，后台并发量比较大，具有一定的技术挑战性。</p><p>　　群主有理由相信，在这样一个公司，农夫的技术沉淀将会得到一次质的飞跃。</p><p>　　</p><h3 id="南京-YNJ-Java"><a href="#南京-YNJ-Java" class="headerlink" title="南京-YNJ-Java"></a>南京-YNJ-Java</h3><p>　　</p><p>　　YNJ，存在于三群当中，加群的时间并不久。</p><p>　　YNJ老家是江西的，大学的前三年与大多数人一样，在玩乐中不知不觉就过去了，直到大四才意识到已经时不我待。</p><p>　　很多人选择程序员这条路，除了兴趣的原因之外，其实很多时候都是被逼无奈的。</p><p>　　就如YNJ一样，上大学的时候，其实也考虑过其它的出路。但是，尝试了一圈之后，YNJ才发现，自己哪条路都走不来。</p><p>　　这么多条路被封死的情况下，YNJ想起了当初在编程语言课堂上，代码运行成功时自己内心的喜悦，就这样，YNJ义无反顾的走上了程序员这条不归路。</p><p>　　YNJ大四的时候，学校来了大批企业和培训机构招生，YNJ顺利的被洗脑之后，便跟着一个号称做大型机培训的培训机构走了。</p><p>　　培训归来以后，YNJ便被招进了一家做大型机的公司做实习生。当初面试的时候，面试官说是让YNJ一竿子人来做大型机的，但很显然，事实是YNJ被忽悠了，他实际做的根本就不是什么大型机，而是普通的对日外包。</p><p>　　接下来，群主就让YNJ自己来还原下当时外包的日子。</p><blockquote><p><em>记得11年年底刚进去实习的时候，实习工资是1.5K，加上其他餐补福利也就2K不到，刚好满足最基础的租房和温饱。</em></p><p><em>进去以后，最大的挑战就是学习日语了，俺对语言的学习可以说是深痛恶绝，但为了工作，木得办法，只能硬着头皮上。</em></p><p><em>当然在技术上的挑战也是蛮大的，只是刚进去的1个月，只是进去各种培训，一个月后分项目组时，由于MTI（这里简称）项目缺口比较大，部门的3个实习生都被分进去了。</em></p><p><em>这个项目虽然是对日外包的项目，但已经进行过开发和上线了，这次项目主要是在之前的基础上扩充功能，但接触后就傻眼了，代码基本看不懂，只能多问问师兄，以及自己多多恶补各种知识了。</em></p><p><em>就这样慢慢的度过了半年的实习期，等毕业后再过去，才发现自己已经不在MTI项目组了，中心项目的人员已经基本饱和了。</em></p><p><em>而俺实习期间过了日语4级，后面便被安排培训日语3级和Android，就这样又过了小半年，期间日语3级考了2次，但都没过，俺也没心思再去考了。</em></p><p><em>Android培训完成以后，俺和一同学习的同事，参与做了几个小的练手项目。这时，本来要去的项目组宣布近期不缺Android的人了，只是引进了几个培训IOS的。</em></p><p><em>就这样，部门经理又把俺调到了MTI项目组。</em></p><p><em>这期间，在公司里认识的几个小伙伴中，有一个在其他事业部，做的挺好的，他们经理已经准备外派他到日本。而另外一个小伙伴，在培训IOS顺利进入俺原本要进的那个项目组后，也马上要被外派到日本了。</em></p><p><em>看着别人混的这么好，俺也只能默默叹息，谁让他们都过了日语3级呢，只有俺，貌似还在原地踏步了……</em></p></blockquote><p>　　群主没干过外包的工作，但道听途说之下，群主一直不建议进外包公司，不过现在看来，外包如果运气好的话，还能有出国的机会，这一点还是不错的。</p><p>　　2012年年底，YNJ已经毕业了半年，期间回校办了毕业的事以后，YNJ也算是在这家公司稳定了下来。</p><p>　　开始作为新人，YNJ做的大多是一些项目边缘的事情，比如整理文档这类的脏活累活。如此过了大约1年半的时间，YNJ才算是渐渐成为了项目的核心成员。</p><p>　　在这一年半里，YNJ获得了不小的进步，接下来引用他的一段话，来对他的进步做一个总结。</p><blockquote><p><em>俺在MIT项目组呆了近1年半，从中学到的俺总结下：</em></p><p><em>1、形成了良好的编码规范和风格。</em></p><p><em>由于是要求比较高的对日外包项目，对于编码规范的要求简直BT，例如：它不允许存在TAB键，且空的一行不准有空格存在。而且项目中运用到了很多设计模式，设计的也比较复杂，包括一些回调的写法等。所以编码风格也是在那个时候形成的。</em></p><p><em>2、对于JAVA项目的开发有了初步的认识。</em></p><p><em>3、了解了俺确实对日语学不到。</em></p><p><em>无论怎么考，日语3级就是没过，俺也放弃了，这也是让俺萌生了离职的最初一个理由。</em></p><p><em>4、工作中有了责任心和耐心。</em></p><p><em>这点俺认为是最重要的，在MTI项目中，加班还是挺多的，经过了近2年的历练后，俺对工作的责任心，在那个时候培养出来了。</em></p><p><em>最后还有耐心的养成，这是因为自俺进入MTI项目组，整理文档的活就从来没离开过俺，而且文档都是日语写的，俺只能吭哧吭哧的慢慢整理。对于做事的耐心便是那个时候养成的，那个时候就觉得，只要工作中俺认为能做到的，只要俺愿意花时间和精力，就一定能做好。</em></p></blockquote><p>　　看得出，YNJ也是一个善于总结的人。很多时候，总结的能力是很重要的，甚至面试的时候，很多面试官都会问到一个问题，“你在这个过程中学到了什么？”，这其实就是一个典型的考验总结能力的问题。</p><p>　　YNJ的第一次跳槽，发生在2014年的3月份，当时YNJ觉得，长期做外包没什么前途，而且日语又学不会，于是便萌生了跳槽的想法。</p><p>　　当时YNJ一共收到了两个offer，由于其中有一家需要经常出差，因此，YNJ果断选择了另外一家中大型的电商互联网公司。</p><p>　　在这家公司，YNJ很幸运的成为了小组长，接下来，就让YNJ自己来说说他成为小组长的经历。</p><blockquote><p><em>刚进这家公司的时候，除开外包顾问，一共有6个开发了，除了一个13年刚毕业的，其他都至少3年的工作经验了，俺在里面算是最年轻的。</em></p><p><em>俺怀着忐忑的心情，和大家一起做了电商里一个模块化单元系统的开发。做了大概一个月吧，心里对这个系统有了初步的认识，就是技术上没上家公司那个MTI项目复杂和规范，但是业务上，真心是复杂到了极点。</em></p><p><em>当时开发的时候，大家的编码规范和风格都形色各异，而俺则还是坚持着上家公司养成的“对日外包式”的规范和风格，在编码结构上相较其它人来讲而讲更加清晰，所以在代码评审的时候，第一次显示出了俺的亮点。</em></p><p><em>后来，在调测阶段，因为俺的BUG率较低，开发效率较高，解决问题速度较快等这些原因，在系统联测的时候，俺当上了项目组的三个小组长之一。</em></p></blockquote><p>　　不得不说，YNJ的经历和群主有点相似。群主当时也是机缘巧合之下，成为了项目经理开始带人。</p><p>　　现在群主回想起来，虽然当初做项目经理的时候，开会占据了群主大部分时间，以至于技术的时间投入大大减少，但做项目经理的那段时间，群主还是在能力上得到了巨大的提升。有的时候，这些软实力的提升，比技术的提高要来的更加珍贵。</p><p>　　转眼时间来到了2016年的8月份，YNJ再次产生了跳槽的想法，关于这次跳槽，YNJ有一段话描述了他这次跳槽的原因。</p><blockquote><p><em>在这家公司工作了两年多后，俺发现目前的工作并没有多少挑战性了，相同的开发设计套路和类似于机械式的任务完成，使得日常版本的更新变得越来越枯燥。</em></p><p><em>再加上，项目内以及公司大环境的一些原因，还有生活压力以及买房的压力，使得俺又萌生了换工作的想法。</em></p><p><em>2016年的炎夏，俺看着窗外，俺想着，这次该去哪呢？</em></p></blockquote><p>　　这一次，据YNJ所说，他并没有立即开始面试，而是在8月份有了跳槽的想法之后，准备了足足四个月，才在2016年的12月份开始了这次的跳槽。</p><p>　　说起来，YNJ入群大约就是这时候入群的，群主犹记得，YNJ一上来就私聊问群主与BAT面试相关的事情，搞得群主一度有些懵逼。</p><p>　　BAT的面试总是比较漫长的，由于这段经历实在太长，群主就让YNJ自己来说说吧。</p><blockquote><p><em>2016年的12月份，俺正式进入了BAT面试的环节，不出意外地，俺过了前2轮的技术面。听之前推荐俺的小伙伴说，只要项目背景匹配度较高，又通过前两轮的话，后面就很简单了，俺在那个时候也就有点放松了。</em></p><p><em>中间发生过一次意外，在第三轮面试电话打来的时候，俺恰好木有接到。就这样等了几天，又恰好是俺在开会的时候，面试电话打来了，俺手机比较老旧，要一直充电，就放在位置上木有接到。</em></p><p><em>之后就有点慌了，那是一个周末，距离前一轮面试已经过去一周多了，结果还木得面试打来，俺就联系之前一轮的面试官（幸好俺之前加了他的微信，嘿嘿），他说已经催了，后面会打来的，叫俺放心。</em></p><p><em>意想不到的是，离俺联系面试官也就刚过去20分钟的样子，面试电话就打来了。</em></p><p><em>面试官的声音很有力量也很有磁性，在闲聊中，面试官问了俺的未来规划，并且近期有哪些行动去完成目标和未来的规划等等，问的非常细致，然后还聊了人生理想等等。</em></p><p><em>俺被他说得越来越没底气，感觉对方一直在用一种压迫式的方式问俺。</em></p><p><em>最后，和面试官聊了聊关于学习方法和思维方式方面的东西，最终俺就是挂在了他的手上。后面俺才了解到，他就是传说中的HRBP，俺就是倒在了他这一关。</em></p><p><em>不过在最后，他也总结了我的优缺点，特别是俺的缺点，一条条的分析给我，俺感觉很到位，有许多自己需要完善的地方了。</em></p><p><em>从这之后，俺想了很多，也思考了很多，俺发觉俺还有许多要提高的地方。就这样，又过了一个月，在2017年的1月份，俺觉得自身无论从技术，业务还是个人的状态，都到了一种短时间很难再提升的状态了，就再次开始了面试之路。</em></p><p><em>记得是1月中旬，俺再次迎来了BAT的面试，并顺利拿下了第一轮，这次虽然技术面问的很细很全面，但俺准备的却更加滴充分，包括状态和自身的心态上，都是全力以赴，无所顾虑的，也就顺利通过了。</em></p><p><em>在第二轮的时候，当时很巧合，记得是周三的时候，俺请假一天，去了BAT所在的城市面另外2家猎头推的工作，上午一家简称为X1公司，下午一家简称为X2公司。**回来的时候，晚上又进行了BAT的第二轮面试。</em></p><p><em>过了几天，三家都反馈通过，其中X1那家公司已经确定了口头offer，薪资接近翻倍，做的事和俺目前的公司差不多，也就是有O2O背景的一个互联网电商公司。</em></p><p><em>而第二家X2公司是一家大数据的公司，俺薪资报的也有点高，他们决定再增加一轮技术面，由他们的架构师面试，进行了X2公司的最终技术面，记得那晚发挥挺好的，自己经历的项目说的很透彻到位，技术上回答的也比较不错。</em></p><p><em>经过一晚上，第二天也迎来了BAT的最后一轮面试，俺承续了昨晚的状态，而且更近一步，发挥的更好了，不仅把项目中的经历说的透彻到位，还把整个电商领域的上下游，从前到后，线上线下都串联起来分析了一遍，而在谈到未来规划和学习方法等内容上，俺也说的比之前准备的要好，按俺自己的评价的话，应该是展现出来的全是亮点，缺点完全被掩盖了。**当最后谈及到薪资的时候，俺果断报的比预期值高了3K，之后就是等待结果了。</em></p><p><em>一段时间后X2公司发出了offer，薪资有了小一倍的提高，甚至相比于BAT，这个薪资也绝对给力，当时俺也纠结过一段时间的，毕竟10点上班，6点下班，周末双休，平时基本不加班，一个纯技术岗位，对于技术上的提升是会比较大的。</em></p><p><em>接近过年的时候，俺接到了BAT公司HR的电话，通过一段时间的聊天后顺利通过了HR的面试，过了几天，他告知俺已经通过了，offer要年后发出，薪资是目前的2倍以上。</em></p><p><em>就这样，那次同一天面试的3家公司都通过了，而据俺了解，BAT这家平时的工作量，是俺目前公司的2倍以上，俺后来也很纠结，其实BAT的单位时间报酬，也就是时薪并不是非常高的，往往要投入很多的时间。</em></p><p><strong><strong>当时一度想选择X2公司，工作时间少，又是做大数据，前途貌似很光明。</strong></strong></p><p><strong><strong>在那段时间，俺又一次的思考了很多，想了很多，因为俺是一个工作之外学习不太多的人，如果要在程序员这个行业中走好，走深入，势必要花费大量精力和时间的，俺也不是一个能主动坚持学习的人，但俺绝对是一个被动坚持，且耐力很好的一个人，最终俺还是选择了BAT那家，虽然工作之外俺很难坚持学习，那就让俺在无尽地加班中，工作中不断地学习吧，哈哈。</strong></strong></p></blockquote><p>　　面试过程很长，本来群主是想适当的裁剪一下的，但想了想，觉得面试过程还是保留原味更好，所以就干脆全部搬了上来。</p><p>　　时间虽然很长，但结果却是很好的，YNJ通过这次面试，顺利进入了BAT，也即将在3月底成为群主的同事。</p><p>　　相信，在未来的一段时间内，YNJ的工作和生活都将会有很大的变化。当初群主写了篇<a href="http://www.cnblogs.com/zuoxiaolong/p/life55.html">《2016——注定不平凡的一年》</a>，现在看来，或许YNJ会在2018年到来的时候，写上一篇《2017——注定不平凡的一年》。</p><p>　　　　</p><h3 id="武汉-498-逝兮诚-java"><a href="#武汉-498-逝兮诚-java" class="headerlink" title="武汉-498-逝兮诚-java"></a>武汉-498-逝兮诚-java</h3><p> 　</p><p>　　逝兮诚，也是入群较晚的群员，属于年纪比较小的群体。</p><p>　　2014年的6月，逝兮诚迎来了大二的暑假。由于逝兮诚在大学期间，专业学的还不错，而且拖控件也是一把好手，于是，不觉技痒的逝兮诚，忍不住和几位同学，在暑假找起了工作。</p><p>　　说起逝兮诚的第一份工作，群主看了以后忍不住笑了，接下来就让逝兮诚自己来说说吧。</p><blockquote><p><em>我的第一份工作是在2014年的暑假6月中，是一家在位于中南路的做.net的公司。</em></p><p><em>面试的老板不懂技术，他给我看了看他们工作的代码，问我会不会，我一看完全不懂是什么东西，硬着头皮说会，就这么懵逼的入职实习了。</em></p><p><em>头一个星期，就是看代码，不过很抱歉的是，完全看不懂是什么。不过好在我态度还不错，上班就老老实实看代码，其他什么都不干，\</em>就这么硬着上了一个星期*。*</p><p><em>一星期后，老板让我改一个bug，定时任务出了点问题，我花了一天都没有做出来，当时还挺害羞，没有及时告诉老板。</em></p><p><em>下午的时候，实在是没有办法，和老板坦白了，然后老板和我一起对着代码一行一行的过，最后还是把问题解决了。</em></p><p><em>又如此几次，老板看出我水平实在有限，便把我放到了实施。在做了一星期以后，我实在是觉得面子过不去，便引咎辞职了。</em></p></blockquote><p>　　群主不得不说，逝兮诚这家伙运气真够好的，碰到一个这么有意思的老板，就因为一句“会”，就把人给招了进去，这缺人缺的也是没谁了。</p><p>　　不过经过这次，逝兮诚也意识到了自己的不足，离暑假结束还有一段时间，逝兮诚在家看了几天书以后，便再次踏上了找工作的路。</p><p>　　只不过，接下来的这一次的工作，逝兮诚依然是失败而退，来看看他自己怎么说的吧。</p><blockquote><p><em>这一次我觉得找我擅长点的winform吧，想着就是拖个控件而已，还能拖出个花来不成？</em></p><p><em>功夫不负有心人，我很快又找了一家，和winform挺像，它是做WPF，公司业务和电力有关。</em></p><p><em>到了这家公司以后，老板给了我几个API后就出差了，那API都是纯英文的，我看了几天，哎哟，真的是一头雾水。</em></p><p><em>公司就我一个搞软件的，有两个搞硬件的实习生，问他们他们又不懂，我是实在尴尬，为了排解寂寞，我又叫了另一个同学过来一起做。</em></p><p><em>这家公司做了20天左右，老板让我出差去贵州，我想想9月份还有课了，没去，就把工作辞了。</em></p><p><em>这暑假的找工作和工作的过程，确实发现自己的水平有些不堪入目，和外面的世界还有很大的距离。</em></p></blockquote><p>　　逝兮诚的这两次工作，看起来都有点儿戏。这或许跟他的年龄有关，据群主所知，2014年的逝兮诚应该才20岁，那时候的群主，还在网吧里磨练自己的跑跑卡丁车技巧。</p><p>　　大三这一年，一次偶然的机会，逝兮诚接触到了Java，发现Java不需要拖控件，而是直接写代码，当时的逝兮诚觉得写代码比拖控件可能要高大上一些，于是便果断选择转向了Java。</p><p>　　Java的学习最初的时候基本全是套路，无非就是Java基础、HTML/CSS/JS、servlet/jsp、数据库以及SSM框架。</p><p>　　学习完这些以后，在2015的3月份，逝兮诚靠着自己自学的那点本领，来到了一家做物联网的公司，做的是传感器监控。</p><p>　　就这样在物联网公司做了一年多，逝兮诚又跳槽换了个电商公司，不过群主刚刚知道，就在昨天，逝兮诚已经彻底离开了这家电商公司。他就要收拾行李，前往深圳，开始自己真正的闯荡生涯。</p><p>　　一个刚满23岁，风华正茂的青年，到底在深圳的未来如何，一切都要看他的努力和付出了。</p><p>　　</p><h3 id="深圳-小样儿-Java"><a href="#深圳-小样儿-Java" class="headerlink" title="深圳-小样儿-Java"></a>深圳-小样儿-Java</h3><p>　　</p><p>　　小样儿，也是入群较早的一员，是群里早期的活跃分子。</p><p>　　小样儿一直自称是农村山沟沟里出来的孩子，由于家庭环境的原因，导致小样儿的性格一直有些孤僻。</p><p>　　因为高中时，曾被一个画面闪动的效果震撼到，小样儿大专的时候，果断选择了计算机专业，与大多数人的学生生涯一样，小样儿的大学时代，也在迷茫与狂欢中渡过。</p><p>　　即将毕业的那年，大家都出去找工作去了，小样儿也随着大流出去找工作。刚开始全是找的计算机相关的工作，但结果可想而知，一个大学几乎荒废的学生，最终的结果只能是四处碰壁。</p><p>　　就这样，机缘巧合之下，小样儿来到了一家快递公司，干起了体力活儿，每天就是装货卸货。</p><p>　　这样的工作显然是不会长久的，不过这也引发了小样儿开始思考自己的人生，下面这一段话，便是他自述得当时的想法。</p><blockquote><p><em>我是在2011年十二月份的时候，就去那家快递公司工作了。</em></p><p><em>当时和我一起去的有三四个同学，刚去没多久的时候就走了一个，因为他受不了那里的环境（话说他是家里唯一的一个儿子，而且家里的条件还好，所以…）。</em></p><p><em>后续再走的一个是由于有自己的目标，他想学好英语到国外去，不过他是有后门帮忙的，所以每天下班了就拿本书读起来了，如今的他已经在墨西哥了。</em></p><p><em>看到别人离开，我就开始有了焦虑感，每到深夜，我内心就不停的挣扎，翻来覆去，久久不能入眠。</em></p><p><em>我以后要干什么？难道就这样一直浑浑噩噩的过下去？</em></p><p><em>这个问题在我的脑海中一直挥之不去，白天忙碌的做事，没有那么多的想法，可是一到了晚上，那些问题就全部占据了我的脑海。</em></p><p><em>家里的经济情况、自己这几年在大学的时光、自己当初来的目的，不是一番滋味在心头，怎一苦字能形容。</em></p><p><em>连续几个晚上的思索，我终于下定决心了，我要编程，我要走IT之路，我要走我当初选择的专业之路，**</em>不管路途有多艰难，我一定要走下去。**</p><p><strong>当初流行的一句话，自己选择的路，跪着爬着也要走完。</strong></p></blockquote><p>　　其实小样儿这样的纠结，很多人都会有。特别是看到别人都找到工作，有所归属的时候，自己的内心难免会焦虑不已。就像一场考试一样，刚开始你可能不会着急，但是当你看着越来越多的人都交卷了，你不可避免的就会产生焦虑的心理。</p><p>　　在这里，群主要多说一句，如果你有这样的焦虑，请不要过于担心，因为，无数次实践证明，交卷早的不一定分高，-0-。</p><p>　　下定了决心之后，小样儿便开始行动了，以下便是他在毕业前半年，学习编程的自述。</p><blockquote><p><em>从打算走计算机这条路开始，我就给自己指定了一系列的计划。</em></p><p><em>离毕业还有半年，先在快递公司做着，等把该学的东西搞完了就辞职。</em></p><p><em>当时，每天下班了就赶紧的学习编程语言，我不是那么的幸运，没有人指点我，于是乎，就跟着道听途说，说C语言是学习别的语言的基础，学习C语言很不错的。</em></p><p><em>好吧，我就回学校，找来了关于C语言很多相关的书本，前面学起来对我来说难度倒不大，可是C语言我依然比较的模糊（后面的指针，一直搞不明白，当然，现在我已经知道怎么回事了）。</em></p><p><em>突然间我醒悟，这门编程语言不适合我，学校开了好几门编程语言（C、Java、C++、汇编、window编程），没有人指导，没办法，我只好把学校教材上关于这几门语言的介绍都大概的看了下。</em></p><p><em>对比下来以后，我发现Java适合我，觉得它的思维，还有它那些命名，都看起来比较的顺眼，也容易记住，因而最终选择了Java，o(︶︿︶)o 唉！</em></p><p><em>其实，在选择学习哪门语言的时候，我也走了好多的弯路，但是我还是给自己说，人生不如意之事十有八九，还是别埋怨了，还是做好自己该做的事吧，where there is a will，there is a way！</em></p><p><em>尽力的去享受这个过程吧。</em></p></blockquote><p>　　小样儿的自述里，总是有一种自带鸡血的感觉，但他在群里的时候，总让群主有一种苦大仇深的感觉。</p><p>　　眼看着就要毕业了，小样儿没有在武汉找工作，由于感情方面的原因，小样儿毅然决然的来到了深圳，寻找自己大学时的初恋。</p><p>　　据小样儿自己所说，他的女朋友大学的时候辍学了，辍学以后就来到了深圳打工。在小样儿毕业之前，两个人有将近两年的时间里都是异地恋。</p><p>　　随着小样儿2012年毕业来到深圳，两人结束了异地恋，但是由于小样儿当时学艺不精，因此找工作的过程并不是很顺利。于是乎，小样儿便在女朋友的劝导下，来到了女朋友的公司，开始当起了流水线工人，在一家高尔夫球场擦球。</p><p>　　群主当初也做过流水线工人，在一家农药厂包装农药，因此群主很清楚，那种工作是相当无趣和迷茫的。</p><p>　　就这样，小样儿在当初一个领导的忽悠下，又回到了武汉，原本说好的是编程的工作，结果来了以后小样儿才知道，他其实做的只是软件销售而已。</p><p>　　小样儿的编程之路并没有那么顺利，做软件销售的时候，小样儿利用业余时间，不断得补充着编程的知识，但始终都没有找到一份真正的编程工作。</p><p>　　就这样，足足过去了一年多，到2014年的4月份，小样儿才在武汉找到了人生中，第一份真正意义上的编程工作，在一家传统软件公司做开发。</p><p>　　那个时候，小样儿已经入群了，每天愁眉苦脸的，群主就天天给他打鸡血，那一针针下去，小样儿估计当时都快要被打的暴毙了，-0-。</p><p>　　后来，辗转之下，2016年的2月份，小样儿再次离开武汉，准备再战深圳。而这一次，其实还有不少群主鸡血的功劳，-0-。</p><p>　　现在，小样儿在深圳一家电商公司，成为了一名平凡的程序员。和女朋友这么长时间的分分合合，也终于告一段落，这其中的辛酸苦楚，估计就只有小样儿自己知道了。</p><p>　　不过，群主觉得，不论过程多么艰辛，只要方向是对的，等你达到了目标以后再回头看，你会发现，其实你最怀念的，反倒是那段最苦逼的岁月。</p><p>　　</p><h3 id="广州-小黎-Android"><a href="#广州-小黎-Android" class="headerlink" title="广州-小黎-Android"></a>广州-小黎-Android</h3><p>　　</p><p>　　小黎，也是入群较早的成员，早年的活跃分子一个。</p><p>　　小黎是在广西上的大学，说起来，在大学期间，小黎还谈了一次恋爱，以下是他本人对这次恋爱的描述。</p><blockquote><p><em>在大学期间，谈了一个泰国女朋友（经验证不是人妖，嘻嘻…）。</em></p><p><em>在学校的时候谈恋爱真的很幸福，上课的时候，有人煮好饭等我下课回去吃。去打篮球的时候，怕她无聊没带她去，结果她偷偷的跑去球场看我打球。</em></p><p><em>大学的这些生活真的很幸福，终究迎来了毕业，各奔东西。</em></p><p><em>我们最后一次见面是在泰国，我选择国庆公司放假飞到泰国去探她，就在那一次后我们分手了。</em></p><p><em>分手原因就是没结果，大家选择和平分手。</em></p></blockquote><p>　　短短的几句话，让群主看到了一个幸福的校园爱情故事，不过其实群主真的想问一句，“小黎，你确定不是人妖吗？”，-0-。</p><p>　　2014年的6月份，小黎从学校毕业，当时群主的鸡血也蔓延到了小黎这里，于是乎，小黎在鸡血的刺激下，只身一人来到了北京。</p><p>　　当时群主已经做了项目经理，还是有一定权利的，对于小黎这种刚毕业的学生，群主还是有权利自己决定去留的。不过话虽如此，但群主还是象征性的找了组里的一个同事，准备让他帮群主面试一下小黎，这其实更多的是走个过场，只要小黎表现的不是非常差，基本会稳稳过关。</p><p>　　但谁知，面试当天，小黎却突然打电话给群主，说自己刚到北京，就因为气候不适生病了，没办法来参加面试了。</p><p>　　就这样，或许是没有缘分，小黎没能跟着群主一起工作。后来，小黎在北京也参加了几次面试，但都因为觉得不太合适，果断离开了北京，回到了南方，来到了广州。</p><p>　　人生就是这样，有的时候一个选择就会产生一连串的蝴蝶效应，如果当初小黎跟着群主，在群主手底下干活儿，也不知道现在会是如何。</p><p>　　回到广州以后，小黎的第一家公司，是2014年的12月份找到的，小黎只用了一句话来形容他在这家公司的经历。不过，他其实每一段工作经历，都是用一句话来形容的，-0-。</p><blockquote><p><em>因为技术不过关，对于现在的我半天不用就能完成的任务，当时花了2天。公司觉得我技术不过关，就给了我一封请辞信（也就是被炒鱿鱼啦）。</em></p></blockquote><p>　　好吧，很干脆，据小黎自己介绍，他在这家公司做了不到三个月，便被客气的“请”了出去。</p><p>　　被请出去以后，小黎来到了人生的第二家公司，一家做OA系统的公司，接下来，群主再次引用他的一句话来形容这第二家公司的生活。</p><blockquote><p><em>在这家公司工作很累，公司总是没完没了的更改需求，导致经常加班加点，**</em>而且钱又少，又有一个什么都不懂的技术总监，整天在那里指手画脚，最终没能忍住，辞职了。**</p></blockquote><p>　　看小黎这意思，当初马云所说的两个离职的理由，他是全都占了，钱也给少了，心也委屈了。</p><p>　　再后来，小黎便来到了现在的东家，一直到现在。对于现在的东家，小黎也是用了一句话来形容。</p><blockquote><p><em>现在所在的公司，是三家中最轻松，也是氛围最好的一家。没啥技术难点，也不用加班，是做android中间件的。</em></p></blockquote><p>　　从小黎每次简短的话语中可以看出，他应该没有经历过太多的挫折，属于在程序员的道路上，走的还算平静的一个小伙儿。</p><p>　　现在的小黎，身处广州，单身汪一只，在给群主发的邮件中，小黎还专门写了一段话，如果有女媛路过，可以顺道看看。</p><blockquote><p><em>这段时间最苦逼的就是，和泰国女朋友分手后，2年多了都没有找到心仪的女朋友，希望通过这次机会找到属于我的另一半。</em></p><p><em>本人性格：不烟不酒不赌，不乱花钱。</em></p><p><em>总之一句话概括：会是一个好男朋友，一个好老公，一个好爸爸。</em></p><p><em>不用质疑，所说的句句属实。不怕验证，最有成就的就是谈过外国的女朋友，还有的就是工作的时候发布一个APP，这些都是最自豪的。</em></p><p><em>这次的目的很明显，就是为了找个高分的女票或者高分老婆，跪求龙哥成全……</em></p></blockquote><p>　　最有成就的就是谈过外国的女朋友，和工作的时候发布了一个APP，群主很为你担忧啊。</p><p>　　咳咳…….</p><p>　　最后，附上小黎的一张照片，以表小黎征女友的诚意。</p><p>　　<img src="https://images2015.cnblogs.com/blog/558323/201702/558323-20170219140015582-423524564.jpg" alt="img"></p><p>　　</p><h3 id="广州-小师妹-Android"><a href="#广州-小师妹-Android" class="headerlink" title="广州-小师妹-Android"></a>广州-小师妹-Android</h3><p>　　</p><p>　　小师妹，也算是入群较早的成员了，也是群里难得的女程序媛。</p><p>　　小师妹这个群名片的由来，和Derek的相似，当初拜师潮流下，小师妹便将自己的群名片给改掉了。群主犹记得，最早的时候她先是改成了“龙哥小师妹”，后来过了一段时间，才最终改成了“小师妹”。</p><p>　　小师妹的原昵称叫37度，在群主的印象中，是一个非常爱学习的呆萌妹子。因为很多次和小师妹的对话，都是以她一句“我该看书了”而终止。</p><p>　　小师妹是2014年毕业的，在大四下学期刚开始的时候，小师妹便和很多大学生一样，开始走出校门，寻找自己人生中的第一份工作。</p><p>　　关于这段找实习的经历，群主想让小师妹自己来说说。</p><blockquote><p><em>2014年2月，过完大学最后一个春节，我拖着笨重的行李，开始出去找我人生中的第一份实习。</em></p><p><em>临行前爸爸给了我2k，让我别委屈了自己，妈妈还是一如既往的唠叨。</em></p><p><em>当时时间是在八月份的尾巴上，燥热的白昼和寂静的夜晚无尽的循环着。四年的大学生涯，后悔没有把自己塑造成一个勤奋、进取的乖学生，六级至今没过，应该以后也不会有机会了。</em></p><p><em>从没想过拿着简历从这个招聘会跑到另外一个招聘会，从福州横跨到深圳，一场场的笔试，一次次的面试，每次都以失败告终。</em></p><p><em>我印象最深刻的一次面试是，都到最后一关了，却因为HR一句，“你是女的，迟早要回家发展的。”，便把我拒之门外。</em></p><p><em>2014年3月，为了省点房租，我借住在堂哥的女朋友的朋友那里，三个人挤在广州单间的城中村，逼仄，暗淡无光，却贵的离谱。</em></p><p><em>当时，第一次体会到了，睁开眼不知道是黑夜还是白天的感觉。</em></p><p><em>每天投安卓简历，叫去面试的寥寥无几，当初一边投简历，一边看面试题，找了一个多月才有一家愿意要我的公司。</em></p></blockquote><p>　　看完小师妹的这段介绍，群主的第一感觉就是，这是一个奋斗型的妹子。</p><p>　　找到工作以后，小师妹也步入了打工族的生活，接下来引用一段小师妹对这段工作的自述。</p><blockquote><p><em>第一家公司是做移动支付的，当时我拿着1.2k的实习工资，成为了公司唯一一个女程序员。</em></p><p><em>组长是一个能力很强的人，写的框架我看的云里雾里的，好在他还算照顾我，每次我问那种傻里傻气的问题，问他这里模块分层，代码怎么封装，怎么扩展，他都很乐意的回答我。</em></p><p><em>期间我们移动组的开发流程，是按照大公司得流程走的，组长就让我写需求设计，概要设计等。<strong>**工作的时候，组长不仅规范我的代码，还会教我公司一些人情世故以及技术学习的方向，让我不要只专注于android开发。</strong></em></p><p><em>所以刚出社会有一个好的上司，可以让你少走很多弯路。</em></p></blockquote><p>　　看完这段话，群主的第一感触是，每一个呆萌的程序媛总会有一个“好”的上司，-0-。</p><p>　　后来，由于公司业务不景气，小师妹的工资也一直都处于很低的水平，因此，在这家公司呆了一年半，小师妹便开启了人生第一次跳槽。</p><p>　　在2015的4月份，小师妹处于跳槽的时候，她第一次来到了群主的博客。据她所说，她当时是看到了<a href="http://www.cnblogs.com/zuoxiaolong/p/lang1.html">《新手容易混乱的String+和StringBuffer，以及Java的方法参数传递方式。》</a>这篇文章，才来到群主博客的。</p><p>　　经过一段时间的面试，小师妹并没有如愿的进入更好的公司，而是踏上了外包这条不归路。</p><p>　　不过，在这段时间里，小师妹却找到了她寻找了二十多年的那个人。接下来，群主就让小师妹自己来说说吧。</p><blockquote><p><em>在外包公司上班半个月后，其实还有公司打电话让我继续去面试，但我这时候已经懒了，对自己充满了怀疑，以至于后面错过了很多让自己成长的机会。</em></p><p><em>在外包公司里面，两个人独立做一个项目，但大多数都是一个人，代码非常的乱，管理也乱，都是不懂技术的项目经理来管下面的开发人员。</em></p><p><em>项目经理什么要求都答应客户，结果就是把我坑惨了，我的经验不足，很多动画特效，需求我无法实现，也没人带我，那一个月经常加班，每天熬到12点多，**</em>现在身体不好估计也是那时候积累下来的。**</p><p><strong>也是在那时，我大学的一个同学刚好在深圳，我们俩都是技术控，聊着聊着把他聊到广州来找工作了。</strong></p><p><strong>毕竟是男孩子，他逻辑比我好，技术比我好，他在我附近找到了房子，常常过来帮我敲代码，那时候非常感激他帮我脱离苦海，<em>*</em></strong>下班了也常常让他过来我这里吃饭，有种小两口的感觉。<em>*</em></p><p><strong><em>我们常常讨论技术、赚钱，也算在这城中村四角的天空过得有些惬意。</em></strong></p><p><strong><em>最后这个人竟然成了我老公，两个程序员的结合。</em></strong></p></blockquote><p>　　看完这个，群主只想提醒大家，切勿轻易模仿啊，因为，不是所有的女程序媛都像小师妹一样，是一个标准的技术控的，-0-。</p><p>　　接下来，据小师妹描述，她和被她骗来的老公，经常在周末提升自己的Java知识，也是因此才机缘巧合的进了群主的交流群。</p><p>　　这一段经历，还是让小师妹自己来说说吧，里面还包含了对群主的吐槽。</p><blockquote><p><em>我呆的这个外包公司周六日不用加班，我跟我老公两个人，便经常利用空余的时间来学习。</em></p><p><em>因为经常混迹于技术群里面，下半年开始逐渐听到安卓工作不好找，我也没有继续去深究安卓的底层。</em></p><p><em>那段时间，经常混迹于csdn、博客园这些技术论坛中，加一些技术群，也就这样子稀里糊涂的进了龙哥的群。</em></p><p><em>每次看到JVM一些技术点不懂的时候，我就要去龙哥群里面扯一扯，把龙哥揪出来回答我的问题。</em></p><p><em>哎，可惜龙哥这个人就是不怎么认真回答我的问题，问什么都是让我去看书，没给我一个比较细的方向，也许这就是大神和菜鸟的区别吧。</em></p></blockquote><p>　　看完这段话，群主的第一反应是，“这怎么可能？妹子的提问自己竟然没回答？”</p><p>　　于是，群主忍不住去翻了翻和小师妹以往的聊天记录，群主震惊的发现，自己竟然真特么没有回答，-0-。不过，群主想纠正小师妹的一句话，这不是大神和菜鸟的区别，而是已婚汪和单身汪的区别，-0-。</p><p>　　小师妹当初也是<a href="http://www.cnblogs.com/post/readauth?url=/zuoxiaolong/p/5469265.html">《共同打造中国最受欢迎的Java博客网站》</a>活动的一员，不过，在做完这个活动以后，小师妹就消失了。</p><p>　　据小师妹所说，她在2016年的5月，才脱离了外包的苦海，来到了一家做社区O2O的公司。</p><p>　　在这家公司里，小师妹获得了不小的成长，也开始慢慢接触到了Python。关于这一年多，小师妹还专门做了一段总结。</p><blockquote><p><em>这一年进步了很多，我主要归功于以下几点：</em></p><p><em>1、多看书，如《深入理解JVM规范》，《java并发编程》等，看完了一遍，虽然还是不够系统化的消化它，但是在技术群里面还是能跟大神们扯上几句，这也算一个进步。</em></p><p><em>2、多总结，多思考。每次遇到一些坑，我都要纪录下来。可以按某一块的技术去分文件夹。如并发、网络、算法等。关于某一块的技术点有自己的见解，这样比较容易记得牢。</em></p><p><em>3、多问一些技术比我好的人，虽然这样很不好，但是我就骚扰过几次龙哥，不过他只是让我看书就是了。</em></p><p><em>4、有空写写博客，是你技术发展的一个心路历程，要是技术含量高的话你可能还会收获一些小粉丝。话说我的博客已经好久没更新了，大家有空去浇浇水吧，<a href="http://blog.csdn.net/txfyteen。">http://blog.csdn.net/txfyteen。</a></em></p><p><em>5、心态要乐观，无论是面试还是生活中的事情，像我每次面试都要找很久，基本没什么人叫我去面试，但是一旦给我面试机会，我一定会牢牢的捉住机会。找工作这事情运气也很重要的，在你还没有足够的运气前，先好好充实自己。</em></p></blockquote><p>　　看完这段话，群主才发现，群主又被吐槽了，-0-。</p><p>　　广州，群主出差的时候曾在那呆过一个月，当初去的时候，小师妹还开玩笑说要请群主喝茶，后来由于时间原因，这件事就不了了之了。</p><p>　　当时广州给群主的感觉，就是有一线城市的气魄，却没有一线城市的紧迫感和喧嚣。</p><p>　　群主当时忽然发现，原来除了杭州、成都等这些城市以外，还有这么一个程序员的世外桃源，希望小师妹和被她骗来的老公，可以在广州这个程序员的第二天堂里，打下属于他们的一片天。</p><p>　　</p><h3 id="写在最后的话"><a href="#写在最后的话" class="headerlink" title="写在最后的话"></a>写在最后的话</h3><p>　　</p><p>　　或振奋人心，或平淡无奇，或曲折离奇，一共13个人的故事，到这里就结束了。</p><p>　　记得前几天群主在群里说，要给群里的人写一篇文章，希望大家能把自己的故事发给群主。当时，有不少成员都表示，自己的故事太普通了，没什么好写的。</p><p>　　而群主回答他们的一句话是，“这个世界的有趣，需要每个人的故事。”</p><p>　　在很多年以前，群主也一度觉得，只有成功人士的故事，才值得被歌颂。但经历了这么多，群主现在反而觉得，真正能够深入人心的故事，其实恰恰是那些看似平淡的人和事。</p><p>　　在程序员这条路上走了这么久，群主觉得自己最大的提高，并不是技术变的多么牛逼了，而是群主学会了用一种成熟的眼光，去看待这个世界上的人和事。</p><p>　　群里的很多人，经历这三年多的时间，都已经从一个新人变成了老司机。犹记得，当初群里的所有人都是来自一些名不经传的公司，以至于当初Derek进微软的时候，在群里引起了巨大的轰动，因为在那时候，大家普遍觉得，微软这种大公司里的大神，是不应该出现在我们这小小地交流群里的。</p><p>　　慢慢的，三年多过去了，群里已经变成了一个藏龙卧虎之地。记得那天和群里的人数了数，现在光能确定的大公司，群里就有不少人在里面，比如阿里、百度、网易、携程、美团、饿了么、微软、华为、爱奇艺、去哪儿等等。</p><p>　　群主相信，再过个三五年，群里又会涌现出一批老司机，或许到那个时候，群主会再写一篇《这些年，我身边的那些人和事》，来讲讲这些人的故事。</p><p>　　……</p>]]></content>
      
      
      <categories>
          
          <category> Book </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 左萧龙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个最新发现，原来程序员的最终归宿在这里</title>
      <link href="/2016/03/07/book/%E4%B8%80%E4%B8%AA%E6%9C%80%E6%96%B0%E5%8F%91%E7%8E%B0%EF%BC%8C%E5%8E%9F%E6%9D%A5%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E6%9C%80%E7%BB%88%E5%BD%92%E5%AE%BF%E5%9C%A8%E8%BF%99%E9%87%8C/"/>
      <url>/2016/03/07/book/%E4%B8%80%E4%B8%AA%E6%9C%80%E6%96%B0%E5%8F%91%E7%8E%B0%EF%BC%8C%E5%8E%9F%E6%9D%A5%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E6%9C%80%E7%BB%88%E5%BD%92%E5%AE%BF%E5%9C%A8%E8%BF%99%E9%87%8C/</url>
      
        <content type="html"><![CDATA[<h3 id="地狱"><a href="#地狱" class="headerlink" title="地狱"></a>地狱</h3><p>　　在北京生活的时候，LZ每天都在琢磨一些生活上未来必须要面对的事。没办法，还有两三年，LZ就快30了，也已经结婚了，有些事情不得不考虑。</p><p>　　比如房子买不起怎么办？（北京的房价，LZ真是日了狗了）</p><p>　　比如车摇不到号怎么办？（摇过号的都知道，那概率，真是日了鸡了）</p><p>　　比如没户口孩子上学怎么整？（户口这东西，LZ只要一想，就已经想把所有动物都日一遍了）</p><p>　　这三个大问题一直困扰着LZ，而LZ一直盼星星盼月亮一般的期待着大帝都解决这些问题。后来发现，估计这些问题解决的时候，LZ早就不知道穿越到哪里去了。慢慢的，LZ对于这些问题已经麻木了，或者说已经不再想办法去解决了。因为说真的，真的不是不努力，而是真的太难了。</p><p>　　当然了，如果你有父母给你掏房子首付，有媳妇是北京户口可以让你投靠，你运气又好的一逼一下就摇到号了或者在摇号之前刚好办了个牌照，那就请点击浏览器右上角（MAC操作系统在左上角）的叉叉按钮，这篇文章不属于你。</p><p>　　这几个看似简单，但一直没法解决的问题，简直快让LZ白了头（放心，LZ的头发其实还是黑噗噗的，请注意，这只是个比喻，0-0）。有的同学可能会说，没房子就租房子，没车就坐公车，孩子上学不好办就回老家上去。实在不行，赚上几年钱，到时候直接回老家享福得了。</p><p>　　其实，LZ开始就是最后的那个想法，挣够钱，然后回老家享福，而且LZ也确实已经在老家买好了自己的房子（北京买不起，咱老家那三线总买得起，0-0）。了解LZ的同学应该知道，LZ曾经尝试写过小说，当然了，最后没有写完，俗称太监了。很多人觉得LZ很能捣腾，也有的觉得LZ闲着蛋疼没事干，但其实LZ当时的真实目的是，在为自己以后回老家的时候，培养一个第二职业，毕竟写网络小说又不需要在北京写。</p><p>　　那些新闻上的内容也只能看看罢了，难道真的要让自己回老家去卖煎饼？去摆水果摊？LZ宁可拿起自己不算牛逼的笔头去写小说，最起码，除了写代码以外，写小说也勉强算是LZ的爱好之一吧。</p><p>　　</p><h3 id="曙光"><a href="#曙光" class="headerlink" title="曙光"></a>曙光</h3><p>　　</p><p>　　所有这一切不快，在前几天发生了翻天覆地的变化，LZ收到一个二线城市的offer，并且已经打算去了，下周一就要报到去了。</p><p>　　但让LZ意外的是，LZ搜索了一下在这个城市的房价，也查了下这个城市车牌的政策以及户口落地的政策，差点没做梦都特么笑醒了。虽然，在这样的城市里，买房买车落户依然不是轻而易举的事情，但最起码，最起码，LZ看到了希望。</p><p>　　希望，你懂吗？</p><p>　　在北京的时候，这三件事情，任何一件几乎都是遥不可及的梦想，突然之间，就因为一个offer，这些都变的触手可及了。LZ已经开始梦想着以后住在自己的house里，开着自己不算豪华的车，接送自己孩子上下学的场景。或许这一切现在看起来还是那么缥缈，但LZ坚信，这一切最起码是有可能实现的。</p><p>　　就算这一切最终没有实现，只要有希望，LZ也可以更加开心的度过每一天。</p><p>　　</p><h3 id="程序员的归宿"><a href="#程序员的归宿" class="headerlink" title="程序员的归宿"></a>程序员的归宿</h3><p>　　</p><p>　　上面只是一翻感慨，接下来说到重点了。经过这一次换城市的经历，LZ真真切切的意识到，有几个城市真的特别适合程序员生活，或者说，这几个城市里的程序员应该是幸福指数比较高的。</p><p>　　这些城市根据LZ观察，大约有这么几个，杭州、成都、武汉、南京、长沙等这么几个城市。</p><p>　　这些城市有一个共同点，就是IT业虽然跟北上广深没法比，但也算是中规中矩，最起码能找到10K甚至20K的工作。这样的工资，跟LZ老家那三线城市比起来，简直不要太高，在LZ老家那里，能不能找到工作都还两说呢。而且最重要的是，这些城市的房价、户口、摇号等政策，就算同样有限制，但肯定也要比北上广深简单太多（具体政策请自行去查吧，LZ并没有一一去查）。总之，就像LZ说的一样，最起码，希望是肯定有的。</p><p>　　希望，你懂吗？</p><p>　　而且，这并不是说要你现在立马从北上广深离开去往这些城市，你完全可以在北上广深攒够差不多的钱，然后带着存款去这些城市，到时候，你的房子也有了，车子也有了，户口也解决了，而且还能找到一个工资还算不错的工作，至少在LZ看来，这比在北上广深要好太多了。</p><p>　　在这些城市，最起码你有希望真正的安一个家，一个适合程序员居住的家。</p><p>　　</p><h3 id="头脑风暴"><a href="#头脑风暴" class="headerlink" title="头脑风暴"></a>头脑风暴</h3><p>　　</p><p>　　LZ深知自己的影响力是很薄弱的，北上广深的程序员并不会因为LZ这篇文章减少多少，但这无关紧要，这并不妨碍LZ在文章的末尾来一次头脑风暴。</p><p>　　大胆的设想一下，如果有一天，程序员都去这些二线城市安家了，北上广深的程序员全都消失殆尽，那将会是怎样的场景呢？LZ绝对相信程序员的力量，大量程序员去二线的结果，会不会是一些互联网企业也被逼着也去了二线发展，那现在最早去二线的这批程序员，会不会成为开疆扩土的一批人呢？</p><p>　　这一切都不得而知，未来充满了未知，好刺激，不是吗？</p><blockquote><p>他个人的博客网站：<a href="http://www.zuoxiaolong.com/">http://www.zuoxiaolong.com/</a></p><p>原文链接：<a href="https://www.cnblogs.com/zuoxiaolong/p/life46.html">https://www.cnblogs.com/zuoxiaolong/p/life46.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Book </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 左萧龙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈程序猿的职业规划，看你如何决定自己的未来吧</title>
      <link href="/2013/10/12/book/%E6%B5%85%E8%B0%88%E7%A8%8B%E5%BA%8F%E7%8C%BF%E7%9A%84%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92%EF%BC%8C%E7%9C%8B%E4%BD%A0%E5%A6%82%E4%BD%95%E5%86%B3%E5%AE%9A%E8%87%AA%E5%B7%B1%E7%9A%84%E6%9C%AA%E6%9D%A5%E5%90%A7/"/>
      <url>/2013/10/12/book/%E6%B5%85%E8%B0%88%E7%A8%8B%E5%BA%8F%E7%8C%BF%E7%9A%84%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92%EF%BC%8C%E7%9C%8B%E4%BD%A0%E5%A6%82%E4%BD%95%E5%86%B3%E5%AE%9A%E8%87%AA%E5%B7%B1%E7%9A%84%E6%9C%AA%E6%9D%A5%E5%90%A7/</url>
      
        <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>　　这篇文章LZ很久以前就想写，只是LZ本人也一直在摸索当中，不过LZ摸索的是自己的道路。其实作为一个程序猿来说，大体上的路线已经摆在众人眼前，到底自己有什么样的想法，自己适合哪条路，还是只能自己去摸索，这一点请各位不要征求任何人的建议。LZ能做的，就是把各个路线的客观事实陈列出来，供大家选择。</p><p>　　条条大路通罗马，三百六十行，行行出屌丝。作为一个IT界有理想有抱负，高端大气上档次的屌丝，LZ还是对未来很有打算的。说起这个打算，大致就是两种，一种是生活上的规划，一种是职业上的规划。对于前者来说，无非就是生活在哪座城市，何时打算步进婚姻殿堂，何时打算成为父亲等等。而后者则相对简单，也相对困难，简单的是它只需要给自己规划出一条大道即可，困难的是，它不像生活规划，可以相对随性，而且有无数前人的经验供你参考，大部分时候，它只能靠你自己一步一步的摸索。</p><p>　　不过职业规划的大体框架基本都是固定的，只不过每个人走的路形色各异，而且不是有句广告词叫“不走寻常路”吗，现实当中难免会有人走别人没走过的路，走着走着，便成了一条路。不过话说回来了，也可能走着走着，便走到死胡同了。因此安全起见，我们大部分人还是适合大众路线的。</p><h3 id="浅谈职业规划"><a href="#浅谈职业规划" class="headerlink" title="浅谈职业规划"></a>浅谈职业规划</h3><p>　　首先LZ想给大部分的猿友，尤其是在校生普及一点知识。就是我们在选择工作的时候，抛开工资、环境等这些细节不谈，我们的大方向应该主要考虑职业和行业这两个方面。</p><p>　　职业则是指你干的什么，而行业则是指你在哪个领域。不准确但更简单的来说，职业规划就是决定你未来准备在哪个领域干什么。比如举一个例子，你现在在某家银行当程序员。此时，金融就是你的行业，程序员则是你的职业。</p><p>　　现在现存的行业千奇百怪，比如互联网、金融、传媒、农业等等，这些都是可选的行业。对于程序猿来讲，刚开始的职业规划可以不考虑行业的选择而只考虑职业，也就是说，只要是干程序员，到哪个行业的公司都差别不大，除非当前公司的行业你十分厌烦。不过当职业生涯走到一定阶段，则需要好好考虑下自己准备投身哪个行业了。</p><p>　　由于行业选择的个人因素比重比较大，因此LZ这里就不对此作出建议了，各位猿友可以根据自身的性格特点，特长爱好等，来选择自己准备奋斗一生的行业。LZ这里主要来谈的是职业规划中的职业。</p><h3 id="职业路线一览"><a href="#职业路线一览" class="headerlink" title="职业路线一览"></a>职业路线一览</h3><p>　　这里LZ简单的画了一个职业通道的路线，可能与有些公司的职位不符，毕竟公司不一样，规模和起名的习惯可能不一样，但是大体上是这么个路子。各位猿友看看就好，不需要拘泥于职位名称。</p><p><img src="11152938-58c7b0a283bd4209a96ab182ecf86cb2.jpg" alt="img"><br> 　LZ考虑到各个公司的职位职责可能不尽相同，比如有的公司的项目经理，其实是集研发经理的任务于一身的，因此这里有必要对图中的各个角色的职责做一个简单的说明，以免对各位猿友造成误导。以下主要介绍三种角色，也是最容易引起误会的三个。</p><p>　　开发工程师：这个大家是最熟悉的，这个角色主要负责系统中某个模块或某个功能的设计与编码，有时候还会有数据库设计的工作等等。</p><p>　　研发经理：主要负责项目的技术选型，技术难题的攻克，技术人员的招聘，团队成员的技术培训与熏陶等一系列与技术相关的工作。</p><p>　　项目经理：主要负责项目进度的规划、跟进、落实、交付以及与客户的沟通等任务，是一个项目的监督者与管理者。</p><h3 id="浅谈程序员的职业路线"><a href="#浅谈程序员的职业路线" class="headerlink" title="浅谈程序员的职业路线"></a>浅谈程序员的职业路线</h3><p>　　在讨论下面的内容之前，LZ需要先声明一点，这一点从图中也能看出，本次讨论的职业发展，都是基于一个条件，那就是你是以做程序员为职业的起步的。因此本次主要讨论的是以程序员作为起点的职业发展之路，倘若你一开始就做的测试或者需求等，那就不在本次讨论之列了。另外一点就是上面所写的开发工程师或者说程序员是一个统称，很多时候还分为初中高级，这里我们就不做区分了，它对我们的职业规划的影响并不大。</p><p>　　在上面的图中可以看到，一共有四条路线，而左边和右边的测试与需求，上升的途径相对来讲会受限一些，不过这不能说明这两种路线就是差的。就大部分情况下而言，从程序员转向测试和需求的人员当中，一般女性居多，但是一个人职业的发展是非常个性化的，因此并不是说男生就不适合干测试和需求，就像不能说女生就不能干开发一样，这需要因人而异。</p><p>　　对于剩下的两条主路线，则大多数时候是我们的首选路线，但是这里的管理路线有些特别，需要以技术为背景，否则的话，往往前途有限。对于一个部门总监或者叫技术总监来说，他可以忘记了当初如何读取一个文件，如何实现上传下载功能等等这些技术细节，但是这些一线开发经历，一般是管理技术部门的前提。不过这个前提，对于程序猿来说，大部分时候是可以满足的。</p><p>　　</p><h3 id="浅谈技术路线的要求"><a href="#浅谈技术路线的要求" class="headerlink" title="浅谈技术路线的要求"></a>浅谈技术路线的要求</h3><p>　　技术路线应该是几乎所有程序猿梦寐以求的路线，当你问一个程序猿的目标是什么，几乎大多数人会说架构师或者CTO。这不仅仅是因为这是技术路线的巅峰，更是因为这两个称谓给人霸气侧漏、高深莫测的感觉。</p><p>　　LZ曾经见过公司的CTO，还有幸交谈过几句话，说来尴尬，说话的原因是因为当时LZ负责的系统出了问题。如果说CTO当时给LZ的第一印象是什么，LZ只能说，一看就是神一样的人物。最重要的是，LZ一见就有一种想要膜拜的感觉，对于LZ这种自以为是的技术家伙来说，产生这种感觉只有两种情况，一种是对方弱到极致，一种则是强到极致。不过现在想想，可能更多的是因为CTO是LZ的梦想的缘故吧。</p><p>　　想要走技术这条路，需要具备几个素质，如果你想让自己走这条路，那么请看看这几点你是否具备，虽然这并不权威，但若是你基本都不满足，那么LZ觉得，你走这条路的前途也确实堪忧了。</p><p>　　1、对技术的狂热，或者说是执着，亦或是兴趣，有一足矣。</p><p>　　2、良好的逻辑思维能力，如果你觉得数学、物理等理科从小都是自己的天敌，那么你懂的。</p><p>　　3、坚信技术是有出路的，哪怕你已经为此成为了骨灰级屌丝，你也要时不时给自己一巴掌，然后大喊，“Hello World！”</p><p>　　4、强壮的身体，尤其是坚挺的颈椎以及腰部。</p><p>　　5、一个始终认为你是高科技人才的媳妇，当她看到你回到家总是在看书或是对着电脑噼里啪啦的时候，她会用充满敬佩的目光看着你，而不是坐在你的大腿上大喊，“老公，陪我玩嘛！”</p><p>　　6、惊人的毅力与坚持，尽管技术并不代表你就要天天坐在电脑跟前，或是永远抱着一本爬满代码的书，但是难免需要牺牲一部分外面的花花世界，因此若是你属于坐不住闲不下来的人，那么LZ也只能说你懂的。</p><p>　　7、对于自己掌握的技术有一定的成就感，甚至是一定程度上的“自傲”。尽管做人要低调，但是当你看着别人买车买房，妻妾成群，而你除了一身技术，却唯有出租屋与卫生纸相伴的时候，这种“自傲”就是你坚持下去的动力。</p><p>　　以上七点随是LZ一家之言，但若是猿友们觉得这些大部分与你格格不入，那么LZ还是劝猿友们好好考虑一下自己的未来规划吧。</p><h3 id="浅谈管理路线的要求"><a href="#浅谈管理路线的要求" class="headerlink" title="浅谈管理路线的要求"></a>浅谈管理路线的要求</h3><p>　　谈到管理，真是有人喜欢有人厌，LZ亲口问过很多程序猿一个同样的问题，但是他们的答案很多都是这样一句话，“我对管理不是很感兴趣。”</p><p>　　这里面的原因不一而论，但是相信有大部分人是有这样一种考虑，觉得自己作为一个技术人员，最终以管理为生，是一种堕落，亦或是害怕自己在承担了太多管理的重任之后，彻底丢掉了自己曾经赖以生存的技术。</p><p>　　这种心情是可以理解的，但是理解不代表认同。管理同样也是一门很深的学问，而且随着你工作经验的增加，不可避免的都需要管理一些人，区别只不过是人数多少的问题。而且不要忘了，你其实一直都在管理着你自己，管好自己其实同样是一种管理。</p><p>　　话说回来，管理也并不是你想做就一定能做的，有多少程序猿年过30，却依然奋斗在编码一线。这其中确实有那么一批人，是甘愿如此。但却有更多的人，是因为坐不上管理岗位的位子，才不得不如此。</p><p>　　管理这条路依然不好走，因此也同样需要一些基本的素质，否则可能一切也同样是枉然。因此LZ这里依然列举几点要求，同技术路线一样，倘若你与这些要求相差甚远，那么换一条路走下去，或许会更好。</p><p>　　1、宽广的胸怀，俗话说，胸怀天下，才可成为一国之君。胸中无天下，如何管理天下？可以说，你的胸怀能容纳多少人，能容纳什么人，就决定了你能管理多少人，能管理什么样的人。</p><p>　　2、敢于担当，有一定程度的奉献精神，倘若你是一个十分自私的人，那么LZ只想说，你懂得。</p><p>　　3、有一定的技术水准，这一点并不是普通管理者的硬性要求，但谁让你管的是一群高智商的程序猿呢。若是技术烂到极致，那么管理起来将会很难服众，而且对于项目进度的掌控也可能会有所误判。</p><p>　　4、良好的表达与沟通能力，这一点是必须的品质。否则可能你工作当中经常收到的不是上司的赞扬，而基本上全是客户的投诉。</p><p>　　5、做人方面没有短板。比如脾气暴躁到几乎跟公司的人吵架吵了一遍，或者己所不欲，非施于人，又或者眼高手低等等。这些短板，尽管不会导致你失业，但是大部分时候会严重阻碍你的发展。</p><p>　　6、有一定的伯乐能力，知人善用。</p><p>　　7、坚信下属的成功就是自己的成功，而不是自己的下岗。</p><p>　　同样的，以上七点随是LZ一家之言，但若是猿友们觉得这些同样是大部分与你格格不入，那么LZ还是劝猿友们好好考虑一下自己要不要管别人吧。</p><h3 id="浅谈其他路线的选择"><a href="#浅谈其他路线的选择" class="headerlink" title="浅谈其他路线的选择"></a>浅谈其他路线的选择</h3><p>　　看到这里，估计有的猿友要暴走了，“擦，我竟然两条路都走不通”。倘若你与上面的十四条都格格不入，那么恭喜你，你一定是一个十分特别的人。不过天无绝猿之路，上帝收走你的性别，至少咱还可以去泰国不是。</p><p>　　不要忘了那个图上面还有两条路呢，那其实也是很好的路线。一个优秀的自动化测试可以给公司带来偌大的贡献，一个优秀的需求分析师也可以省去很多不必要的重复劳动。可以说，这两者也都不是浪得虚名。</p><p>　　测试是产品质量保障的最后一道关卡，因此需要足够的细致与严谨。倘若是自动化测试，则要求会更高一点。但是如果你是从程序猿转来的，那么工作起来会顺利很多。因为只要是自动的东西，就离不开程序。需求是产品路线的指向灯，是客户心理的蛔虫，因此需要能够挖掘客户的真实需求。而且对于需求这条路来说，LZ还要提醒猿友们一点，那就是需求这条路基本上是与行业挂钩的，因此如果你的行业尚未确定，那么需求可以稍后再转。</p><p>　　尽管看起来这两者的前途有限，但是或许走着走着，你会发现另外一片天空。由于LZ本人对这两者了解相对较少，因此LZ也不知道这片天到底是蓝色还是灰色，不过就算是灰色，你也可以努力把自己变成太阳，照亮整个天空。</p><p>　　说到底，路线没有好坏之分，只有适不适合这一说。当然了，这所有的路线之外，还有一条路，那就是创业。比如卖水果，卖烧饼，卖叉叉。</p><p>　　LZ本人无任何创业经验，因此也不好发表言论。不过LZ个人认为，创业需要一步一步脚踏实地，有多大能力揽多大活，如果你创业时的口号是，“我要干掉BAT”，那LZ还是想说，你懂得。</p><h3 id="职业规划的开始"><a href="#职业规划的开始" class="headerlink" title="职业规划的开始"></a>职业规划的开始</h3><p>　　程序猿，是技术相关的职业生涯一个不错的开始，不论你以后是要做CTO还是总监等等，只要你还做着技术大家庭中的一员，那现在的技术沉淀，都将是你未来的基石。我们并不需要急于确定自己以后的路线，因为你的能力或者是认识或许还不足以选择。</p><p>　　在你做程序猿的日子里，你需要做的，就是干好手下的工作以及不断的学习。这之中还有一个更重要的任务，那就是认识自己。</p><p>　　当你开始认识自己的时候，就是职业规划的开始。对于任何一个人来说，只有不断的认清自己，你才知道你的路在何方，你才知道你是为何而生。天生我材必有用是没错，但是怕就怕你一辈子都没发现你有啥用。</p>]]></content>
      
      
      <categories>
          
          <category> Book </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 左萧龙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>强迫自己学习</title>
      <link href="/2013/09/29/book/%E5%BC%BA%E8%BF%AB%E8%87%AA%E5%B7%B1%E5%AD%A6%E4%B9%A0/"/>
      <url>/2013/09/29/book/%E5%BC%BA%E8%BF%AB%E8%87%AA%E5%B7%B1%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="心态篇"><a href="#心态篇" class="headerlink" title="心态篇"></a>心态篇</h2><p>LZ在前面两篇文章写了一个小系列，就是程序猿应该掌握哪些知识，以及如何强迫自己学习。前面已经讨论了算法和面向对象的设计思想，其实这部分内容还没完，不过趁着国庆这个点，LZ想趁机讨论一下强迫这部分的内容，本次主要讨论的是心态，欠缺的内容之后再补。</p><h3 id="相信自己"><a href="#相信自己" class="headerlink" title="相信自己"></a>相信自己</h3><p>　　前段时间LZ看过一篇文章，具体名字有点记不住了，大概意思是这个世界上会有人可以完虐你，这些人在任何地方都超过你，优于你。文章中提到了一个17岁和一个16岁的孩子的事情，一个是从小旅游拍照，建了自己的网站。一个是16岁大谈出国事宜，好似61岁。</p><p>　　文章下面还有不少猿友对此佩服不已，甚至觉得自己这二十多年都白活了。说真的，LZ看了实在是心痛不已啊，LZ实在想不到这样就可以将个别猿友的信心击垮。</p><p>　　有一点文章中说的没错，我们必须承认别人强悍的地方。就像这个17岁的孩子一样，或许我们确实输在了家庭上。因为一个17岁可以走过这么多地方的孩子，家里不可能是一贫如洗的地步，就算不是富二代，最起码也是小康家庭。可是试想一下，就算你有这样的家庭，你能够17岁走遍这么多地方吗，可能大部分人的答案都是“不会的”。</p><p>　　因此我们不得不承认这个孩子的特别之处，但有一点不可否认的是，这条路不一定适合所有人，可以说一定不适合所有人。因此个别猿友拿别人在某个地方的小成就小收获，去打击自己的信心实在是让LZ感叹，这也包括那个16岁对出国之事侃侃而谈的孩子。因为在完全不同的人生道路上，我们完全没必要因此有任何的挫败感。</p><p>　　LZ这里也规劝各位猿友，你要相信这个世界上任何人都无法360度无死角的完虐你，这是因为这个世界上没有任何两个人是一模一样的，因此没有什么可比性。</p><p>　　不过唯独有一个人却是可以做到这一点的，那就是昨天的你。只有昨天的你与你有一模一样的人生道路，一模一样的客观条件，一模一样的人生目标等等，只有当你败在他手里的时候，你才能允许那卑微的挫败感出现，并想尽一切办法战胜昨天的你。只要你一直将昨天的你踩在脚下，那么你就已经很优秀了，我们不需要与任何人相比，这毫无意义，自然也就不存在什么完爆这种事。</p><p>　　只有你保持这样的心态，你才有可能不断超越自己，才有可能拥有海纳百川的胸怀，去接受并祝贺别人的成功，而不是在遇到这种事的时候，心里小小的嘀咕一句，“有什么了不起的。”</p><h3 id="压制浮躁"><a href="#压制浮躁" class="headerlink" title="压制浮躁"></a>压制浮躁</h3><p>　　很多人询问LZ，为什么一看书就总想去看看电视玩玩游戏呢。这种问题LZ已经见过很多，而且发生在处于人生的各个阶段的人群当中。</p><p>　　大部分时候，LZ针对这种询问，都会反问一个问题，就是导致你看不下去的原因是什么。这时候有不少人就会告诉LZ这样一个答案，因为觉得自己这样看进步太慢了，所以看着看着就会心不在焉，慢慢的就干脆干别的去了。LZ分析这类情况的原因就是浮躁，可能有些是例外，不过应该大部分如此回答的人都是因为这个原因。</p><p>　　浮躁一般有两种原因，一个是觉得自己进步太慢，觉得别人比自己快的多，所以会产生烦躁的心理。还有另外一个原因，可能是自己心中有一个目标，打算在某个阶段完成，但是觉得这样下去，似乎不知道猴年马月才能达成目标。这两个原因说起来，前者是因为自己内心拿自己跟别人比了，对于这种情况，请参见上面的小标题中的内容，应当彻底遏制这种心理。</p><p>　　对于第二种原因来说，造成这种情况的最大可能一般是目标定的太紧了。比如，有的人打算30岁买房，或者30岁年薪多少多少，或者一年我要看几本书等等。很多人在定下这些目标的时候，根本没有考虑这件事情的难度以及自己本身的实力，因此无论你进步多快，你都会感觉很慢。</p><p>　　破解这种情况最好的办法，就是将目标拉近。举个例子，假设你打算30岁年薪30W，当前年薪10W，你目前25岁。你可以将目标改为27岁年薪15W，等到你27岁达到这个目标以后，再来29岁年薪25W，等到29岁达到以后，再来30岁30W。</p><p>　　以上只是举个例子，不过方式就是这么个方式。当然了，以上我们是排除掉了自身不够努力的情况的，倘若是这种情况，那就不属于浮躁了，而是属于懒惰。</p><h3 id="国庆的到来"><a href="#国庆的到来" class="headerlink" title="国庆的到来"></a>国庆的到来</h3><p>　　上面讨论的都是心态的问题，也是很重要的问题，倘若做不到这样的心态，很容易让学习之路半途而废。如果调整好了心态，剩下的就是行动问题了。</p><p>　　说起行动，LZ就不自然的想到，马上就要国庆了，公司里的人数这几天正在以肉眼可见的速度减少，大家都请假回家了。可惜LZ却对此事无感，因为LZ没有买回家的票，不是没抢上，而是没打算买，LZ思来想去最终还是打算留京学习。</p><p>　　这算是一种强迫吧，因为LZ很清楚的知道，如果回家了，酒桌和麻将摊会是LZ的常驻之地，至于看书或者学习，开玩笑，这些事到了家就不要再提了吧？</p><p>　　这么做最让LZ内疚的就是不能回家陪父母了，不过LZ安慰自己的方法是，想着尽快在魔都扎根，好把父母接过来，这样就可以好好的尽尽孝心了。尽管这样还是不能完全说服自己内心的歉疚，还是起到了一定的作用的。</p><p>　　不过既然都已经留下来了，LZ就没再打算藏着掖着了，就干脆调整好情绪，撩起袖子大干一场吧。</p><h3 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h3><p>　　LZ男，有女友，和一单身多年的屌丝哥们掰手腕，旁边另一哥们说，别比了，你肯定输，LZ说为啥，他说你这么多年来一直用腰，人家可是一直在用手！最后LZ果然输了，善了个哉的，到底是为什么。</p><h2 id="实践篇"><a href="#实践篇" class="headerlink" title="实践篇"></a>实践篇</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>强调了两个内容，一个是要相信自己，一个是要压制自己浮躁的心理。这两点都是非常重要的，倘若做不到这两点，那么在你学习的过程的当中，很有可能会碰到各种各样的问题。</p><p>　　比如第一点相信自己，我们主要强调的是不要攀比。试想如果你做不到这一点，在你正奋力的学习的时候，忽然发现身边的一个朋友或者同事，在你认为不应该超越自己的时候，工资忽然翻了一倍远超于你，这时候你就很可能被这些事情所影响。其实若是你不够相信自己，容易去攀比的话，那么浮躁的心理就很容易产生。</p><p>　　总而言之，心态很重要，非常重要，请各位准备破釜沉舟，背水一战的猿友一定要先调整好自己的心态。调整好心态以后，我们就该去付诸于实践了，也就是真正的行动起来，去进行自己的学习之旅。</p><h3 id="对象范围"><a href="#对象范围" class="headerlink" title="对象范围"></a>对象范围</h3><p>　　这里讨论的对象首先需要满足一点，那就是你是一个有上进心的人，倘若你的生活态度就是得过且过，吃饱喝足即可，那么本篇文章可能不太适合你。当然，这种态度没什么错，个人有个人的生活和工作上的追求，只要开心快乐，都是可取的。</p><p>　　本文的适读对象要满足的第二点，就是你确实有足够的上进心，但却总是因为各种各样的原因打断自己的学习，导致自己的学习效果不太理想，因此就希望通过一些方式方法去帮助自己坚坚定学习的信念，提高学习效果的这批猿友。</p><h3 id="动力"><a href="#动力" class="headerlink" title="动力"></a>动力</h3><p>　　学习必须要有动力，倘若没有动力的话，那么坚持学习几乎是不可能的事。说起动力，主要分为两种，一种是主动动力，一种是被动动力。</p><p>　　这两种动力一般情况下有一种即可，并不需要非得两者兼有。典型的主动动力，就是兴趣。而典型的被动动力，就是各个方面的压力。一般而言，兴趣是最好的动力，它是一种在享受中成长的过程，因此LZ这里主要讲一下如何能够培养自己的兴趣。</p><p>　　至于由于压力所产生的动力，LZ个人是不推荐的，这不仅容易不长久，而且也很容易让人在学习的过程中感觉很痛苦或者是情非所愿。而且来源于压力的动力很多时候是无法培养的，而是被动接受的。举个极端的例子，LZ如何培养一个富二代来自于经济压力的动力，除非LZ是他爹，可以断他的口粮，但是可惜的是，LZ并不是。不过可以一提的是，LZ希望这一招可以将来对自己的儿子用。</p><h3 id="如何培养自己学习的兴趣"><a href="#如何培养自己学习的兴趣" class="headerlink" title="如何培养自己学习的兴趣"></a>如何培养自己学习的兴趣</h3><p>　　关于如何培养学习的兴趣这方面的问题，我们先来看一下我们所谓的，平时的一些兴趣爱好这些内容。我们大部分人的兴趣爱好，有很多都有这样几种，比如打篮球、游泳、网络游戏、K歌、旅游、交友等等一系列的爱好。</p><p>　　这里来说一下这些之所以有这些兴趣爱好的原因，就LZ个人来讲，LZ之前比较喜欢K歌和网络游戏，之所以喜欢这些，是因为LZ歌唱的还可以，DOTA打的也还不错，当然了，都是自我感觉。但不管怎么说，说到底就是因为在这两件事情里，LZ能找到所谓的成就感。包括在高一和高二的时候，LZ特别喜欢打篮球，也是因为很享受球进的那一刻的成就感。试想一下，倘若一个人打篮球从来不进球，很难想象这个人可以喜欢上打篮球。</p><p>　　从LZ的个人经历就能看出，有不少人喜欢一件事情，其实是因为这件事情自己做的还不错，并且从中找到了一定的成就感，满足了一部分的虚荣心。虚荣心这个东西大部分时候是贬义词，但是只要适度并且使用得当，它有的时候恰恰会成为你进步的最大动力。</p><p>　　因此话题回到我们的学习上来，如果要培养学习的兴趣，就需要在里面找到一点点成就感，满足一点你的虚荣心。</p><h3 id="LZ是如何在学习中找到成就感的"><a href="#LZ是如何在学习中找到成就感的" class="headerlink" title="LZ是如何在学习中找到成就感的"></a>LZ是如何在学习中找到成就感的</h3><p>　　对于这一点，首先我们应该明白成就感是什么。成就感在LZ个人看来，其实就是别人对你的认同。比如在你进球时，别人的一句“好球”，比如在你唱完一首歌之后，大家的掌声以及欢呼。</p><p>　　学习在这方面就和打球、唱歌不同，因为在你学习的时候是没有观众的，因此不可能在你学了一种东西之后，有人忽然在你耳边大喊一声“好厉害”，因为根本没人知道你学了什么。当然了，倘若你长此以往的坚持学习，最终你的工资涨了，或者职位提升了，或者跳了个好槽，别人也会对你夸赞一番，认同你一番。但是需要注意的是，我们这里讨论的不就是无法坚持的这部分猿友吗，何来长此以往的坚持这一说，而且这个见效往往非常缓慢，估计还没等你涨工资或者升职的时候，你就已经失去兴趣了。因此这个长久的效果就不如打球和唱歌时，观众当场即时的赞誉来的快了。</p><p>　　正是因此学习的这种短期之内看不到效果的原因，或者没有观众的原因，才造成大部分人对这个没有兴趣。可能会有人说，学习太枯燥了，那LZ就想问一下了，K歌不算枯燥吧，但是让你一个人K歌有意思吗。其实学习本身并不枯燥，正是因为学习大部分时候是一个人学习才会造成枯燥，尤其是出了校门以后，这种情况就更为明显了。</p><p>　　说了这么多，LZ就是想表达一个意思，就是在学习中找到成就感的方式，就是找人来当你的观众，因此只能是两个字—-分享。</p><p>　　至于LZ是怎么做的，相信在你看这篇文章的时候，就已经知道了，不需要LZ再多说了吧。</p><h3 id="一些常见的分享方式"><a href="#一些常见的分享方式" class="headerlink" title="一些常见的分享方式"></a>一些常见的分享方式</h3><p>　　这里LZ列举几种常见的分享方式，各位猿友可以有自己的方式。</p><p>　　1、LZ首推写博客的方式，也就是LZ采取的方式，相信在刚才各位猿友也猜到了。这种方式的好处不仅仅在于分享，而且还可以很好的梳理你的知识体系，锻炼你的文笔及写作能力等等，可以说只有好处，没有坏处。唯一的坏处，LZ所能想到的，可能就是对身体的坏处了，毕竟也是要长期的面对电脑打字。</p><p>　　2、在公司里开培训课程，就分享而言，这也是一种非常好的分享方式。它同样可以梳理你的知识体系，不同的是这里锻炼的不是你的文笔和写作能力，而是表达能力，而LZ个人认为，无论是写作能力还是表达能力，都非常重要。LZ因为个人经验时间略短的原因，还没好意思在公司开培训课程，不过这是LZ早晚要做的事。</p><p>　　3、闲聊式的分享，比如和同事或者同行的朋友吃饭的时候，分享一些自己的收获与看法。这种方式的好处在于会同样锻炼你的表达能力，只是可惜的是它梳理知识的作用比较小，毕竟是闲聊，难免是这一片那一片的，很难系统的分享。</p><p>　　LZ主要就列举以上三种方式，可能还有其它的方式，LZ这里就暂时不讨论了，如果猿友们有自己的分享心得，也可以在下方提出来分享一下。</p><p>　　其实分享除了可以帮你找到成就感，培养学习的兴趣之外，还有一个很重要的作用，就是鉴定你所学习的知识或想法是否是对的，或者是否与时代是匹配的。相信大部分人都听过闭门造车这个成语，LZ个人非常不赞成这种方式。</p><h3 id="再谈写博客"><a href="#再谈写博客" class="headerlink" title="再谈写博客"></a>再谈写博客</h3><p>　　对于上面所说的后两种方式，都是无法强求的。比如第二种，如果你的公司规模不大，就那么两三个开发甚至就你自己，又或者领导不支持，那么显然这第二种方式很难展开。再比如第三种，倘若你无法遇到与你同样喜欢技术的同事，你可能很难日常当中分享自己的学习心得，因为别人对这个不感兴趣。但是如果有机会的话，请一定尝试一下这两种方式，尤其是第二种，对你是绝对有好处的。</p><p>　　对于大部分人而言，可能写博客这种分享方式更加实际一些，所以LZ在这里就再多啰嗦两句。LZ在这里主要提出几个写博客的大忌，希望各位猿友注意，最好不要这样写博客。这里LZ还要强调一点，这里特指技术分享，而不是一些心得体会这一类的。</p><p>　　1、抄书式的写博客，这种方式LZ极其不推崇，个人觉得如果这么写博客的话，不如不写，纯属浪费时间，而且也没有真正的做到分享，对于看你文章的猿友来说，还不如让他们直接去看书。请你相信，在技术领域，好记忆不如烂笔头这句话是绝对不适合的，否则的话，我们多抄几本书，岂不是都成大神了。</p><p>　　2、切忌一个观点，就是“我写的东西一定要对”。这个观点本身是没问题的，我们当然要尽量保证自己写的东西是对的，但是有的人会过度追求。这个心理会残害很多写博客的人，因为这样一来，很多人在写博客的时候会害怕自己才疏学浅，从而不敢表露和记录自己真正的看法和认识，从而无奈或者无意识的转向了第一种情况。请各位猿友记住，我们是在写博客，不是在写书，没人要求你只能写对的，不能写错的。</p><p>　　如果你是怕自己写错误导他人，这个非常好，说明你有责任心，但是也要明白，真正厉害的人你是误导不了的，他们都有强劲的判断力，知道哪些是对的哪些是错的，而判断力较弱的人，其实他们可能一直都处在被误导当中，因为网络上有着大量的包含错误观点的文章，唯一能救他们的，只能是他们自己提高自己的知识和判断力，而不是你。举个不太恰当的例子，倘若你把自己当成妓女，有人来嫖娼导致妻离子散的话，你能说是你害了他吗，毕竟就算不找你，他也会找上别人的不是吗。</p><p>　　还有一种是怕写错了以后被别人批评或者反驳，对于这种想法，LZ只有一个建议，请彻底遏制这种心理。一个无法接受别人的批评和建议的人，是没什么前途的。</p><p>　　3、因为没人看，或者关注度不高，而丧失了分享的信心。很多人其实并不是不喜欢写博客，而是写了博客以后，每次看的人都寥寥无几，自然而然的也就渐渐失去了分享的动力。这很正常，非常正常，毕竟女为悦己者容，博主为推荐者死。但是也不要忘了，我们写博客虽说是为了分享，寻找成就感，培养兴趣，但是更大的作用也是为了梳理自己的知识体系。当你的博客没人看的时候，请先安慰自己稍安勿躁，坚持下去，一定会有一篇博文让猿友们不点推荐不死心，那时你会形成一个良性循环，逐渐的也就会真正的步入正轨了。</p><p>　　总而言之，言而总之，对于技术人员来说，写博客大部分情况下都是有好处的。当然了，如果你可以找到文章中以外的其它方式，培养自己的学习兴趣，也都是可取的。</p><h3 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h3><p>　　本次LZ主要分享一点如何培养自己学习兴趣的经验，文章标题说是强迫，其实LZ还是更希望各位猿友可以在享受中学习，而不是古代所谓的悬梁刺股方式，或者是比较现代的拔网线方式。这类方式简单粗暴，但往往效果不太好，很容易受到一点客观条件的影响，就半途而废了。</p><p>　　因此真正想要坚持学习的最根本的解决办法，最好还是要注重培养自己学习的兴趣，形成一个良性循环，在享受中学习，在快乐中成长，才是最靠谱的学习方式。</p><p>　　</p><h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><p>　　前几天有一个同事跟LZ说，“我要抱孙子了”。LZ露出和蔼的笑容，说了句“恭喜了”。结果这货抱了一下LZ。擦，好贱的新技能。</p>]]></content>
      
      
      <categories>
          
          <category> Book </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 左萧龙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序猿应该了解的内容以及程序猿如何强迫自己学习（算法篇）</title>
      <link href="/2013/09/23/book/%E7%A8%8B%E5%BA%8F%E7%8C%BF%E5%BA%94%E8%AF%A5%E4%BA%86%E8%A7%A3%E7%9A%84%E5%86%85%E5%AE%B9%E4%BB%A5%E5%8F%8A%E7%A8%8B%E5%BA%8F%E7%8C%BF%E5%A6%82%E4%BD%95%E5%BC%BA%E8%BF%AB%E8%87%AA%E5%B7%B1%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%AE%97%E6%B3%95%E7%AF%87%EF%BC%89/"/>
      <url>/2013/09/23/book/%E7%A8%8B%E5%BA%8F%E7%8C%BF%E5%BA%94%E8%AF%A5%E4%BA%86%E8%A7%A3%E7%9A%84%E5%86%85%E5%AE%B9%E4%BB%A5%E5%8F%8A%E7%A8%8B%E5%BA%8F%E7%8C%BF%E5%A6%82%E4%BD%95%E5%BC%BA%E8%BF%AB%E8%87%AA%E5%B7%B1%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%AE%97%E6%B3%95%E7%AF%87%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p> 记得LZ的第一篇博客发于2013-01-27 16:10，是LZ有一次上班闲下来的时候写的一篇文章，关于Jquery源码的研究成果。至今为止，断断续续也写了大半年博客，自从写博客以来，LZ间断性的收到过不少猿友的提问，这些提问中有很大一部分，是问LZ这样的问题，有很大的重复性与近似性。</p><p>​      “LZ，你不是学计算机的，你是怎么学习的？”</p><p>​      “LZ，你是怎么看书的，为什么我看着看着就玩游戏看电视去了？”</p><p>​      “LZ，你都看些什么书啊，能不能给点建议。”</p><p>​      “LZ，你平时下班回去都是如何学习的？”</p><p>​      “LZ，我天天加班，没时间学习，怎么办啊？”</p><p>​      “LZ，我工作好几年了，可是感觉技术没什么提升，怎么补救呢？应该看点什么书呢？”</p><p>​      “LZ，你觉得Java Web和android哪个更好呢？”（这个问题，真的是难住LZ了，0.0）</p><p>​      </p><p>​      这些问题总结起来主要有两种，第一种是不知道要看什么，第二种是看书看不进去怎么办。</p><p>​      针对不知道看什么这种问题，说真的，LZ很多时候无法回答，因为我们从事的工作内容可能不同，比如LZ是JAVA，你是.NET，LZ是web，你是移动。就算恰巧我们做的领域几乎都一样，应该看那些书也是不能一概而论的。比如可能LZ想做架构师，而你想做技术总监，可能LZ想做研发经理，而你想做项目经理。</p><p>​      因此LZ觉得不能把自己看过的或者准备看的书名哗啦哗啦往那一堆，然后说，“喏，我都看这些，你也跟着看吧！”</p><p>​      不过尽管我们的领域可能不同，但是既然都是程序猿起家，肯定还是有一定的共性的，本次就以LZ的见解来简单说一下，程序猿必须了解的知识是哪些，之所以LZ没有说必须看的书有哪些，还是因为那句话，知识有共性，书没有共性，找到适合自己的就行。</p><p>​      【这些话是后来LZ加上来的，没想到不知不觉写一个算法写了这么长，我去，善了个哉的，由于时间关系，本次LZ就将本文又拾掇拾掇，写成（算法篇）了，后面再补上其它的内容。】</p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a><strong>算法</strong></h3><p>​      有的猿友可能要说了，LZ你这不是废话吗？程序猿懂点算法最好，这事谁不知道？还用你来教啊？</p><p>​      猿友们莫要激动，要蛋定，请耐心看下去。</p><p>​      首先LZ不得不承认，我们很多时候几乎用不到算法。其它不说，就说LZ现在的工作，是针对企业IT建设的开发工作，大多数情况下都是以业务为主的工作，猴年马月能让你用到算法，哪怕是一个冒泡排序。</p><p>​      但是，but！</p><p>​      LZ想说的是，首先，我们说要掌握算法，并不是说你要把《算法导论》仔仔细细的来一遍，到时候LZ给你随便出个算法，你都能在一分钟内轻松搞定。</p><p>​      不是这样的，no！</p><p>​      那到底要如何？</p><p>​      我们先不忙说到底是怎样的，我们先把文章的对象范围限制一下。</p><h3 id="对象范围"><a href="#对象范围" class="headerlink" title="对象范围"></a><strong>对象范围</strong></h3><p>​      这里首先限定下对象范围，是为了避免引起不必要的争议，更是为了避免给不适合的人带来不好的建议。因此如果你尚且是一位学生，LZ没什么好说的，如果有算法这门课，那么你只管好好学习就好了，以下内容与你无关。</p><p>​      LZ这里所说的对象范围，首先得是已经毕业参加工作的，而且主要是指那些大学是非计算机专业，没有算法课程，或者大学虽然是计算机专业，但是压根就没怎么认真学过算法，或是一毕业就将算法全部还给了老师们的这部分人。</p><p>​      总而言之，言而总之，这里的对象范围主要是指已经工作，但是算法不怎么地的这部分人，倘若你的算法原本已经高深莫测，那么请参看“如果你尚且是一位学生”。</p><h3 id="算法与工作"><a href="#算法与工作" class="headerlink" title="算法与工作"></a><strong>算法与工作</strong></h3><p>​      说真的，真正工作了以后，哪有时间让你研究那几百上千的算法？</p><p>​      更重要的是，我们研究这些算法，就算全部研究透了又能怎么样呢？</p><p>​      或许有的猿友可能会说，研究透了，BAT随我挑啊。</p><p>​      LZ不得不承认，全部掌握了当然是有好处的，那我们把排名前十的语言全部学会进去的概率就更大了，难道要去学吗。我们参加了工作以后，毕竟时间有限，相信大部分已经工作了的人都深有感触，随便学点什么东西，时间都是挤出来的。</p><p>​      这就牵扯到一个取舍问题了，我们费尽心思的去学习这么多算法，有这个必要吗？</p><p>​      如果你不能在研究完所有的算法以后，创造出新的算法，或者说在算法领域有所成，说真的，就算是BAT，也不一定就仅仅因为你懂几十几百个算法就要你的，而且他们也肯定没时间去考试你那么多算法。因此，疯狂的学习算法显然是没有必要的。当然了，如果你每天的工作本身就是与各种稀奇古怪的算法打交道的话，那LZ就不说什么了。</p><p>​      那为什么LZ还支持猿友们学习算法呢？</p><p>​      这里LZ先给各位讲一个LZ的小故事，本故事几乎是真实的。</p><h3 id="小故事"><a href="#小故事" class="headerlink" title="小故事"></a><strong>小故事</strong></h3><p>​      LZ非常清楚的记得大学里教LZ高等代数的老师，那是一位非常值得尊敬的老师。</p><p>​      有一次上课，同学们都在各自忙着自己的任务，比如偷菜的，发短信的，补觉的，更有甚者，是跟身边的女朋友亲热的。</p><p>​      老师看到这种情况，就不慌不忙的说，“你们是不是觉得学数学出去没用？”</p><p>​      异口同声的，绝对没有商量的，同学们答：“是！”</p><p>​      老师听到后没有露出任何尴尬的神色，而是自然的笑了笑说，“或许你们搞了四年的证明题，等你们出了校门，你们一道证明题也不会做了，而且工作中也很可能用不上，但是它给你的是四年的逻辑思维锻炼，是你潜意识里逻辑思维能力的提高，这，就是学了四年证明题给你最大的礼物，出了校门以后你绝对再收不到这样的礼物。”</p><p>​      说真的，当时LZ听到这句话，直接就和LZ的小同学们震惊了，但是不出意外，几乎所有同学，包括LZ，依然都是异口同声的，没有商量的，说：“切…！”</p><p>​      但是LZ却将这句话深深的记在了心里。</p><h3 id="小算即可"><a href="#小算即可" class="headerlink" title="小算即可"></a><strong>小算即可</strong></h3><p>​      小故事告诉我们，我们工作中确实不可能让我们去证明为什么两点决定一条直线，但是不得不承认这些证明的过程，会让你的逻辑思维能力得到锻炼。</p><p>​      对于证明题是如此，对于算法亦是如此。</p><p>​      因此LZ一直都说，小算怡情，大算伤身，强算灰飞烟灭（一位猿友在评论里补上的，0.0）。</p><p>​      小算就是为了时常锻炼我们的逻辑思维能力，让我们不至于在出了校门以后，看到一大堆的数学符号就想撞山丘。因此我们平时看些算法，还是有好处的，但是不可贪多，否则很容易得不偿失。</p><p>​      不可贪多主要有两个原因，一个是学习算法很容易枯燥，没有设计模式等这类内容看起来有意思。另外一个是，算法的迅速提高，很多时候对我们的工作没有太大帮助，我们浪费大量的时间在这上面有点亏。</p><p>​      因此，LZ还是觉得小算即可。</p><h3 id="LZ的小建议"><a href="#LZ的小建议" class="headerlink" title="LZ的小建议"></a><strong>LZ的小建议</strong></h3><p>​      具体如何学习算法，LZ的建议如下，觉得适合自己的猿友不妨尝试一下。</p><p>​      <strong>1、买一本你喜欢的算法书，可以是任何书，LZ对这个不做建议。</strong></p><p>​      <strong>2、制定一个周期，每到一个周期学习一个算法，比如一个月，不宜太长，也不宜太短。</strong></p><p>​      <strong>3、坚持，凡事不坚持，说什么都白说。一旦定好了时间，一定要雷打不动。</strong></p><p>​      这样学习算法的好处是，一个月一次或者某个周期一次，不会因为每天看一堆算法而觉得枯燥，而且长此以往的坚持，两三年就足够你掌握数十种算法，就算你想跳槽去BAT，算法上也差不多足够你去应付了。</p><p>​      更重要的是，这相当于每一个月都给了你一次逻辑思维能力的锻炼，这就跟锻炼身体似的，定期的锻炼身体对身体是有好处的，那么定期的锻炼逻辑思维能力，其实对逻辑思维能力的提高也是有好处的。</p><p>​      这样看来，那厚厚的算法书不应该再是你恐惧的东西，而应该是你犒劳自己的奖赏，你应该慢慢的去享受它，定期的享受一次逻辑思维能力的锻炼和挑战，而不是痛苦的快速把它干掉。</p>]]></content>
      
      
      <categories>
          
          <category> Book </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 左萧龙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个项目经理的自我反省</title>
      <link href="/2013/09/17/book/%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE%E7%BB%8F%E7%90%86%E7%9A%84%E8%87%AA%E6%88%91%E5%8F%8D%E7%9C%81/"/>
      <url>/2013/09/17/book/%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE%E7%BB%8F%E7%90%86%E7%9A%84%E8%87%AA%E6%88%91%E5%8F%8D%E7%9C%81/</url>
      
        <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>　　说起来，LZ升迁也快半年了，这半年多里，也算是久经沙场。见识了各式各样的人，也见识了各式各样的事，有勾心斗角，也有令人欣慰的事情。当初做程序猿时的单纯已经一去不复返，尽管无限怀念，但生活是要往前走的。</p><p>　　这一段时间里，糟心的事非常多，尽管LZ承担了很多压力，但LZ也知道，自己的表现其实有很多有待加强的地方。但是人的习惯是非常可怕的，有的时候改变其实很困难。这里LZ就自己认为所犯过的失误做一个罗列，算是对自己的警告。如果有与LZ相似的猿友，也可以共勉。</p><h3 id="凡事爱较真"><a href="#凡事爱较真" class="headerlink" title="凡事爱较真"></a>凡事爱较真</h3><p>　　LZ觉得这是自己最大的一个毛病，也是程序猿的通病。有的时候较真是一件好事，因为有的事情就是要一个水落石出的结果。但有的事情适可而止就好，不一定非得分出个胜负。</p><p>　　当公司大到一定规模时，就很容易出现责任不明确的情况。管理上可以弥补一部分，但完全避免是不可能的。这个时候，就经常会出现一些扯皮的事。</p><p>　　LZ曾经遇到过这种事情，就是系统当中的一个接口出现一个bug，而这个bug与另外一个系统有关。事实上这个问题两边谁改都可以，但LZ有个毛病，如果对方客客气气的说，“不好意思，这个问题我们当时没考虑到，你看能否你们改一下”，这个时候，LZ会很客气的回应对方，并把问题改掉。但如果碰见个难搞的主，直接上来就说，“这个是你们的问题，你们自己改一下吧”，这个时候，LZ就会拍案而起，势必要与对方争论个你死我活。</p><p>　　有时候，其实很简单的一个事，但就因为较真，双方僵持不下，问题迟迟不能解决。最终惊动领导，无奈之下，才不得不妥协改掉。当然，也存在最终领导判断是对方的过错，之后由对方承担，但这其实容易让对方嫉恨你，还是有点得不偿失。</p><p>　　最好的情况，应该是既能解决问题，又能节省人力，还得让对方是心甘情愿的给你改，而且不仅如此，还得让对方改完之后还会感谢你。这就需要一点技巧，也需要一点胸怀，LZ正在可劲琢磨，这就是交际，也是程序猿的弱项。</p><h3 id="不能很好的控制情绪"><a href="#不能很好的控制情绪" class="headerlink" title="不能很好的控制情绪"></a>不能很好的控制情绪</h3><p>　　这一点是LZ做了项目经理之后才感觉到的，或者说，才感觉的更加明显。以前作为一个小兵，有点情绪有时候也不敢吱声，偶尔爆发，也是很快就熄火。现在好了，十几号人听你差遣，脾气再大，别人也不敢说你，更加重了LZ的毛病。</p><p>　　平时的工作中，LZ在两种情况下，情绪非常容易失控。第一种，给对方解释东西，比如技术或者需求，对方死活不明白，其实这算是耐性不足。第二种，双方意见不一致，并且LZ确定自己是对的，这个其实是有点太过于自信。</p><p>　　由于LZ做了项目经理，以上两种事更容易发生了。比如第一种，LZ经常需要给组员讲解技术或者需求，这个时候，如果对方理解能力差，说了半天听不懂或者迷迷糊糊的，LZ就会不自然的音量提高，气势压迫。再比如第二种，一般都发生在技术方案的讨论上面，可能是LZ对这方面也比较自信吧，一旦遇到双方意见不一致，不管对方是谁，哪怕是等级高于LZ，LZ也会义无反顾的拍案而起。</p><p>　　其实很多事情，LZ的做法是对的，但方式太过于粗暴，应该学会用温和的方式教导或者说服别人。不过不管怎么说，脾气差这一点没什么好说的，必须改，往死里改！因为LZ内人也反应过此问题，0.0。</p><h3 id="自私"><a href="#自私" class="headerlink" title="自私"></a>自私</h3><p>　　LZ从小到大都是被别人迁就着长大的，不得不说，LZ本身也确实学习能力不错，所以不管到了哪，总能靠自己证明自己的实力。被别人迁就习惯了，就容易凡事只想自己，这是很可怕的习惯。</p><p>　　比如平时加班的时候，有时候会很晚，尽管LZ年龄上其实比很多组员都小，但毕竟是领导，这个时候，领导应该保证组员们的安全，或者说关心组员们的安全。但LZ早先的时候，可以说是不闻不问，分开时只一句拜拜就完事了。其实这是一件非常小的事，可能就是问一句，“大家都住哪？怎么回去？路上小心！”。不过自私的本性导致LZ根本完全意识不到这件事，尽管这一件事不会有太大影响，但日积月累，其实会显得LZ没有领导的风范。</p><p>　　作为领导，需要多为别人着想，这是一种习惯，是一种自然而然的行为，要从心里上发生变化。其实说自私也有点严重了，但要想成为领袖，而不仅仅是个小领导，就要有这种心态。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>　　上面三个是LZ最大的毛病，或者说是LZ自我认识的一个过程。其实LZ的性格作为领导也有很多优点，这种自夸的话就不在这里废话了，但LZ个人觉得，认清自己的优点与认清自己的缺点同样重要。就像LZ之前博文里的一句话一样，天生我材必有用是对的，但怕就怕你一辈子都不知道你有啥用。</p><p>　　尽管LZ已经在试着蜕变，但就目前来看，最多算是改掉了20%，以后还必须再接再厉，时刻用以下几句话提醒自己。</p><p>　　1、解决问题是根本，多余的话不说。</p><p>　　2、想拍桌子之前先YY一下北极的环境，冷静一下再说。</p><p>　　3、试着把所有人都当做自己的女朋友，为她们着想。</p><p>　　4、早点睡觉！</p>]]></content>
      
      
      <categories>
          
          <category> Book </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 左萧龙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么时候你才能够跳槽</title>
      <link href="/2013/09/17/book/%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BD%A0%E6%89%8D%E8%83%BD%E5%A4%9F%E8%B7%B3%E6%A7%BD/"/>
      <url>/2013/09/17/book/%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BD%A0%E6%89%8D%E8%83%BD%E5%A4%9F%E8%B7%B3%E6%A7%BD/</url>
      
        <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>　　由于LZ最近看书比较少，大部分时候在写自己的框架以及折腾工作的事情，所以最近技术类的文章就相对比较少了。当然，LZ最近的文章总量也在直线下滑，不得不说，人在江湖，身不由己。</p><p>　　今天和各位来谈谈跳槽的事，LZ也工作两年半了，虽说时间不算太长，但中间也见过不少跳槽的同事，有的时候，或许是一种无奈，但更多的却是错误的选择。跳槽这件事，在IT界十分频繁，因为靠技术吃饭，因此虽说好工作难找，但大部分人找工作并不是难事，所以就造成了这种现象。</p><h3 id="跳槽的几大原因"><a href="#跳槽的几大原因" class="headerlink" title="跳槽的几大原因"></a>跳槽的几大原因</h3><p>　　首先来说说跳槽的几大普遍原因，几乎大部分的跳槽都无外乎以下几种。</p><p>　　1、工资长时间按兵不动，难以实现屌丝逆袭，成就高富帅之身。</p><p>　　2、公司规模较小，升职空间几乎为零，升上去的唯一机会就是干掉老板。</p><p>　　3、公司文化难以苟同，比如无限制加班。</p><p>　　4、感觉在公司很受排挤，人际关系不佳，跟谁都说不到一块去。</p><p>　　5、公司不讲诚信，对员工如此，对客户也如此，在里面干活没有成就感，反而有罪恶感。</p><p>　　6、对于一部分女性同胞，还存在家庭原因跳槽的情况。</p><p>　　7、已不再爱程序猿了，想下海卖肉夹馍去。</p><h3 id="说说身边真实的故事"><a href="#说说身边真实的故事" class="headerlink" title="说说身边真实的故事"></a>说说身边真实的故事</h3><p>　　1、曾经有一位同事，在公司里感觉太悠闲，学不到东西，于是心生杂念，开始准备跳槽之事。结果最终还是如他所愿，让他找到了一家忙的要死的公司，连上个厕所都得三思而后行，可是事后与他联系，他却表示现在的工作还不如以前。不仅每天累的要死，但仍然感觉学不到东西，做的都是一些千篇一律的事。</p><p>　　2、还有一位同事，觉得自己的工资长时间按兵不动，于是忍无可忍，向上司提出要涨工资，结果是失望而归。最终还是选择了离开，在大约三个月之后，LZ在QQ上与其聊天，结果是他到现在还没找到工作，仔细一问，不是没工作，而是给他的钱全部和以前一样。</p><p>　　3、这是一位女性同事，由于自己已经是一位一岁小宝宝的妈妈，而且公司离家太远，即使在不加班的情况下，每次到家也都是9点以后了。最终她还是选择了离开，LZ对此深表理解，为家庭而付出事业的女性总是值得称赞的，但也是无奈的。</p><p>　　4、说说LZ本身，唯一的一次跳槽就是因为公司规模太小，也见不到业绩的提升。于是失望之时，选择了离开。最终的结果各位看过LZ博客的朋友想必也知道了，LZ在两年半的时间里顺利晋升为项目经理。</p><p>　　5、说说最后一位同事，这位同事平时话不多，LZ本身与其说过的话也不算太多，虽说LZ嘴比较爱动，但也仅仅是开开玩笑，乐呵乐呵，这与真正的沟通还是有一些不同的。目测他离开的原因主要是因为自己比较内向，而且别人又很少主动与之交谈，所以感觉自己比较孤单，最终选择了逃避。</p><h3 id="谈谈LZ的看法"><a href="#谈谈LZ的看法" class="headerlink" title="谈谈LZ的看法"></a>谈谈LZ的看法</h3><p>　　可以看出，上面有几个同事的跳槽其实是非常失败的，这里面最主要的原因，就是因为他们并没有对跳槽做比较深刻的思考。</p><p>　　就比如第一个同事，跳槽的原因是因为公司太闲，学不到东西。当时LZ私底下就跟他说过，不要期望任何一个公司可以把你培养成大神，能把自己培养成大神的人全天下只有一个，那就是你自己。</p><p>　　为什么？</p><p>　　道理很简单。如果你在工作当中能学到东西，那就说明你当下所干的活你并不熟悉，或者说以前没有接触过，所以你学到了新的东西。试想一下，假设你长期能学到东西，那岂不是你一直在工作中都处于这种状态，这种人公司还要你干什么，这是公司，不是学校。<strong>正常的学习道路应该是，你把当下的事做好，并在业余时间学习其它的东西。等公司发现了你还有其它才能的时候，它就会给你锻炼的机会，这个时候就是一个良性循环了</strong>。</p><p>　　再比如嫌工资低的那位同事，他最大的错误就在于没有认识到自己真实的水平，或者说没有意识到自己工资不涨的根本原因是什么。<strong>工资不涨当然是不行的，但是要搞清楚状况，到底是公司不够仁义，还是你的水平真的就只是在原地踏步</strong>。如果连这个都不搞清楚就贸然跳槽，只能是哑巴吃黄连，有苦说不出。</p><p>　　至于最后一位因为人际关系而逃离的同事来讲，虽说LZ后来与之没有再联系，但LZ并不看好这次跳槽，因为这种跳槽的原因，本身就是错误的。</p><h3 id="谈谈LZ自己的跳槽"><a href="#谈谈LZ自己的跳槽" class="headerlink" title="谈谈LZ自己的跳槽"></a>谈谈LZ自己的跳槽</h3><p>　　说到LZ自己的一次跳槽，从客观结果来看，还算是比较成功的，至少LZ达到了自己的目的。</p><p>　　为什么会成功？</p><p>　　个人觉得主要原因是因为，LZ在走之前进行了深刻的思考，而且对于跳槽的目标也非常清晰，就是要找一家大公司，并且最好是一家发展较快的公司，这样的话，机会也会更多，只要自己努力，就不怕没有施展的机会。</p><p>　　如果各位看过LZ的上一篇文章，就会知道，LZ在第一家公司任职时，当时的上司是非常不靠谱的，但是LZ并没有因此而跳槽。不是因为LZ甘愿被蹂躏，而是因为，你如何能确认你的下一任上司就会比现在的更好呢？说到底，无论这个上司多么给力，他总是一个凡人，只要是凡人，就会有缺点，保不齐你的下一任上司人品是不错，但是是个技术草包呢？到那时，难道你要再来一次跳槽吗？总之，对于人际关系这件事，LZ的个人观点就是，<strong>只要是因为人的原因而选择跳槽的，几乎都是错误的，因为这个世界上相似的人太多了，保不齐你下次遇到的人依旧如此，甚至更糟糕</strong>。</p><p>　　对于跳槽这件事来说，无论你跳的多么天衣无缝，跳槽总是有成本的。这个成本就是，你在之前公司的积累全部归零。到了一个新环境，你还需要再来一次，比如积累你的人际关系，积累你在公司的资历，积累你对公司技术体系的认知程度等等。</p><p>　　因此归根结底，<strong>跳槽是一件需要慎重思考的事情</strong>。到底要思考哪些事情呢？LZ个人觉得主要有以下几点。</p><p>　　1、找出自己萌生跳槽想法的最根本原因。</p><p>　　2、分析这个原因到底是个人造成的，还是其它因素客观造成的。</p><p>　　3.1、如果是个人造成的，就扼杀掉跳槽的想法，直到现状得到改变再说。</p><p>　　3.2、如果是客观因素造成的，分析一下是极个别现象还是普遍现象。</p><p>　　4.1、如果是普遍现象，强制自己去适应。</p><p>　　4.2、如果是极个别现象，请走人！</p><h3 id="结合LZ自己的例子"><a href="#结合LZ自己的例子" class="headerlink" title="结合LZ自己的例子"></a>结合LZ自己的例子</h3><p>　　根据上面给出的步骤，LZ给各位分析一下自己在第一家公司跳槽时的想法和思路。</p><p>　　1、分析根本原因：因为职位难以得到提升。</p><p>　　2、分析到底是个人造成还是客观因素：自己能力暂且不足是一方面，但就算能力足够，就公司的现状来说，也很难晋升。因此LZ认为是客观原因造成的，选择3.2。</p><p>　　3、分析到底是普遍现象还是极个别现象：公司规模小当然是极个别现象，因此选择走人，去一家更大的公司，选择4.2。</p><p>　　再说一个LZ其它的例子，这个例子在上一篇文章中也提到过，就是在LZ每天负责小功能、小bug而且还经常挨批的时候，曾经萌生过跳槽的想法，但最终LZ还是没走。当时的思路就是下面这样。</p><p>　　1、分析根本原因：工作本身难度较低，得不到应有的锻炼，而且得不到上司认可。</p><p>　　2、分析到底是个人造成还是客观因素：工作难度较低是客观因素造成的，但得不到上司认可却是个人原因造成的，总的来说，个人原因占的比例较大，因此直接选择3.1。</p><p>　　结合上面的分析步骤，本文的主题“什么时候你才能够跳槽”其实就能够回答了，就是你经过慎重的思考，结果发现走到了4.2的时候，就是你该跳槽的时候。尽管事无绝对，但事情往往是有规律可循的，本文就是帮各位总结一下这个规律，但各位也要懂得随机应变。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>　　</p><p>　　其实很多人在跳槽的时候并没有这么精细的思考，有时候甚至只是一时冲动，但结果往往是失败的，虽然不排除个别成功的例子，但那毕竟是极少数。慎重跳槽才是正道，尽管技术使你有了跳槽的资本，但是有句话说，<strong>水可载舟亦可覆舟，不要被你的资本冲昏了头脑，且行且珍惜</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> Book </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 左萧龙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>作为一个程序猿你必须会的技能----自学框架！</title>
      <link href="/2013/09/17/book/%E4%BD%9C%E4%B8%BA%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8F%E7%8C%BF%E4%BD%A0%E5%BF%85%E9%A1%BB%E4%BC%9A%E7%9A%84%E6%8A%80%E8%83%BD----%E8%87%AA%E5%AD%A6%E6%A1%86%E6%9E%B6%EF%BC%81/"/>
      <url>/2013/09/17/book/%E4%BD%9C%E4%B8%BA%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8F%E7%8C%BF%E4%BD%A0%E5%BF%85%E9%A1%BB%E4%BC%9A%E7%9A%84%E6%8A%80%E8%83%BD----%E8%87%AA%E5%AD%A6%E6%A1%86%E6%9E%B6%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>　　这篇文章主要来源于和群里猿友的聊天，有猿友问LZ该如何学习一个框架。LZ想了想，这确实是一个值得探究的问题，于是这篇博文就应运而生了。接下来LZ就和各位猿友分享一下LZ个人学习框架的一些方式和方法，或许对大部分人还是有一些启迪作用的。</p><h2 id="找到它的老家"><a href="#找到它的老家" class="headerlink" title="找到它的老家"></a>找到它的老家</h2><p>　　对LZ个人来说，当LZ想要学习一个框架的时候，首要做的就是找到它的老家。打开你的浏览器，输入网址：www.google.com（为何不是百度？因为我们学习的框架几乎没有china的），然后输入你想学习的框架，比如spring（本文以它为例，其余其实都是类似的）。</p><p>　　第一个出现的一般就是它的老家，就像下面这样。</p><p><img src="010121308311245.png" alt="img">　　</p><p>擦，剧情不该是这样的，导演掐了重新来一遍啊。该死的google老是这样。据之前LZ的某老师说，这都是度娘干的。</p><p>　　好吧，甭管是谁干的，我们只管不断F5即可，最终你会看到下面的画面。</p><p><img src="010123218076883.png" alt="img">　　</p><p>bingo。画面出来了。这就是spring的老家，我们想要研究它就从它开始吧。接下来请你默默的打开它的链接。是的，默默的。</p><h2 id="直入正题，找例子"><a href="#直入正题，找例子" class="headerlink" title="直入正题，找例子"></a>直入正题，找例子</h2><p>　　接下来我们就要直入正题了，进入它的页面后，你会看到这样的导航。</p><p><img src="010126238391462.png" alt="img">　　</p><p>看到了吗？看到了吗？</p><p>　　guides，LZ蹩脚的英文大概看出来它就是向导的意思，于是我们果断进来一看究竟。进来以后，你会发现一堆向导，这里就是你的百宝箱。</p><p><img src="010128571863376.png" alt="img">　　</p><p>里面有各种各样的例子供你使用。接下来你需要做的就是按照其中某一个一步一步的做下去，直到完成你的目的。比如你想做一个任务调度器，那么就果断进入Scheduling Tasks。接下来，你就看到了这样一个无脑学习的页面。</p><p><img src="010131309824063.png" alt="img">　　</p><p>看到了吗，你只需要ctrl+C/V就可以完成你的任务。不过这只是一个开始，因为这毕竟只是一个简单的例子，你还需要根据你当前的需要进行一些改变。如果你需要的正是这个例子，那么就再好不过了。</p><p>　　</p><h2 id="寻找文档"><a href="#寻找文档" class="headerlink" title="寻找文档"></a>寻找文档</h2><p>　　通常情况下，在你完成任务的过程当中，总会遇到这样或者那样的问题，就算没有遇到，如果想要学习一个框架的话，一个完整的说明文档往往也是你需要的。在接下来的过程当中，我们的任务就是寻找文档。这个过程往往是最困难和痛苦的，这与LZ蹩脚的英文有很大关系，所以每次找文档都让LZ痛苦并快乐着。</p><p>　　不过这里面总有一些大概的规律，比如doc、document、documentation这样的字样总是那么的亲切。而且我们不需要担心一个框架没有文档，因为对于开发它们的人来说，我们就是客户，就是上帝，所以他们必须要让上帝能看懂他们写的东西。否则的话，他们写的东西是没有客户的，没有客户就意味着没有创造价值，没有创造价值就意味着可能会被炒鱿鱼，被炒鱿鱼就意味着可能会被媳妇嫌弃，被媳妇嫌弃就意味着可能会被@#￥&amp;绿#&amp;%￥&amp;*</p><p>　　LZ并不会把文档看的太深入，主要就是看一些自己开发需要的东西，还有很重要的一点就是，从当中找到框架的核心实现原理。比如spring当中，IOC的相关内容就是它的核心实现原理，因为spring的所有框架（比如AOP、security等等）都是建立在IOC的基础之上的。</p><h2 id="寻找入口，跟踪源码"><a href="#寻找入口，跟踪源码" class="headerlink" title="寻找入口，跟踪源码"></a>寻找入口，跟踪源码</h2><p>　　这下例子也看过了，任务也完成了，文档也有了，如果我们想要更加深入的了解一个框架，那么源码就是必不可少的一个环节了。说起来还是得感谢JAVA的开发氛围，几乎所有的东西都是开源的，所以你总能找到源码。</p><p>　　标题当中提到了入口，所谓寻找入口，就是寻找一个框架的切入点。比如spring的入口就在web.xml当中的监听器，而struts2的入口就是web.xml当中的过滤器，常用缓存的入口往往存在spring管理的缓存的定制工厂bean当中等等。</p><p>　　找到入口，你就能从头开始调试，了解整个框架初始化的过程，以及初始化后是如何工作的。在跟踪源码的过程中，最好结合你的例子，搞清楚你的例子是如何运行的。比如刚才的定时器调度，搞清楚spring是如何帮你进行调度的，比如执行任务的线程是如何分配的，任务的触发是如何进行的等等。</p><p>　　</p><h2 id="找到框架的优劣势并努力体会它"><a href="#找到框架的优劣势并努力体会它" class="headerlink" title="找到框架的优劣势并努力体会它"></a>找到框架的优劣势并努力体会它</h2><p>　　说到这里，请各位猿友想象一下，当你在逛商场的时候，如果你想要买某一样东西，一般情况下，你总会在各个品牌或者同一个品牌的不同类型之间相互比较，如果你从不这么做，请允许LZ尊称你为“土豪”。</p><p>　　如果你这么做了，请仔细的想想，你是在比较什么？</p><p>　　当然是优势和劣势了！</p><p>　　对于我们程序猿来说，框架就是一个一个的商品，而我们就是这些商品的客户。如果你想要做一个能买到物美价廉的商品的客户，就必须了解各个商品的优劣势。只有了解了各个商品的优劣势，我们才能在众多的框架当中选择合适的框架，你说是吗？</p><p>　　所以，不用说，我们要想了解一个框架，就必须知道它的优劣势，尤其是劣势。优势一般在框架的老家当中就能找到，因为这是在为他们的项目吹牛皮呢，他们的官网自然不会忘了这一项。至于劣势，就需要自己根据例子、源码以及其实现原理好好体会一下了。</p><p>　　</p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>　　框架说到底就是一个商品，我们只是其中一个用户罢了。因此LZ不建议各位猿友把框架的研究当做毕生梦想，更不建议各位沦陷于研究各种各样的框架，或者去尝试各种框架的例子，并很自豪的对着镜子说“你好厉害，你竟然会这么多框架”。注意！请你至少完成了以上几件事，再说你会这个框架吧。</p><p>　　框架只是我们针对特定场景所作出的选择，因此我们只需要有学习框架的能力即可，千万不要想着能把全世界所有品牌的牛奶都尝试着喝一遍，如果你非要这么做的话，LZ保证你一定会死于非命的。这就像你买药一样，你只需要知道当你感冒的时候应该吃什么药，当你拉肚子的时候应该吃什么药就好。更好的情况是，当你万一有其它毛病时，你也可以通过一些途径找到适合你的药。</p><p>　　话已至此，LZ就啰嗦到这里吧。总之，深入的研究一下少数几个优秀的框架，还是非常有益的，但不要贪多，学会适可而止即可。</p>]]></content>
      
      
      <categories>
          
          <category> Book </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 左萧龙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大压力下的工作</title>
      <link href="/2013/09/17/book/%E5%A4%A7%E5%8E%8B%E5%8A%9B%E4%B8%8B%E7%9A%84%E5%B7%A5%E4%BD%9C/"/>
      <url>/2013/09/17/book/%E5%A4%A7%E5%8E%8B%E5%8A%9B%E4%B8%8B%E7%9A%84%E5%B7%A5%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>　　最近LZ负责了一个规模较大的项目，可谓是亚历山大。目前这个项目还未结束，离成功看似一步之遥，却走的非常艰难。由于项目上线时间比较紧，最近LZ是频繁加班，只不过与以往不同的是，这次是LZ逼着大家伙加班，而不再是被强迫加班的那个人。不由得感慨万千，有些事情确实是不吐不快。各位猿友就当是听听LZ的唠叨吧。</p><h3 id="项目由来"><a href="#项目由来" class="headerlink" title="项目由来"></a>项目由来</h3><p>　　首先，项目的由来必须要稍微介绍一下，以下简称该项目为A项目。A项目是一个“大”型项目，之所以说是大型，是因为它直接牵扯到四个项目组，并间接牵扯到两个项目组，共六个项目组。</p><p>　　最早的时候，A项目是由LZ的项目经理负责，产品经理也是有专人担当，那时候LZ还是一个程序猿，不过LZ当时在维护老的项目（以下简称B项目），因此A项目LZ可谓是一行代码都没写。后来产品经理先离开了项目组，换了一个产品经理。再后来，LZ的项目经理升职，没时间管理项目组，组里就很快来了一位研发经理，A项目则由新来的研发经理负责。至此，该项目的产品领导和技术领导已经换了一遍。</p><p>　　到了这个时候，LZ已经有些“小”领导的苗头，带领着两个女生依然维护老的B项目（这里PS一下，这里A和B项目其实是同一个project，再通俗点讲就是在eclipse里是一个project，而A项目其实就是B里面的一个模块，只不过这个模块比较大，所以单独立项了）。因此，当时虽然还是一个项目组，但却有种一分为二的感觉。LZ领着两个女生维护B项目，研发经理领着四个外包一个内部员工开发A项目。</p><p>　　后来A项目里唯一的内部员工因为个人原因离职，我们的研发经理就带着四个外包继续做A项目。但其实A项目的进展非常缓慢，因为负责A项目的测试人员从到公司到离职，不是结婚就是怀孕，要吗就是流产需要休息，一个星期五天班有四天在请假，整个就是来公司结婚生孩子来的，测试一度毫无进展。</p><p>　　没过一段时间，A项目唯一的测试人员也离职，至此，A项目彻底进入了零进展阶段，之前虽然慢，但隔三差五的还会测一测，让开发人员改改bug。正在此时，雪上加霜，负责A项目的研发经理和产品经理双双在同一时间离职。</p><p>　　当时，LZ依旧带着两个女生在维护B项目。不过由于研发经理和产品经理离职，LZ的项目经理因为升职为部门经理也越来越忙，自然而然，LZ就接手了整个项目组，这自然也包括了A项目。但此时的A项目，研发经理和产品经理换了一轮并全部离职，开发人员走了一个，测试人员一个都没有，真可谓是一个大大的烂摊子啊。</p><p>　　但是故事还没有结束，没过一个月，当初的四个外包又走了两人，真正的原A项目成员，仅剩两个开发。而就是这个月月底，其中一个开发也即将离开。到时，整个A项目的原班人马将只剩一个开发。</p><p>　　</p><h3 id="噩耗来临"><a href="#噩耗来临" class="headerlink" title="噩耗来临"></a>噩耗来临</h3><p>　　尽管A项目一度毫无进展，但LZ并未受到任何压力。因为这个号称去年8月份结项的项目，都拖到了今年3月份了，但似乎所有人都并不着急。LZ当然也不着急，本身LZ对这个项目就一无所知，而且LZ一直维护的B项目是公司的核心项目，因此就算没有A项目，LZ已经忙的团团转了。</p><p>　　结果美梦刚开始就结束了，就在4月份左右，业务部门某老大直接一封鸡毛信扔到我们CTO手里，要求务必尽快将A项目上线。CTO扛不住，自然一声令下，让手下的二把手着手梳理这个已经延期半年多的项目。梳理以后发现，这种牵扯到这么多项目组的项目，必须设定一个总负责人，否则如何协调这么多项目组合作开发并配合联调改bug呢。</p><p>　　是的，你没有猜错。LZ就在这个时候成了这个冤大头，总负责人最终定的是LZ。不过说实话，这也在LZ意料之中，毕竟这个项目原本就属于LZ的项目组，而LZ的项目经理现在是部门经理自然不太会去管具体的项目，剩下的就只有LZ了。</p><p>　　当时A项目的代码已经上了UAT（虽然有不少人都知道，这里还是普及一下，UAT就是用户验收测试环境），而由于当时A项目的测试是三天打鱼两天晒网，因此当时A项目在上UAT之前根本就没有经过完整的测试，整个项目可谓漏洞百出。</p><p>　　意料之中，UAT得到了用户的强烈不满，偶尔也会有业务同事找LZ反应UAT的糟糕状况，让LZ尽快解决。当时LZ也协调过多次，组织几个项目组一起解决并每周反馈各自的问题，但都效果不佳。</p><p>　　原因很简单，LZ的项目组与其它几个项目组都是同级关系，平时互不相干，也没有上下级关系。LZ的项目组属于研发X1部，而其余几个项目组有X2部的，也有X3部的，X1部的部门经理就是当时LZ的项目经理，而X2部和X3部也有各自的部门经理。</p><p>　　有时候，LZ也会求助本部门的部门经理，让他去找其它两个部门的部门经理，再由两个部门经理协调下面的项目组配合我。但实际效果却非常一般，毕竟我们X1部的部门经理和X2、X3部的部门经理同样是同级关系，依旧没有上下级关系，只能是求助，但称不上命令。因此对方虽然肯定会答应配合，但真正落实到项目组，其实效果已经非常弱化了。</p><p>　　就这样，A项目经历了艰难的两个月的UAT测试，但进展依旧缓慢。虽然比起之前几乎零进展好了很多，但却远远无法赶上业务部门要求上线的速度。没有办法，LZ只能一封鸡毛信要求各项目组配合实行两步走政策，并抄送给了各个项目经理、部门经理、CTO助理包括CTO本人。当时CTO几分钟内就回复了一封鸡毛信，责令大家尽全力配合。当时的LZ，就像拿到了尚方宝剑一般，当时的各大CTO助理以及部门经理，都纷纷向LZ表示，需要什么人配合尽管开口。如此大的权利，自然也意味着天大的责任与压力。</p><p>　　话说回来，由于A项目历时一年半，代码量巨大，因此光几个项目组合并代码就是一项很大的风险。于是LZ所设定的第一步就是先将代码上线，但不开通A项目功能，只保证原有功能不受影响。第二步才是在UAT环境测试无误的情况下，尝试开通A项目功能，达到上线的目的。</p><p>　　于是为了赶着做到第一步，加班的日子开始了。</p><p>　　LZ带着几个项目组加了一个星期的班，终于把这一年多的代码给放到了线上，并且没有影响到原来的功能和流程。但此时，其它几个项目组的同事已经有不少人怨声载道，纷纷对加班表示着愤慨。或许是X2部的某个项目组同事向领导反映了加班的痛苦，X2部部门经理直接一封鸡毛信就扔了过来，开始质问LZ，LZ思来想去，一封邮件写了又删，删了又写。</p><p>　　到底是有一说一，有二说二，还是忍气吞声？</p><p>　　或许大部分人会觉得LZ忍气吞声了吧，毕竟这才是明哲保身的明智之举。但各位错了，LZ一封鸡毛信直接杀了回去，倒是杀了个片甲不留，但LZ也知道，这下算是彻底把X2部领导得罪了。</p><p>　　不过好日子才刚刚开始，我们这才完成了第一步，而最难的还是第二步。于是接下来的日子，LZ又带领大家加了四天的班（每周二和周四是上线日），趁着上线日晚上，不影响业务的前提下，LZ开始带着大家直接在线上进行验证。这四天，LZ每天都是凌晨四五点才回家。开始两天是四个项目组、运维组、DBA组、配置管理组全部都得加班，没有LZ的允许不准离开。</p><p>　　后面两天，由于LZ的项目负责的是A项目流程的开始，结果与流程上紧随其后的一个项目组的接口出现了问题，导致流程一直走不到后面，于是LZ便让位于流程下游的两个项目组以及配置管理组正常下班，留下LZ和其余的一个项目组每晚调试接口。</p><p>　　说来也怪，A项目实在是非常不顺利，开发、测试、UAT环境已经用了半年多的接口，到了线上竟然不通。具体情况LZ这里就不多说了，介绍起来比较复杂。最终为了保障项目的进度，LZ决定采取保守方案，将接口更改为RMI通信先保证进度（因为LZ的项目与这个项目组已经使用了四年的RMI，而且更改的时间可以在两个小时内搞定），同时在有时间的时候，继续查找这个奇怪的问题。</p><p>　　结果这个决定竟然被一封鸡毛信就顶了回来，竟然遭到了X3部门的部门经理的反对，而且是严厉的反对。这让LZ一头雾水，对于LZ的这个决定，LZ思来想去也并没有觉得有什么不妥。仔细想想，或许是最近LZ一直在调用他们部门的人，换了谁，总会有点不爽吧。</p><p>　　但作为部门经理，不应该如此小肚鸡肠吧。这又回到了刚才的话题，有一说一，有二说二，还是忍气吞声？</p><p>　　当然要说！</p><p>　　这次还与上次不同，上次只是一时的口舌之争，这次可是真正的方案决策。如果不按照LZ所说的办，LZ敢说，进度至少再延迟一个星期，而到时候，背黑锅的还是LZ自己，毕竟这个项目名义上的负责人还是LZ。</p><p>　　于是LZ一封鸡毛信直接杀了回去，这次依然杀了个片甲不留，但是同样，X3部的部门经理LZ也彻底得罪了。这件事，也就仅仅是几天前的事。目前方案依然是按照LZ的方案走，明天就开始实施，结果如何还不得知，但LZ最近确实扛了不小的压力。</p><p>　　所谓进退两难，就是如此。进，得罪人的一件事。退，项目失败，领导另选贤良，LZ归隐山林。</p><p>　　</p><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p>　　LZ一直在想，这件事进展的这么不顺利，到底是因为什么？自从LZ开始玩DOTA，就明白一个道理。输了不能喷队友，一定是自己发挥的不好。因此LZ一直在想，自己是不是有什么地方做的欠妥，或者是决策有误。</p><p>　　但想来想去，LZ也没想明白到底哪里应该改善，除了那两次与X2、X3部部门经理的冲突，但就算如此，也最多是少得罪两个人，项目进度本身也不会有任何变化。而且要说加班，LZ可是至始至终一天没落，为何就没人理解LZ的压力与辛苦呢。想到这，LZ甚至有撂挑子不干的冲动。但理智告诉LZ，临阵脱逃，是万万不可。</p><p>　　如果此时LZ逃了，那么将来必定难成大事，俗话说一朝被蛇咬十年怕井绳，同样的一件事上，你被打垮一次，那么下一次你就连接都不敢接了，更别提把事情办成。这件事，LZ绝对不允许它发生，LZ必须拿下这关，哪怕再困难。</p><p>　　这次事情虽然还没有结束，但也让LZ明白，没有人会在你一无所获的时候理解你，大家理解你的前提是，你把事情干成了。事情干成了，你的所有辛苦都将是可歌可泣的，如果事情失败，你的所有辛苦都将是你无能的表现。</p><p>　　因此，这件事，LZ必须不择手段拿下！</p>]]></content>
      
      
      <categories>
          
          <category> Book </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 左萧龙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如果你是面试官，你希望你未来的同事具有哪些能力呢？</title>
      <link href="/2013/09/17/book/%E5%A6%82%E6%9E%9C%E4%BD%A0%E6%98%AF%E9%9D%A2%E8%AF%95%E5%AE%98%EF%BC%8C%E4%BD%A0%E5%B8%8C%E6%9C%9B%E4%BD%A0%E6%9C%AA%E6%9D%A5%E7%9A%84%E5%90%8C%E4%BA%8B%E5%85%B7%E6%9C%89%E5%93%AA%E4%BA%9B%E8%83%BD%E5%8A%9B%E5%91%A2%EF%BC%9F/"/>
      <url>/2013/09/17/book/%E5%A6%82%E6%9E%9C%E4%BD%A0%E6%98%AF%E9%9D%A2%E8%AF%95%E5%AE%98%EF%BC%8C%E4%BD%A0%E5%B8%8C%E6%9C%9B%E4%BD%A0%E6%9C%AA%E6%9D%A5%E7%9A%84%E5%90%8C%E4%BA%8B%E5%85%B7%E6%9C%89%E5%93%AA%E4%BA%9B%E8%83%BD%E5%8A%9B%E5%91%A2%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>　　前几天LZ经历了2014年的第一次面试，与以往不同的是，这次LZ终于坐在了面试官的位置上。尽管这只是第一次，但其实LZ本人的感想颇多，于是就干脆开篇博文与各位猿友探讨一下，之前在LZ的交流群当中也与不少猿友研讨了一番，还是颇有收获的。</p><p>　　首先来说说LZ为何会突然自己去面试（以前主要是LZ组里的研发经理负责），这其实是LZ自己要求的。起源就是因为最近LZ的组里新来了两个新人，不过他们现在已经走了，来的时候是属于公司内部的调动，据说这两个人来之前就已经递交了辞职报告。不过尽管是来也匆匆去也匆匆，但这两位短暂的新同事还是让LZ的心里萌生了一个想法，那就是以后组里再来新同事，LZ还是希望自己可以面试一下。</p><p>　　原因就是因为，由于LZ工作中职责的变化，经常需要给组里的同事分配一些任务，当时来的两个新人也是交给了LZ，让LZ没事可以考虑给他们分配点任务。但是当LZ考虑将任务分配给他们的时候（其实从他们进来到离开的大约3天里，LZ还没来得急分配任何任务），才发现自己竟然对他们的性格、做事风格、技术水准等等一概不知，这如何让LZ给他们分配任务？</p><p>　　于是LZ果断告诉组里的研发经理，以后组里再来人，最好让LZ也面试一下，否则无法掌握组员的真实情况。由于LZ组里的情况比较特殊，这里还需要啰嗦两句。LZ组里之前的项目经理升职为部门经理了，但依然挂着项目经理的职位，但其实已经不管具体的事宜了，当时研发经理还不在（后来招进来的），于是随着原项目经理因为部门的事情越来越忙，当时组里的大部分事宜就意外的全权交给了LZ。目前组里的情况是LZ和研发经理一起管理组里的所有事宜，偶有大事，也会询问一下已经升职的项目经理。</p><p>　　就这样，当天下午，LZ便跟着研发经理先去旁听了一次，后来又专门单独进行了一次面试，总体来说，这两次面试还是让LZ多多少少有了一些想法。另外还需要一提的是，这两次面试都是针对外包同事的面试，与公司内部招人略有不同，主要区别在于外包同事主要看重实战能力，内部招人主要看重个人潜力。</p><h3 id="旁听与面试"><a href="#旁听与面试" class="headerlink" title="旁听与面试"></a>旁听与面试</h3><p>　　所谓旁听，很简单，LZ就是坐在那里一动不动，一句话也不说，偶尔对着我们研发经理（以下简称QY）和面试者（以下简称小A）笑一笑，这就是LZ当时的任务。</p><p>　　整个面试过程中，一开始小A说的头头是道，包括对自己的定位，离职的种种原因等等。不过LZ从小A一系列的回答当中，感受到了自信以及些许的无奈。后来牵扯到技术问题时，小A的回答就让LZ非常不满意了。或许是因为前面整体感觉还是不错的，沟通表达能力不错，而且看得出来人也非常机灵，4年工作经验，这让LZ对小A还是充满了期待。</p><p>　　最终LZ和QY一致认为，面试结果为未通过，于是复试的机会就没有了。当时QY问的问题LZ也记不太清楚了，但都是非常简单的。比如LZ印象最深的一个问题，在Jquery当中，如何使用选择器选中一个id为abc的div当中所有的li标签。这道题LZ个人觉得是使用SSH/I以及jquery进行web开发的基础问题，但是这位4年工作经验的小A竟然直接说不知道，这让LZ实在无法接受。</p><p>　　接下来，QY便给了LZ一份简历，让LZ自己单独去面试，这次才算是LZ真正的第一次在面试当中充当面试官的角色。于是，LZ一个人拿着简历与面试者填写的报到表，来到了前台，报到表上写着期望薪资8500，工作经验也是4年。LZ至今真正的程序猿工作经验才2年3个月，说真的，要不是之前小A的表现，LZ还不敢来面试4年工作经验的人，不过LZ面试的这个人是89年的（以下简称小B），年龄上倒是没LZ大，毕竟LZ毕业虽早，但并不是一开始就做了程序猿。</p><p>　　一到前台，LZ就看到到处都坐着等待面试的面试者，由此也可见，就业的压力确实在慢慢增加。当时刚好面试的会议室都有人了，于是LZ带着小B随便找了两个没人的工位，便开始了LZ人生的第一次面试官之旅。</p><p>　　一开始LZ先让小B做了一个简单的自我介绍，从简单的自我介绍当中可以看出，小B的表达能力以及心理素质比较一般，因为LZ能明显的感觉出来对方十分紧张，作为一个工作了4年的面试者，这让LZ十分不解，而且当时小B的声音非常小，以至于有一部分LZ都没有听清。</p><p>　　之后LZ便开始询问一些生活以及非技术方面的问题，比如平时喜欢看书吗、当初为何离职等等一系列问题。总的来说，通过这些问题的回答，LZ得出的结论是，个人没有多大的上进心，对技术没有相应的热情，但LZ能看出来，小B非常想进LZ的公司，这点与小A不同，小A完全没有给LZ这种感觉。因此这一关LZ还没有下定论。</p><p>　　不过事情往往出人意料，后面LZ问小B技术问题时，才发现小B的表现还不如之前的小A。几乎LZ问的所有问题，小B都没有回答上来。最重要的是，很多开放性问题，小B直接就说不知道，哪怕是一些错误的见解都没有。最让LZ惊讶的是，LZ问小B有没有自己比较擅长或者还算比较了解的内容，能不能给LZ讲一下，小B思考了大约3秒，笑了笑说了句好像没有。</p><p>　　当LZ把这些感受告诉交流群里的猿友时，有猿友表示是不是LZ问的问题太难了。其实LZ一开始觉得自己的问题真的非常简单，但被猿友这么一问，再加上两个4年工作经验的人都不知道（有些问题是之前QY问过小A的，LZ也问了小B），LZ才开始真的怀疑是不是自己问的太难了。但事实证明，LZ问的问题真的很简单，因为交流群里的猿友已经帮LZ鉴定过了。</p><p>　　以下LZ写上几个LZ还尚且记得的问题，各位猿友可以看看这些问题是否很难呢？如果恰巧小B也能看到这段内容，也希望小B好好思考一下自己的未来，是否还要继续这样下去，是否需要时不时的充实下自己。</p><p>　　1、</p><p>　　LZ：SSH当中，哪个最重要？为什么？</p><p>　　小B：spring最重要，因为spring算是一个粘合剂。（不太满意）</p><p>　　2、</p><p>　　LZ：IOC都有哪些好处呢？</p><p>　　小B：不知道。</p><p>　　LZ：好吧，那用IOC和不用IOC有什么区别呢？</p><p>　　小B：不用自己写new了。（理解太浅了）</p><p>　　3、</p><p>　　LZ：AOP的原理是什么或者说是通过什么实现的呢？</p><p>　　小B：不知道。（这个不知道尚且理解吧，因为之前的小A也不会，而且LZ回去问了组里的组员，也只有25%的会）</p><p>　　4、</p><p>　　LZ：hibernate和ibatis有什么区别呢？</p><p>　　小B：不知道。（不太满意，至少应该可以说出一两点）</p><p>　　5、</p><p>　　LZ：jquery中能发送ajax的方法都有哪些？</p><p>　　小B：不知道。（十分不满意，像ajax、get、post都是最常用的方法）</p><p>　　6、</p><p>　　LZ：如何使用jquery的选择器选中页面中所有name为username的radio框？</p><p>　　小B：不知道。</p><p>　　LZ：我提示一下你，选择器当中有冒号你知道吗？</p><p>　　小B：不知道。（非常不满意）</p><p>　　7、</p><p>　　LZ：jsp和servlet有什么联系？</p><p>　　小B：不知道。（非常不满意）</p><p>　　8、</p><p>　　LZ：设计模式你了解吗？</p><p>　　小B：只知道常用的几个。</p><p>　　LZ：那比如单例模式，你能说下大致应该怎么写吗？</p><p>　　小B：不好意思，忘了。（不太满意）</p><p>　　9、</p><p>　　LZ：你有没有自己觉得比较擅长或者还算比较了解的内容给我讲一下吧。</p><p>　　小B：不好意思，好像没有特别了解的。（这是LZ问的最后一个问题，其实是想给小B一个机会好好展现下自己，说下自己厉害的地方，可惜。。）</p><p>　　LZ也只记得这么多了，LZ在面试当中可以看得出来，小B当时十分紧张（这点小A是完全没有的，但是这样也有坏处，小A很多不该说的话也说了），但是紧张并不能作为全部都不知道的借口，再紧张也不可能全忘了吧？而且从另外一方面来讲，紧张也正是因为自己掌握的不够好的表现。</p><p>　　</p><h3 id="面试官面后感"><a href="#面试官面后感" class="headerlink" title="面试官面后感"></a>面试官面后感</h3><p>　　当时面试小B时，说真的，LZ差点就动了恻隐之心，这点在旁听小A时是没有的，因为小A是那种充满自信的人。面试时看着对面坐着一个紧张兮兮，每当自己回答不上问题就会露出失望神情的师弟，LZ还是比较同情的，毕竟都是走的同一条路，而且他一直回答不上来，让LZ觉得自己有点像喜欢刁难面试者的面试官，尽管LZ知道事实并非如此。</p><p>　　或许小B的工作经历有一些水分，毕竟真正4年工作经验的人不会差到这种地步。如果4年工作经验真是这种水平的话，LZ这两年的成长速度岂不是变态？但LZ多多少少也表示理解小B的处境，很多时候，很多人，为了生活，不得不伪造自己部分的工作经历，最终可能还是会被面试官发现，这其实是很打击自信心的。但是LZ还是要说一句LZ的真实感受，伪造自己的工作经历其实是害了自己，因为不同经验的人，要求是不一样的。同样的技术水平，作为4年工作经验来说，或许是非常差的，但如果是1年工作经验来说，可能就是非常优秀的了。伪造工作经历完全无法帮助你进入公司，往往还会起到反作用，因为要求也会变高。唯一的好处或许就是能让你获得一个面试机会，但其实这只是浪费时间罢了，而且还可能会大大打击你的自信心。</p><p>　　当然，尽管内心有些同情，但LZ还是毅然决然的写了“未通过”三个字。毕竟LZ也要为公司负责，同时为自己负责，招聘绝不是同情心泛滥的时刻。况且，如果LZ以后经常面试，或许会连这点同情心都没了，因为见的多了，自然就淡了。但LZ还是希望自己能一直保持这种同情心，不太希望自己变的麻木不仁。</p><p>　　送走小B之前，LZ还特意问了下小B有没有什么要问LZ的，最终小B还是非常客气的让LZ给他一些建议。LZ很诚恳的表示，应该多学习一些框架的原理，包括没事多看看框架的源码，这对以后是有很大帮助的。</p><h3 id="心中理想的那个他-她"><a href="#心中理想的那个他-她" class="headerlink" title="心中理想的那个他/她"></a>心中理想的那个他/她</h3><p>　　看到标题各位猿友可不要误会了，这里并不是说的你爱的或者爱你的那个他/她，而是将来与你一起工作的那个他/她。</p><p>　　因为以后LZ可能需要经常面试，所以LZ心里当然先要有自己的标准，目前来说，外包同事的要求比较简单，而且一般只招3年以上的，只要沟通表达能力可以，技术过关，没有致命的缺点，就基本上差不多。但是对于内部招人来说，还是有一些要求的，抛开技术不谈，以下是LZ个人所希望未来的同事能够具备的素质。</p><p>　　1、对技术有激情，LZ希望面试时在谈到技术时，能看到面试者眼中的火花。</p><p>　　2、私底下有学习的行为，这说明了面试者的上进心和毅力。</p><p>　　3、独立分析和解决问题的能力（这个能力也包括人际交往能力，因为可能你接的需求需要其它项目组的配合，LZ只会将人介绍给你，后续的交流需要自己能搞定），LZ不希望进来以后，交给你的任务几乎还要LZ自己帮你做一遍。</p><p>　　4、悟性高或者说自学能力比较强，这一点或许LZ的要求有点高，但LZ确实比较喜欢一点就透的人，因为LZ的耐心实在不怎么样。</p><p>　　5、沟通表达能力好，自己的想法能表达清楚。</p><p>　　6、做事敞亮，不玩为官之道。</p><p>　　7、最好能抽烟，这样我们交流的机会会比较多。</p><h3 id="你心目中的那个他-她是什么样子"><a href="#你心目中的那个他-她是什么样子" class="headerlink" title="你心目中的那个他/她是什么样子"></a>你心目中的那个他/她是什么样子</h3><p>　　基本上LZ心目中的完美要求就是以上这7点吧，其中有一些要求是LZ比较个人化的要求，并不是每个人都喜欢的。不过这也很正常，毕竟这就跟找对象一样，萝卜白菜各有所爱。相信各位猿友心目中也肯定会有自己的一些要求，如果抛开那些世界通用的要求，你有什么特殊的要求呢？不妨一起发表一下你的“定制”同事是什么样子的吧。</p>]]></content>
      
      
      <categories>
          
          <category> Book </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 左萧龙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈程序员的行业选择---程序人生</title>
      <link href="/2013/09/17/book/%E6%B5%85%E8%B0%88%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%A1%8C%E4%B8%9A%E9%80%89%E6%8B%A9---%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/"/>
      <url>/2013/09/17/book/%E6%B5%85%E8%B0%88%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%A1%8C%E4%B8%9A%E9%80%89%E6%8B%A9---%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/</url>
      
        <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>　　本篇博文接着许久之前的一篇博文《<a href="http://www.cnblogs.com/zuoxiaolong/p/life15.html">浅谈程序猿的职业规划，看你如何决定自己的未来吧。</a>》，继续探讨一下程序员行业相关的内容。</p><p>　　行业的选择不仅对于程序员来说非常重要，对任何一个人来说都是一样的。只不过对于程序员来说，行业更容易被忽略。从程序员每天热议的话题就能看出来，大部分的热议话题都是C#和Java哪个更牛B，或者IOS和Android哪个挣得钱多，很少看到程序员去讨论两个行业谁更有发展前景。</p><p>　　鉴于此，今天我们就来着重讨论一下程序员行业的选择，行业和语言一样，没有谁优谁劣，只是一种选择罢了。</p><p>　　另外在这里向猿友们汇报一下，上次博文中提到的艰难的项目已于8.1日按照预期上线，尽管LZ得到了CTO的好评，但LZ也非常清楚LZ付出了什么。后续LZ将尽全力保障项目的稳定运行，并在之后申请经费带着期间加班的同事一起happy一下，缓解大家之前加班的怨气。但就像LZ所说的，事情终归是办成了，所以LZ也算没有让猿友们失望，成了功臣而不是罪魁祸首。</p><h3 id="浅谈行业知识的重要性"><a href="#浅谈行业知识的重要性" class="headerlink" title="浅谈行业知识的重要性"></a>浅谈行业知识的重要性</h3><p>　　行业知识一直以来都是程序员非常容易忽略的，这主要跟程序员这个群体的普遍性格有关。</p><p>　　程序员的性格是什么？宅，闷骚，偏执，厌恶约束，有点自负，有点自卑等等一系列的特征，如果你不具备以上当中的任何一条，LZ只能说，“请联系我！”。</p><p>　　有不少猿友都对技术有一种偏执，也正是因为这种偏执，让一部分人成为了优秀的程序员，但也往往让他们失去了一些东西。作为一名程序员，技术自然是扎根之本，但只修内功，不修外功也是不行的。</p><p>　　以前LZ觉得程序员的内功是基础知识（比如算法，设计模式，计算机系统知识，网络协议等等），而外功则是解决各个问题的具体技术（比如解析excel需要poi，制作统计报表需要jfreechart等等）。现在想想，这样的划分其实是有问题的，像poi，jfreechart这类具体的解决问题的方式是没有资格称为外功的，它们只是像eclipse，pl/sql这类东西一样，最多算是一种工具。更形象的比喻应该是基础知识就是九阳神功，具体的技术就是乾坤大挪移，只要学好九阳神功，乾坤大挪移只需要在洞里花费几天就能学会。因此，如果你现在还沉迷于修炼九阴白骨爪，葵花宝典等各类顶级的杂牌武学，现在是时候醒悟了。</p><p>　　那么真正的外功是什么呢？真正的外功其实正是行业知识。</p><p>　　不少人肯定都看过武侠小说或者电视剧，内功与外功（或者叫招式）是相辅相成的。内功越强，同样的招式就会威力越大。更重要的是，外功越强，更能将内功发挥的淋漓尽致。</p><p>　　对于程序员来说，内功就是技术底蕴，外功就是行业积累。技术底蕴越强，当你带着同样的行业积累与别人谈判时，就会越具有冲击力。行业积累越深，就越能将你的技术底蕴彻底的发挥出来。</p><p>　　举一个不太恰当的反面教材。在LZ的公司里，有着这样一群人，他们被尊称为架构师，他们每个人都有着深厚的技术底蕴，但却只能每天无所事事，不痛不痒的插手着各个项目组的技术架构，技术体系，系统设计。</p><p>　　究竟是什么导致了他们尴尬的境地？相信现在不用LZ说，各位猿友也能猜到一二。正是因为他们整天处于一个相对来说比较纯净的技术环境，一些必要的行业知识或者说业务知识实在是太贫乏了，对系统当前要做的事情以及将来要做的事情缺乏深入的了解。因此哪怕内功再深厚，没有招式的话，是无法发挥出威力的。</p><p>　　或许有的猿友会说，不是无招胜有招吗？是的，没错。但是无招可不是说没有招式，而是要自己创造招式。</p><p>　　有不少程序员都会忽略甚至抵触行业知识，包括以前的LZ。LZ一度觉得，了解行业知识或者说业务知识就是浪费生命，原因很简单，如果换一家公司，不同的行业，那学习那些行业里的业务知识岂不是白瞎了吗。</p><p>　　现在想想，这个结论其实是有很大误解的。对于跳槽来说，如果是同行业的，那么在技术底蕴同等的条件下，更多的行业积累会让你的价值增加几倍甚至数十倍。就算到时候你真的换到了不同的行业，在之前的公司，通过你内外功兼修的方式，你也会更加容易挤入到更高层里，这样在换行业的时候，你的职位定位本身就会高出一些档次。况且，换工作本身就是一件重头再来的事，你最白瞎的是你在公司的积累，比如贡献的积累，人脉的积累等等，而不是其它别的东西。</p><p>　　以上结论都基于LZ到现在才认清的一个现实，那就是一般情况下，稍微大点的公司里，从来都不缺技术人才或者业务人才，但都缺技术和业务双双兼备的人才，因此这样的人在公司里是很容易得到重用的。</p><p>　　总之，成为一个技术大神固然是好的，但深入了解公司业务，让你的技术能力充分发挥，才能让你和你的公司更好的实现双赢。</p><h3 id="浅谈面试中的行业选择"><a href="#浅谈面试中的行业选择" class="headerlink" title="浅谈面试中的行业选择"></a>浅谈面试中的行业选择</h3><p>　　讨论完行业知识的重要性，我们来谈谈LZ最近面试的经历。最近LZ的项目组内，被LZ开掉了几位外包同事，因此需要一批内部员工补充进来。至于为什么要开掉这些人补充内部员工，这里LZ就不多做解释了，这些更多是管理方面的内容，与本文关系不大，这里只简单说说LZ面试的经历。</p><p>　　由于有了不少招人的指标，LZ也开始在繁忙之中抽时间筛选了大量的简历。LZ面试的人比较杂，从初级开发到研发经理都有，LZ问的问题也是千奇百怪。不过有一点是基本上不会变的，那就是只要是中程或中程以上级别的，LZ基本上都会问到一个问题，就是“你对我们公司是怎么看的”。</p><p>　　其实LZ问这个问题的目的很简单，就是考验面试者对行业以及未来的思考。如果抛开公司规模、公司性质（比如外企，私企，国企）等等这些属性，每一个公司最重要的属性就是它的行业。不过令LZ失望的是，真正能体会到行业选择重要性的面试者寥寥无几，甚至有6、7年经验的猿兄在回答这个问题的时候竟然跟LZ谈公司环境挺不错的，着实让LZ汗颜。</p><p>　　不过也有极个别的面试者对此有深入的思考，会着重强调选择我们公司是因为行业，而且会解释一下为何会选择这个行业。这种面试者会给人一种善于思考，目标清晰的感觉，就这一个问题就加分不少。</p><p>　　对于初级程序员，LZ一般不会问这个问题，因为初级程序员大部分情况下的原则是逮着一个工作就好，不太会也没必要去思考行业，而且也不一定有资格自由选择。这一点在之前职业选择的博文里LZ也提过，程序员刚入行的时候，行业并不是那么重要，除非你特别讨厌某个行业。但对于工作了三年以上的程序员来说，行业就是个人必须考虑的问题了。当然了，三年只是取个平均值，具体何时该考虑，也是因人而异的。</p><p>　　如果你现在正在准备面试，不妨对自己将要去面试的公司做一个简单的了解，或许会有不一样的收获。</p><h3 id="浅谈程序员常见的几种行业类型"><a href="#浅谈程序员常见的几种行业类型" class="headerlink" title="浅谈程序员常见的几种行业类型"></a>浅谈程序员常见的几种行业类型</h3><p>　　现在世界上现存的行业已经数不清了，但对于程序员来说，无非也就是几种类型。接下来LZ给各位猿友罗列一下这些类型的行业。特别要说一下的是，这些行业与语言一样，没有明显的好坏之分。</p><p>　　<strong>类型一：互联网</strong></p><p>　　互联网分为传统互联网和移动互联网，激情与创新是互联网行业的代言，机会与风险也充斥着互联网行业。</p><p>　　程序员是一群喜欢激情与创新的人，因此互联网行业往往被程序员所青睐。或许真的是这样，互联网公司的气氛与文化可能与程序员更加契合一点，但凡事都有两面性，加班也是互联网行业的专利，因为时效性在互联网行业是非常讲究的。</p><p>　　互联网行业的代表公司也是大家耳闻能详的，比如著名的BAT。进入这些公司往往是大多数程序员的梦想，但事实上或许是因为得不到的才是最好的，很多时候，一旦得到了，或许一切并没有自己想象中的那么美好。总之，萝卜白菜，各有所爱，孰好孰坏，谁又能说的清呢。</p><p>　　<strong>类型二：甲方</strong></p><p>　　甲方与乙方是相对的，一般这么叫是因为合同上的叫法。这里简单普及一下，甲方一般就是指软件的买方，乙方自然就是软件的卖方。两者是纯粹的利益关系，一切按照合同办事。但不管怎么说，买方的地位相对来说会比卖方高一些，因此甲方与乙方的项目经理往往完全是两种概念。</p><p>　　甲方公司一般充斥着各个行业，比如金融，物流等等。有的时候是直接购买乙方已经做好的软件，有的时候则是软件定制，也有的时候是直接外包给乙方开发等等。甲方的特点是客户的容忍度较高，毕竟是给自己公司做的，但缺点就是由于需求变化的代价非常低，因此甲方的程序员往往会面临频繁的需求变更。</p><p>　　这类公司的代表公司很多，比如LZ所在的公司，比如申通这类物流公司，都属于这一类。在这类公司里，一般能对某一个行业深入了解，但一般技术上的要求会低一些。</p><p>　　<strong>类型三：乙方</strong></p><p>　　乙方就是卖方，一般定位在软件行业。乙方由于一般是根据合同内容服务于甲方，因此相应的需求变更会少一些，毕竟甲方的需求变更一般是需要加钱的。但缺点就是，由于按照合同办事，因此项目必须按期交付，否则尾款就成了问题。因此在乙方上班的话，或许加班会非常频繁。这一点上，甲方相对来说会轻松一些，但都是相对来说，并不是绝对的。</p><p>　　乙方的代表公司一般就是一些软件公司或者外包公司，比如金蝶，华为，瑞友等等。在这类公司里，一般能了解到各个行业，对技术上的要求会高一些，因为要应对各个行业各式各样的需求，但很难对某一行业进行深入了解。一个是因为要跟着客户走，一个是因为一些核心的业务一般是不会让乙方来做的。</p><p>　　<strong>类型四：游戏</strong></p><p>　　游戏行业又分网游，手游等行业，游戏也算是一个类型的行业，总体来说，游戏行业与互联网的特点非常相似。相对于甲方乙方的这种公司来说，游戏行业和互联网行业中，程序员的地位会更高一些。但游戏行业与互联网一样，暴利之下隐藏的是巨大的风险，一旦失败，往往面临的只有倒闭，没有生还的可能。</p><p>　　游戏行业的程序员待遇相对来说会高一些，但也要看情况。凡事都不是绝对的，以某几个公司的工资水平来衡量一个行业，是有些不太合适的。游戏行业的代表公司也比较多，比如盛大，网易等等。</p><p>　　<strong>小结：</strong></p><p>　　以上这几种类型只是LZ对程序员常见行业的大体划分，没有任何官方依据，只是LZ自己的思考而已。本文所说的行业知识的重要性，主要针对目前在甲方和乙方的猿友们，在这类公司当中，行业知识是相当重要的。对于完全一样的技术水平来说，你对目前所做项目所处行业的了解程度，基本上能直接决定你的地位与作用，也就是说，很大程度上，可以决定你在公司的发展。</p><p>　　对于互联网和游戏行业来说，靠谱的创意可能更重要一些。这就需要你了解市场环境，了解大众需求，了解盈利模式等等。如果你能在技术修炼的基础上，加入这类知识的修炼，或许能让你在这两个行业里混的更加风生水起，比如让你去开发DOTA2，你最起码得天梯2000分以上吧。</p><p>　　总的来说，不论身在何处，技术都不是最重要的，或者说不是唯一重要的。这么说，有点自黑的嫌疑，但事实确实如此，LZ也不得不面对这个现实。除非你可以创造出一种新的科技，比如当年第一台计算机。</p><p>　　或许LZ这里会打击到一些新手们对技术的积极性，但猿友们也需要了解这些，可以少走一些弯路。技术始终是在为人服务，所以了解这个世界，了解这个社会，了解人，才能真正创造出有意义有价值的技术。LZ这里无意评论行业的好坏，也没有这个资历去评论，具体选择哪个行业还是要猿友们自己决定。LZ这里只是为了提醒猿友们，好好钻研技术是好的，但切勿把技术当作你的全部，这样你会失去很多其它重要的东西。</p><h3 id="浅谈程序人生"><a href="#浅谈程序人生" class="headerlink" title="浅谈程序人生"></a>浅谈程序人生</h3><p>　　程序员的一生特别像玄幻小说中的修炼者。开始的时候，要先学会内力（技术）才能进入修炼者（程序员）的行列。随着内力慢慢精进，就需要招式（行业知识，或者与此相似的非技术知识）来增加战斗力（工作能力）了。开始的时候，一招一式都会大大增加自己的战斗力，慢慢的，随着招式越来越强，需要的内力也越来越多，内力逐渐显现出不足（技术跟不上需求要求）。此时，又需要全力修炼内力。如此反复，整个人就会从初级武士（初程）逐渐升到高级武士（高程），直到打破瓶颈，成就武神（项目经理或者研发经理等等）。</p><p>　　原本以为到了武神就到了武之最高境界了，谁曾想在成为武神之后，飞升来到了另外一个世界。原来，这个世界上还有神域（到了新的层次会接触到更高层的领导，比如其它项目经理或者部门经理，CTO等），这里最低的等级都是武神，自己开始所在的，只不过是最低等的人间罢了。后来会发现，武神修炼的不再是内力和招式，而是神力（能力，比如办事能力，交际能力，也包括技术能力）和天道（个人素质，个人修养，个人天赋等软技能）。</p><p>　　于是，你会忽然醒悟，原来之前的内力（技术）只不过是神力（能力）当中的一种罢了，外面的世界非常之大，内力只是让你接触这个世界（社会）的开始而已，绝不是你的全部。</p>]]></content>
      
      
      <categories>
          
          <category> Book </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 左萧龙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈程序猿书籍的选择，你会如何选择你的爱书呢</title>
      <link href="/2013/09/17/book/%E6%B5%85%E8%B0%88%E7%A8%8B%E5%BA%8F%E7%8C%BF%E4%B9%A6%E7%B1%8D%E7%9A%84%E9%80%89%E6%8B%A9%EF%BC%8C%E4%BD%A0%E4%BC%9A%E5%A6%82%E4%BD%95%E9%80%89%E6%8B%A9%E4%BD%A0%E7%9A%84%E7%88%B1%E4%B9%A6%E5%91%A2/"/>
      <url>/2013/09/17/book/%E6%B5%85%E8%B0%88%E7%A8%8B%E5%BA%8F%E7%8C%BF%E4%B9%A6%E7%B1%8D%E7%9A%84%E9%80%89%E6%8B%A9%EF%BC%8C%E4%BD%A0%E4%BC%9A%E5%A6%82%E4%BD%95%E9%80%89%E6%8B%A9%E4%BD%A0%E7%9A%84%E7%88%B1%E4%B9%A6%E5%91%A2/</url>
      
        <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>　　本篇博文的想法来源于跟群里的猿友们的交流，LZ发现很多人会说自己很迷茫，不知道要学什么。之前LZ已经写过相关的文章，文章指出了程序猿需要掌握的一些内容，但是当中LZ也表达了一个观点，就是LZ个人不太喜欢给人推荐书籍。因为LZ觉得，书籍的选择与职业的道路一样，充满着个性化，每个人适合的都不一样。所以没有最好的书籍，只有适合的书籍，这和找女朋友是一样的。</p><p>　　写这篇文章的目的，是为了帮助一些迷茫的猿友们，走出书籍制造的迷雾森林，选择一条尽可能适合自己的最短路线走出来。鉴于一些猿友对书籍的选择毫无重心，浪费了很多无谓的时间。因此尽管书籍是比较个性化的，但是考虑到选择的路线还是有相同之处的，所以LZ就斗胆开了这么一篇博文，希望能给各位猿友一些有效的建议，以期能起到一些微薄之力。</p><h3 id="对象范围"><a href="#对象范围" class="headerlink" title="对象范围"></a>对象范围</h3><p>　　为了避免不必要的争议，LZ这里还是要限定一下读者范围。本文的读者应该是正在从事或未来即将从事程序猿一职的编码工作，并主要依赖于某一种程序设计语言的猿友们。倘若你并不打算成为一名悲催的程序猿，又或者你并不打算依赖某一种语言生存，而是准备做一个全能人士，那么本文对你来说已毫无意义，可单击浏览器右上方的叉叉按钮。</p><p>　　另外需要一提的是，由于LZ本人是非计算机专业出身，因此本文的内容对于中途改行做程序猿的朋友可能会更加适合一些。至于原本就是计算机专业的猿友们，可能会有一些不同，但这并不妨碍各位以此作为一个参考。不过LZ这里依然要扔出来那句话，此为LZ一家之言，各位猿友看完之后，还需要有自己的思考。</p><h3 id="浅谈深度"><a href="#浅谈深度" class="headerlink" title="浅谈深度"></a>浅谈深度</h3><p>　　很多人感觉迷茫的原因，就是因为自己懂的也不少，但是真要问自己有哪些特别擅长的东西，却发现竟然一个都想不起来，也就是所谓的深度不够。</p><p>　　大部分人肯定都希望自己的深度足够，生怕自己变成一个万能的废物。但是不知道各位猿友有没有思考过，到底何为深度？倘若你连深度是什么都不知道，又何谈提高自己的深度呢？</p><p>　　LZ这里要给深度下一个定义，以表示LZ粗浅的理解。在LZ个人看来，一个简单的理解，深度就是指在某一个领域的知识范围之内（这里特指技术方面），你知道很多别人不知道的秘密，通俗的理解就是你成为了某一个领域的专家，这就称之为深度。举个例子，对于Java和.NET来讲，都是运行在VM上的，那么如果你懂了VM的秘密，就说明你在Java和.NET领域当中，有了一定的深度，尽管这个深度只是一点点罢了。</p><p>　　换句话说，如果你深刻了解了某一个领域当中所有或者说大部分的知识，并将这些知识融会贯通，那么你就成为了这个领域的专家，也就是俗称的“你是有深度的”。因此这里的难度就在于，如何判断某一个知识处于我们所在的领域当中。</p><p>　　</p><h3 id="无脑选书"><a href="#无脑选书" class="headerlink" title="无脑选书"></a>无脑选书</h3><p>　　上面已经提到，我们增加深度的最大阻碍就在于，如何判断一个知识是否处于我们所在的领域当中，说的通俗一点，就是判断一本书我们是否该读。这也是造成很多人学习迷茫的主要原因，因为很多人选择书的方式是被动选择，比如让别人推荐，或者从网上《XXX必读的几本书》这种文章上拔下来的，尤其是某些博客大牛推荐的书籍，更容易引起新手们的无脑追捧。</p><p>　　为何从来不会自己选择书籍呢？</p><p>　　LZ的观点一直都是，不可不信，不可全信。高手们推荐的书籍自然是值得注意的，但是也要自己筛选，而且更重要的是要看时机，千万不可一股脑收下。除非你能保证，你在读任何一本高手推荐的书籍时，都能与他保持一模一样的客观与主观的环境。比如思维方式、技术水准、知识体系、工作经历等等，如果这些条件都一样，那LZ不反对你照搬无误的将这些书全部读一遍。</p><p>　　有的猿友倒不会无脑选择别人推荐的书籍，不过却更加糟糕。他们选择书籍的方式是一些非常奇葩的标准，比如太厚的不想看，太枯燥的不想看，看不懂的不想看等等。这种情况更加危险，这种完全根据自己喜欢来选择书籍的方式，纯属安乐死。之所以叫安乐死，就是因为这种选书方式，你会发现你看的非常舒服，因为不舒服的都被你排除掉了，但是却对你的提高十分有限。</p><p>　　这算是LZ见过的，两种最无脑的选书方式，也是LZ个人极其不推荐的方式。如果你现在还是处于这样的过程当中，请务必尝试改变这种方式。</p><h3 id="选书也是一种思考"><a href="#选书也是一种思考" class="headerlink" title="选书也是一种思考"></a>选书也是一种思考</h3><p>　　LZ推荐的一种选书方式，就是在思考中选择书籍，而且这种思考有时候比你读书更重要。估计有的猿友不服了，选个书而已，至于说的这么神秘吗。猿友们先遏制下内心的这种想法，LZ之所以这么说，肯定是有一些自己的理由的，绝非大放厥词。LZ说一个自己选书的例子，各位就知道LZ为什么这么说了。</p><p>　　第一本LZ读的书，是大名鼎鼎的Java宝典编程思想，当时读完以后，感觉对Java当中的概念清晰了很多。比如初始化、泛型、拆装箱等等一些比较基础但却很重要的内容，不过由于当时LZ只是第一次主动买书读书，因此并没有存货。于是接下来，LZ就开始思考接下来到底应该买什么书。</p><p>　　各位猜一下，LZ当时选择的书是哪些？当时思考了很久，LZ选择了两本书，一本是Java虚拟机相关的书籍，一本是编译原理这本龙书（电子版）。为什么选择这两本书，而不是其它的书呢？</p><p>　　因为LZ渐渐思考清楚了两件事，想要彻底明白初始化等一些Java内部机制的原理，答案就在Java虚拟机当中。而想要彻底清楚泛型和自动拆装箱等一些编译器给的糖衣炮弹，答案就在编译原理当中，更确切的说，是在Javac编译器当中。这一思考让LZ对Java的生态系统清晰了很多，因为LZ抓住了几本书之间的联系，而每本书其实就是一个大的知识点，将这些大知识点在你心中形成一个知识网，绝对比你读一本书的价值要大，这不正是传中说融会贯通的过程吗。</p><p>　　这样选择书籍还有一个附加好处，就是因为你想要的答案就在你所选择的书籍当中，因此你看起来大部分时候不会感觉无趣，甚至会十分迷恋也是正常的，这就要看你的求知欲和好奇心有多大了。</p><p>　　因此LZ给各位猿友一个建议，在每次读完一本书的时候，就将你现在已经读过的书在你心中形成一个关系图，然后寻找下一个节点应该在哪，这个节点代表的应该是一个知识点。只要你选定了下一个知识点，那么具体书籍的选择参考高手们推荐的书籍并非不可。</p><p>　　比如LZ当时选择Java虚拟机书籍的时候，就是看到的一位高手推荐的书籍。不过请注意LZ选择的顺序，LZ并不是先看到的这位高手的推荐，然后直接就去买他推荐的Java虚拟机书籍了，而是LZ先一步想要找Java虚拟机相关的书籍，后面才找到的这篇文章，进而才采用的这位高手推荐的书籍。</p><p>　　所以LZ更愿意回答“龙哥，我想找一本XXX（比如Java虚拟机这一类任意一个知识点）相关的书籍，你能给我推荐一本吗”这样的问题，而不是直接问LZ“龙哥，给我推荐几本书吧”这样的问题。说实话，LZ并不知道你的知识体系，你走到哪里了，该看什么了，恕LZ无法给你推荐任何书。</p><h3 id="LZ现在的知识体系"><a href="#LZ现在的知识体系" class="headerlink" title="LZ现在的知识体系"></a>LZ现在的知识体系</h3><p>　　LZ现在简单罗列一下自己的知识体系，这其实算是LZ选择书籍的路线，这其中不会包含任何一个具体的书名，只是一系列知识点的关联。另外，LZ是主Java的程序猿，因此这个体系图更多的是给Java的猿友们参考的。不过.NET的整体架构与Java还是十分相似的，因此对于.NET的猿友们来说，也并非毫无价值。</p><p><img src="26005208-68ff0e71bf4a4b9f9a9e1619914a7a38.png" alt=""><br>　　在此LZ必须声明，以上体系完全是LZ根据自己的情况所画的，因此不具备任何权威意义，任何人都可以根据自己的需要调整，而且图中的知识联络也并非十分严谨，只是LZ个人的一个简单的串联而已。图中所标注的Java领域的知识其实也是不全的，因为这只是目前LZ已经了解或准备了解的内容而已。</p><p>　　不过从这里也能看出来，Java这个入门简单的语言其实非常不简单，就图上的内容就够我们喝一壶的了，更何况这里还不全。对于.NET来说，尽管LZ并不了解，但相信也是一样的。因此各位千万不可掉以轻心，千万别让自己这个屌丝青蛙，没当上王子，却被温水煮死了。</p><h3 id="深度与广度"><a href="#深度与广度" class="headerlink" title="深度与广度"></a>深度与广度</h3><p>　　各位看到上面的内容，估计会有点晕菜，不是说要深度吗，上面这么多东西需要学习和了解，如何能有深度。其实这个担心没有错，也正因为如此，LZ才将上面的一部分内容加上了红色背景，被LZ将背景标红的那部分，就是LZ现阶段学习的主线。</p><p>　　红色背景的内容就是深度的保证，而其余的部分，则是在此基础上广度的扩张。因此，LZ有一个很重要的忠告，就是千万不要被上面的知识体系迷惑了，红色背景部分才是我们的主线。我们学习的任何其它内容，都应该是为了主线服务的，而且通常情况下，这些内容我们并不都需要精读。</p><p>　　对于经常讨论的有关深度与广度的问题，就像先有鸡还是先有蛋一样，没有鸡哪来的蛋，而没有蛋又哪来的鸡。同样的，没有深度哪来的广度，没有广度又何来的深度，这样纠结的问题LZ还是决定不搀和进来了，而且这样的争论其实毫无意义。</p><p>　　我们这里只谈谈学习的过程应该是怎样的，LZ个人的想法是，学习的过程就像爬金字塔一样，我们从最底层的基础开始爬，而最底层是最广的，因为需要很多的铺垫才可以继续攀登金字塔，如果你足够努力与幸运，最终可能可以爬到金字塔尖上。对于LZ这种非计算机专业的同学来说，属于一上来就爬到了一定高度的情况，在这个时间，我们必须有事没事就回去修修你的金字塔底层，直到牢固为止，否则就算你继续向上爬到一定高度，也一定会摔下来的。</p><p>　　金字塔尖是特别窄小的，否则也不可能称为尖。由此可见，我们学习的过程应该是从基础渐渐攀爬的过程，是将掌握的领域无限压缩并提升的过程，最终将我们的知识压缩成一个锋利的塔尖，直插云霄。不过需要注意的是，你爬的越高，应该看得越远，而不能只盯着你的金字塔尖，否则你得到了金字塔尖，却会失去你身边广阔的天空。</p><p>　　</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>　　作为一个程序猿来讲，学习确实是很重要的一环，而学习的过程中，书籍的选择又是重中之重。所以我们平时多花一些时间去选择一本合适的书籍，是非常值得的，书籍才真的应该是宁缺毋滥，与其将时间浪费在一些相对无用的书籍上面去，还不如好好的思考一下你的知识网，谨慎的选择下一个知识节点，下一本书。</p>]]></content>
      
      
      <categories>
          
          <category> Book </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 左萧龙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈程序猿的硬条件，你如何保持你革命的本钱呢</title>
      <link href="/2013/09/17/book/%E6%B5%85%E8%B0%88%E7%A8%8B%E5%BA%8F%E7%8C%BF%E7%9A%84%E7%A1%AC%E6%9D%A1%E4%BB%B6%EF%BC%8C%E4%BD%A0%E5%A6%82%E4%BD%95%E4%BF%9D%E6%8C%81%E4%BD%A0%E9%9D%A9%E5%91%BD%E7%9A%84%E6%9C%AC%E9%92%B1%E5%91%A2/"/>
      <url>/2013/09/17/book/%E6%B5%85%E8%B0%88%E7%A8%8B%E5%BA%8F%E7%8C%BF%E7%9A%84%E7%A1%AC%E6%9D%A1%E4%BB%B6%EF%BC%8C%E4%BD%A0%E5%A6%82%E4%BD%95%E4%BF%9D%E6%8C%81%E4%BD%A0%E9%9D%A9%E5%91%BD%E7%9A%84%E6%9C%AC%E9%92%B1%E5%91%A2/</url>
      
        <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>　　不少人都听过这样一句话，身体是革命的本钱，对于程序猿来说，更是如此，有多少人“为程序搞得人憔悴”。如此下去，挣了再多的钱，再多的荣誉又有何用。</p><p>　　LZ曾经在一篇文章的最后附加了一个笑话，大致的内容是，程序猿在阅兵时，是穿着拖鞋披着毛巾夹着鼠标走过的主席台，然后弱弱的喊着“Hello World”。这个笑话LZ第一次看到的时候确实是笑跪了，当时还在公车上，搞得自己有点失态。</p><p>　　不过回过头来想想，这其实也是程序猿的一种悲哀，尽管笑话当中为了有笑点有些夸张，但事实上，很多程序猿的身体确实不怎么好，精神面貌也欠佳。</p><p>　　LZ本身也是这其中之一，首先LZ要自我检讨，生活习惯很多都不太好，比如抽烟、晚睡、不经常锻炼或者说从不锻炼、有时不吃早餐等等。相信有不少猿友都与LZ有相同的毛病，这里LZ奉劝一下各位，要注意自己的身体，做好长期革命的准备。</p><h3 id="程序猿的悲哀"><a href="#程序猿的悲哀" class="headerlink" title="程序猿的悲哀"></a>程序猿的悲哀</h3><p>　　程序猿的工作内容和工作方式注定了程序猿就是一个悲催的群体，接下来LZ给各位分析一下，作为一个伟大的程序猿，你为工作都贡献了哪些器官。</p><p>　　1、程序猿几乎需要全场坐班，甚至回家也坐班（对于爱上网的猿友来讲就是如此），因此对于颈椎的损害非常大，腰部次之，对于少年得“志”的朋友，影响也不小。</p><p>　　2、坐在电脑前，有时有一个东西马上就写完了，但是此时恰巧想上茅厕，此时有不少人会选择委屈自己的膀胱，将东西写完再去。因此憋尿也是原因之一，对肾和泌尿系统有一定的摧残，相信LZ一说对肾有影响，很多猿友都不敢再憋了吧。</p><p>　　3、由于常年面对电脑，因此对眼睛的损害就不用LZ解释了吧，你敢说你现在的度数没超过一个字节能表示的无符号最大值吗。</p><p>　　4、加班是很多程序猿无法抵抗的，就LZ自己来说，LZ现在的工作已经很少加班了，但是很少不代表没有，彻底杜绝加班还是很难的，因此有时候熬夜是难免的。当然了，很多人的熬夜大部分时候是因为生活习惯问题，包括LZ本人也是，LZ也是习惯晚上写写博客或者看会书。因此这个会影响睡眠，影响人的神经系统。</p><p>　　5、同样是因为加班，有时候加班难免会造成吃饭不规律，这会影响人的肠胃。</p><p>　　6、抽烟的程序猿就更惨点，就像LZ一样，尽管烟往往能给LZ带来灵感，但是它无时无刻不摧毁着LZ的肺，当然了，也摧毁着LZ的钱包。</p><p>　　7、程序猿往往交际圈比较窄，这和工作无关，而是因为大部分程序猿都与电脑有不解之缘，甚至很多走上程序猿这条路的人，就是因为从小玩电脑的原因。因此程序猿的性格中，宅的比例较高，所以会造成环境的相对封闭，这对身心有着一定的影响，容易让人年纪轻轻就缺少应有的活力，而且会在一定程度上降低交际能力。</p><p>　　8、程序猿经常会被各种稀奇古怪的问题整得焦头烂额，此时会严重影响你的心情，然而一旦解决了它，有时你又会忍不住的兴奋一番。这会造成人的忽喜忽悲，心态不易平和，这其实对身体也是有潜在的害处的。</p><p>　　以上便是LZ觉得程序猿的悲哀之处，不过还是那句话，这都是LZ一家之言，也没有专业医生的鉴定，因此正确与否，各位应该做到心中有数。</p><h3 id="适宜对象"><a href="#适宜对象" class="headerlink" title="适宜对象"></a>适宜对象</h3><p>　　锻炼身体的方法有很多种，比如跑步、打球、游泳、进健身房等等，这些都是锻炼身体的好办法，也是很有效的办法。但是LZ个人觉得这些方法很多人很难坚持，尽管它们看起来是那么的有效，那么的正确。这其中可能是懒惰在作祟，可能是加班在作祟等等，总而言之，上面的这些做法都不太好坚持。LZ也在心中扪心自问了一番，最后得出的答案是，如果游泳馆或是健身房里面每天都有一个待泡的姑娘等待LZ的话，估计也只有此情此景，才能让LZ义无反顾的坚持光顾这些地方。</p><p>　　倘若平时的你已经得到了很好的锻炼，那么本文其实对你来说已无意义，因为本文的宗旨是提出一些简单可行的方式，本着“苍蝇再小也是肉”的原则，让各位猿友尽量的改善自己的身体和调节自己的心情。建议已成为肌肉男的猿友，或者已经有自己的一套锻炼身体的方法的猿友们，可以单击浏览器右上方的叉叉图标，结束本次博文之旅。</p><h3 id="简单可行的方式"><a href="#简单可行的方式" class="headerlink" title="简单可行的方式"></a>简单可行的方式</h3><p>　　这里LZ给出几个简单可行的方式，希望对各位猿友的身体有所帮助，既然你已经看到了这里，那么就要明白，下面任何一条都无法让你成为肌肉男，只是希望大家能改掉一些程序猿容易携带的坏毛病。</p><p>　　1、经常上厕所，这一招绝对百试不厌，见效最快，包治百病。这样可以让你经常离开一下你的工作岗位活动一下，请记住，上厕所不是目的，因此若是你到了厕所，却没能挤出来几滴，请千万别觉得自己白来一趟。</p><p>　　2、经常看看远方。相信大多数人的办公环境都不是封闭的，因此我们甚至不用离开工位，就可以每过半个小时或者一个小时就透过窗户看看远方，这样对你的眼睛有极大的好处，而且你也可以趁这会思考一下你手下的代码或是一些其它的问题，何乐而不为呢。</p><p>　　3、给自己买点预备早点。如果说让各位每天早上按时吃饭，相信对于不少人来说会比较难坚持，但是给自己买点可以长期存放的早餐（最好是有营养的一些东西）放到自己工位上还是不难办到的，早上如果懒得买早餐可以吃点，其实早上那顿饭的意义主要在于避免空腹，因此多少吃点都会有很大好处。</p><p>　　4、适度抽烟。程序猿几乎是不需要喝酒的，爱喝酒的程序猿比例还是相对较低的，因此这点就不说了。但是抽烟的程序猿比例可不低，LZ就是其中一个，我们的原则是，烟不一定非要戒掉，关键时刻戒就可以（比如要生娃的时候）。有多少抽烟的人都说过“我一定要把烟戒掉”，结果最后还是屁颠屁颠的买烟去了，包括LZ也是其中一员。我们完全可以不戒烟，只要不酗烟即可。切记，天天担心着自己要被抽烟害死所带来的心里压力，比抽烟更伤害身体。</p><p>　　5、如果晚上加班再所难免，请先吃饭后加班。这一点LZ觉得应该不难做到，偶尔一次无所谓，如果事情特别紧急，先处理完事情再吃也无妨。但是如果哪个老板或是上司每次都非让你饿着肚子加班，就是不让你按时吃饭。请问，这样的公司你还呆着干嘛，老板和上司可以这么无视你身体的对待你，这样的公司会有前途吗。况且就算事情每次都紧急，那吃完饭再弄也不迟吧，哪怕是叫下外卖。</p><p>　　6、遇到长时间解决不了的问题学会离开电脑。很多人遇到解决不了的问题喜欢一个人在那一直钻，完全就是一个穿山甲，可是你钻来钻去也不一定能找着地面在哪，反而会搞的心情一团糟。人如果长期处于一个烦躁的状态的话，对身体绝对是有坏处的。因此我们可以试着走出去，离开你的电脑，给自己一点思考的时间，静下心来，好好考虑一下问题可能会出现在哪，事情往往在你静下心来以后就能很快解决，而在你烦躁不安的时候，却很容易陷入死结。</p><p>　　以上算是LZ自己的一点小心得，还是那句话，此为LZ一家之言，各位猿友还需要自行判断。但是LZ确实从这几个习惯当中得到了不少的好处，每一项其实都不难做，重点就在于，你是否认识到了自己的身体真的是很重要，秒杀一切虚幻的叉叉K。</p><h3 id="文章小结"><a href="#文章小结" class="headerlink" title="文章小结"></a>文章小结</h3><p>　　其实最简单实用也免费的锻炼方式就是早起跑步，可是确实是非常困难。偶尔跑上一两个星期一两个月估计有不少人都能做到，但是若要常年如此，估计很多人到最后都被柔软的床给征服了。</p><p>　　总而言之，像跑步、打球等等这些锻炼方式，都是众所周知的好办法，如果你的毅力足够，时间足够，这些自然是首选。但是若非如此的话，尝试一下本文的方式，或许你也会得到一些小小的收获，你的身体如果有感知的话，一定会对你感激涕零的。</p>]]></content>
      
      
      <categories>
          
          <category> Book </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 左萧龙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈程序猿简历的写法，你会如何写你的简历呢</title>
      <link href="/2013/09/17/book/%E6%B5%85%E8%B0%88%E7%A8%8B%E5%BA%8F%E7%8C%BF%E7%AE%80%E5%8E%86%E7%9A%84%E5%86%99%E6%B3%95%EF%BC%8C%E4%BD%A0%E4%BC%9A%E5%A6%82%E4%BD%95%E5%86%99%E4%BD%A0%E7%9A%84%E7%AE%80%E5%8E%86%E5%91%A2/"/>
      <url>/2013/09/17/book/%E6%B5%85%E8%B0%88%E7%A8%8B%E5%BA%8F%E7%8C%BF%E7%AE%80%E5%8E%86%E7%9A%84%E5%86%99%E6%B3%95%EF%BC%8C%E4%BD%A0%E4%BC%9A%E5%A6%82%E4%BD%95%E5%86%99%E4%BD%A0%E7%9A%84%E7%AE%80%E5%8E%86%E5%91%A2/</url>
      
        <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>　　简历的重要性相信就不需要LZ来灌输这个思想了，一份好的简历和一份差的简历，可以直接左右HR最终选择的结果。LZ在公司虽然现在还不参与面试，但是偶尔闲的时候也会看看投递的简历，看完以后也会给出一点自己的粗浅见解，给负责招聘的技术人员提供一些参考，因此LZ尽管还没参与过面试，但也算是看过了不少应聘者的简历，也就是所谓的没吃过猪肉，但见过跑着的猪。</p><p>　　从大部分的情况下来看，在挑选简历的时候，很多负责招聘的技术人员或者HR都有这样的一个习惯，那就是只要简历当中有一点可以在当前的几个简历当中脱颖而出，那么最终的面试权利就归谁所有了。从这点就不难看出，在自己的简历中突出一个亮点，是获得面试机会很好的手段。</p><p>　　接下来，LZ就和各位猿友探讨一下简历的相关细节，不过标题上也说了，这是针对的程序猿的简历，因此如果不是应聘程序猿的话，那么就可能不太适合此篇博文了。</p><h3 id="程序猿简历的大忌"><a href="#程序猿简历的大忌" class="headerlink" title="程序猿简历的大忌"></a>程序猿简历的大忌</h3><p>　　简历的制作是有很多大忌的，一旦触犯了这种大忌，基本上你就等于在简历上写上“不要找我”。因此对于这些大忌，LZ觉得还是有必要提一下的。接下来，LZ就以个人的经验，以及个人挑选简历的几点体会，来谈一下这几个大忌。</p><p>　　1、一眼望去，N（N&gt;=2）个精通，此类简历基本上看到的时候就可以过了，因为这么多精通的人还来应聘程序猿，估计公司会害怕委屈了你的。</p><p>　　2、简历过长，基本可以写成个人自传的简历，有的简历中稀稀拉拉介绍了自己从不再尿床开始，到目前的状态，其中包括了初中XX奖，高中XX奖等数个奖项。这样的简历，实在是惊天地泣鬼神，不当作者真是可惜了这位才子。</p><p>　　3、简历上明显错别字满地爬的，这基本上已经代表了你就是一个bug王子。</p><p>　　4、时间杂乱。有的简历上描述的是时间倒着过的青年，从2013年往2010年这样生活过来的。不过这也就罢了，还能勉强说的过去，但是更有甚者，是时间交叉着过来的，好似一部穿越剧。这基本已经说明，你是一个条理十分不清晰的人，是一个充满了嵌套if/else的家伙，容易把人跳转的晕头转向。</p><p>　　5、过短的简历也同样令人头疼，有的简历每一个项目的描述基本都可以控制在10个字以内，实在是惜字如金，这到底是该说文字功底好还是差呢，竟然这么短就能描述一个项目。</p><p>　　6、简历上工整的阿拉伯数字刺激着看者的17K氪金近视眼，工作年限0年，期望薪资15K。如果真有此等水准，还是写面议比较好，省得吓坏了公司的招聘人员。</p><p>　　以上六点是LZ觉得需要格外注意的地方，如果哪位猿友现在正在找工作期间，并且你的简历触犯了上面的大忌，那么不要犹豫，赶紧改掉它，给自己多一点机会吧。</p><h3 id="程序猿的简历该如何写"><a href="#程序猿的简历该如何写" class="headerlink" title="程序猿的简历该如何写"></a>程序猿的简历该如何写</h3><p>　　程序猿的简历与某些职业的简历不太相同，毕竟很多职业不需要写项目经历，不需要写掌握的技术等等，而对于程序猿来说，这些则是必需的内容。</p><p>　　如果真要开始写一份简历，大部分情况下，很多人都会先去网上找一些模板，然后开始做填空题，这一点无可厚非，很多人都是这么做的。这些模板上，大部分情况下都会分好几大项，例如基本信息、教育背景、工作经验等等。接下来，LZ就和各位猿友大概的探讨下每个部分的内容大致如何写会比较好，简历的排版顺序LZ建议就按照这里所写的顺序来写就好。</p><p>　　切记，此为LZ一家之言，仅供参考。</p><h3 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h3><p>　　基本信息是最好填写的一大项，不过其中要注意几点。LZ将它们分为必选和可选，其中可选有的时候会成为不可选的内容，具体如下。</p><p>　　必选的内容：姓名、性别、出生年月（年龄也可以）、户籍、最高学历、毕业院校（最后一个）、专业、电话、邮箱。</p><p>　　可选的内容：工作年限、婚姻状况、健康状况、联系地址、英语水平等一些可简单描述的基本信息。</p><p>　　这一栏当中除了必选的内容是必须含有之外，只需要注意一下可选项即可。我们这里有一个原则，就是可选项一般是加上去以后可以给你大大加分的，才有必要写上去，否则的话最好删掉，保持基本信息的简洁。</p><p>　　举个例子，比如英语水平这一项，如果你的英语水平是专八，那写到基本信息当中可能会引起HR的注意，是很好的一个做法。但是如果你的英语水平连四级都没过，就像LZ一样，就因为模板上有这一项，你还写上一个“四级3XX分”甚至是“四级没过”这一类内容的话，那就是没事找抽型了。</p><p>　　【这一段话是后来加上的，一位猿友的评论让LZ想起了工作年限这一项，感谢这位猿友的提醒。这一项其实也不能成为必选，因为对于应届生来说，如果填上这一项，也只能写个“应届生”三个字，LZ个人觉得就没必要强调自己是应届生了吧。如果是已经毕业的猿友，工作年限这一项就必须写上了，也就是你毕业几年了。】</p><h3 id="求职意向"><a href="#求职意向" class="headerlink" title="求职意向"></a>求职意向</h3><p>　　基本信息完事以后，就应该是你的求职意向了。也就是你准备找什么样的工作，在什么地方等等这一类。这一栏相对内容较少，因此比较好填写。必选的内容有如下几项，几乎没有可选。</p><p>　　必选的内容：目标职能（求职的职业）、目标地点（上班的地点要求）、工作性质（一般都是全职）、薪酬待遇（推荐写面议，没必要搞特殊）、到岗日期（一般是三天内或者一周内）。</p><p>　　这里面只需要注意一下薪酬待遇即可，就像上面说的一样，除非你对自己的判断非常准确，要价合理，否则写上具体的数字就属于判自己死刑。况且就算你写的数字是合理的，可是不要忘了，找工作确实是与运气有关的，将具体数字写上，就相当于给了自己一个工资的上限，LZ相信大部分人都不愿意吧，我们只希望工资有下限即可。</p><p>　　尽管有的公司去面试的时候第一件事，就是让你填一个报到表，上面让你写期望的薪水，但是不管怎么说，我们也确实没必要明目张胆的在简历上写出来。因此LZ的建议就是写面议即可，不论哪种情况。</p><h3 id="掌握的技能"><a href="#掌握的技能" class="headerlink" title="掌握的技能"></a>掌握的技能</h3><p>　　了解完你的基本信息和求职意向，就需要看一下你掌握的技术了。在这里，LZ是将这一项放到了教育背景以及工作经验的前面，这其实是有讲究的。对于简历来讲，HR是不会关注你所掌握的技能的，因为他很可能完全看不懂那些名词。因此对于HR来筛选简历的情况下来说，将教育背景以及工作经验放在前面可能会更好一些。LZ这里所制定的顺序，是针对技术招聘人员来筛选的情况，他们可能会对你掌握的技术更感兴趣，因此在这种情况下，将掌握的技能放在前面可能会更好一些。</p><p>　　这两个顺序的摆放并不会对你的简历影响太大，因为你也不知道到底是HR在筛选，还是技术招聘人员筛选。不过大多数情况下，可能HR筛选的可能性更大一些吧。因此这两者的顺序，LZ这里不做建议，依据各位自己的喜好来定吧。</p><p>　　掌握的技能这一项很重要，你不仅需要写上所有你涉及到的技能，而且还需要对你的技能水平进行稳妥的评估。评估的太低，可能导致收到面试的几率降低，不过这个好像一般不会发生。评估的太高，则容易给自己挖一个坑，然后在面试的时候让自己跳进去。这主要是因为，很多面试官是看着你简历上写的技能来问你的。</p><p>　　举个例子，如果你在上面写到了jquery，那么面试官很大几率会问你jquery的相关知识，如果你明显对此一无所知的话，就这一项，基本上你就没戏了。这不仅仅是因为技术没到家，更重要的是简历带有欺骗性质。</p><p>　　因此这里LZ对此只强调一点，慎用精通，或者说拒绝使用精通。常用的掌握程度一般有熟练使用、熟悉、理解、掌握、了解等一些词语。</p><h3 id="教育背景以及工作经验"><a href="#教育背景以及工作经验" class="headerlink" title="教育背景以及工作经验"></a>教育背景以及工作经验</h3><p>　　这两者相对而言还是比较好写的，就按照时间的顺序，将自己的受教育过程以及工作经历写出来即可。这两者必选的内容是十分相似的，因此LZ就一起写出来。</p><p>　　教育背景/工作经验的必选内容：起止时间/起止时间、学校名称/单位名称、所属学院/所属部门、所学专业/担任职位。</p><p>　　这两项没有什么可选的，基本上就按照这个模式去写就可以，需要注意的就是，有一些不能给你加分的东西不要写。比如初高中的学校，这些就可以省略了，或者是一些十分短暂的工作经历，比如一个星期，一个月，这一类的内容有时不会给你的简历加分，反而会减分。</p><p>　　因此在我们填写这两项的时候，需要对自己的教育经历和工作经历进行一些筛选，而不是一股脑的全部写上去，这样不一定会好。</p><h3 id="项目经验"><a href="#项目经验" class="headerlink" title="项目经验"></a>项目经验</h3><p>　　这一项也算是简历的重中之重了，也是简历当中相对比较难写的一部分，估计很多猿友在写这里的时候都非常痛苦，相信大多数人都曾经为此而苦恼。不过只要我们把握住了重点，其实这一项也可以轻松应付。这里LZ首先要说的，就是在上面提到的两种不可取的极端，一种是写的太长，一种是写的太短。</p><p>　　曾经有一次LZ见到一个面试LZ公司架构师的简历，里面洋洋洒洒写了近40个项目经验，每一个预计在500字左右，当时就让LZ这个2年经历过3个项目的小虾惊呆了。不过惊讶之余，LZ也很好奇一件事，就是会有几个人将这40个项目经验全部过目一遍，答案应该几乎是肯定的，不会有人看完的。</p><p>　　不过由于这位高人面试的是架构师，因此LZ也不敢说的太过于绝对，毕竟这已经超出了LZ的层次范围。不过LZ个人觉得，如果真的有40个项目经验的话，不妨挑选其中几个有亮点的项目写一写，然后在开始的时候写上，“曾亲自参与过近40个项目的研发与设计工作，其中涵盖了XX、XX等行业…”等诸如此类的总结的话语便可。比如在某个项目当中，你解决了一项重大问题，又或者哪个项目是非常出名的项目等等，任何一个亮点都可以。这样写出来的简历，可能更加能吸引人吧。</p><p>　　事情往往会有两个极端，既然有写的太长的，就肯定有写的太短的。LZ就曾经见过一个人的简历上，写了一个票务系统，项目的介绍只有一句话，大概的意思就是，“这是一套为了处理在线票务订购而专门设计的系统”。LZ看到的时候当场就和小伙伴们惊呆了，这样的项目描述，LZ真的是破天荒头一次见到。像这样去写项目经验，估计LZ不用说，很多猿友也不会这么写的。这样直接给人的感觉就是，这项目根本不是你亲生的。</p><p>　　对于项目经验的写法，LZ这里给出几个小的建议，供各位参考，如果有觉得适合的猿友可以尝试一下。</p><p>　　1、数目一般控制在1-10个，如果你的项目经验少于5个，那就全部写上就好。</p><p>　　2、项目的名称、概述、运行的环境、开发时长、开发工具以及采用的主要技术，这些一般都是可以直接列出来的，最好不要省，可以让人一眼望去，就知道你整个项目的大概情况。</p><p>　　3、紧接着上面的，就是项目的详细描述，在这里面，可以主要介绍下重要的模块以及它们之间的关系，粒度控制在模块这个级别即可，千万不要去罗列你们的需求列表，那会让人看起来十分厌烦。</p><p>　　4、最后可以将自己在项目当中起到的作用简单描述一下，但要注意的是，不能给人夸大自己功劳的感觉，比如过度的使用“我”这个词语就不太好，会给人一种以自我为中心的感觉，这也是为什么作者们写书都是自称“笔者”而不是使用“我”，一般可使用“本人”代替。</p><p>　　总之，项目经验这一部分要达到的效果就是，让别人可以清晰的看出你所做项目的大概情况，以及你本人在项目当中所担当的重任。</p><h3 id="所获证书与荣誉"><a href="#所获证书与荣誉" class="headerlink" title="所获证书与荣誉"></a>所获证书与荣誉</h3><p>　　个人觉得这一项很多时候其实并不重要，因为大部分人还是没有那么多有分量的证书与荣誉的，可能你现在要是问大部分人“你最有价值的一个证书是什么”这样一个问题，或许很多人会异口同声的答“驾驶证”。</p><p>　　当然，如果你有一些特别有分量的证书或荣誉的话，可以调整一下顺序，将所获证书与荣誉这一项提前。至于这一部分应该怎么写，LZ觉得就没什么可说的了，只要你不把小时候的奖状都搬上来的话，只要是大学期间或毕业以后的，基本上有什么写什么就是。</p><h3 id="自我评价"><a href="#自我评价" class="headerlink" title="自我评价"></a>自我评价</h3><p>　　自我评价一般会放在最后，但也不绝对，这个可能会仁者见仁智者见智，因此LZ对这个自我评价的摆放顺序不做任何建议，但一般情况下，会排在基本信息的后面，或者是简历的末端。</p><p>　　这个东西能否写好，就牵扯到LZ上一篇文章的内容了，也就是你是否认清了你自己。大部分人在一生当中，对自己的认识都会不断的改变，因此可能你每一年写的自我评价都会有细微的差别，但是别人眼中的你可能会更加真实客观一些。因此LZ有时候就在想，这一项是不是让自己的死党来写会更好一些，当然了，内容限定为褒义词，如果是在上面损你的，请果断与他断绝关系。</p><p>　　很多人会在网上找一些自我评价的模板抄一下，LZ个人觉得，这样做毫无意义。一个是因为HR对于这种模板式的自我评价估计早已经免疫了，比如什么做事积极，有团队意识等等这些早烂掉的词语。另外一个，每次写自我评价的时候，其实都是一个认识自我的过程，这对于你早早的规划好自己的职业道路，也是有一定帮助的。</p><p>　</p><h3 id="文章总结"><a href="#文章总结" class="headerlink" title="文章总结"></a>文章总结</h3><p>　　</p><p>　　人们常说学历是工作的敲门砖，LZ觉得简历其实才是真正的敲门砖，学历最多算是敲门砖中比重较大的一项而已。因此在面试之前，费点心思写一个好简历，还是很有必要的。</p><p>　　尤其是对于刚毕业的同学们来说，大多数的简历往往会给人一种千篇一律的感觉，这并不是他们的错，而是人生的经历相对而言还比较单纯。此时可能你需要做得，就是让HR一眼能看出你的与众不同。当然，这样做的前提是，你的简历是真实的，而非一手捏造的，否则只是浪费各自的时间罢了。</p><p>　　如果哪位猿友有更好的想法或者是建议，又或者是LZ文中遗漏了哪一项，也可以提出来，LZ也好及时更正。不过有的内容其实LZ是想到了，但是由于其重要性不高，因此没有往上面写，比如兴趣爱好、擅长的特长等。</p><p>　　文章的末尾，LZ也祝福在找工作的各位猿友能早日找到心仪的工作，完美地开启自己新的工作之旅。</p>]]></content>
      
      
      <categories>
          
          <category> Book </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 左萧龙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编程？事业？</title>
      <link href="/2013/09/17/book/%E7%A8%8B%E5%BA%8F%E7%8C%BF%E7%9A%84%E5%87%A0%E7%A7%8D%E5%88%86%E7%B1%BB%EF%BC%8C%E4%BD%A0%E8%BA%BA%E6%9E%AA%E4%BA%86%E5%90%97%EF%BC%9F/"/>
      <url>/2013/09/17/book/%E7%A8%8B%E5%BA%8F%E7%8C%BF%E7%9A%84%E5%87%A0%E7%A7%8D%E5%88%86%E7%B1%BB%EF%BC%8C%E4%BD%A0%E8%BA%BA%E6%9E%AA%E4%BA%86%E5%90%97%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>　　最近LZ刚刚恢复了一点看书的状态，目前主要正在攻读深入计算机系统这本书，外加数据结构和TCP协议辅助，而且LZ也将之前的计算机系统原理系列正式更名为深入理解计算机系统，目前4.1节正在酝酿当中，各位猿友敬请期待吧。</p><p>　　趁着最近技术知识储备的阶段，写一些自己的感想，或许各位猿友会有所收获，也或许读起来没什么味道。不过这都不是最重要的，重要的是记录自己的心路历程，以便以后自己能够从历史中吸取教训。</p><p>　　接下来我们就进入正题吧，说起程序猿的分类，实在是值得一说的一个话题，因为工作时间久了，总会发现形形色色的人，不过归根结底，似乎总是逃脱不了这几种。当然，凡事总有例外，不过这些例外往往代表不了他所存在的群体。另外需要一提的是，以下状态的描述几乎都是LZ的第三视角，因为LZ只能属于其中一种，不可能全都以第一视角描述。</p><h3 id="NO-1：沉默的野狼"><a href="#NO-1：沉默的野狼" class="headerlink" title="NO.1：沉默的野狼"></a>NO.1：沉默的野狼</h3><p>　　这一类猿友往往平时话不多，凡事都不主动，但既然是野狼，就必然有狼子野心。他们虽然平时不会表现出要强的一面，但内心里其实一直在跟自己又或者是跟某些人较劲。这类人往往能够在关键时刻一鸣惊人，这源于他们本就狂野的内心，还有那默默无闻的努力。</p><p>　　野狼往往是孤独的，因为他们很少与他人为伍，请记住，这种孤独指的是内心的孤独，而不是表面上人际交往的匮乏。但是他们与沉默的羔羊有所区别，野狼尽管是默默不语的时候，也会透露出一种霸气与野性，这种气质用现在的话说，应该叫……低调。</p><p>　　回归到现实当中，这类猿友往往平时非常努力，到了公司却一声不吭，仿佛自己是一个不思进取的人一般。哪怕是自己取得了一定成就，也很少在同事面前提起，只是一个人默默的为自己高兴，并期待着其它人知道后那一刻的表情。这类人在被他人发现之前，往往是沙滩上的沙粒，很难被人发现，也很难被人记住。不过正是由于这种反差，一旦被人发现他们的能量，就会令别人印象深刻，宛若刻骨。</p><p>　　然而野狼一旦露出真实本领，往往会让人心悦诚服，这类人最终往往会成为团队的领导者。因为他们低调，因为他们努力，那种与世无争的心态是他们难得的品质，不过虽带着与世无争的心态，但却默默努力的行动才是他们真正傲娇的资本。</p><p>　　如果你身边有这样一个人，他平时默默无闻，你甚至都不知道你有这样一个同事。但是一次偶然的意外，让你对他大大改观，甚至有点想膜拜的冲动，那么恭喜你，你发现了你身边的一匹野狼，尽情的与狼共舞吧。</p><h3 id="N0-2：嚎叫的羔羊"><a href="#N0-2：嚎叫的羔羊" class="headerlink" title="N0.2：嚎叫的羔羊"></a>N0.2：嚎叫的羔羊</h3><p>　　有这么一类猿友，他们平时总能滔滔不绝，仿佛全世界唯有他才可令地球转动。他们善于周旋于各个场合，而且那种舍我其谁的样子，让你觉得似乎看到了人生的真谛，生活的希望，让你对扶不扶等问题一下子就感觉明朗了许多，总之，你会觉得，世界上好像还是好人多啊。</p><p>　　现实当中，这些羔羊往往不是干活最多的那些人，但绝对是动脑最多的那批人。因为他们需要随时向别人开炮，不过这些炮弹都是裹着糖衣的，中了的人往往欲死欲仙，在甜蜜的气氛中无法自拔。不过羔羊始终是羔羊，嚎叫的背后隐藏的是极其脆弱的身板与内心，一旦遇到一个让他们停下嚎叫的野狼，往往会令他们戛然而止，而且很有可能永远都叫不出来了。</p><p>　　在公司中，这些人往往比较招人讨厌，容易给人眼高手低的感觉。但是如果把好钢用到刀刃上，这种性格也可能会变成一种优势，比如对付万恶的业务人员。这些人有时也会成为一位领导者，但并不适合做领导者，因为他们的手下总会比较憋屈，比如那些沉默的野狼。有时候，这些羔羊会被野狼一口咬住脖颈，连丝毫反击的余力都没有，但是还有另外一种结局，那就是这些野狼在羔羊的嚎叫声中渐渐的离开了。</p><h3 id="N0-3：沉默的羔羊"><a href="#N0-3：沉默的羔羊" class="headerlink" title="N0.3：沉默的羔羊"></a>N0.3：沉默的羔羊</h3><p>　　沉默的羔羊，让LZ响起了那个恐怖片，不过可惜的是，LZ至今都没有勇气观赏他。那些曾经因为恐怖片而大半夜锻炼膀胱的故事，总是在LZ的脑海里频频闪过。然而这里所说的沉默的羔羊却不是如此，他们非常温和，甚至可以说温柔。他们默默的干着最不起眼，但却不可或缺的工作。</p><p>　　在一个团队中，这样的人往往很受人喜爱，因为他们不仅与世无争，而且不会给别人造成压力，与他们相处总是那么的和谐与惬意。但是事实是残酷的，他们往往无法成为团队的领导者，只能任由他人差遣。有时随着年限的增长，他们或许也会有自己的一席之地，但往往会被后来之人居上，这或许是一种宿命吧。但是不可否认的是，他们总是在这样的生活中幸福的活着。</p><p>　　如果你有本事激怒一个沉默的羔羊，那么恭喜你，你一定是一只嚎叫的母羊。0.0</p><h3 id="NO-4：嚎叫的野狼"><a href="#NO-4：嚎叫的野狼" class="headerlink" title="NO.4：嚎叫的野狼"></a>NO.4：嚎叫的野狼</h3><p>　　最后一种猿类，他们无时无刻不在高调的活着，却一直尽量保持着高调的资本。张扬是令人鄙视的一种性格，但有些人却可以让它变成一种个性，而且好像也并不是那么的讨人厌。尽管都是野狼，但嚎叫的野狼并没有那种孤独的心性，与沉默的野狼相比，他们更加迫切的需要成功，并为之努力着。</p><p>　　嚎叫的野狼总是干着令人羡慕的工作，因为他们敢于争取，并有相应的能力。对于当今的社会来说，这类人往往更加有竞争力，因为现在做事的原则，已经不再是少说多做，而是多说多做。如果你是一只沉默的野狼，或许你的发光需要依靠一些运气，但是嚎叫的野狼总会主动进攻，去争取一切的机会。这个社会确实是这样的，机会就像东莞的妹子，容易上钩，但你至少要去东莞才行吧。机会也是一样的，到处存在着，但却需要你主动寻找。</p><p>　　在团队里，嚎叫的野狼与沉默的羔羊往往是一对默契的组合，他们一个愿打一个愿挨，而且羔羊很容易被野狼驯服，如果让沉默的羔羊与嚎叫的羔羊一组，往往效果也不会太好。</p><h3 id="喜羊羊与灰太狼"><a href="#喜羊羊与灰太狼" class="headerlink" title="喜羊羊与灰太狼"></a>喜羊羊与灰太狼</h3><p>　　一个团队当中，必须狼羊共存，其实无论是哪种性格，总有相应的优势。这四种人在其它的职业当中或许也有共通之处，毕竟人总是逃不过欲望的引诱。</p><p>　　在LZ的印象里，就亲自见证过沉默的野狼与嚎叫的羔羊的战争，最终的结局就像上面所说的，野狼在嚎叫声中离开了。说真的，LZ还是比较遗憾的。毕竟很明显，狼的实力要强很多，但由于不善言辞，不善喜功，因此丢掉了本该属于他的乌纱帽。</p><p>　　相信在各位猿友的生活中，狼与羊的故事也一直在不断上演着，不管最终是谁赢得了这场胜利，还是两败俱伤，亦或是双赢，都一样见证着IT界的兴衰。其实仔细想想，这样的生活体验还是蛮有意思的，因为程序猿总是这么的与众不同，你说呢？</p>]]></content>
      
      
      <categories>
          
          <category> Book </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 左萧龙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编程？事业？</title>
      <link href="/2013/09/17/book/%E7%BC%96%E7%A8%8B%EF%BC%9F%E4%BA%8B%E4%B8%9A%EF%BC%9F/"/>
      <url>/2013/09/17/book/%E7%BC%96%E7%A8%8B%EF%BC%9F%E4%BA%8B%E4%B8%9A%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a><strong>引言</strong></h3><p>​     最近LZ无意间翻开了博客园一名知名作者的博客，当中写了一篇文章叫<a href="http://www.cnblogs.com/JimmyZhang/archive/2008/05/12/1192799.html">也谈成功</a>，有兴趣的朋友可以先去看一下，个人觉得还是蛮有感触的。</p><p>​     确实如<a href="http://home.cnblogs.com/u/JimmyZhang/">Jimmy Zhang</a>的文章中所说，什么叫成功这个问题实在是不好回答，这就像讨论人活着的意义一样，没有什么答案。其实说成功是目标的实现也是非常难以判断的，这主要是因为人的目标总是随着年龄在不断的变化。</p><p>​     像小的时候，有无数人的理想都是长大当个科学家（中枪的请自觉面壁），而到了初中，可能很多人希望考上家里的重点高中，然后到了高中又希望考入理想的大学。到了大学目标或许就会多出来很多，有的希望出来找一个好工作，有的是希望可以考入理想学校的研究生，也有的希望找个白富美嫁了，等等等等不一而足。</p><p>​     就LZ个人来说，这二十多年来，理想就已经变幻过很多次，比如当LZ接触游戏的时候，LZ曾经有一个梦想就是自己创造一个自己心中比较完美的游戏，慢慢的就希望找一个好工作，然后是买房子，升职，写一本自己的小说等等，总之是有很多种的。</p><h3 id="目标、成功"><a href="#目标、成功" class="headerlink" title="目标、成功"></a><strong>目标、成功</strong></h3><p>​     目标的实现是成功绝对性的一面，这是<a href="http://home.cnblogs.com/u/JimmyZhang/">Jimmy Zhang</a>文中的观点，LZ觉得这可能是因为，每当我们目标实现的时候，很多时候会说：“考，终于成功了！”</p><p>​     当时LZ看完那篇文章就在思考，LZ的目标是什么呢？难道就是买房子，买车，升职加薪？</p><p>​     不得不承认，LZ也是一俗人，而且是一大大的俗人，上面说的这些全部都在LZ计划之内，也确实都是LZ的目标。不过这些主要都是一些物质目标，简单点说，就是钱！</p><p>​     那自己的精神目标究竟是什么呢？或者说倘若放开了说，什么事会让LZ觉得成就感最强呢？</p><p>​     其实这个问题不难回答，因为LZ自从走上编程这条路，就有一个装B的目标。就是拿出一个IT界的东西，可以是任何东西，让老外们也膜拜一下中国的IT界，让老外们也查查中文文档，让老外们也看看中文注释，然后注释上写着—-魔都某屌丝男留。</p><p>​     曾经LZ见过这么一个预言，忘了是在哪看到的了，或许是逛技术论坛或者是博客看到的，上面说中国的IT界如果要赶上国外，至少要过150年左右，还有神贴回复，“楼主真是太乐观了，中国的IT界目前还被国足踩在脚下”。</p><p>​     看到这句话，LZ狠狠的擦了擦自己的十二K氪金外加250度近视眼，在发现自己没有看错后，LZ彻底TM和小伙们惊了个呆了。难道中国的IT界已溃烂至此？</p><p>​     当然，LZ不可否认，现在中国的IT界离国外差距甚大，LZ也承认现在经常会非常不齿的看国外的文章了，也不得不承认，这种现状不是一两人可以改变的。是的，LZ说过，LZ也是一个彻彻底底的俗人，改变世界那是super男人做的事，LZ需要钱，尤其是渐渐长大之后，LZ更是觉得挣钱是一个男人必须应该做的事。</p><p>​     不过这不影响我们存着改变中国IT界的目标，有了这个目标，LZ相信，很多人对编程的意义会有不一样的认识。它确实可以给你带来钱，但却不仅仅是钱。当编程不仅仅是给你带来钱的时候，相信编程也就成了你的事业。</p><h3 id="编程、事业"><a href="#编程、事业" class="headerlink" title="编程、事业"></a><strong>编程、事业</strong></h3><p>​     LZ曾经在不止一篇文章中提过，LZ不仅仅是把编程当做工作，而是当做事业。这绝不是吹吹牛B，装装1+1B而说出来的话，而是LZ自从进入这行以来，就从未改变过的信念。</p><p>​     自从有了这个信念，LZ腰不酸了，腿不疼了，看见exception我不怕不怕了。</p><p>​     或许有的猿友会说，LZ你醒醒吧，靠这个整个饭钱养家糊口也就行了，或者牛B点的搞个项目经理、技术总监当当也就相当了不起了，何况你还是个名不经传的学校毕业的非2非9学生，而且，况且，并且，何况，你还是培训学校出来的。</p><p>​     是的，LZ必须承认这些，不过这并不能阻挡LZ改变中国IT现状的信念。就算LZ做不到，也没关系，我们还有这么庞大的程序猿队伍，数目上最起码也是2的20次方级别了吧。</p><p>​     当然了，LZ没办法也没理由要求任何人抱着这样的信念去编程，就像<a href="http://home.cnblogs.com/u/JimmyZhang/">Jimmy Zhang</a>说的，成功是有相对性的。有人觉得有钱就是成功，有人觉得有权就是成功，有人觉得娶个漂亮老婆就是成功等等。</p><p>​     因此，LZ从未想过让所有或者说大部分的猿友加入这个队伍，只是希望，能有更多的人加入这个队伍，一起创造中国IT界的辉煌。</p><h3 id="活着"><a href="#活着" class="headerlink" title="活着"></a><strong>活着</strong></h3><p>​     LZ一直坚信，150年是扯淡（主要是因为LZ没自信活到170多岁，0.0），希望各位猿友一起努力，将时间最起码缩短到60年把，这样估计LZ还是有望看到那一天的。如果非要是150年的话，说不得LZ也只能未来当个老不死了。</p><p>​     </p><h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a><strong>附录</strong></h3><p>​     </p><p>​     LZ早上起来在小区里看到一个男屌丝模样的家伙对着垃圾桶里的卫生纸说，“孩子们，爹对不起你们了。”。啥意思啊？LZ已郁闷了一天了。。。</p>]]></content>
      
      
      <categories>
          
          <category> Book </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 左萧龙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录LZ如何在两年半的时间内升为PM</title>
      <link href="/2013/09/17/book/%E8%AE%B0%E5%BD%95LZ%E5%A6%82%E4%BD%95%E5%9C%A8%E4%B8%A4%E5%B9%B4%E5%8D%8A%E7%9A%84%E6%97%B6%E9%97%B4%E5%86%85%E5%8D%87%E4%B8%BAPM/"/>
      <url>/2013/09/17/book/%E8%AE%B0%E5%BD%95LZ%E5%A6%82%E4%BD%95%E5%9C%A8%E4%B8%A4%E5%B9%B4%E5%8D%8A%E7%9A%84%E6%97%B6%E9%97%B4%E5%86%85%E5%8D%87%E4%B8%BAPM/</url>
      
        <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>　　之前的伪PM纠结之路已经渐渐结束，LZ也终于正式爬上了PM的位置，对于LZ来说，这个时间比LZ预计的早来了两年半。说起来，两年半的速度已经算是比较快了，但这之中的努力唯有LZ一人知晓。写这篇文章，一是LZ最近工作比较繁忙，再没有了当初作为程序猿的悠闲自在，为了弥补这段时间博文的空缺。二则是为了分享自己的工作之路，以期能够给一些刚进入岗位的新人们些许指导。</p><p>　　在正式开始本文之前，LZ觉得有必要进行一下自我介绍，毕竟大部分猿友还对LZ一无所知。</p><p>　　LZ出生于88年，“龙”一直是一个令LZ很自豪的属相，一直被LZ视为自己的守护神。在09年的7月份，LZ从兰州一家徘徊于二流与三流本科之间的大学毕业，开始了自己的待业生涯。在09年毕业后到11年的3月份之间，LZ一直都徘徊于家庭与各个乱七八糟的工作之间，进过工地、当过流水线工人、做过业务员，当真是尝尽了酸甜苦辣。直到11年的3月底，也就是刚过完年，LZ才算是真正的走上了自己的职业之路。LZ进入到一家培训机构学习了Java语言，并于11年的11月份，靠自己的实力找到了人生第一份真正意义上的工作——程序猿。</p><p>　　就LZ本身的经历而言，没有特别闪亮的高学历，也没有名校的光辉，还进入过不少公司都无法苟同的培训机构，但这依然无法阻止LZ前进的脚步。这至少说明了一件事，那就是工作之后的努力其实非常重要。当然，如果能拥有更高的学历，更好的学校，相信LZ的路会走的更加平坦，至少对于绝大部分人而言，高学历和名校都是首选的捷径。</p><p>　　好了，简单的自我介绍就告一段落，接下来我们便开始正文吧。此外，由于本文没有特别需要强调的地方，因此LZ就不分章节了，一些比较重要的部分会用粗体表示。</p><p>　　</p><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>　　从LZ的经历可以看出来，LZ的生活是从11年开始转变的。为什么LZ会突然去培训机构学习Java？</p><p>　　答案只有一个，而且是像数学题一样的标准答案，那就是因为有梦想。尽管LZ刚毕业时干过很多杂活，也在家当过一段时间啃老族，但不可否认的是，LZ的意志并没有消沉，反而在慢慢坚定。LZ一直都有成为一名程序猿的梦想，但苦于是数学专业，尽管逻辑思维能力很强，也在大学时学过一些C语言，但是对于程序猿这种技术型的职位来说，在完全不会的情况下，很难进入这一职业。</p><p>　　当时，很多培训机构都类似于变相的大学，一学就是一两年，这让当时已经大学毕业的LZ有点望而却步。毕竟已经上了四年大学，再去培训机构学上两年，实在是耽搁不起。后来一次偶然的机会，LZ在某官网上发现有的课程并不需要从头学起，是专门针对大学已经毕业的人甚至是已经工作的人设计的课程，最快的只要半年就可以完成。这才让LZ下了决心，来北京一搏，而LZ依稀记得，LZ是当时那个课程开设以来的第二批学生，现在来说的话，也算是元老级的学长。</p><p>　　纵观这一路，看似偶然，却又是必然的。LZ也借此告诫各位刚毕业或即将毕业的同学们，<strong>不怕你找不到工作，就怕你意志消沉，甚至失去追逐梦想的勇气</strong>。</p><p>　　因为有梦想，因为有压力，所以LZ到了培训机构以后，就像一个饿死鬼投胎一样，疯狂的吸食着得来不易的知识。长期的数学学习之路，养成了LZ举一反三的学习习惯和很好的逻辑思维能力，因为在数学题的题海当中，举一反三和逻辑思维能力都非常重要。这也被LZ运用到了Java学习的过程当中，可见成效还是非常不错的。</p><p>　　举一反三是什么？它是一种学习方式，是在学习生涯中养成的习惯，正是因为这些习惯，LZ才得以在Java的学习当中如鱼得水。逻辑思维能力是什么？它是一种学习能力，是在学习生涯中形成的能力，只有具有了这些能力，才能在之后的生活当中吸取新的知识。</p><p>　　现在的很多人都说大学读了也白读，出校门的那一刻就把学的东西全部还给学校了。或许真的是这样吧，因为LZ现在已经没有能力再去做什么证明题了。但是有些东西是深入骨髓的，这一辈子它都会跟着你了，这些东西也是你以后成功的关键因素。<strong>那就是你的学习习惯、学习能力等等，这才是你出了校门以后赖以生存的东西</strong>。</p><p>　　说起LZ的第一份工作，实在是非常苦逼，但其实现在看来，当真算得上是一段历练。LZ当时碰到了一个十分不靠谱的PM，LZ只需要简单举几个例子，各位就能知道他的大概品性了。比如，在下班的时候经常一直在你身边坐着，言外之意就是，“好好给我干活吧！我不走你们也不能走”。再比如，LZ当时的公司一共就20人不到，公司的办公地点在一家小区的复式单元房里，分为一层和二层，每层大约能坐下10个人左右。LZ当时和技术人员、美工人员包括这位PM都在一层，他经常会在我们所有人面前大骂二层的业务人员，比如“SB、无能”等词语常常出现。</p><p>　　有一次我们两个闹得十分不愉快，那一次是他让LZ做一个任务，但却一直在强调，“这么简单的任务两个小时就搞定了”。无论LZ如何解释其中为何完不成的原因，他都不听，LZ当场就暴走了，直接丢下一句，“那你来，两个小时你做完，以后你再评估时间我再不质疑”。结果可想而知，他当然没做完，当时大约是北京时间晚上9点30，于是LZ便刻意说了一句，“没做完的部分，我明天早上再来做吧”。LZ的言外之意当然带着点讽刺，不过这句话立即让他狗急跳了墙，开始大声批评LZ抓着这件事不放，LZ只想说，“靠，你这么吊，我说一句还不行了？”。之后将冲突推向高潮的是，他没词可说的时候，竟然拿LZ是河南人来说事，原话大约是，“原来对河南人印象还不错，现在有点改观了”。LZ立马第二次暴走了，工作归工作，这怎么还扯到人身攻击上去了，而且还是这么低级的攻击。之后当然是大吵了一架之后，不欢而散。</p><p>　　就上面这些简单的描述，相信各位猿友也能想象到LZ当时的工作环境是如何的水深火热了吧。或许有不少人会觉得LZ当时的PM实在是弱爆了，眼高手低，心胸狭隘。尽管他的人品LZ实在不敢恭维，但不得不说，他的技术还是相当不错的，LZ在他身上确实学到了不少硬功夫。因此直到现在，LZ对他都还是心存感激的，毕竟是他给了LZ第一份程序猿的工作，也教会了LZ不少技术知识，也算是LZ职业生涯中的第一位伯乐和导师。哪怕是LZ最终离开公司的时候，也并不是因为他的原因才离开的，而是因为公司规模太小，公司总人数还不到20人，技术人员甚至不到6人，晋升之路实在是遥遥无期。</p><p>　　LZ之所以说这些，是因为现在的年轻人大部分都是被家长从小宠着长大的，这其中也包括LZ，因此忍耐能力都相对较低，通俗点说，就是脾气不小，受不得委屈，容易冲动。社会上的人各式各样，或许你也会碰到一个极品上司，或者是一些个极品同事，他们的一切看起来都是那么的垃圾，但是请你相信，既然他们被公司录用了并没有被炒鱿鱼，就一定有过人之处。<strong>三人行必有我师，只有你公正客观的看待每个人，发掘他人的优点，并为我所用，才能学会感恩，不断进步</strong>。</p><p>　　</p><p>　　从第一个公司裸辞之后，LZ就找到了现在所在的这家公司。当时LZ找工作的要求只有一个，就是公司的技术人员要在100人以上。也许是实力，也许是运气，LZ一个星期就顺利的拿到了offer，而且当时公司的总人数已逾万人，技术部约300人，完全达到了LZ的心理预期。更为巧合的是，公司的大厦就在LZ之前工作的小区对面，LZ完全不需要再搬家了。为了给自己点时间放松一下，LZ当时还专门拖延了一个星期的入职时间。</p><p>　　如果说在第一份工作的一年里，LZ的技术进步神速的话，那么在之后的一年里，LZ的技术应该说以变态的速度在提高。</p><p>　　刚去新公司的时候，LZ非常满意，环境优雅，工作悠闲，同事们也都比较好接触，而且LZ本身也属于比较活泼幽默的人，所以融入团队也十分迅速。但是这样的感觉只是持续了短短一周，一周之后，LZ就有点坐不住了。因为已经一周过去了，项目框架也熟悉的差不多了，PM依旧没有给LZ安排任何任务，各种迷雾开始笼罩着LZ，“是不是自己的表现太差？”。可是一想也不对，LZ当时还没接任何任务呢，何来表现太差。这么说的话，“是不是PM在等自己主动请缨？”。于是LZ试探性的问过PM，当时具体怎么问的不太记得了，但是得到的回复大概意思就是暂时还没有任务给你。</p><p>　　这下LZ傻眼了，怎么办？难道就这样耗时间吗？</p><p>　　LZ当时做了一个十分幼稚而又重要的决定，既然无事可做，那就干脆看书吧。于是之后的很多天，别人都在忙着工作的时候，LZ却抱着一本厚厚的《Java编程思想》悠闲的看书，一眼望去，是那么的格格不入。现在想想，虽说做法有些欠妥，毕竟上班可不是让你看书去的，但LZ依然觉得当时的决定实在是太对了。因为正是这本书让LZ尝到了甜头，后来在迷茫的时候，LZ才找到了方向。</p><p>　　之后的一段时间里，LZ的工作也进入了白日化，因为LZ所做的项目是一个老项目，已经处于维护阶段，项目所用的技术也是比较老套的花样，因此也没有什么惊天动地的需求，有的只是一些小功能，小bug。但就是这样一些小功能，小bug，LZ竟然还经常出错。最主要的原因就是因为项目的文档缺乏，代码质量很差，不但臃肿不堪，而且逻辑混乱，在这样的项目当中编码简直犹如在丛林里行走，一不小心就可能踩到什么陷阱、沼泽之类的。因此LZ当时挨了不少的批，也能感觉出来PM对LZ不甚满意。</p><p>　　原本以为到了这么大的公司应该可以学到不少新技术，更好的锻炼自己，结果却是改改小bug，做做小功能，技术上毫无长进不说，冷不丁还要挨批，领导也不认可。如此的心里落差，LZ当时的心情可想而知，甭提多憋屈了。当时摆在LZ面前的只有两条路，要么忍，要么滚。LZ最终还是选择了忍，因为LZ不允许自己在不被认可的情况下逃走，就算要走，也必须是功成身退。</p><p>　　但无论如何，每天重复的工作，技术上毫无长进，还是令LZ心急不已。为了按捺住躁动的情绪，LZ开始拿起了书本，每天下班之后就疯狂的看书，沉浸在书的海洋中。后来LZ看的书多了，就开始自己写博客，偶尔也会自己写写代码，遇见问题就翻官方文档、看源码，后来也就成为了一种习惯，每天下班之后就是看书、写博客、写代码、看文档、看源码。渐入佳境之后LZ发现，学习给LZ带来的最大的收获并不是技术长进了，而是LZ的心态变的平和了。<strong>只有心态平和不浮躁，你才能静下心来做事，只有静下心来做事，你才能把当前的事情做好，只有把当前的事情做好，你才有资格做更难的事</strong>。</p><p>　　</p><p>　　事实证明，LZ的做法还是比较正确的。之后LZ代码的出错概率陆续在大大的减少着，这是心态的问题，而且或许是老天眷顾，上天给了LZ一次证明自己技术能力的机会，让LZ在公司的一次编码大赛当中拿了个第一。尽管当时参赛人员都是公司内部的，而且只有20人报名，但这也给LZ带来了不少认可。</p><p>　　自从那次得奖之后，LZ的职业生涯就顺畅了许多，而且不得不说，LZ的运气也非常的好。当时项目组的新需求量非常少，所以开发任务并不是很多，而且因为是处于维护期的项目，悠闲而又繁杂的工作导致了一批老人的离开，截止到LZ获奖的时候，组里原本的8个人，就只剩下了6个老员工，有PM、PO（产品经理）、测试工程师以及LZ在内的三个开发人员，而且其余两个开发人员都是女生。之后，PO离开了项目组到了别的部门，而其中一个开发人员又因为住房离公司较远，而且育有一子，当了妈妈的她希望更好的照顾家庭和孩子，所以最终还是选择了离开。恰逢此时，LZ项目的PM再度高升，成为了技术部组织架构调整之后的部门经理，尽管他名分上依旧是项目组的PM，但其实他能够花费在项目组上的时间已经大大缩减。</p><p>　　最终，在LZ进入公司近一年的时候，项目组就只剩下一个测试工程师、LZ以及另外一个女程了。这不得不说是一种运气，从那时开始，LZ的PM之路其实就已经开始了，接连不断的重任开始渐渐压下来，迎接LZ的，是一个接一个的挑战。</p><p>　　首先考验的是LZ的技术能力，平时只专注于编码的LZ此时就需要各种各样的技能，比如SVN的代码管理、SSI框架的掌控能力、MQ消息通信、maven模块化、maven私服、各种奇怪的诸如高并发引起的线上bug、集群与分布式缓存、反向代理以及硬件负载均衡等等一系列的技能。其实这些技能都不难，难就难在可能需要你在一天甚至几个小时之内就搞清楚其中某一项技术，说到底，其实技术这一关考验的并不是某一项技术你是否掌握了，而是快速的学习和接受能力。</p><p>　　技术难题是最先遇到的，后续接踵而至的便是沟通、协调以及管理能力的考验。需要频繁的与各式各样的人打交道，还要帮助组里的人与组外协调一些事情，其中的难度比起技术上遇到的问题只高不低，特别是在沟通过程中碰到一些硬茬的时候，也只能硬着头皮上。管理的过程当中也会遇到一些问题，比如组员不听从安排，责任混乱导致效率低下等等。这些问题其实是授权的问题，现在这些问题都会受到有效的遏制。</p><p>　　时至今日，LZ终于坐稳了PM的位置，尽管LZ这个PM当的还不算是特别合格，但也算在稳步前进。由于项目的需求量在年后暴增，LZ的团队也在这段时间内迅速扩张，至今LZ手下的团队包括LZ在内已经有19人，其中上至30多岁的大哥大姐，下至90后的小弟弟小妹妹都有。LZ之所以能做到这一步，当然有很大的运气成分，但更多凭借的，还是自己的技术实力和个人能力。试想一下，倘若没有之前那一段时间的疯狂学习，遇到的技术问题全都解决不了，LZ又如何能抓住这突如其来的机会。所以说，<strong>遇到机会是靠运气的，但抓住机会是靠实力的，平日里逐渐增强自己的实力，才能在机会到临之际，不至于让它从手中溜走</strong>。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>　　文章到这里就差不多要告一段落了，LZ短暂的工作之路当中，很多事情看似偶然却又似乎是必然的，就像这人生，处处充满了巧合，却又像是命中注定一样。不管未来将会如何，路还是要一步一步的走。</p><p>　　漫漫人生路，且行且珍惜。</p>]]></content>
      
      
      <categories>
          
          <category> Book </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 左萧龙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小故事小道理，面试中的小技巧</title>
      <link href="/2013/08/30/book/%E5%B0%8F%E6%95%85%E4%BA%8B%E5%B0%8F%E9%81%93%E7%90%86%EF%BC%8C%E9%9D%A2%E8%AF%95%E4%B8%AD%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
      <url>/2013/08/30/book/%E5%B0%8F%E6%95%85%E4%BA%8B%E5%B0%8F%E9%81%93%E7%90%86%EF%BC%8C%E9%9D%A2%E8%AF%95%E4%B8%AD%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<p>上一次有猿友反应写的有些“扯淡”，LZ思来想去最大的原因可能是由于上一章写的全是一些大忌，既然是大忌，那么在现实当中发生的概率还是相对较小的，大部分人还是很少在面试中犯如此重大的失误。不过只要能有一部分人从中获益，那么LZ费尽脑子码的字就没有白费。 </p><p>​     本次为了更贴近现实，打入群众，LZ写上两个小技巧或者说小提示，希望能与更多的猿友产生共鸣吧。</p><p><strong>小故事一</strong></p><p>​     李强是一个非计算机专业的大专生，迫于生活所逼，最终走上了编程路。</p><p>​     如今李强已经在程序员这一职位摸爬滚打了两个年头，但是由于基础薄弱，平时学习的时间也很少，因此这两年李强的技术增长并未有太大的起色。不过人总要往高处走，李强在一家公司呆了两年后，还是决定要换个工作，挑战一下新环境。</p><p>​     李强是做JAVA开发的，一直以来也只是专注于框架的使用以及业务逻辑的实现与理解，因为对技术的兴趣不大，因此平时几乎没有自己主动的猎食过一些技术方面的知识。这导致李强在写简历时，除了能写上熟悉JAVA，熟悉SSH之外，几乎没有什么可写的东西。</p><p>​     无奈之下，李强为了能获得面试机会，在互联网上找到了很多公司的招聘启事，在综合了一下大部分公司的招聘要求之后，李强在简历中掌握的技术这一项，添加了不少内容。这些内容是大部分公司都要求的，比如要熟练掌握面向对象的思想，熟悉封装、继承、多态，熟悉oracle或mysql数据库，熟悉jquery或者ext至少一种JS框架等等。</p><p>​     在将自己的简历“丰满”之后，李强终于如愿以偿的得到了几个面试机会。</p><p>​     不过最终的结果却让李强万分失望，原因就是几乎每一家公司的面试官，一看到自己简历上写的技术，都会不停的追问自己。比如面向对象的思想，这个是问的频率最高的一个。</p><p>​     然而可惜的是，李强对于这些别说是熟悉，连了解都谈不上。最多就是面试之前，临时抱佛脚的去网上搜索了一下相关内容，然后在面试的时候原封不动的说给面试官。如此一来，面试官稍微再多问哪怕一句，李强就只有干瞪眼的份儿了。</p><p>​     最终的结果就是，距离李强开始找新工作已经过去了两个月，可是李强却连一个offer都没收到。</p><p><strong>LZ寄语</strong></p><p>​     很多面试官在面试一个人的时候，都会按照简历上的介绍去了解，因此如果你将自己明明不会的东西写到简历上，以博得更大的面试机会，最终的效果往往是给自己挖了个坑，因为你写的那些技术大部分都会被面试官问到的，而不幸的是，这些技术你都不会。这就像你亲自告诉面试官，问我这些吧，我不会这些，这不是搬起猿粪砸自己的脚吗。因此在绝大多数时候，靠这种手段争取来的面试机会不过是浪费你的时间罢了。或者简单的说，会就是会，不会就是不会，不要存在侥幸心理。找工作不是考试，蒙过了就万事大吉了，不要忘了，蒙过了还有试用期呢。更何况，一般情况下，你是蒙不过的。</p><p>​     <strong>小技巧：简历上擅长的技术这一项，一定要慎重并如实的填写，且在面试的过程中，对于自己了解的东西多说一点（可以适当的诱导面试官问你），对于自己不会的东西果断说sorry I no know（语法都是浮云）。</strong></p><p><strong>诱导小演示</strong></p><p>​     面试官：“请问你是怎么理解的多态？”</p><p>​     面试者：“个人觉得多态就是同样的一个对象可以表现出不同的行为，比如状态模式，它的功效就是一个对象在状态不同的时候，可以表现出不同的行为，而这个设计模式就是利用了语言多态的特性实现的。”</p><p><strong>演示小点评</strong></p><p>​     回答的重点就在状态模式，LZ假设前提是你对状态模式非常了解，这种情况下可能面试官接下来就会问你，你对状态模式是怎么理解的？</p><p>​     当然，你可能会说，要是面试官不问怎么办？</p><p>​     LZ想说，不问也没关系啊。我们可以不停的诱导，比如提到多态，你就往状态模式诱导，比如提到AOP，你就往动态代理诱导，and so on on。</p><p>​     大部分情况下的回答方式基本上都是，“个人觉得XXX（这三个X是面试官问的东西）就是XXXXX，比如XXX（这三个X就是代表你特别了解的东西了，而且这个东西一般是与面试官问的东西有关系的），它就是XXXX。”</p><p>​     有个小技巧就是写在简历上的技术都要尽量想好到时候往什么地方引导，因为这里面的东西大部分时候面试官都会问你，当然并非全部的面试官都是如此，不过就算不问，你也应该做好这个准备。</p><p>​     <strong>当然，LZ要提醒的是，小技巧始终是小技巧，它只能帮你锦上添花，却无法反败为胜。</strong></p><p><strong>小故事二</strong></p><p>​     李刚是2010年进入IT界的程序猿之一，进入IT界之后，李刚迷迷糊糊的度过了三年。似乎是觉得自己在一个公司呆的太久了，李刚觉得自己应该换个新环境了。不过可惜的是，李刚并不知道自己的目标应该是哪一类公司，至于哪一家，就更谈不上了。</p><p>​     无奈之下，李刚只好采取海投的策略。海投之后，李刚继续过着上班下班的生活，期待着某一天能有一个好机会让自己碰上。</p><p>​     如此过了一两个月，期间李刚也间接的收到不少面试通知，为此李刚不得不经常请假，因此也引起了上司的一丝不满。不过李刚并不在意，心中只是一直期待着自己的新工作。</p><p>​     遗憾的是，这么多次的面试，李刚竟然没有收到任何一个offer，这让李刚有点丈二和尚摸不着头脑。</p><p>​     李刚自知自己的实力虽然不算强劲，但是这之中也有几家，整个面试的过程还是非常顺利的。按道理来说，不应该会是这样的结果，可是问题究竟出在哪了呢。</p><p>​     久久不得答案，李刚开始尝试在网络上寻找答案。无意之间，李刚打开了一篇叫《杂谈—-小故事小道理，面试中的小技巧（NO.2）》的文章，看过之后，李刚终于恍然大悟。</p><p>LZ答疑</p><p>​     李刚，你好，看下LZ怎么解决你的疑惑吧。</p><p>​     解惑：</p><p>​     对于刚毕业的应届生，在面试的时候，公司更多的考察的是基础知识、基本素质、发展潜力等这些因素，而对于一个已经工作几年的程序猿（其它职业也类似）来说，方向感和目标感是很重要的。</p><p>​     你犯的错误就在于目标感太差，海投的方式如果发生在一些刚毕业的人身上并没有什么不妥，但是发生在像你这种已经工作两三年的人身上就十分不应该了。一个人与它的目标就像磁铁相吸的两极，如果你没有在自己的前方设立目标，那么就失去了唯一一个吸引你前进的动力，因此这样的人看上去往往会缺少一种活力。</p><p>​     这种潜在的因素在面试过程当中的影响是十分隐蔽的。尽管这些因素不会主导面试的成败，但如果有实力相近的求职者，或许就因为这个原因，你就不知不觉间与offer失之交臂了。而且往往在职业生涯越走到后面，这些潜在的因素影响会越来越大。在职业生涯前期，如果你技术好，或许你可以秒杀一大批竞争者，但是到了后期，大家都是大牛，纯从技术角度来说，实力会渐渐接近。此时，这些潜在因素的影响将会被渐渐扩大。</p><p>​     <strong>小提示：目标感是一个人的职业生涯中很重要的东西，尽可能的在每一个阶段都为自己设立一个目标，同时，针对还不知道自己适合干什么的毕业生们，也不要忘了，找到自己的目标也是一个目标。这些会潜在的影响你的面试表现，或者说会影响你给人的第一印象，甚至会影响你的一生。</strong></p><p>​     </p>]]></content>
      
      
      <categories>
          
          <category> Book </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 左萧龙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试中的大忌，您发生过么？</title>
      <link href="/2013/08/23/book/%E9%9D%A2%E8%AF%95%E4%B8%AD%E7%9A%84%E5%A4%A7%E5%BF%8C%EF%BC%8C%E6%82%A8%E5%8F%91%E7%94%9F%E8%BF%87%E4%B9%88%EF%BC%9F/"/>
      <url>/2013/08/23/book/%E9%9D%A2%E8%AF%95%E4%B8%AD%E7%9A%84%E5%A4%A7%E5%BF%8C%EF%BC%8C%E6%82%A8%E5%8F%91%E7%94%9F%E8%BF%87%E4%B9%88%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<p>​     面试是大部分人的人生当中难免会遇到的一件事，那么具体在面试当中有哪些忌讳呢？</p><p>​     说到面试，在这里尤其特指技术岗位的面试，很多时候，结果并不仅仅取决于你的技术广度与深度，亦或是你的笔试分数，这当中还有很多不为人知的因素影响着面试结果。</p><p>​     LZ在这里列出一些小故事，以表现面试中的一些大小忌讳。本次主要是三个大忌，后续还会有一些其它的内容，这部分内容与JVM不定时交叉发表。这当中的一部分内容，各位猿友或许在其它地方也看到过，倘若如此，LZ这里就算是加深各位的印象吧。</p><h2 id="小故事一"><a href="#小故事一" class="headerlink" title="小故事一"></a><strong>小故事一</strong></h2><p>​     小王是一位即将毕业的大学生，在校成绩一直名列前茅，也参加过不少集体活动和社会实践。临近毕业之际，在一次招聘会上，小王被一家大型的传媒公司看上，并且邀请小王前去进行再次复试。</p><p>​     接到消息的小王，无疑好好兴奋了一把，这家公司在传媒行业也都算是名列前茅了，而且小王虽然学的计算机专业，面试的是程序员岗位，但小王一直都对传媒行业十分感兴趣。接下来的两天，小王好好背了一把面试宝典，做好了充足的准备。</p><p>​     面试当天第一场，小王面对的面试官是一个30岁左右的中年男性，一看就属于技术高手一列，很显然，这是一场技术面试。</p><p>​     不知为何，之前准备的好好的小王，真到了面试的时候，竟然不自觉的紧张起来。刚开始面试官还好意提醒，示意小王不必太紧张。谁知不提醒还好，这一提醒，小王内心更加慌张了。到了最后，小王已经几乎连一句完整的话都说不下来了，对于面试官技术方面的提问，也由于紧张忘得八九不离十。</p><p>​     面试官见到小王的表现，最终还是选择了中断面试，让小王回去之后等消息。结果显而易见，由于小王的过度紧张，严重影响了小王的临场发挥，也使得面试官对小王印象减分，这家公司最终没有录用小王。</p><h3 id="LZ寄语"><a href="#LZ寄语" class="headerlink" title="LZ寄语"></a><strong>LZ寄语</strong></h3><p>​     </p><p>​     面试说到底就是让面试官了解你并依此给你定价的过程，因此在面试过程中大可不必紧张。如果这个过程中因为应聘者过度紧张而导致了解的过程无法顺利进行，那么面试官通常不会选择将你留在公司，或者将你推荐给下一位面试官，因为在紧张状态中的你必定发挥不了你真实的水平，而且会让面试官觉得应聘者心理素质太差。</p><p>​     <strong>大忌第一条：面试时千万不可过于紧张。</strong></p><h2 id="小故事二"><a href="#小故事二" class="headerlink" title="小故事二"></a>小故事二</h2><p>​     小李已经干程序员一年有余，自觉自己的技术提升已经达到瓶颈，于是便想着换一家公司寻求突破。</p><p>​     在一次面试过程中，小李和面试官一直都交谈的相对顺利，小李也对这家公司十分满意。而在最后一关，人事面试的时候，着实让小李捏了一把汗。</p><p>​     人事方面的面试官先是与小李谈了一番生活方面的内容，最后才落实到重头戏，也就是个人的薪水问题。而小李在填写面试表格的时候，写的期望薪资是10K，而在上一家公司，小李的薪水是6K。</p><p>​     当面试官问到小李为何要这么多薪水的时候，小李的脑子一下子有点短路，只是简单的说了一句，个人觉得自己的知识积累已经达到了这个数目。</p><p>​     面试官并没有反驳说小李的技术程度不够，而是绕了个弯说，那如果薪水达不到你的要求，你是否会考虑呢？</p><p>​     小李听到此问几乎是毫不犹豫的说，可以考虑。小李写10K这个数字本身就有一些侥幸心理，因此10K其实并不是小李的真实期望，小李真实的期望其实只有7K而已。</p><p>​     面试官听到小李的回答，接下来便问小李能接受的最低工资是多少。而小李也毫不避讳的说出了心中的真实数字，也就是7K。接下来，面试官便说出了万年不变的那句话，请您先回去等通知吧。</p><p>​     小李回去之后，等了一个星期始终都没有收到通知，无奈之下，小李只好放弃了这家公司的机会。</p><h3 id="LZ寄语-1"><a href="#LZ寄语-1" class="headerlink" title="LZ寄语"></a>LZ寄语</h3><p>​     薪水是面试过程中很重要的一环谈判，因此一定要慎重。如果你只是想测试一下自己的身价，千万不要选择自己比较中意的公司做赌注。对于自己十分中意的公司，一定要全方位的定位自己的身价，而且一旦决定以后，就不要轻易更改，LZ的建议是压低的范围最多不可超过1K。一旦让面试官觉得你对自己估计不足，漫天要价的时候，基本上你的offer已经离你远去了。</p><p>​     <strong>大忌第二条：对于自己特别中意的公司，切勿漫天要价，切勿无底线降价。</strong></p><h2 id="小故事三"><a href="#小故事三" class="headerlink" title="小故事三"></a>小故事三</h2><p>​     小张是一个刚毕业四个多月的大学生，在小张刚毕业的时候，便进入了一家小型的互联网公司做开发。可惜的是由于公司制度的不严谨，上司的性格恶劣等等一系列原因，导致小张对公司的怨言颇大，终究在忍无可忍之下，选择了辞职。</p><p>​     在小张接下来的面试过程中，有一家还不错的互联网公司邀请了小张，而小张也在面试当天顺利的到达了现场。</p><p>​     在面试过程中，面试官先是问了一些小张的在校经历以及一些基础性的技术问题，小张都答的非常不错。而在此之后，面试官又问了一个问题，引发了小张滔滔不绝的说辞与抑制不住的愤慨。</p><p>​     面试官问的，正是小张为什么只干了几个月，就选择了辞职。</p><p>​     不用说，小张像是找到了倾诉的对象一样，将之前的苦楚全盘托出，甚至有所夸张。不仅将之前的公司说的一无是处，连自己的顶头上司也被卷入其中，尽管事实大部分也确实是这样的。</p><p>​     不过面试官在听过这一段陈述之后，便表示自己还有其他事，如果有结果会通知的，之后便匆匆离去了。</p><p>​     结果可想而知，小张没有收到这家公司的offer，最终还是擦肩而过。</p><h3 id="LZ寄语-2"><a href="#LZ寄语-2" class="headerlink" title="LZ寄语"></a>LZ寄语</h3><p>​     无论你之前的公司多么的一无是处，之前的同事多么的人格丧失，都不要在面试的时候提及这方面的内容。这会让面试官觉得，如果哪一天你从这里离职了，会不会把矛头指向自己的公司呢。另外，这种抱怨的声音也会让面试官觉得你遇到不顺心的事情时，只知道找客观原因，而不懂得审视自己。</p><p>非LZ寄语：</p><p>自己在第二家公司时也遇到了类似于上面故事的情况，因为公司领导问题，非自己问题离职的话，不要HR让你签字你就签字，如果是<code>试用期</code>公司方面问题提出的离职合同也要根据劳动法提供一些赔偿给到你，当时就是自己负气而走，还糊里糊涂签了字体，浪费了半个月没有工资发放。大家引以为戒。</p><p>感谢当初我的领导为了我和公司管理者据理讨论，虽然最后我们这个部门熟人半年之内基本走完。</p><ol><li><p>首先遇到这种情况，切忌的就是与上司翻脸，或者对工作开始懈怠，这是十分不成熟的表现，甚至可以说幼稚</p></li><li><p>无论如何，都要做好自己该做的，在此基础上，才有资格去谈论是非，否则，一开始就是你错了</p></li><li><p>不要背后说领导坏话</p></li><li><p>领导跟你再怎么吹，你心里不要报太大希望</p></li><li><p>不要跟公司领导赌气，这很幼稚</p></li><li><p>不要随便签字</p></li><li><p>别初生牛犊</p></li></ol><p>​     <strong>大忌第三条：切忌在面试过程中，贬低之前的公司或者同事。</strong></p><p><img src="26140949-f0b1a5877817495281bddf893a8d21c0.jpg" alt="img"></p><blockquote><p>原文：<a href="http://www.zuoxiaolong.com/">http://www.zuoxiaolong.com/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Book </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 左萧龙 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
